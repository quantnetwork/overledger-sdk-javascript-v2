{
    "requestId": "ddd78106-f868-4b95-97f3-337850b1203d",
    "gatewayFee": {
        "amount": "0",
        "unit": "QNT"
    },
    "dltFee": {
        "amount": "0.015769783352",
        "unit": "WND"
    },
    "nativeData": {
        "dest": "5DFA86YumQZrsQt4nwp9YcsfV9B13wzFGQhw3r4w1bdhs5YA",
        "value": 10000000000,
        "nonce": "1",
        "blockHash": "0xc74187fe5d04d67da3be3f653b0ac589c27b57838ad84aed430cdefe200954da",
        "era": {
            "mortalEra": "0xe501"
        },
        "metadata": "3gACq21hZ2ljTnVtYmVyzmF0ZW2obWV0YWRhdGHeAAGjdjE03gAEpmxvb2t1cN4AAaV0eXBlc9wCzt4AAqJpZACkdHlwZd4ABKRwYXRok6dzcF9jb3JlpmNyeXB0b6tBY2NvdW50SWQzMqZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlAah0eXBlTmFtZahbdTg7IDMyXaRkb2NzkKRkb2NzkN4AAqJpZAGkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaVhcnJhed4AAqNsZW4gpHR5cGUCpGRvY3OQ3gAComlkAqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqXByaW1pdGl2ZaJVOKRkb2NzkN4AAqJpZAOkdHlwZd4ABKRwYXRokqxmcmFtZV9zeXN0ZW2rQWNjb3VudEluZm+mcGFyYW1zkt4AAqRuYW1lpUluZGV4pHR5cGUE3gACpG5hbWWrQWNjb3VudERhdGGkdHlwZQWjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOV3gAEpG5hbWWlbm9uY2WkdHlwZQSodHlwZU5hbWWlSW5kZXikZG9jc5DeAASkbmFtZaljb25zdW1lcnOkdHlwZQSodHlwZU5hbWWoUmVmQ291bnSkZG9jc5DeAASkbmFtZalwcm92aWRlcnOkdHlwZQSodHlwZU5hbWWoUmVmQ291bnSkZG9jc5DeAASkbmFtZatzdWZmaWNpZW50c6R0eXBlBKh0eXBlTmFtZahSZWZDb3VudKRkb2NzkN4ABKRuYW1lpGRhdGGkdHlwZQWodHlwZU5hbWWrQWNjb3VudERhdGGkZG9jc5CkZG9jc5DeAAKiaWQEpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGpcHJpbWl0aXZlo1UzMqRkb2NzkN4AAqJpZAWkdHlwZd4ABKRwYXRokq9wYWxsZXRfYmFsYW5jZXOrQWNjb3VudERhdGGmcGFyYW1zkd4AAqRuYW1lp0JhbGFuY2WkdHlwZQajZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOU3gAEpG5hbWWkZnJlZaR0eXBlBqh0eXBlTmFtZadCYWxhbmNlpGRvY3OQ3gAEpG5hbWWocmVzZXJ2ZWSkdHlwZQaodHlwZU5hbWWnQmFsYW5jZaRkb2NzkN4ABKRuYW1lq21pc2NfZnJvemVupHR5cGUGqHR5cGVOYW1lp0JhbGFuY2WkZG9jc5DeAASkbmFtZapmZWVfZnJvemVupHR5cGUGqHR5cGVOYW1lp0JhbGFuY2WkZG9jc5CkZG9jc5DeAAKiaWQGpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGpcHJpbWl0aXZlpFUxMjikZG9jc5DeAAKiaWQHpHR5cGXeAASkcGF0aJOtZnJhbWVfc3VwcG9ydKhkaXNwYXRjaLBQZXJEaXNwYXRjaENsYXNzpnBhcmFtc5HeAAKkbmFtZaFUpHR5cGUIo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzk94ABKRuYW1lpm5vcm1hbKR0eXBlCKh0eXBlTmFtZaFUpGRvY3OQ3gAEpG5hbWWrb3BlcmF0aW9uYWykdHlwZQiodHlwZU5hbWWhVKRkb2NzkN4ABKRuYW1lqW1hbmRhdG9yeaR0eXBlCKh0eXBlTmFtZaFUpGRvY3OQpGRvY3OQ3gAComlkCKR0eXBl3gAEpHBhdGiTqnNwX3dlaWdodHOpd2VpZ2h0X3YypldlaWdodKZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lqHJlZl90aW1lpHR5cGUJqHR5cGVOYW1lo3U2NKRkb2NzkN4ABKRuYW1lqnByb29mX3NpemWkdHlwZQmodHlwZU5hbWWjdTY0pGRvY3OQpGRvY3OQ3gAComlkCaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABp2NvbXBhY3TeAAGkdHlwZQqkZG9jc5DeAAKiaWQKpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGpcHJpbWl0aXZlo1U2NKRkb2NzkN4AAqJpZAukdHlwZd4ABKRwYXRokq9wcmltaXRpdmVfdHlwZXOkSDI1NqZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlAah0eXBlTmFtZahbdTg7IDMyXaRkb2NzkKRkb2NzkN4AAqJpZAykdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlAqRkb2NzkN4AAqJpZA2kdHlwZd4ABKRwYXRolKpzcF9ydW50aW1lp2dlbmVyaWOmZGlnZXN0pkRpZ2VzdKZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lpGxvZ3OkdHlwZQ6odHlwZU5hbWWvVmVjPERpZ2VzdEl0ZW0+pGRvY3OQpGRvY3OQ3gAComlkDqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGUPpGRvY3OQ3gAComlkD6R0eXBl3gAEpHBhdGiUqnNwX3J1bnRpbWWnZ2VuZXJpY6ZkaWdlc3SqRGlnZXN0SXRlbaZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzld4ABKRuYW1lqlByZVJ1bnRpbWWmZmllbGRzkt4ABKRuYW1lwKR0eXBlEKh0eXBlTmFtZbFDb25zZW5zdXNFbmdpbmVJZKRkb2NzkN4ABKRuYW1lwKR0eXBlDKh0eXBlTmFtZadWZWM8dTg+pGRvY3OQpWluZGV4BqRkb2NzkN4ABKRuYW1lqUNvbnNlbnN1c6ZmaWVsZHOS3gAEpG5hbWXApHR5cGUQqHR5cGVOYW1lsUNvbnNlbnN1c0VuZ2luZUlkpGRvY3OQ3gAEpG5hbWXApHR5cGUMqHR5cGVOYW1lp1ZlYzx1OD6kZG9jc5ClaW5kZXgEpGRvY3OQ3gAEpG5hbWWkU2VhbKZmaWVsZHOS3gAEpG5hbWXApHR5cGUQqHR5cGVOYW1lsUNvbnNlbnN1c0VuZ2luZUlkpGRvY3OQ3gAEpG5hbWXApHR5cGUMqHR5cGVOYW1lp1ZlYzx1OD6kZG9jc5ClaW5kZXgFpGRvY3OQ3gAEpG5hbWWlT3RoZXKmZmllbGRzkd4ABKRuYW1lwKR0eXBlDKh0eXBlTmFtZadWZWM8dTg+pGRvY3OQpWluZGV4AKRkb2NzkN4ABKRuYW1luVJ1bnRpbWVFbnZpcm9ubWVudFVwZGF0ZWSmZmllbGRzkKVpbmRleAikZG9jc5CkZG9jc5DeAAKiaWQQpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGlYXJyYXneAAKjbGVuBKR0eXBlAqRkb2NzkN4AAqJpZBGkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlEqRkb2NzkN4AAqJpZBKkdHlwZd4ABKRwYXRokqxmcmFtZV9zeXN0ZW2rRXZlbnRSZWNvcmSmcGFyYW1zkt4AAqRuYW1loUWkdHlwZRPeAAKkbmFtZaFUpHR5cGULo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzk94ABKRuYW1lpXBoYXNlpHR5cGXMpah0eXBlTmFtZaVQaGFzZaRkb2NzkN4ABKRuYW1lpWV2ZW50pHR5cGUTqHR5cGVOYW1loUWkZG9jc5DeAASkbmFtZaZ0b3BpY3OkdHlwZcymqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZBOkdHlwZd4ABKRwYXRokq93ZXN0ZW5kX3J1bnRpbWWsUnVudGltZUV2ZW50pnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHPcACHeAASkbmFtZaZTeXN0ZW2mZmllbGRzkd4ABKRuYW1lwKR0eXBlFKh0eXBlTmFtZbxmcmFtZV9zeXN0ZW06OkV2ZW50PFJ1bnRpbWU+pGRvY3OQpWluZGV4AKRkb2NzkN4ABKRuYW1lp0luZGljZXOmZmllbGRzkd4ABKRuYW1lwKR0eXBlHah0eXBlTmFtZb5wYWxsZXRfaW5kaWNlczo6RXZlbnQ8UnVudGltZT6kZG9jc5ClaW5kZXgDpGRvY3OQ3gAEpG5hbWWoQmFsYW5jZXOmZmllbGRzkd4ABKRuYW1lwKR0eXBlHqh0eXBlTmFtZb9wYWxsZXRfYmFsYW5jZXM6OkV2ZW50PFJ1bnRpbWU+pGRvY3OQpWluZGV4BKRkb2NzkN4ABKRuYW1lslRyYW5zYWN0aW9uUGF5bWVudKZmaWVsZHOR3gAEpG5hbWXApHR5cGUgqHR5cGVOYW1l2SpwYWxsZXRfdHJhbnNhY3Rpb25fcGF5bWVudDo6RXZlbnQ8UnVudGltZT6kZG9jc5ClaW5kZXgapGRvY3OQ3gAEpG5hbWWnU3Rha2luZ6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUhqHR5cGVOYW1lvnBhbGxldF9zdGFraW5nOjpFdmVudDxSdW50aW1lPqRkb2NzkKVpbmRleAakZG9jc5DeAASkbmFtZahPZmZlbmNlc6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUnqHR5cGVOYW1ltnBhbGxldF9vZmZlbmNlczo6RXZlbnSkZG9jc5ClaW5kZXgHpGRvY3OQ3gAEpG5hbWWnU2Vzc2lvbqZmaWVsZHOR3gAEpG5hbWXApHR5cGUpqHR5cGVOYW1ltXBhbGxldF9zZXNzaW9uOjpFdmVudKRkb2NzkKVpbmRleAikZG9jc5DeAASkbmFtZadHcmFuZHBhpmZpZWxkc5HeAASkbmFtZcCkdHlwZSqodHlwZU5hbWW1cGFsbGV0X2dyYW5kcGE6OkV2ZW50pGRvY3OQpWluZGV4CqRkb2NzkN4ABKRuYW1lqEltT25saW5lpmZpZWxkc5HeAASkbmFtZcCkdHlwZS+odHlwZU5hbWXZIHBhbGxldF9pbV9vbmxpbmU6OkV2ZW50PFJ1bnRpbWU+pGRvY3OQpWluZGV4C6Rkb2NzkN4ABKRuYW1lp1V0aWxpdHmmZmllbGRzkd4ABKRuYW1lwKR0eXBlOKh0eXBlTmFtZbVwYWxsZXRfdXRpbGl0eTo6RXZlbnSkZG9jc5ClaW5kZXgQpGRvY3OQ3gAEpG5hbWWoSWRlbnRpdHmmZmllbGRzkd4ABKRuYW1lwKR0eXBlO6h0eXBlTmFtZb9wYWxsZXRfaWRlbnRpdHk6OkV2ZW50PFJ1bnRpbWU+pGRvY3OQpWluZGV4EaRkb2NzkN4ABKRuYW1lqFJlY292ZXJ5pmZpZWxkc5HeAASkbmFtZcCkdHlwZTyodHlwZU5hbWW/cGFsbGV0X3JlY292ZXJ5OjpFdmVudDxSdW50aW1lPqRkb2NzkKVpbmRleBKkZG9jc5DeAASkbmFtZadWZXN0aW5npmZpZWxkc5HeAASkbmFtZcCkdHlwZT2odHlwZU5hbWW+cGFsbGV0X3Zlc3Rpbmc6OkV2ZW50PFJ1bnRpbWU+pGRvY3OQpWluZGV4E6Rkb2NzkN4ABKRuYW1lqVNjaGVkdWxlcqZmaWVsZHOR3gAEpG5hbWXApHR5cGU+qHR5cGVOYW1l2SBwYWxsZXRfc2NoZWR1bGVyOjpFdmVudDxSdW50aW1lPqRkb2NzkKVpbmRleBSkZG9jc5DeAASkbmFtZahQcmVpbWFnZaZmaWVsZHOR3gAEpG5hbWXApHR5cGXMQah0eXBlTmFtZb9wYWxsZXRfcHJlaW1hZ2U6OkV2ZW50PFJ1bnRpbWU+pGRvY3OQpWluZGV4HKRkb2NzkN4ABKRuYW1lpFN1ZG+mZmllbGRzkd4ABKRuYW1lwKR0eXBlzEKodHlwZU5hbWW7cGFsbGV0X3N1ZG86OkV2ZW50PFJ1bnRpbWU+pGRvY3OQpWluZGV4FaRkb2NzkN4ABKRuYW1lpVByb3h5pmZpZWxkc5HeAASkbmFtZcCkdHlwZcxEqHR5cGVOYW1lvHBhbGxldF9wcm94eTo6RXZlbnQ8UnVudGltZT6kZG9jc5ClaW5kZXgWpGRvY3OQ3gAEpG5hbWWoTXVsdGlzaWemZmllbGRzkd4ABKRuYW1lwKR0eXBlzEeodHlwZU5hbWW/cGFsbGV0X211bHRpc2lnOjpFdmVudDxSdW50aW1lPqRkb2NzkKVpbmRleBekZG9jc5DeAASkbmFtZbpFbGVjdGlvblByb3ZpZGVyTXVsdGlQaGFzZaZmaWVsZHOR3gAEpG5hbWXApHR5cGXMSah0eXBlTmFtZdk0cGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlOjpFdmVudDxSdW50aW1lPqRkb2NzkKVpbmRleBikZG9jc5DeAASkbmFtZalWb3Rlckxpc3SmZmllbGRzkd4ABKRuYW1lwKR0eXBlzE6odHlwZU5hbWXZPXBhbGxldF9iYWdzX2xpc3Q6OkV2ZW50PFJ1bnRpbWUsIHBhbGxldF9iYWdzX2xpc3Q6Okluc3RhbmNlMT6kZG9jc5ClaW5kZXgZpGRvY3OQ3gAEpG5hbWWvTm9taW5hdGlvblBvb2xzpmZpZWxkc5HeAASkbmFtZcCkdHlwZcxPqHR5cGVOYW1l2SdwYWxsZXRfbm9taW5hdGlvbl9wb29sczo6RXZlbnQ8UnVudGltZT6kZG9jc5ClaW5kZXgdpGRvY3OQ3gAEpG5hbWWrRmFzdFVuc3Rha2WmZmllbGRzkd4ABKRuYW1lwKR0eXBlzFSodHlwZU5hbWXZI3BhbGxldF9mYXN0X3Vuc3Rha2U6OkV2ZW50PFJ1bnRpbWU+pGRvY3OQpWluZGV4HqRkb2NzkN4ABKRuYW1lrVBhcmFJbmNsdXNpb26mZmllbGRzkd4ABKRuYW1lwKR0eXBlzFaodHlwZU5hbWXZJHBhcmFjaGFpbnNfaW5jbHVzaW9uOjpFdmVudDxSdW50aW1lPqRkb2NzkKVpbmRleCykZG9jc5DeAASkbmFtZaVQYXJhc6ZmaWVsZHOR3gAEpG5hbWXApHR5cGXMYqh0eXBlTmFtZbdwYXJhY2hhaW5zX3BhcmFzOjpFdmVudKRkb2NzkKVpbmRleC+kZG9jc5DeAASkbmFtZaNVbXCmZmllbGRzkd4ABKRuYW1lwKR0eXBlzGOodHlwZU5hbWW1cGFyYWNoYWluc191bXA6OkV2ZW50pGRvY3OQpWluZGV4MqRkb2NzkN4ABKRuYW1lpEhybXCmZmllbGRzkd4ABKRuYW1lwKR0eXBlzGaodHlwZU5hbWW/cGFyYWNoYWluc19ocm1wOjpFdmVudDxSdW50aW1lPqRkb2NzkKVpbmRleDOkZG9jc5DeAASkbmFtZa1QYXJhc0Rpc3B1dGVzpmZpZWxkc5HeAASkbmFtZcCkdHlwZcxoqHR5cGVOYW1l2SNwYXJhY2hhaW5zX2Rpc3B1dGVzOjpFdmVudDxSdW50aW1lPqRkb2NzkKVpbmRleDWkZG9jc5DeAASkbmFtZalSZWdpc3RyYXKmZmllbGRzkd4ABKRuYW1lwKR0eXBlzGyodHlwZU5hbWW/cGFyYXNfcmVnaXN0cmFyOjpFdmVudDxSdW50aW1lPqRkb2NzkKVpbmRleDykZG9jc5DeAASkbmFtZaVTbG90c6ZmaWVsZHOR3gAEpG5hbWXApHR5cGXMbah0eXBlTmFtZbVzbG90czo6RXZlbnQ8UnVudGltZT6kZG9jc5ClaW5kZXg9pGRvY3OQ3gAEpG5hbWWoQXVjdGlvbnOmZmllbGRzkd4ABKRuYW1lwKR0eXBlzG6odHlwZU5hbWW4YXVjdGlvbnM6OkV2ZW50PFJ1bnRpbWU+pGRvY3OQpWluZGV4P6Rkb2NzkN4ABKRuYW1lqUNyb3dkbG9hbqZmaWVsZHOR3gAEpG5hbWXApHR5cGXMb6h0eXBlTmFtZbljcm93ZGxvYW46OkV2ZW50PFJ1bnRpbWU+pGRvY3OQpWluZGV4zECkZG9jc5DeAASkbmFtZa1Bc3NpZ25lZFNsb3RzpmZpZWxkc5HeAASkbmFtZcCkdHlwZcxwqHR5cGVOYW1lvmFzc2lnbmVkX3Nsb3RzOjpFdmVudDxSdW50aW1lPqRkb2NzkKVpbmRleMxBpGRvY3OQ3gAEpG5hbWWpWGNtUGFsbGV0pmZpZWxkc5HeAASkbmFtZcCkdHlwZcxxqHR5cGVOYW1lunBhbGxldF94Y206OkV2ZW50PFJ1bnRpbWU+pGRvY3OQpWluZGV4zGOkZG9jc5CkZG9jc5DeAAKiaWQUpHR5cGXeAASkcGF0aJOsZnJhbWVfc3lzdGVtpnBhbGxldKVFdmVudKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5beAASkbmFtZbBFeHRyaW5zaWNTdWNjZXNzpmZpZWxkc5HeAASkbmFtZa1kaXNwYXRjaF9pbmZvpHR5cGUVqHR5cGVOYW1lrERpc3BhdGNoSW5mb6Rkb2NzkKVpbmRleACkZG9jc5HZJEFuIGV4dHJpbnNpYyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5Lt4ABKRuYW1lr0V4dHJpbnNpY0ZhaWxlZKZmaWVsZHOS3gAEpG5hbWWuZGlzcGF0Y2hfZXJyb3KkdHlwZRiodHlwZU5hbWWtRGlzcGF0Y2hFcnJvcqRkb2NzkN4ABKRuYW1lrWRpc3BhdGNoX2luZm+kdHlwZRWodHlwZU5hbWWsRGlzcGF0Y2hJbmZvpGRvY3OQpWluZGV4AaRkb2NzkbRBbiBleHRyaW5zaWMgZmFpbGVkLt4ABKRuYW1lq0NvZGVVcGRhdGVkpmZpZWxkc5ClaW5kZXgCpGRvY3ORtGA6Y29kZWAgd2FzIHVwZGF0ZWQu3gAEpG5hbWWqTmV3QWNjb3VudKZmaWVsZHOR3gAEpG5hbWWnYWNjb3VudKR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5ClaW5kZXgDpGRvY3ORukEgbmV3IGFjY291bnQgd2FzIGNyZWF0ZWQu3gAEpG5hbWWtS2lsbGVkQWNjb3VudKZmaWVsZHOR3gAEpG5hbWWnYWNjb3VudKR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5ClaW5kZXgEpGRvY3ORtkFuIGFjY291bnQgd2FzIHJlYXBlZC7eAASkbmFtZahSZW1hcmtlZKZmaWVsZHOS3gAEpG5hbWWmc2VuZGVypHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lpGhhc2ikdHlwZQuodHlwZU5hbWWnVDo6SGFzaKRkb2NzkKVpbmRleAWkZG9jc5G8T24gb24tY2hhaW4gcmVtYXJrIGhhcHBlbmVkLqRkb2NzkbxFdmVudCBmb3IgdGhlIFN5c3RlbSBwYWxsZXQu3gAComlkFaR0eXBl3gAEpHBhdGiTrWZyYW1lX3N1cHBvcnSoZGlzcGF0Y2isRGlzcGF0Y2hJbmZvpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOT3gAEpG5hbWWmd2VpZ2h0pHR5cGUIqHR5cGVOYW1lpldlaWdodKRkb2NzkN4ABKRuYW1lpWNsYXNzpHR5cGUWqHR5cGVOYW1lrURpc3BhdGNoQ2xhc3OkZG9jc5DeAASkbmFtZahwYXlzX2ZlZaR0eXBlF6h0eXBlTmFtZaRQYXlzpGRvY3OQpGRvY3OQ3gAComlkFqR0eXBl3gAEpHBhdGiTrWZyYW1lX3N1cHBvcnSoZGlzcGF0Y2itRGlzcGF0Y2hDbGFzc6ZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzk94ABKRuYW1lpk5vcm1hbKZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lq09wZXJhdGlvbmFspmZpZWxkc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWpTWFuZGF0b3J5pmZpZWxkc5ClaW5kZXgCpGRvY3OQpGRvY3OQ3gAComlkF6R0eXBl3gAEpHBhdGiTrWZyYW1lX3N1cHBvcnSoZGlzcGF0Y2ikUGF5c6ZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lo1llc6ZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lok5vpmZpZWxkc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkGKR0eXBl3gAEpHBhdGiSqnNwX3J1bnRpbWWtRGlzcGF0Y2hFcnJvcqZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRznd4ABKRuYW1lpU90aGVypmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWsQ2Fubm90TG9va3VwpmZpZWxkc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWpQmFkT3JpZ2lupmZpZWxkc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWmTW9kdWxlpmZpZWxkc5HeAASkbmFtZcCkdHlwZRmodHlwZU5hbWWrTW9kdWxlRXJyb3KkZG9jc5ClaW5kZXgDpGRvY3OQ3gAEpG5hbWWxQ29uc3VtZXJSZW1haW5pbmemZmllbGRzkKVpbmRleASkZG9jc5DeAASkbmFtZatOb1Byb3ZpZGVyc6ZmaWVsZHOQpWluZGV4BaRkb2NzkN4ABKRuYW1lsFRvb01hbnlDb25zdW1lcnOmZmllbGRzkKVpbmRleAakZG9jc5DeAASkbmFtZaVUb2tlbqZmaWVsZHOR3gAEpG5hbWXApHR5cGUaqHR5cGVOYW1lqlRva2VuRXJyb3KkZG9jc5ClaW5kZXgHpGRvY3OQ3gAEpG5hbWWqQXJpdGhtZXRpY6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUbqHR5cGVOYW1lr0FyaXRobWV0aWNFcnJvcqRkb2NzkKVpbmRleAikZG9jc5DeAASkbmFtZa1UcmFuc2FjdGlvbmFspmZpZWxkc5HeAASkbmFtZcCkdHlwZRyodHlwZU5hbWWyVHJhbnNhY3Rpb25hbEVycm9ypGRvY3OQpWluZGV4CaRkb2NzkN4ABKRuYW1lqUV4aGF1c3RlZKZmaWVsZHOQpWluZGV4CqRkb2NzkN4ABKRuYW1lqkNvcnJ1cHRpb26mZmllbGRzkKVpbmRleAukZG9jc5DeAASkbmFtZatVbmF2YWlsYWJsZaZmaWVsZHOQpWluZGV4DKRkb2NzkKRkb2NzkN4AAqJpZBmkdHlwZd4ABKRwYXRokqpzcF9ydW50aW1lq01vZHVsZUVycm9ypnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOS3gAEpG5hbWWlaW5kZXikdHlwZQKodHlwZU5hbWWidTikZG9jc5DeAASkbmFtZaVlcnJvcqR0eXBlEKh0eXBlTmFtZdkjW3U4OyBNQVhfTU9EVUxFX0VSUk9SX0VOQ09ERURfU0laRV2kZG9jc5CkZG9jc5DeAAKiaWQapHR5cGXeAASkcGF0aJKqc3BfcnVudGltZapUb2tlbkVycm9ypnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOX3gAEpG5hbWWnTm9GdW5kc6ZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lqFdvdWxkRGllpmZpZWxkc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWsQmVsb3dNaW5pbXVtpmZpZWxkc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWsQ2Fubm90Q3JlYXRlpmZpZWxkc5ClaW5kZXgDpGRvY3OQ3gAEpG5hbWWsVW5rbm93bkFzc2V0pmZpZWxkc5ClaW5kZXgEpGRvY3OQ3gAEpG5hbWWmRnJvemVupmZpZWxkc5ClaW5kZXgFpGRvY3OQ3gAEpG5hbWWrVW5zdXBwb3J0ZWSmZmllbGRzkKVpbmRleAakZG9jc5CkZG9jc5DeAAKiaWQbpHR5cGXeAASkcGF0aJKtc3BfYXJpdGhtZXRpY69Bcml0aG1ldGljRXJyb3KmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5PeAASkbmFtZalVbmRlcmZsb3emZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZahPdmVyZmxvd6ZmaWVsZHOQpWluZGV4AaRkb2NzkN4ABKRuYW1lrkRpdmlzaW9uQnlaZXJvpmZpZWxkc5ClaW5kZXgCpGRvY3OQpGRvY3OQ3gAComlkHKR0eXBl3gAEpHBhdGiSqnNwX3J1bnRpbWWyVHJhbnNhY3Rpb25hbEVycm9ypnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWsTGltaXRSZWFjaGVkpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWnTm9MYXllcqZmaWVsZHOQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZB2kdHlwZd4ABKRwYXRok65wYWxsZXRfaW5kaWNlc6ZwYWxsZXSlRXZlbnSmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWWtSW5kZXhBc3NpZ25lZKZmaWVsZHOS3gAEpG5hbWWjd2hvpHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lpWluZGV4pHR5cGUEqHR5cGVOYW1lr1Q6OkFjY291bnRJbmRleKRkb2NzkKVpbmRleACkZG9jc5G9QSBhY2NvdW50IGluZGV4IHdhcyBhc3NpZ25lZC7eAASkbmFtZapJbmRleEZyZWVkpmZpZWxkc5HeAASkbmFtZaVpbmRleKR0eXBlBKh0eXBlTmFtZa9UOjpBY2NvdW50SW5kZXikZG9jc5ClaW5kZXgBpGRvY3OR2S9BIGFjY291bnQgaW5kZXggaGFzIGJlZW4gZnJlZWQgdXAgKHVuYXNzaWduZWQpLt4ABKRuYW1lq0luZGV4RnJvemVupmZpZWxkc5LeAASkbmFtZaVpbmRleKR0eXBlBKh0eXBlTmFtZa9UOjpBY2NvdW50SW5kZXikZG9jc5DeAASkbmFtZaN3aG+kdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQpWluZGV4AqRkb2Nzkdk6QSBhY2NvdW50IGluZGV4IGhhcyBiZWVuIGZyb3plbiB0byBpdHMgY3VycmVudCBhY2NvdW50IElELqRkb2NzkdloCgkJCVRoZSBbZXZlbnRdKGh0dHBzOi8vZG9jcy5zdWJzdHJhdGUuaW8vbWFpbi1kb2NzL2J1aWxkL2V2ZW50cy1lcnJvcnMvKSBlbWl0dGVkCgkJCWJ5IHRoaXMgcGFsbGV0LgoJCQneAAKiaWQepHR5cGXeAASkcGF0aJOvcGFsbGV0X2JhbGFuY2VzpnBhbGxldKVFdmVudKZwYXJhbXOS3gACpG5hbWWhVKR0eXBlwN4AAqRuYW1loUmkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOa3gAEpG5hbWWnRW5kb3dlZKZmaWVsZHOS3gAEpG5hbWWnYWNjb3VudKR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaxmcmVlX2JhbGFuY2WkdHlwZQaodHlwZU5hbWWqVDo6QmFsYW5jZaRkb2NzkKVpbmRleACkZG9jc5HZLkFuIGFjY291bnQgd2FzIGNyZWF0ZWQgd2l0aCBzb21lIGZyZWUgYmFsYW5jZS7eAASkbmFtZahEdXN0TG9zdKZmaWVsZHOS3gAEpG5hbWWnYWNjb3VudKR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaZhbW91bnSkdHlwZQaodHlwZU5hbWWqVDo6QmFsYW5jZaRkb2NzkKVpbmRleAGkZG9jc5LZT0FuIGFjY291bnQgd2FzIHJlbW92ZWQgd2hvc2UgYmFsYW5jZSB3YXMgbm9uLXplcm8gYnV0IGJlbG93IEV4aXN0ZW50aWFsRGVwb3NpdCy+cmVzdWx0aW5nIGluIGFuIG91dHJpZ2h0IGxvc3Mu3gAEpG5hbWWoVHJhbnNmZXKmZmllbGRzk94ABKRuYW1lpGZyb22kdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWidG+kdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWmYW1vdW50pHR5cGUGqHR5cGVOYW1lqlQ6OkJhbGFuY2WkZG9jc5ClaW5kZXgCpGRvY3ORs1RyYW5zZmVyIHN1Y2NlZWRlZC7eAASkbmFtZapCYWxhbmNlU2V0pmZpZWxkc5PeAASkbmFtZaN3aG+kdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWkZnJlZaR0eXBlBqh0eXBlTmFtZapUOjpCYWxhbmNlpGRvY3OQ3gAEpG5hbWWocmVzZXJ2ZWSkdHlwZQaodHlwZU5hbWWqVDo6QmFsYW5jZaRkb2NzkKVpbmRleAOkZG9jc5G6QSBiYWxhbmNlIHdhcyBzZXQgYnkgcm9vdC7eAASkbmFtZahSZXNlcnZlZKZmaWVsZHOS3gAEpG5hbWWjd2hvpHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lpmFtb3VudKR0eXBlBqh0eXBlTmFtZapUOjpCYWxhbmNlpGRvY3OQpWluZGV4BKRkb2Nzkdk4U29tZSBiYWxhbmNlIHdhcyByZXNlcnZlZCAobW92ZWQgZnJvbSBmcmVlIHRvIHJlc2VydmVkKS7eAASkbmFtZapVbnJlc2VydmVkpmZpZWxkc5LeAASkbmFtZaN3aG+kdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWmYW1vdW50pHR5cGUGqHR5cGVOYW1lqlQ6OkJhbGFuY2WkZG9jc5ClaW5kZXgFpGRvY3OR2TpTb21lIGJhbGFuY2Ugd2FzIHVucmVzZXJ2ZWQgKG1vdmVkIGZyb20gcmVzZXJ2ZWQgdG8gZnJlZSku3gAEpG5hbWWyUmVzZXJ2ZVJlcGF0cmlhdGVkpmZpZWxkc5TeAASkbmFtZaRmcm9tpHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lonRvpHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lpmFtb3VudKR0eXBlBqh0eXBlTmFtZapUOjpCYWxhbmNlpGRvY3OQ3gAEpG5hbWWyZGVzdGluYXRpb25fc3RhdHVzpHR5cGUfqHR5cGVOYW1lplN0YXR1c6Rkb2NzkKVpbmRleAakZG9jc5LZU1NvbWUgYmFsYW5jZSB3YXMgbW92ZWQgZnJvbSB0aGUgcmVzZXJ2ZSBvZiB0aGUgZmlyc3QgYWNjb3VudCB0byB0aGUgc2Vjb25kIGFjY291bnQu2TZGaW5hbCBhcmd1bWVudCBpbmRpY2F0ZXMgdGhlIGRlc3RpbmF0aW9uIGJhbGFuY2UgdHlwZS7eAASkbmFtZadEZXBvc2l0pmZpZWxkc5LeAASkbmFtZaN3aG+kdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWmYW1vdW50pHR5cGUGqHR5cGVOYW1lqlQ6OkJhbGFuY2WkZG9jc5ClaW5kZXgHpGRvY3OR2TZTb21lIGFtb3VudCB3YXMgZGVwb3NpdGVkIChlLmcuIGZvciB0cmFuc2FjdGlvbiBmZWVzKS7eAASkbmFtZahXaXRoZHJhd6ZmaWVsZHOS3gAEpG5hbWWjd2hvpHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lpmFtb3VudKR0eXBlBqh0eXBlTmFtZapUOjpCYWxhbmNlpGRvY3OQpWluZGV4CKRkb2NzkdlHU29tZSBhbW91bnQgd2FzIHdpdGhkcmF3biBmcm9tIHRoZSBhY2NvdW50IChlLmcuIGZvciB0cmFuc2FjdGlvbiBmZWVzKS7eAASkbmFtZadTbGFzaGVkpmZpZWxkc5LeAASkbmFtZaN3aG+kdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWmYW1vdW50pHR5cGUGqHR5cGVOYW1lqlQ6OkJhbGFuY2WkZG9jc5ClaW5kZXgJpGRvY3OR2UBTb21lIGFtb3VudCB3YXMgcmVtb3ZlZCBmcm9tIHRoZSBhY2NvdW50IChlLmcuIGZvciBtaXNiZWhhdmlvcikupGRvY3OR2WgKCQkJVGhlIFtldmVudF0oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pIGVtaXR0ZWQKCQkJYnkgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZB+kdHlwZd4ABKRwYXRola1mcmFtZV9zdXBwb3J0pnRyYWl0c6Z0b2tlbnOkbWlzY61CYWxhbmNlU3RhdHVzpnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWkRnJlZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lqFJlc2VydmVkpmZpZWxkc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkIKR0eXBl3gAEpHBhdGiTunBhbGxldF90cmFuc2FjdGlvbl9wYXltZW50pnBhbGxldKVFdmVudKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5HeAASkbmFtZbJUcmFuc2FjdGlvbkZlZVBhaWSmZmllbGRzk94ABKRuYW1lo3dob6R0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaphY3R1YWxfZmVlpHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkN4ABKRuYW1lo3RpcKR0eXBlBqh0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5ClaW5kZXgApGRvY3OS2VZBIHRyYW5zYWN0aW9uIGZlZSBgYWN0dWFsX2ZlZWAsIG9mIHdoaWNoIGB0aXBgIHdhcyBhZGRlZCB0byB0aGUgbWluaW11bSBpbmNsdXNpb24gZmVlLLdoYXMgYmVlbiBwYWlkIGJ5IGB3aG9gLqRkb2NzkdloCgkJCVRoZSBbZXZlbnRdKGh0dHBzOi8vZG9jcy5zdWJzdHJhdGUuaW8vbWFpbi1kb2NzL2J1aWxkL2V2ZW50cy1lcnJvcnMvKSBlbWl0dGVkCgkJCWJ5IHRoaXMgcGFsbGV0LgoJCQneAAKiaWQhpHR5cGXeAASkcGF0aJSucGFsbGV0X3N0YWtpbmemcGFsbGV0pnBhbGxldKVFdmVudKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5/eAASkbmFtZadFcmFQYWlkpmZpZWxkc5PeAASkbmFtZallcmFfaW5kZXikdHlwZQSodHlwZU5hbWWoRXJhSW5kZXikZG9jc5DeAASkbmFtZbB2YWxpZGF0b3JfcGF5b3V0pHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkN4ABKRuYW1lqXJlbWFpbmRlcqR0eXBlBqh0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5ClaW5kZXgApGRvY3OS2VVUaGUgZXJhIHBheW91dCBoYXMgYmVlbiBzZXQ7IHRoZSBmaXJzdCBiYWxhbmNlIGlzIHRoZSB2YWxpZGF0b3ItcGF5b3V0OyB0aGUgc2Vjb25kIGlz2TB0aGUgcmVtYWluZGVyIGZyb20gdGhlIG1heGltdW0gYW1vdW50IG9mIHJld2FyZC7eAASkbmFtZahSZXdhcmRlZKZmaWVsZHOS3gAEpG5hbWWlc3Rhc2ikdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWmYW1vdW50pHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkKVpbmRleAGkZG9jc5HZL1RoZSBub21pbmF0b3IgaGFzIGJlZW4gcmV3YXJkZWQgYnkgdGhpcyBhbW91bnQu3gAEpG5hbWWnU2xhc2hlZKZmaWVsZHOS3gAEpG5hbWWmc3Rha2VypHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lpmFtb3VudKR0eXBlBqh0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5ClaW5kZXgCpGRvY3OR2UdBIHN0YWtlciAodmFsaWRhdG9yIG9yIG5vbWluYXRvcikgaGFzIGJlZW4gc2xhc2hlZCBieSB0aGUgZ2l2ZW4gYW1vdW50Lt4ABKRuYW1lrVNsYXNoUmVwb3J0ZWSmZmllbGRzk94ABKRuYW1lqXZhbGlkYXRvcqR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZahmcmFjdGlvbqR0eXBlIqh0eXBlTmFtZadQZXJiaWxspGRvY3OQ3gAEpG5hbWWpc2xhc2hfZXJhpHR5cGUEqHR5cGVOYW1lqEVyYUluZGV4pGRvY3OQpWluZGV4A6Rkb2NzktlWQSBzbGFzaCBmb3IgdGhlIGdpdmVuIHZhbGlkYXRvciwgZm9yIHRoZSBnaXZlbiBwZXJjZW50YWdlIG9mIHRoZWlyIHN0YWtlLCBhdCB0aGUgZ2l2ZW61ZXJhIGFzIGJlZW4gcmVwb3J0ZWQu3gAEpG5hbWW6T2xkU2xhc2hpbmdSZXBvcnREaXNjYXJkZWSmZmllbGRzkd4ABKRuYW1lrXNlc3Npb25faW5kZXikdHlwZQSodHlwZU5hbWWsU2Vzc2lvbkluZGV4pGRvY3OQpWluZGV4BKRkb2NzktlGQW4gb2xkIHNsYXNoaW5nIHJlcG9ydCBmcm9tIGEgcHJpb3IgZXJhIHdhcyBkaXNjYXJkZWQgYmVjYXVzZSBpdCBjb3VsZLFub3QgYmUgcHJvY2Vzc2VkLt4ABKRuYW1lrlN0YWtlcnNFbGVjdGVkpmZpZWxkc5ClaW5kZXgFpGRvY3OR2SFBIG5ldyBzZXQgb2Ygc3Rha2VycyB3YXMgZWxlY3RlZC7eAASkbmFtZaZCb25kZWSmZmllbGRzkt4ABKRuYW1lpXN0YXNopHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lpmFtb3VudKR0eXBlBqh0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5ClaW5kZXgGpGRvY3OU2TRBbiBhY2NvdW50IGhhcyBib25kZWQgdGhpcyBhbW91bnQuIFxbc3Rhc2gsIGFtb3VudFxdoNlTTk9URTogVGhpcyBldmVudCBpcyBvbmx5IGVtaXR0ZWQgd2hlbiBmdW5kcyBhcmUgYm9uZGVkIHZpYSBhIGRpc3BhdGNoYWJsZS4gTm90YWJseSzZSGl0IHdpbGwgbm90IGJlIGVtaXR0ZWQgZm9yIHN0YWtpbmcgcmV3YXJkcyB3aGVuIHRoZXkgYXJlIGFkZGVkIHRvIHN0YWtlLt4ABKRuYW1lqFVuYm9uZGVkpmZpZWxkc5LeAASkbmFtZaVzdGFzaKR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaZhbW91bnSkdHlwZQaodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQpWluZGV4B6Rkb2NzkdkkQW4gYWNjb3VudCBoYXMgdW5ib25kZWQgdGhpcyBhbW91bnQu3gAEpG5hbWWpV2l0aGRyYXdupmZpZWxkc5LeAASkbmFtZaVzdGFzaKR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaZhbW91bnSkdHlwZQaodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQpWluZGV4CKRkb2NzktlWQW4gYWNjb3VudCBoYXMgY2FsbGVkIGB3aXRoZHJhd191bmJvbmRlZGAgYW5kIHJlbW92ZWQgdW5ib25kaW5nIGNodW5rcyB3b3J0aCBgQmFsYW5jZWC5ZnJvbSB0aGUgdW5sb2NraW5nIHF1ZXVlLt4ABKRuYW1lpktpY2tlZKZmaWVsZHOS3gAEpG5hbWWpbm9taW5hdG9ypHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lpXN0YXNopHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkKVpbmRleAmkZG9jc5HZLUEgbm9taW5hdG9yIGhhcyBiZWVuIGtpY2tlZCBmcm9tIGEgdmFsaWRhdG9yLt4ABKRuYW1ltVN0YWtpbmdFbGVjdGlvbkZhaWxlZKZmaWVsZHOQpWluZGV4CqRkb2NzkdkrVGhlIGVsZWN0aW9uIGZhaWxlZC4gTm8gbmV3IGVyYSBpcyBwbGFubmVkLt4ABKRuYW1lp0NoaWxsZWSmZmllbGRzkd4ABKRuYW1lpXN0YXNopHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkKVpbmRleAukZG9jc5HZSEFuIGFjY291bnQgaGFzIHN0b3BwZWQgcGFydGljaXBhdGluZyBhcyBlaXRoZXIgYSB2YWxpZGF0b3Igb3Igbm9taW5hdG9yLt4ABKRuYW1lrVBheW91dFN0YXJ0ZWSmZmllbGRzkt4ABKRuYW1lqWVyYV9pbmRleKR0eXBlBKh0eXBlTmFtZahFcmFJbmRleKRkb2NzkN4ABKRuYW1lr3ZhbGlkYXRvcl9zdGFzaKR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5ClaW5kZXgMpGRvY3OR2SZUaGUgc3Rha2VycycgcmV3YXJkcyBhcmUgZ2V0dGluZyBwYWlkLt4ABKRuYW1lsVZhbGlkYXRvclByZWZzU2V0pmZpZWxkc5LeAASkbmFtZaVzdGFzaKR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaVwcmVmc6R0eXBlI6h0eXBlTmFtZa5WYWxpZGF0b3JQcmVmc6Rkb2NzkKVpbmRleA2kZG9jc5HZJkEgdmFsaWRhdG9yIGhhcyBzZXQgdGhlaXIgcHJlZmVyZW5jZXMu3gAEpG5hbWWoRm9yY2VFcmGmZmllbGRzkd4ABKRuYW1lpG1vZGWkdHlwZSaodHlwZU5hbWWnRm9yY2luZ6Rkb2NzkKVpbmRleA6kZG9jc5G9QSBuZXcgZm9yY2UgZXJhIG1vZGUgd2FzIHNldC6kZG9jc5HZaAoJCQlUaGUgW2V2ZW50XShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykgZW1pdHRlZAoJCQlieSB0aGlzIHBhbGxldC4KCQkJ3gAComlkIqR0eXBl3gAEpHBhdGiTrXNwX2FyaXRobWV0aWOqcGVyX3RoaW5nc6dQZXJiaWxspnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKRkb2NzkN4AAqJpZCOkdHlwZd4ABKRwYXRokq5wYWxsZXRfc3Rha2luZ65WYWxpZGF0b3JQcmVmc6ZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lqmNvbW1pc3Npb26kdHlwZSSodHlwZU5hbWWnUGVyYmlsbKRkb2NzkN4ABKRuYW1lp2Jsb2NrZWSkdHlwZSWodHlwZU5hbWWkYm9vbKRkb2NzkKRkb2NzkN4AAqJpZCSkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAadjb21wYWN03gABpHR5cGUipGRvY3OQ3gAComlkJaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqXByaW1pdGl2ZaRCb29spGRvY3OQ3gAComlkJqR0eXBl3gAEpHBhdGiSrnBhbGxldF9zdGFraW5np0ZvcmNpbmemcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5TeAASkbmFtZapOb3RGb3JjaW5npmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWoRm9yY2VOZXemZmllbGRzkKVpbmRleAGkZG9jc5DeAASkbmFtZalGb3JjZU5vbmWmZmllbGRzkKVpbmRleAKkZG9jc5DeAASkbmFtZatGb3JjZUFsd2F5c6ZmaWVsZHOQpWluZGV4A6Rkb2NzkKRkb2NzkN4AAqJpZCekdHlwZd4ABKRwYXRok69wYWxsZXRfb2ZmZW5jZXOmcGFsbGV0pUV2ZW50pnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOR3gAEpG5hbWWnT2ZmZW5jZaZmaWVsZHOS3gAEpG5hbWWka2luZKR0eXBlKKh0eXBlTmFtZaRLaW5kpGRvY3OQ3gAEpG5hbWWodGltZXNsb3SkdHlwZQyodHlwZU5hbWWuT3BhcXVlVGltZVNsb3SkZG9jc5ClaW5kZXgApGRvY3OT2VRUaGVyZSBpcyBhbiBvZmZlbmNlIHJlcG9ydGVkIG9mIHRoZSBnaXZlbiBga2luZGAgaGFwcGVuZWQgYXQgdGhlIGBzZXNzaW9uX2luZGV4YCBhbmTZTShraW5kLXNwZWNpZmljKSB0aW1lIHNsb3QuIFRoaXMgZXZlbnQgaXMgbm90IGRlcG9zaXRlZCBmb3IgZHVwbGljYXRlIHNsYXNoZXMus1xba2luZCwgdGltZXNsb3RcXS6kZG9jc5GsRXZlbnRzIHR5cGUu3gAComlkKKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbhCkdHlwZQKkZG9jc5DeAAKiaWQppHR5cGXeAASkcGF0aJOucGFsbGV0X3Nlc3Npb26mcGFsbGV0pUV2ZW50pnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOR3gAEpG5hbWWqTmV3U2Vzc2lvbqZmaWVsZHOR3gAEpG5hbWWtc2Vzc2lvbl9pbmRleKR0eXBlBKh0eXBlTmFtZaxTZXNzaW9uSW5kZXikZG9jc5ClaW5kZXgApGRvY3OS2U5OZXcgc2Vzc2lvbiBoYXMgaGFwcGVuZWQuIE5vdGUgdGhhdCB0aGUgYXJndW1lbnQgaXMgdGhlIHNlc3Npb24gaW5kZXgsIG5vdCB0aGXZJ2Jsb2NrIG51bWJlciBhcyB0aGUgdHlwZSBtaWdodCBzdWdnZXN0LqRkb2NzkdloCgkJCVRoZSBbZXZlbnRdKGh0dHBzOi8vZG9jcy5zdWJzdHJhdGUuaW8vbWFpbi1kb2NzL2J1aWxkL2V2ZW50cy1lcnJvcnMvKSBlbWl0dGVkCgkJCWJ5IHRoaXMgcGFsbGV0LgoJCQneAAKiaWQqpHR5cGXeAASkcGF0aJOucGFsbGV0X2dyYW5kcGGmcGFsbGV0pUV2ZW50pnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWWuTmV3QXV0aG9yaXRpZXOmZmllbGRzkd4ABKRuYW1lrWF1dGhvcml0eV9zZXSkdHlwZSuodHlwZU5hbWWtQXV0aG9yaXR5TGlzdKRkb2NzkKVpbmRleACkZG9jc5HZI05ldyBhdXRob3JpdHkgc2V0IGhhcyBiZWVuIGFwcGxpZWQu3gAEpG5hbWWmUGF1c2VkpmZpZWxkc5ClaW5kZXgBpGRvY3OR2SZDdXJyZW50IGF1dGhvcml0eSBzZXQgaGFzIGJlZW4gcGF1c2VkLt4ABKRuYW1lp1Jlc3VtZWSmZmllbGRzkKVpbmRleAKkZG9jc5HZJ0N1cnJlbnQgYXV0aG9yaXR5IHNldCBoYXMgYmVlbiByZXN1bWVkLqRkb2NzkdloCgkJCVRoZSBbZXZlbnRdKGh0dHBzOi8vZG9jcy5zdWJzdHJhdGUuaW8vbWFpbi1kb2NzL2J1aWxkL2V2ZW50cy1lcnJvcnMvKSBlbWl0dGVkCgkJCWJ5IHRoaXMgcGFsbGV0LgoJCQneAAKiaWQrpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZSykZG9jc5DeAAKiaWQspHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSLQqkZG9jc5DeAAKiaWQtpHR5cGXeAASkcGF0aJO0c3BfY29uc2Vuc3VzX2dyYW5kcGGjYXBwplB1YmxpY6ZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlLqh0eXBlTmFtZa9lZDI1NTE5OjpQdWJsaWOkZG9jc5CkZG9jc5DeAAKiaWQupHR5cGXeAASkcGF0aJOnc3BfY29yZadlZDI1NTE5plB1YmxpY6ZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlAah0eXBlTmFtZahbdTg7IDMyXaRkb2NzkKRkb2NzkN4AAqJpZC+kdHlwZd4ABKRwYXRok7BwYWxsZXRfaW1fb25saW5lpnBhbGxldKVFdmVudKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5PeAASkbmFtZbFIZWFydGJlYXRSZWNlaXZlZKZmaWVsZHOR3gAEpG5hbWWsYXV0aG9yaXR5X2lkpHR5cGUwqHR5cGVOYW1lrlQ6OkF1dGhvcml0eUlkpGRvY3OQpWluZGV4AKRkb2NzkdkwQSBuZXcgaGVhcnRiZWF0IHdhcyByZWNlaXZlZCBmcm9tIGBBdXRob3JpdHlJZGAu3gAEpG5hbWWnQWxsR29vZKZmaWVsZHOQpWluZGV4AaRkb2Nzkdk0QXQgdGhlIGVuZCBvZiB0aGUgc2Vzc2lvbiwgbm8gb2ZmZW5jZSB3YXMgY29tbWl0dGVkLt4ABKRuYW1lq1NvbWVPZmZsaW5lpmZpZWxkc5HeAASkbmFtZadvZmZsaW5lpHR5cGUyqHR5cGVOYW1lu1ZlYzxJZGVudGlmaWNhdGlvblR1cGxlPFQ+PqRkb2NzkKVpbmRleAKkZG9jc5HZSkF0IHRoZSBlbmQgb2YgdGhlIHNlc3Npb24sIGF0IGxlYXN0IG9uZSB2YWxpZGF0b3Igd2FzIGZvdW5kIHRvIGJlIG9mZmxpbmUupGRvY3OR2WgKCQkJVGhlIFtldmVudF0oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pIGVtaXR0ZWQKCQkJYnkgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZDCkdHlwZd4ABKRwYXRolLBwYWxsZXRfaW1fb25saW5lp3NyMjU1MTmrYXBwX3NyMjU1MTmmUHVibGljpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGUxqHR5cGVOYW1lr3NyMjU1MTk6OlB1YmxpY6Rkb2NzkKRkb2NzkN4AAqJpZDGkdHlwZd4ABKRwYXRok6dzcF9jb3Jlp3NyMjU1MTmmUHVibGljpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGUBqHR5cGVOYW1lqFt1ODsgMzJdpGRvY3OQpGRvY3OQ3gAComlkMqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGUzpGRvY3OQ3gAComlkM6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpXR1cGxlkgA0pGRvY3OQ3gAComlkNKR0eXBl3gAEpHBhdGiSrnBhbGxldF9zdGFraW5nqEV4cG9zdXJlpnBhcmFtc5LeAAKkbmFtZalBY2NvdW50SWSkdHlwZQDeAAKkbmFtZadCYWxhbmNlpHR5cGUGo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzk94ABKRuYW1lpXRvdGFspHR5cGU1qHR5cGVOYW1lp0JhbGFuY2WkZG9jc5DeAASkbmFtZaNvd26kdHlwZTWodHlwZU5hbWWnQmFsYW5jZaRkb2NzkN4ABKRuYW1lpm90aGVyc6R0eXBlNqh0eXBlTmFtZdkrVmVjPEluZGl2aWR1YWxFeHBvc3VyZTxBY2NvdW50SWQsIEJhbGFuY2U+PqRkb2NzkKRkb2NzkN4AAqJpZDWkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAadjb21wYWN03gABpHR5cGUGpGRvY3OQ3gAComlkNqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGU3pGRvY3OQ3gAComlkN6R0eXBl3gAEpHBhdGiSrnBhbGxldF9zdGFraW5nskluZGl2aWR1YWxFeHBvc3VyZaZwYXJhbXOS3gACpG5hbWWpQWNjb3VudElkpHR5cGUA3gACpG5hbWWnQmFsYW5jZaR0eXBlBqNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5LeAASkbmFtZaN3aG+kdHlwZQCodHlwZU5hbWWpQWNjb3VudElkpGRvY3OQ3gAEpG5hbWWldmFsdWWkdHlwZTWodHlwZU5hbWWnQmFsYW5jZaRkb2NzkKRkb2NzkN4AAqJpZDikdHlwZd4ABKRwYXRok65wYWxsZXRfdXRpbGl0eaZwYWxsZXSlRXZlbnSmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5beAASkbmFtZbBCYXRjaEludGVycnVwdGVkpmZpZWxkc5LeAASkbmFtZaVpbmRleKR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZaVlcnJvcqR0eXBlGKh0eXBlTmFtZa1EaXNwYXRjaEVycm9ypGRvY3OQpWluZGV4AKRkb2NzktlVQmF0Y2ggb2YgZGlzcGF0Y2hlcyBkaWQgbm90IGNvbXBsZXRlIGZ1bGx5LiBJbmRleCBvZiBmaXJzdCBmYWlsaW5nIGRpc3BhdGNoIGdpdmVuLCBhc7J3ZWxsIGFzIHRoZSBlcnJvci7eAASkbmFtZa5CYXRjaENvbXBsZXRlZKZmaWVsZHOQpWluZGV4AaRkb2NzkdkyQmF0Y2ggb2YgZGlzcGF0Y2hlcyBjb21wbGV0ZWQgZnVsbHkgd2l0aCBubyBlcnJvci7eAASkbmFtZbhCYXRjaENvbXBsZXRlZFdpdGhFcnJvcnOmZmllbGRzkKVpbmRleAKkZG9jc5HZLUJhdGNoIG9mIGRpc3BhdGNoZXMgY29tcGxldGVkIGJ1dCBoYXMgZXJyb3JzLt4ABKRuYW1lrUl0ZW1Db21wbGV0ZWSmZmllbGRzkKVpbmRleAOkZG9jc5HZR0Egc2luZ2xlIGl0ZW0gd2l0aGluIGEgQmF0Y2ggb2YgZGlzcGF0Y2hlcyBoYXMgY29tcGxldGVkIHdpdGggbm8gZXJyb3Iu3gAEpG5hbWWqSXRlbUZhaWxlZKZmaWVsZHOR3gAEpG5hbWWlZXJyb3KkdHlwZRiodHlwZU5hbWWtRGlzcGF0Y2hFcnJvcqRkb2NzkKVpbmRleASkZG9jc5HZREEgc2luZ2xlIGl0ZW0gd2l0aGluIGEgQmF0Y2ggb2YgZGlzcGF0Y2hlcyBoYXMgY29tcGxldGVkIHdpdGggZXJyb3Iu3gAEpG5hbWWsRGlzcGF0Y2hlZEFzpmZpZWxkc5HeAASkbmFtZaZyZXN1bHSkdHlwZTmodHlwZU5hbWWuRGlzcGF0Y2hSZXN1bHSkZG9jc5ClaW5kZXgFpGRvY3ORtkEgY2FsbCB3YXMgZGlzcGF0Y2hlZC6kZG9jc5HZaAoJCQlUaGUgW2V2ZW50XShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykgZW1pdHRlZAoJCQlieSB0aGlzIHBhbGxldC4KCQkJ3gAComlkOaR0eXBl3gAEpHBhdGiRplJlc3VsdKZwYXJhbXOS3gACpG5hbWWhVKR0eXBlOt4AAqRuYW1loUWkdHlwZRijZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWiT2umZmllbGRzkd4ABKRuYW1lwKR0eXBlOqh0eXBlTmFtZcCkZG9jc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWjRXJypmZpZWxkc5HeAASkbmFtZcCkdHlwZRiodHlwZU5hbWXApGRvY3OQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZDqkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZCkZG9jc5DeAAKiaWQ7pHR5cGXeAASkcGF0aJOvcGFsbGV0X2lkZW50aXR5pnBhbGxldKVFdmVudKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5reAASkbmFtZatJZGVudGl0eVNldKZmaWVsZHOR3gAEpG5hbWWjd2hvpHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkKVpbmRleACkZG9jc5HZO0EgbmFtZSB3YXMgc2V0IG9yIHJlc2V0ICh3aGljaCB3aWxsIHJlbW92ZSBhbGwganVkZ2VtZW50cyku3gAEpG5hbWWvSWRlbnRpdHlDbGVhcmVkpmZpZWxkc5LeAASkbmFtZaN3aG+kdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWnZGVwb3NpdKR0eXBlBqh0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5ClaW5kZXgBpGRvY3OR2TNBIG5hbWUgd2FzIGNsZWFyZWQsIGFuZCB0aGUgZ2l2ZW4gYmFsYW5jZSByZXR1cm5lZC7eAASkbmFtZa5JZGVudGl0eUtpbGxlZKZmaWVsZHOS3gAEpG5hbWWjd2hvpHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lp2RlcG9zaXSkdHlwZQaodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQpWluZGV4AqRkb2NzkdkxQSBuYW1lIHdhcyByZW1vdmVkIGFuZCB0aGUgZ2l2ZW4gYmFsYW5jZSBzbGFzaGVkLt4ABKRuYW1lskp1ZGdlbWVudFJlcXVlc3RlZKZmaWVsZHOS3gAEpG5hbWWjd2hvpHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lr3JlZ2lzdHJhcl9pbmRleKR0eXBlBKh0eXBlTmFtZa5SZWdpc3RyYXJJbmRleKRkb2NzkKVpbmRleAOkZG9jc5HZJ0EganVkZ2VtZW50IHdhcyBhc2tlZCBmcm9tIGEgcmVnaXN0cmFyLt4ABKRuYW1ltEp1ZGdlbWVudFVucmVxdWVzdGVkpmZpZWxkc5LeAASkbmFtZaN3aG+kdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWvcmVnaXN0cmFyX2luZGV4pHR5cGUEqHR5cGVOYW1lrlJlZ2lzdHJhckluZGV4pGRvY3OQpWluZGV4BKRkb2NzkdkiQSBqdWRnZW1lbnQgcmVxdWVzdCB3YXMgcmV0cmFjdGVkLt4ABKRuYW1lrkp1ZGdlbWVudEdpdmVupmZpZWxkc5LeAASkbmFtZaZ0YXJnZXSkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWvcmVnaXN0cmFyX2luZGV4pHR5cGUEqHR5cGVOYW1lrlJlZ2lzdHJhckluZGV4pGRvY3OQpWluZGV4BaRkb2NzkdklQSBqdWRnZW1lbnQgd2FzIGdpdmVuIGJ5IGEgcmVnaXN0cmFyLt4ABKRuYW1lrlJlZ2lzdHJhckFkZGVkpmZpZWxkc5HeAASkbmFtZa9yZWdpc3RyYXJfaW5kZXikdHlwZQSodHlwZU5hbWWuUmVnaXN0cmFySW5kZXikZG9jc5ClaW5kZXgGpGRvY3ORtkEgcmVnaXN0cmFyIHdhcyBhZGRlZC7eAASkbmFtZbBTdWJJZGVudGl0eUFkZGVkpmZpZWxkc5PeAASkbmFtZaNzdWKkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWkbWFpbqR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZadkZXBvc2l0pHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkKVpbmRleAekZG9jc5HZPUEgc3ViLWlkZW50aXR5IHdhcyBhZGRlZCB0byBhbiBpZGVudGl0eSBhbmQgdGhlIGRlcG9zaXQgcGFpZC7eAASkbmFtZbJTdWJJZGVudGl0eVJlbW92ZWSmZmllbGRzk94ABKRuYW1lo3N1YqR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaRtYWlupHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lp2RlcG9zaXSkdHlwZQaodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQpWluZGV4CKRkb2NzkdlCQSBzdWItaWRlbnRpdHkgd2FzIHJlbW92ZWQgZnJvbSBhbiBpZGVudGl0eSBhbmQgdGhlIGRlcG9zaXQgZnJlZWQu3gAEpG5hbWWyU3ViSWRlbnRpdHlSZXZva2VkpmZpZWxkc5PeAASkbmFtZaNzdWKkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWkbWFpbqR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZadkZXBvc2l0pHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkKVpbmRleAmkZG9jc5LZRkEgc3ViLWlkZW50aXR5IHdhcyBjbGVhcmVkLCBhbmQgdGhlIGdpdmVuIGRlcG9zaXQgcmVwYXRyaWF0ZWQgZnJvbSB0aGXZMm1haW4gaWRlbnRpdHkgYWNjb3VudCB0byB0aGUgc3ViLWlkZW50aXR5IGFjY291bnQupGRvY3OR2WgKCQkJVGhlIFtldmVudF0oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pIGVtaXR0ZWQKCQkJYnkgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZDykdHlwZd4ABKRwYXRok69wYWxsZXRfcmVjb3ZlcnmmcGFsbGV0pUV2ZW50pnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzlt4ABKRuYW1lr1JlY292ZXJ5Q3JlYXRlZKZmaWVsZHOR3gAEpG5hbWWnYWNjb3VudKR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5ClaW5kZXgApGRvY3OR2TJBIHJlY292ZXJ5IHByb2Nlc3MgaGFzIGJlZW4gc2V0IHVwIGZvciBhbiBhY2NvdW50Lt4ABKRuYW1lsVJlY292ZXJ5SW5pdGlhdGVkpmZpZWxkc5LeAASkbmFtZaxsb3N0X2FjY291bnSkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWvcmVzY3Vlcl9hY2NvdW50pHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkKVpbmRleAGkZG9jc5HZSkEgcmVjb3ZlcnkgcHJvY2VzcyBoYXMgYmVlbiBpbml0aWF0ZWQgZm9yIGxvc3QgYWNjb3VudCBieSByZXNjdWVyIGFjY291bnQu3gAEpG5hbWWvUmVjb3ZlcnlWb3VjaGVkpmZpZWxkc5PeAASkbmFtZaxsb3N0X2FjY291bnSkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWvcmVzY3Vlcl9hY2NvdW50pHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lpnNlbmRlcqR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5ClaW5kZXgCpGRvY3OR2VZBIHJlY292ZXJ5IHByb2Nlc3MgZm9yIGxvc3QgYWNjb3VudCBieSByZXNjdWVyIGFjY291bnQgaGFzIGJlZW4gdm91Y2hlZCBmb3IgYnkgc2VuZGVyLt4ABKRuYW1lrlJlY292ZXJ5Q2xvc2VkpmZpZWxkc5LeAASkbmFtZaxsb3N0X2FjY291bnSkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWvcmVzY3Vlcl9hY2NvdW50pHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkKVpbmRleAOkZG9jc5HZR0EgcmVjb3ZlcnkgcHJvY2VzcyBmb3IgbG9zdCBhY2NvdW50IGJ5IHJlc2N1ZXIgYWNjb3VudCBoYXMgYmVlbiBjbG9zZWQu3gAEpG5hbWWwQWNjb3VudFJlY292ZXJlZKZmaWVsZHOS3gAEpG5hbWWsbG9zdF9hY2NvdW50pHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lr3Jlc2N1ZXJfYWNjb3VudKR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5ClaW5kZXgEpGRvY3OR2UBMb3N0IGFjY291bnQgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IHJlY292ZXJlZCBieSByZXNjdWVyIGFjY291bnQu3gAEpG5hbWWvUmVjb3ZlcnlSZW1vdmVkpmZpZWxkc5HeAASkbmFtZaxsb3N0X2FjY291bnSkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQpWluZGV4BaRkb2NzkdkzQSByZWNvdmVyeSBwcm9jZXNzIGhhcyBiZWVuIHJlbW92ZWQgZm9yIGFuIGFjY291bnQupGRvY3ORrEV2ZW50cyB0eXBlLt4AAqJpZD2kdHlwZd4ABKRwYXRok65wYWxsZXRfdmVzdGluZ6ZwYWxsZXSlRXZlbnSmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWuVmVzdGluZ1VwZGF0ZWSmZmllbGRzkt4ABKRuYW1lp2FjY291bnSkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWodW52ZXN0ZWSkdHlwZQaodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQpWluZGV4AKRkb2NzktlUVGhlIGFtb3VudCB2ZXN0ZWQgaGFzIGJlZW4gdXBkYXRlZC4gVGhpcyBjb3VsZCBpbmRpY2F0ZSBhIGNoYW5nZSBpbiBmdW5kcyBhdmFpbGFibGUu2UlUaGUgYmFsYW5jZSBnaXZlbiBpcyB0aGUgYW1vdW50IHdoaWNoIGlzIGxlZnQgdW52ZXN0ZWQgKGFuZCB0aHVzIGxvY2tlZCku3gAEpG5hbWWwVmVzdGluZ0NvbXBsZXRlZKZmaWVsZHOR3gAEpG5hbWWnYWNjb3VudKR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5ClaW5kZXgBpGRvY3OR2SdBbiBcW2FjY291bnRcXSBoYXMgYmVjb21lIGZ1bGx5IHZlc3RlZC6kZG9jc5HZaAoJCQlUaGUgW2V2ZW50XShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykgZW1pdHRlZAoJCQlieSB0aGlzIHBhbGxldC4KCQkJ3gAComlkPqR0eXBl3gAEpHBhdGiTsHBhbGxldF9zY2hlZHVsZXKmcGFsbGV0pUV2ZW50pnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzlt4ABKRuYW1lqVNjaGVkdWxlZKZmaWVsZHOS3gAEpG5hbWWkd2hlbqR0eXBlBKh0eXBlTmFtZa5UOjpCbG9ja051bWJlcqRkb2NzkN4ABKRuYW1lpWluZGV4pHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleACkZG9jc5G0U2NoZWR1bGVkIHNvbWUgdGFzay7eAASkbmFtZahDYW5jZWxlZKZmaWVsZHOS3gAEpG5hbWWkd2hlbqR0eXBlBKh0eXBlTmFtZa5UOjpCbG9ja051bWJlcqRkb2NzkN4ABKRuYW1lpWluZGV4pHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAGkZG9jc5GzQ2FuY2VsZWQgc29tZSB0YXNrLt4ABKRuYW1lqkRpc3BhdGNoZWSmZmllbGRzk94ABKRuYW1lpHRhc2ukdHlwZT+odHlwZU5hbWW7VGFza0FkZHJlc3M8VDo6QmxvY2tOdW1iZXI+pGRvY3OQ3gAEpG5hbWWiaWSkdHlwZcxAqHR5cGVOYW1lsE9wdGlvbjxUYXNrTmFtZT6kZG9jc5DeAASkbmFtZaZyZXN1bHSkdHlwZTmodHlwZU5hbWWuRGlzcGF0Y2hSZXN1bHSkZG9jc5ClaW5kZXgCpGRvY3ORtURpc3BhdGNoZWQgc29tZSB0YXNrLt4ABKRuYW1lr0NhbGxVbmF2YWlsYWJsZaZmaWVsZHOS3gAEpG5hbWWkdGFza6R0eXBlP6h0eXBlTmFtZbtUYXNrQWRkcmVzczxUOjpCbG9ja051bWJlcj6kZG9jc5DeAASkbmFtZaJpZKR0eXBlzECodHlwZU5hbWWwT3B0aW9uPFRhc2tOYW1lPqRkb2NzkKVpbmRleAOkZG9jc5HZSlRoZSBjYWxsIGZvciB0aGUgcHJvdmlkZWQgaGFzaCB3YXMgbm90IGZvdW5kIHNvIHRoZSB0YXNrIGhhcyBiZWVuIGFib3J0ZWQu3gAEpG5hbWWuUGVyaW9kaWNGYWlsZWSmZmllbGRzkt4ABKRuYW1lpHRhc2ukdHlwZT+odHlwZU5hbWW7VGFza0FkZHJlc3M8VDo6QmxvY2tOdW1iZXI+pGRvY3OQ3gAEpG5hbWWiaWSkdHlwZcxAqHR5cGVOYW1lsE9wdGlvbjxUYXNrTmFtZT6kZG9jc5ClaW5kZXgEpGRvY3OR2U9UaGUgZ2l2ZW4gdGFzayB3YXMgdW5hYmxlIHRvIGJlIHJlbmV3ZWQgc2luY2UgdGhlIGFnZW5kYSBpcyBmdWxsIGF0IHRoYXQgYmxvY2su3gAEpG5hbWW1UGVybWFuZW50bHlPdmVyd2VpZ2h0pmZpZWxkc5LeAASkbmFtZaR0YXNrpHR5cGU/qHR5cGVOYW1lu1Rhc2tBZGRyZXNzPFQ6OkJsb2NrTnVtYmVyPqRkb2NzkN4ABKRuYW1lomlkpHR5cGXMQKh0eXBlTmFtZbBPcHRpb248VGFza05hbWU+pGRvY3OQpWluZGV4BaRkb2Nzkdk8VGhlIGdpdmVuIHRhc2sgY2FuIG5ldmVyIGJlIGV4ZWN1dGVkIHNpbmNlIGl0IGlzIG92ZXJ3ZWlnaHQupGRvY3ORrEV2ZW50cyB0eXBlLt4AAqJpZD+kdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZIEBKRkb2NzkN4AAqJpZMxApHR5cGXeAASkcGF0aJGmT3B0aW9upnBhcmFtc5HeAAKkbmFtZaFUpHR5cGUBo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lpE5vbmWmZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZaRTb21lpmZpZWxkc5HeAASkbmFtZcCkdHlwZQGodHlwZU5hbWXApGRvY3OQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZMxBpHR5cGXeAASkcGF0aJOvcGFsbGV0X3ByZWltYWdlpnBhbGxldKVFdmVudKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5PeAASkbmFtZaVOb3RlZKZmaWVsZHOR3gAEpG5hbWWkaGFzaKR0eXBlC6h0eXBlTmFtZadUOjpIYXNopGRvY3OQpWluZGV4AKRkb2NzkbpBIHByZWltYWdlIGhhcyBiZWVuIG5vdGVkLt4ABKRuYW1lqVJlcXVlc3RlZKZmaWVsZHOR3gAEpG5hbWWkaGFzaKR0eXBlC6h0eXBlTmFtZadUOjpIYXNopGRvY3OQpWluZGV4AaRkb2Nzkb5BIHByZWltYWdlIGhhcyBiZWVuIHJlcXVlc3RlZC7eAASkbmFtZadDbGVhcmVkpmZpZWxkc5HeAASkbmFtZaRoYXNopHR5cGULqHR5cGVOYW1lp1Q6Okhhc2ikZG9jc5ClaW5kZXgCpGRvY3ORu0EgcHJlaW1hZ2UgaGFzIGJlbiBjbGVhcmVkLqRkb2NzkdloCgkJCVRoZSBbZXZlbnRdKGh0dHBzOi8vZG9jcy5zdWJzdHJhdGUuaW8vbWFpbi1kb2NzL2J1aWxkL2V2ZW50cy1lcnJvcnMvKSBlbWl0dGVkCgkJCWJ5IHRoaXMgcGFsbGV0LgoJCQneAAKiaWTMQqR0eXBl3gAEpHBhdGiTq3BhbGxldF9zdWRvpnBhbGxldKVFdmVudKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5PeAASkbmFtZaVTdWRpZKZmaWVsZHOR3gAEpG5hbWWrc3Vkb19yZXN1bHSkdHlwZTmodHlwZU5hbWWuRGlzcGF0Y2hSZXN1bHSkZG9jc5ClaW5kZXgApGRvY3OR2SJBIHN1ZG8ganVzdCB0b29rIHBsYWNlLiBcW3Jlc3VsdFxd3gAEpG5hbWWqS2V5Q2hhbmdlZKZmaWVsZHOR3gAEpG5hbWWqb2xkX3N1ZG9lcqR0eXBlzEOodHlwZU5hbWW0T3B0aW9uPFQ6OkFjY291bnRJZD6kZG9jc5ClaW5kZXgBpGRvY3OR2U5UaGUgXFtzdWRvZXJcXSBqdXN0IHN3aXRjaGVkIGlkZW50aXR5OyB0aGUgb2xkIGtleSBpcyBzdXBwbGllZCBpZiBvbmUgZXhpc3RlZC7eAASkbmFtZapTdWRvQXNEb25lpmZpZWxkc5HeAASkbmFtZatzdWRvX3Jlc3VsdKR0eXBlOah0eXBlTmFtZa5EaXNwYXRjaFJlc3VsdKRkb2NzkKVpbmRleAKkZG9jc5HZIkEgc3VkbyBqdXN0IHRvb2sgcGxhY2UuIFxbcmVzdWx0XF2kZG9jc5HZaAoJCQlUaGUgW2V2ZW50XShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykgZW1pdHRlZAoJCQlieSB0aGlzIHBhbGxldC4KCQkJ3gAComlkzEOkdHlwZd4ABKRwYXRokaZPcHRpb26mcGFyYW1zkd4AAqRuYW1loVSkdHlwZQCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWkTm9uZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lpFNvbWWmZmllbGRzkd4ABKRuYW1lwKR0eXBlAKh0eXBlTmFtZcCkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzESkdHlwZd4ABKRwYXRok6xwYWxsZXRfcHJveHmmcGFsbGV0pUV2ZW50pnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzld4ABKRuYW1lrVByb3h5RXhlY3V0ZWSmZmllbGRzkd4ABKRuYW1lpnJlc3VsdKR0eXBlOah0eXBlTmFtZa5EaXNwYXRjaFJlc3VsdKRkb2NzkKVpbmRleACkZG9jc5HZL0EgcHJveHkgd2FzIGV4ZWN1dGVkIGNvcnJlY3RseSwgd2l0aCB0aGUgZ2l2ZW4u3gAEpG5hbWWrUHVyZUNyZWF0ZWSmZmllbGRzlN4ABKRuYW1lpHB1cmWkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWjd2hvpHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lqnByb3h5X3R5cGWkdHlwZcxFqHR5cGVOYW1lrFQ6OlByb3h5VHlwZaRkb2NzkN4ABKRuYW1ltGRpc2FtYmlndWF0aW9uX2luZGV4pHR5cGXMRqh0eXBlTmFtZaN1MTakZG9jc5ClaW5kZXgBpGRvY3OS2TdBIHB1cmUgYWNjb3VudCBoYXMgYmVlbiBjcmVhdGVkIGJ5IG5ldyBwcm94eSB3aXRoIGdpdmVu2SRkaXNhbWJpZ3VhdGlvbiBpbmRleCBhbmQgcHJveHkgdHlwZS7eAASkbmFtZalBbm5vdW5jZWSmZmllbGRzk94ABKRuYW1lpHJlYWykdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWlcHJveHmkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWpY2FsbF9oYXNopHR5cGULqHR5cGVOYW1lrUNhbGxIYXNoT2Y8VD6kZG9jc5ClaW5kZXgCpGRvY3OR2ThBbiBhbm5vdW5jZW1lbnQgd2FzIHBsYWNlZCB0byBtYWtlIGEgY2FsbCBpbiB0aGUgZnV0dXJlLt4ABKRuYW1lqlByb3h5QWRkZWSmZmllbGRzlN4ABKRuYW1lqWRlbGVnYXRvcqR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZalkZWxlZ2F0ZWWkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWqcHJveHlfdHlwZaR0eXBlzEWodHlwZU5hbWWsVDo6UHJveHlUeXBlpGRvY3OQ3gAEpG5hbWWlZGVsYXmkdHlwZQSodHlwZU5hbWWuVDo6QmxvY2tOdW1iZXKkZG9jc5ClaW5kZXgDpGRvY3ORskEgcHJveHkgd2FzIGFkZGVkLt4ABKRuYW1lrFByb3h5UmVtb3ZlZKZmaWVsZHOU3gAEpG5hbWWpZGVsZWdhdG9ypHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lqWRlbGVnYXRlZaR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZapwcm94eV90eXBlpHR5cGXMRah0eXBlTmFtZaxUOjpQcm94eVR5cGWkZG9jc5DeAASkbmFtZaVkZWxheaR0eXBlBKh0eXBlTmFtZa5UOjpCbG9ja051bWJlcqRkb2NzkKVpbmRleASkZG9jc5G0QSBwcm94eSB3YXMgcmVtb3ZlZC6kZG9jc5HZaAoJCQlUaGUgW2V2ZW50XShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykgZW1pdHRlZAoJCQlieSB0aGlzIHBhbGxldC4KCQkJ3gAComlkzEWkdHlwZd4ABKRwYXRokq93ZXN0ZW5kX3J1bnRpbWWpUHJveHlUeXBlpnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOX3gAEpG5hbWWjQW55pmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWrTm9uVHJhbnNmZXKmZmllbGRzkKVpbmRleAGkZG9jc5DeAASkbmFtZadTdGFraW5npmZpZWxkc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWsU3Vkb0JhbGFuY2VzpmZpZWxkc5ClaW5kZXgDpGRvY3OQ3gAEpG5hbWWxSWRlbnRpdHlKdWRnZW1lbnSmZmllbGRzkKVpbmRleASkZG9jc5DeAASkbmFtZatDYW5jZWxQcm94eaZmaWVsZHOQpWluZGV4BaRkb2NzkN4ABKRuYW1lp0F1Y3Rpb26mZmllbGRzkKVpbmRleAakZG9jc5CkZG9jc5DeAAKiaWTMRqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqXByaW1pdGl2ZaNVMTakZG9jc5DeAAKiaWTMR6R0eXBl3gAEpHBhdGiTr3BhbGxldF9tdWx0aXNpZ6ZwYWxsZXSlRXZlbnSmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOU3gAEpG5hbWWrTmV3TXVsdGlzaWemZmllbGRzk94ABKRuYW1lqWFwcHJvdmluZ6R0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZahtdWx0aXNpZ6R0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaljYWxsX2hhc2ikdHlwZQGodHlwZU5hbWWoQ2FsbEhhc2ikZG9jc5ClaW5kZXgApGRvY3OR2SNBIG5ldyBtdWx0aXNpZyBvcGVyYXRpb24gaGFzIGJlZ3VuLt4ABKRuYW1lsE11bHRpc2lnQXBwcm92YWymZmllbGRzlN4ABKRuYW1lqWFwcHJvdmluZ6R0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZal0aW1lcG9pbnSkdHlwZcxIqHR5cGVOYW1luVRpbWVwb2ludDxUOjpCbG9ja051bWJlcj6kZG9jc5DeAASkbmFtZahtdWx0aXNpZ6R0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaljYWxsX2hhc2ikdHlwZQGodHlwZU5hbWWoQ2FsbEhhc2ikZG9jc5ClaW5kZXgBpGRvY3OR2TJBIG11bHRpc2lnIG9wZXJhdGlvbiBoYXMgYmVlbiBhcHByb3ZlZCBieSBzb21lb25lLt4ABKRuYW1lsE11bHRpc2lnRXhlY3V0ZWSmZmllbGRzld4ABKRuYW1lqWFwcHJvdmluZ6R0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZal0aW1lcG9pbnSkdHlwZcxIqHR5cGVOYW1luVRpbWVwb2ludDxUOjpCbG9ja051bWJlcj6kZG9jc5DeAASkbmFtZahtdWx0aXNpZ6R0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaljYWxsX2hhc2ikdHlwZQGodHlwZU5hbWWoQ2FsbEhhc2ikZG9jc5DeAASkbmFtZaZyZXN1bHSkdHlwZTmodHlwZU5hbWWuRGlzcGF0Y2hSZXN1bHSkZG9jc5ClaW5kZXgCpGRvY3OR2SdBIG11bHRpc2lnIG9wZXJhdGlvbiBoYXMgYmVlbiBleGVjdXRlZC7eAASkbmFtZbFNdWx0aXNpZ0NhbmNlbGxlZKZmaWVsZHOU3gAEpG5hbWWqY2FuY2VsbGluZ6R0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZal0aW1lcG9pbnSkdHlwZcxIqHR5cGVOYW1luVRpbWVwb2ludDxUOjpCbG9ja051bWJlcj6kZG9jc5DeAASkbmFtZahtdWx0aXNpZ6R0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaljYWxsX2hhc2ikdHlwZQGodHlwZU5hbWWoQ2FsbEhhc2ikZG9jc5ClaW5kZXgDpGRvY3OR2ShBIG11bHRpc2lnIG9wZXJhdGlvbiBoYXMgYmVlbiBjYW5jZWxsZWQupGRvY3OR2WgKCQkJVGhlIFtldmVudF0oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pIGVtaXR0ZWQKCQkJYnkgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZMxIpHR5cGXeAASkcGF0aJKvcGFsbGV0X211bHRpc2lnqVRpbWVwb2ludKZwYXJhbXOR3gACpG5hbWWrQmxvY2tOdW1iZXKkdHlwZQSjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOS3gAEpG5hbWWmaGVpZ2h0pHR5cGUEqHR5cGVOYW1lq0Jsb2NrTnVtYmVypGRvY3OQ3gAEpG5hbWWlaW5kZXikdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpGRvY3OQ3gAComlkzEmkdHlwZd4ABKRwYXRok9kkcGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlpnBhbGxldKVFdmVudKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5beAASkbmFtZa5Tb2x1dGlvblN0b3JlZKZmaWVsZHOT3gAEpG5hbWWnY29tcHV0ZaR0eXBlzEqodHlwZU5hbWWvRWxlY3Rpb25Db21wdXRlpGRvY3OQ3gAEpG5hbWWmb3JpZ2lupHR5cGXMQ6h0eXBlTmFtZbRPcHRpb248VDo6QWNjb3VudElkPqRkb2NzkN4ABKRuYW1lrHByZXZfZWplY3RlZKR0eXBlJah0eXBlTmFtZaRib29spGRvY3OQpWluZGV4AKRkb2Nzl9ktQSBzb2x1dGlvbiB3YXMgc3RvcmVkIHdpdGggdGhlIGdpdmVuIGNvbXB1dGUuoNlUVGhlIGBvcmlnaW5gIGluZGljYXRlcyB0aGUgb3JpZ2luIG9mIHRoZSBzb2x1dGlvbi4gSWYgYG9yaWdpbmAgaXMgYFNvbWUoQWNjb3VudElkKWAs2VV0aGUgc3RvcmVkIHNvbHV0aW9uIHdhcyBzdWJtaXRlZCBpbiB0aGUgc2lnbmVkIHBoYXNlIGJ5IGEgbWluZXIgd2l0aCB0aGUgYEFjY291bnRJZGAu2UlPdGhlcndpc2UsIHRoZSBzb2x1dGlvbiB3YXMgc3RvcmVkIGVpdGhlciBkdXJpbmcgdGhlIHVuc2lnbmVkIHBoYXNlIG9yIGJ52VNgVDo6Rm9yY2VPcmlnaW5gLiBUaGUgYGJvb2xgIGlzIGB0cnVlYCB3aGVuIGEgcHJldmlvdXMgc29sdXRpb24gd2FzIGVqZWN0ZWQgdG8gbWFrZbJyb29tIGZvciB0aGlzIG9uZS7eAASkbmFtZbFFbGVjdGlvbkZpbmFsaXplZKZmaWVsZHOS3gAEpG5hbWWnY29tcHV0ZaR0eXBlzEqodHlwZU5hbWWvRWxlY3Rpb25Db21wdXRlpGRvY3OQ3gAEpG5hbWWlc2NvcmWkdHlwZcxLqHR5cGVOYW1lrUVsZWN0aW9uU2NvcmWkZG9jc5ClaW5kZXgBpGRvY3OR2UZUaGUgZWxlY3Rpb24gaGFzIGJlZW4gZmluYWxpemVkLCB3aXRoIHRoZSBnaXZlbiBjb21wdXRhdGlvbiBhbmQgc2NvcmUu3gAEpG5hbWWuRWxlY3Rpb25GYWlsZWSmZmllbGRzkKVpbmRleAKkZG9jc5OzQW4gZWxlY3Rpb24gZmFpbGVkLqDZQE5vdCBtdWNoIGNhbiBiZSBzYWlkIGFib3V0IHdoaWNoIGNvbXB1dGVzIGZhaWxlZCBpbiB0aGUgcHJvY2Vzcy7eAASkbmFtZahSZXdhcmRlZKZmaWVsZHOS3gAEpG5hbWWnYWNjb3VudKR0eXBlAKh0eXBlTmFtZdkmPFQgYXMgZnJhbWVfc3lzdGVtOjpDb25maWc+OjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaV2YWx1ZaR0eXBlBqh0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5ClaW5kZXgDpGRvY3OR2UlBbiBhY2NvdW50IGhhcyBiZWVuIHJld2FyZGVkIGZvciB0aGVpciBzaWduZWQgc3VibWlzc2lvbiBiZWluZyBmaW5hbGl6ZWQu3gAEpG5hbWWnU2xhc2hlZKZmaWVsZHOS3gAEpG5hbWWnYWNjb3VudKR0eXBlAKh0eXBlTmFtZdkmPFQgYXMgZnJhbWVfc3lzdGVtOjpDb25maWc+OjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaV2YWx1ZaR0eXBlBqh0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5ClaW5kZXgEpGRvY3OR2UhBbiBhY2NvdW50IGhhcyBiZWVuIHNsYXNoZWQgZm9yIHN1Ym1pdHRpbmcgYW4gaW52YWxpZCBzaWduZWQgc3VibWlzc2lvbi7eAASkbmFtZbFQaGFzZVRyYW5zaXRpb25lZKZmaWVsZHOT3gAEpG5hbWWkZnJvbaR0eXBlzEyodHlwZU5hbWW1UGhhc2U8VDo6QmxvY2tOdW1iZXI+pGRvY3OQ3gAEpG5hbWWidG+kdHlwZcxMqHR5cGVOYW1ltVBoYXNlPFQ6OkJsb2NrTnVtYmVyPqRkb2NzkN4ABKRuYW1lpXJvdW5kpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAWkZG9jc5HZLlRoZXJlIHdhcyBhIHBoYXNlIHRyYW5zaXRpb24gaW4gYSBnaXZlbiByb3VuZC6kZG9jc5HZaAoJCQlUaGUgW2V2ZW50XShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykgZW1pdHRlZAoJCQlieSB0aGlzIHBhbGxldC4KCQkJ3gAComlkzEqkdHlwZd4ABKRwYXRoktkkcGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlr0VsZWN0aW9uQ29tcHV0ZaZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzld4ABKRuYW1lp09uQ2hhaW6mZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZaZTaWduZWSmZmllbGRzkKVpbmRleAGkZG9jc5DeAASkbmFtZahVbnNpZ25lZKZmaWVsZHOQpWluZGV4AqRkb2NzkN4ABKRuYW1lqEZhbGxiYWNrpmZpZWxkc5ClaW5kZXgDpGRvY3OQ3gAEpG5hbWWpRW1lcmdlbmN5pmZpZWxkc5ClaW5kZXgEpGRvY3OQpGRvY3OQ3gAComlkzEukdHlwZd4ABKRwYXRokrFzcF9ucG9zX2VsZWN0aW9uc61FbGVjdGlvblNjb3JlpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOT3gAEpG5hbWWtbWluaW1hbF9zdGFrZaR0eXBlBqh0eXBlTmFtZa9FeHRlbmRlZEJhbGFuY2WkZG9jc5DeAASkbmFtZalzdW1fc3Rha2WkdHlwZQaodHlwZU5hbWWvRXh0ZW5kZWRCYWxhbmNlpGRvY3OQ3gAEpG5hbWWxc3VtX3N0YWtlX3NxdWFyZWSkdHlwZQaodHlwZU5hbWWvRXh0ZW5kZWRCYWxhbmNlpGRvY3OQpGRvY3OQ3gAComlkzEykdHlwZd4ABKRwYXRoktkkcGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlpVBoYXNlpnBhcmFtc5HeAAKkbmFtZaJCbqR0eXBlBKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5TeAASkbmFtZaNPZmamZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZaZTaWduZWSmZmllbGRzkKVpbmRleAGkZG9jc5DeAASkbmFtZahVbnNpZ25lZKZmaWVsZHOR3gAEpG5hbWXApHR5cGXMTah0eXBlTmFtZaooYm9vbCwgQm4ppGRvY3OQpWluZGV4AqRkb2NzkN4ABKRuYW1lqUVtZXJnZW5jeaZmaWVsZHOQpWluZGV4A6Rkb2NzkKRkb2NzkN4AAqJpZMxNpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSJQSkZG9jc5DeAAKiaWTMTqR0eXBl3gAEpHBhdGiTsHBhbGxldF9iYWdzX2xpc3SmcGFsbGV0pUV2ZW50pnBhcmFtc5LeAAKkbmFtZaFUpHR5cGXA3gACpG5hbWWhSaR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZahSZWJhZ2dlZKZmaWVsZHOT3gAEpG5hbWWjd2hvpHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lpGZyb22kdHlwZQqodHlwZU5hbWWoVDo6U2NvcmWkZG9jc5DeAASkbmFtZaJ0b6R0eXBlCqh0eXBlTmFtZahUOjpTY29yZaRkb2NzkKVpbmRleACkZG9jc5HZKU1vdmVkIGFuIGFjY291bnQgZnJvbSBvbmUgYmFnIHRvIGFub3RoZXIu3gAEpG5hbWWsU2NvcmVVcGRhdGVkpmZpZWxkc5LeAASkbmFtZaN3aG+kdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWpbmV3X3Njb3JlpHR5cGUKqHR5cGVOYW1lqFQ6OlNjb3JlpGRvY3OQpWluZGV4AaRkb2Nzkdk2VXBkYXRlZCB0aGUgc2NvcmUgb2Ygc29tZSBhY2NvdW50IHRvIHRoZSBnaXZlbiBhbW91bnQupGRvY3OR2WgKCQkJVGhlIFtldmVudF0oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pIGVtaXR0ZWQKCQkJYnkgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZMxPpHR5cGXeAASkcGF0aJO3cGFsbGV0X25vbWluYXRpb25fcG9vbHOmcGFsbGV0pUV2ZW50pnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzn94ABKRuYW1lp0NyZWF0ZWSmZmllbGRzkt4ABKRuYW1lqWRlcG9zaXRvcqR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZadwb29sX2lkpHR5cGUEqHR5cGVOYW1lplBvb2xJZKRkb2NzkKVpbmRleACkZG9jc5G4QSBwb29sIGhhcyBiZWVuIGNyZWF0ZWQu3gAEpG5hbWWmQm9uZGVkpmZpZWxkc5TeAASkbmFtZaZtZW1iZXKkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWncG9vbF9pZKR0eXBlBKh0eXBlTmFtZaZQb29sSWSkZG9jc5DeAASkbmFtZaZib25kZWSkdHlwZQaodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQ3gAEpG5hbWWmam9pbmVkpHR5cGUlqHR5cGVOYW1lpGJvb2ykZG9jc5ClaW5kZXgBpGRvY3OR2SVBIG1lbWJlciBoYXMgYmVjYW1lIGJvbmRlZCBpbiBhIHBvb2wu3gAEpG5hbWWnUGFpZE91dKZmaWVsZHOT3gAEpG5hbWWmbWVtYmVypHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lp3Bvb2xfaWSkdHlwZQSodHlwZU5hbWWmUG9vbElkpGRvY3OQ3gAEpG5hbWWmcGF5b3V0pHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkKVpbmRleAKkZG9jc5HZI0EgcGF5b3V0IGhhcyBiZWVuIG1hZGUgdG8gYSBtZW1iZXIu3gAEpG5hbWWoVW5ib25kZWSmZmllbGRzld4ABKRuYW1lpm1lbWJlcqR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZadwb29sX2lkpHR5cGUEqHR5cGVOYW1lplBvb2xJZKRkb2NzkN4ABKRuYW1lp2JhbGFuY2WkdHlwZQaodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQ3gAEpG5hbWWmcG9pbnRzpHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkN4ABKRuYW1lo2VyYaR0eXBlBKh0eXBlTmFtZahFcmFJbmRleKRkb2NzkKVpbmRleAOkZG9jc5vZJkEgbWVtYmVyIGhhcyB1bmJvbmRlZCBmcm9tIHRoZWlyIHBvb2wuoNlOLSBgYmFsYW5jZWAgaXMgdGhlIGNvcnJlc3BvbmRpbmcgYmFsYW5jZSBvZiB0aGUgbnVtYmVyIG9mIHBvaW50cyB0aGF0IGhhcyBiZWVu2VUgIHJlcXVlc3RlZCB0byBiZSB1bmJvbmRlZCAodGhlIGFyZ3VtZW50IG9mIHRoZSBgdW5ib25kYCB0cmFuc2FjdGlvbikgZnJvbSB0aGUgYm9uZGVkpyAgcG9vbC7ZUS0gYHBvaW50c2AgaXMgdGhlIG51bWJlciBvZiBwb2ludHMgdGhhdCBhcmUgaXNzdWVkIGFzIGEgcmVzdWx0IG9mIGBiYWxhbmNlYCBiZWluZ9kwZGlzc29sdmVkIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgdW5ib25kaW5nIHBvb2wu2TktIGBlcmFgIGlzIHRoZSBlcmEgaW4gd2hpY2ggdGhlIGJhbGFuY2Ugd2lsbCBiZSB1bmJvbmRlZC7ZVUluIHRoZSBhYnNlbmNlIG9mIHNsYXNoaW5nLCB0aGVzZSB2YWx1ZXMgd2lsbCBtYXRjaC4gSW4gdGhlIHByZXNlbmNlIG9mIHNsYXNoaW5nLCB0aGXZU251bWJlciBvZiBwb2ludHMgdGhhdCBhcmUgaXNzdWVkIGluIHRoZSB1bmJvbmRpbmcgcG9vbCB3aWxsIGJlIGxlc3MgdGhhbiB0aGUgYW1vdW50uXJlcXVlc3RlZCB0byBiZSB1bmJvbmRlZC7eAASkbmFtZalXaXRoZHJhd26mZmllbGRzlN4ABKRuYW1lpm1lbWJlcqR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZadwb29sX2lkpHR5cGUEqHR5cGVOYW1lplBvb2xJZKRkb2NzkN4ABKRuYW1lp2JhbGFuY2WkdHlwZQaodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQ3gAEpG5hbWWmcG9pbnRzpHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkKVpbmRleASkZG9jc5bZJ0EgbWVtYmVyIGhhcyB3aXRoZHJhd24gZnJvbSB0aGVpciBwb29sLqDZSFRoZSBnaXZlbiBudW1iZXIgb2YgYHBvaW50c2AgaGF2ZSBiZWVuIGRpc3NvbHZlZCBpbiByZXR1cm4gb2YgYGJhbGFuY2VgLqDZVlNpbWlsYXIgdG8gYFVuYm9uZGVkYCBldmVudCwgaW4gdGhlIGFic2VuY2Ugb2Ygc2xhc2hpbmcsIHRoZSByYXRpbyBvZiBwb2ludCB0byBiYWxhbmNlqndpbGwgYmUgMS7eAASkbmFtZalEZXN0cm95ZWSmZmllbGRzkd4ABKRuYW1lp3Bvb2xfaWSkdHlwZQSodHlwZU5hbWWmUG9vbElkpGRvY3OQpWluZGV4BaRkb2NzkbpBIHBvb2wgaGFzIGJlZW4gZGVzdHJveWVkLt4ABKRuYW1lrFN0YXRlQ2hhbmdlZKZmaWVsZHOS3gAEpG5hbWWncG9vbF9pZKR0eXBlBKh0eXBlTmFtZaZQb29sSWSkZG9jc5DeAASkbmFtZaluZXdfc3RhdGWkdHlwZcxQqHR5cGVOYW1lqVBvb2xTdGF0ZaRkb2NzkKVpbmRleAakZG9jc5G/VGhlIHN0YXRlIG9mIGEgcG9vbCBoYXMgY2hhbmdlZN4ABKRuYW1lrU1lbWJlclJlbW92ZWSmZmllbGRzkt4ABKRuYW1lp3Bvb2xfaWSkdHlwZQSodHlwZU5hbWWmUG9vbElkpGRvY3OQ3gAEpG5hbWWmbWVtYmVypHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkKVpbmRleAekZG9jc5PZJkEgbWVtYmVyIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBhIHBvb2wuoNlUVGhlIHJlbW92YWwgY2FuIGJlIHZvbHVudGFyeSAod2l0aGRyYXduIGFsbCB1bmJvbmRlZCBmdW5kcykgb3IgaW52b2x1bnRhcnkgKGtpY2tlZCku3gAEpG5hbWWsUm9sZXNVcGRhdGVkpmZpZWxkc5PeAASkbmFtZaRyb290pHR5cGXMQ6h0eXBlTmFtZbRPcHRpb248VDo6QWNjb3VudElkPqRkb2NzkN4ABKRuYW1lp2JvdW5jZXKkdHlwZcxDqHR5cGVOYW1ltE9wdGlvbjxUOjpBY2NvdW50SWQ+pGRvY3OQ3gAEpG5hbWWpbm9taW5hdG9ypHR5cGXMQ6h0eXBlTmFtZbRPcHRpb248VDo6QWNjb3VudElkPqRkb2NzkKVpbmRleAikZG9jc5LZVVRoZSByb2xlcyBvZiBhIHBvb2wgaGF2ZSBiZWVuIHVwZGF0ZWQgdG8gdGhlIGdpdmVuIG5ldyByb2xlcy4gTm90ZSB0aGF0IHRoZSBkZXBvc2l0b3KxY2FuIG5ldmVyIGNoYW5nZS7eAASkbmFtZatQb29sU2xhc2hlZKZmaWVsZHOS3gAEpG5hbWWncG9vbF9pZKR0eXBlBKh0eXBlTmFtZaZQb29sSWSkZG9jc5DeAASkbmFtZadiYWxhbmNlpHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkKVpbmRleAmkZG9jc5HZQ1RoZSBhY3RpdmUgYmFsYW5jZSBvZiBwb29sIGBwb29sX2lkYCBoYXMgYmVlbiBzbGFzaGVkIHRvIGBiYWxhbmNlYC7eAASkbmFtZbRVbmJvbmRpbmdQb29sU2xhc2hlZKZmaWVsZHOT3gAEpG5hbWWncG9vbF9pZKR0eXBlBKh0eXBlTmFtZaZQb29sSWSkZG9jc5DeAASkbmFtZaNlcmGkdHlwZQSodHlwZU5hbWWoRXJhSW5kZXikZG9jc5DeAASkbmFtZadiYWxhbmNlpHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkKVpbmRleAqkZG9jc5HZSVRoZSB1bmJvbmQgcG9vbCBhdCBgZXJhYCBvZiBwb29sIGBwb29sX2lkYCBoYXMgYmVlbiBzbGFzaGVkIHRvIGBiYWxhbmNlYC7eAASkbmFtZbVQb29sQ29tbWlzc2lvblVwZGF0ZWSmZmllbGRzkt4ABKRuYW1lp3Bvb2xfaWSkdHlwZQSodHlwZU5hbWWmUG9vbElkpGRvY3OQ3gAEpG5hbWWnY3VycmVudKR0eXBlzFGodHlwZU5hbWW/T3B0aW9uPChQZXJiaWxsLCBUOjpBY2NvdW50SWQpPqRkb2NzkKVpbmRleAukZG9jc5HZLUEgcG9vbCdzIGNvbW1pc3Npb24gc2V0dGluZyBoYXMgYmVlbiBjaGFuZ2VkLt4ABKRuYW1luFBvb2xNYXhDb21taXNzaW9uVXBkYXRlZKZmaWVsZHOS3gAEpG5hbWWncG9vbF9pZKR0eXBlBKh0eXBlTmFtZaZQb29sSWSkZG9jc5DeAASkbmFtZa5tYXhfY29tbWlzc2lvbqR0eXBlIqh0eXBlTmFtZadQZXJiaWxspGRvY3OQpWluZGV4DKRkb2Nzkdk1QSBwb29sJ3MgbWF4aW11bSBjb21taXNzaW9uIHNldHRpbmcgaGFzIGJlZW4gY2hhbmdlZC7eAASkbmFtZb9Qb29sQ29tbWlzc2lvbkNoYW5nZVJhdGVVcGRhdGVkpmZpZWxkc5LeAASkbmFtZadwb29sX2lkpHR5cGUEqHR5cGVOYW1lplBvb2xJZKRkb2NzkN4ABKRuYW1lq2NoYW5nZV9yYXRlpHR5cGXMU6h0eXBlTmFtZdkkQ29tbWlzc2lvbkNoYW5nZVJhdGU8VDo6QmxvY2tOdW1iZXI+pGRvY3OQpWluZGV4DaRkb2NzkdkzQSBwb29sJ3MgY29tbWlzc2lvbiBgY2hhbmdlX3JhdGVgIGhhcyBiZWVuIGNoYW5nZWQu3gAEpG5hbWW1UG9vbENvbW1pc3Npb25DbGFpbWVkpmZpZWxkc5LeAASkbmFtZadwb29sX2lkpHR5cGUEqHR5cGVOYW1lplBvb2xJZKRkb2NzkN4ABKRuYW1lqmNvbW1pc3Npb26kdHlwZQaodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQpWluZGV4DqRkb2NzkdkhUG9vbCBjb21taXNzaW9uIGhhcyBiZWVuIGNsYWltZWQupGRvY3ORtkV2ZW50cyBvZiB0aGlzIHBhbGxldC7eAAKiaWTMUKR0eXBl3gAEpHBhdGiSt3BhbGxldF9ub21pbmF0aW9uX3Bvb2xzqVBvb2xTdGF0ZaZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzk94ABKRuYW1lpE9wZW6mZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZadCbG9ja2VkpmZpZWxkc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWqRGVzdHJveWluZ6ZmaWVsZHOQpWluZGV4AqRkb2NzkKRkb2NzkN4AAqJpZMxRpHR5cGXeAASkcGF0aJGmT3B0aW9upnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXMUqNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZaROb25lpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWkU29tZaZmaWVsZHOR3gAEpG5hbWXApHR5cGXMUqh0eXBlTmFtZcCkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzFKkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZIiAKRkb2NzkN4AAqJpZMxTpHR5cGXeAASkcGF0aJK3cGFsbGV0X25vbWluYXRpb25fcG9vbHO0Q29tbWlzc2lvbkNoYW5nZVJhdGWmcGFyYW1zkd4AAqRuYW1lq0Jsb2NrTnVtYmVypHR5cGUEo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lrG1heF9pbmNyZWFzZaR0eXBlIqh0eXBlTmFtZadQZXJiaWxspGRvY3OQ3gAEpG5hbWWpbWluX2RlbGF5pHR5cGUEqHR5cGVOYW1lq0Jsb2NrTnVtYmVypGRvY3OQpGRvY3OQ3gAComlkzFSkdHlwZd4ABKRwYXRok7NwYWxsZXRfZmFzdF91bnN0YWtlpnBhbGxldKVFdmVudKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5XeAASkbmFtZahVbnN0YWtlZKZmaWVsZHOS3gAEpG5hbWWlc3Rhc2ikdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWmcmVzdWx0pHR5cGU5qHR5cGVOYW1lrkRpc3BhdGNoUmVzdWx0pGRvY3OQpWluZGV4AKRkb2NzkbZBIHN0YWtlciB3YXMgdW5zdGFrZWQu3gAEpG5hbWWnU2xhc2hlZKZmaWVsZHOS3gAEpG5hbWWlc3Rhc2ikdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWmYW1vdW50pHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkKVpbmRleAGkZG9jc5HZRkEgc3Rha2VyIHdhcyBzbGFzaGVkIGZvciByZXF1ZXN0aW5nIGZhc3QtdW5zdGFrZSB3aGlsc3QgYmVpbmcgZXhwb3NlZC7eAASkbmFtZa1JbnRlcm5hbEVycm9ypmZpZWxkc5ClaW5kZXgCpGRvY3OR2TpBbiBpbnRlcm5hbCBlcnJvciBoYXBwZW5lZC4gT3BlcmF0aW9ucyB3aWxsIGJlIHBhdXNlZCBub3cu3gAEpG5hbWWsQmF0Y2hDaGVja2VkpmZpZWxkc5HeAASkbmFtZaRlcmFzpHR5cGXMVah0eXBlTmFtZa1WZWM8RXJhSW5kZXg+pGRvY3OQpWluZGV4A6Rkb2NzkdlRQSBiYXRjaCB3YXMgcGFydGlhbGx5IGNoZWNrZWQgZm9yIHRoZSBnaXZlbiBlcmFzLCBidXQgdGhlIHByb2Nlc3MgZGlkIG5vdCBmaW5pc2gu3gAEpG5hbWWtQmF0Y2hGaW5pc2hlZKZmaWVsZHOR3gAEpG5hbWWkc2l6ZaR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXgEpGRvY3OU2SdBIGJhdGNoIG9mIGEgZ2l2ZW4gc2l6ZSB3YXMgdGVybWluYXRlZC6g2VVUaGlzIGlzIGFsd2F5cyBmb2xsb3dzIGJ5IGEgbnVtYmVyIG9mIGBVbnN0YWtlZGAgb3IgYFNsYXNoZWRgIGV2ZW50cywgbWFya2luZyB0aGUgZW5k2TpvZiB0aGUgYmF0Y2guIEEgbmV3IGJhdGNoIHdpbGwgYmUgY3JlYXRlZCB1cG9uIG5leHQgYmxvY2supGRvY3ORulRoZSBldmVudHMgb2YgdGhpcyBwYWxsZXQu3gAComlkzFWkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlBKRkb2NzkN4AAqJpZMxWpHR5cGXeAASkcGF0aJS7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zqWluY2x1c2lvbqZwYWxsZXSlRXZlbnSmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWWvQ2FuZGlkYXRlQmFja2VkpmZpZWxkc5TeAASkbmFtZcCkdHlwZcxXqHR5cGVOYW1luUNhbmRpZGF0ZVJlY2VpcHQ8VDo6SGFzaD6kZG9jc5DeAASkbmFtZcCkdHlwZcxfqHR5cGVOYW1lqEhlYWREYXRhpGRvY3OQ3gAEpG5hbWXApHR5cGXMYKh0eXBlTmFtZalDb3JlSW5kZXikZG9jc5DeAASkbmFtZcCkdHlwZcxhqHR5cGVOYW1lqkdyb3VwSW5kZXikZG9jc5ClaW5kZXgApGRvY3OR2TBBIGNhbmRpZGF0ZSB3YXMgYmFja2VkLiBgW2NhbmRpZGF0ZSwgaGVhZF9kYXRhXWDeAASkbmFtZbFDYW5kaWRhdGVJbmNsdWRlZKZmaWVsZHOU3gAEpG5hbWXApHR5cGXMV6h0eXBlTmFtZblDYW5kaWRhdGVSZWNlaXB0PFQ6Okhhc2g+pGRvY3OQ3gAEpG5hbWXApHR5cGXMX6h0eXBlTmFtZahIZWFkRGF0YaRkb2NzkN4ABKRuYW1lwKR0eXBlzGCodHlwZU5hbWWpQ29yZUluZGV4pGRvY3OQ3gAEpG5hbWXApHR5cGXMYah0eXBlTmFtZapHcm91cEluZGV4pGRvY3OQpWluZGV4AaRkb2NzkdkyQSBjYW5kaWRhdGUgd2FzIGluY2x1ZGVkLiBgW2NhbmRpZGF0ZSwgaGVhZF9kYXRhXWDeAASkbmFtZbFDYW5kaWRhdGVUaW1lZE91dKZmaWVsZHOT3gAEpG5hbWXApHR5cGXMV6h0eXBlTmFtZblDYW5kaWRhdGVSZWNlaXB0PFQ6Okhhc2g+pGRvY3OQ3gAEpG5hbWXApHR5cGXMX6h0eXBlTmFtZahIZWFkRGF0YaRkb2NzkN4ABKRuYW1lwKR0eXBlzGCodHlwZU5hbWWpQ29yZUluZGV4pGRvY3OQpWluZGV4AqRkb2NzkdkvQSBjYW5kaWRhdGUgdGltZWQgb3V0LiBgW2NhbmRpZGF0ZSwgaGVhZF9kYXRhXWCkZG9jc5HZaAoJCQlUaGUgW2V2ZW50XShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykgZW1pdHRlZAoJCQlieSB0aGlzIHBhbGxldC4KCQkJ3gAComlkzFekdHlwZd4ABKRwYXRok7Nwb2xrYWRvdF9wcmltaXRpdmVzonYysENhbmRpZGF0ZVJlY2VpcHSmcGFyYW1zkd4AAqRuYW1loUikdHlwZQujZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOS3gAEpG5hbWWqZGVzY3JpcHRvcqR0eXBlzFiodHlwZU5hbWW2Q2FuZGlkYXRlRGVzY3JpcHRvcjxIPqRkb2NzkN4ABKRuYW1lsGNvbW1pdG1lbnRzX2hhc2ikdHlwZQuodHlwZU5hbWWkSGFzaKRkb2NzkKRkb2NzkN4AAqJpZMxYpHR5cGXeAASkcGF0aJOzcG9sa2Fkb3RfcHJpbWl0aXZlc6J2MrNDYW5kaWRhdGVEZXNjcmlwdG9ypnBhcmFtc5HeAAKkbmFtZaFIpHR5cGULo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzmd4ABKRuYW1lp3BhcmFfaWSkdHlwZcxZqHR5cGVOYW1loklkpGRvY3OQ3gAEpG5hbWWscmVsYXlfcGFyZW50pHR5cGULqHR5cGVOYW1loUikZG9jc5DeAASkbmFtZahjb2xsYXRvcqR0eXBlzFqodHlwZU5hbWWqQ29sbGF0b3JJZKRkb2NzkN4ABKRuYW1lvnBlcnNpc3RlZF92YWxpZGF0aW9uX2RhdGFfaGFzaKR0eXBlC6h0eXBlTmFtZaRIYXNopGRvY3OQ3gAEpG5hbWWocG92X2hhc2ikdHlwZQuodHlwZU5hbWWkSGFzaKRkb2NzkN4ABKRuYW1lrGVyYXN1cmVfcm9vdKR0eXBlC6h0eXBlTmFtZaRIYXNopGRvY3OQ3gAEpG5hbWWpc2lnbmF0dXJlpHR5cGXMW6h0eXBlTmFtZbFDb2xsYXRvclNpZ25hdHVyZaRkb2NzkN4ABKRuYW1lqXBhcmFfaGVhZKR0eXBlC6h0eXBlTmFtZaRIYXNopGRvY3OQ3gAEpG5hbWW0dmFsaWRhdGlvbl9jb2RlX2hhc2ikdHlwZcxeqHR5cGVOYW1lslZhbGlkYXRpb25Db2RlSGFzaKRkb2NzkKRkb2NzkN4AAqJpZMxZpHR5cGXeAASkcGF0aJOycG9sa2Fkb3RfcGFyYWNoYWluqnByaW1pdGl2ZXOiSWSmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpGRvY3OQ3gAComlkzFqkdHlwZd4ABKRwYXRolLNwb2xrYWRvdF9wcmltaXRpdmVzonYyrGNvbGxhdG9yX2FwcKZQdWJsaWOmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZTGodHlwZU5hbWWvc3IyNTUxOTo6UHVibGljpGRvY3OQpGRvY3OQ3gAComlkzFukdHlwZd4ABKRwYXRolLNwb2xrYWRvdF9wcmltaXRpdmVzonYyrGNvbGxhdG9yX2FwcKlTaWduYXR1cmWmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZcxcqHR5cGVOYW1lsnNyMjU1MTk6OlNpZ25hdHVyZaRkb2NzkKRkb2NzkN4AAqJpZMxcpHR5cGXeAASkcGF0aJOnc3BfY29yZadzcjI1NTE5qVNpZ25hdHVyZaZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzF2odHlwZU5hbWWoW3U4OyA2NF2kZG9jc5CkZG9jc5DeAAKiaWTMXaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbsxApHR5cGUCpGRvY3OQ3gAComlkzF6kdHlwZd4ABKRwYXRok7Jwb2xrYWRvdF9wYXJhY2hhaW6qcHJpbWl0aXZlc7JWYWxpZGF0aW9uQ29kZUhhc2imcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZQuodHlwZU5hbWWkSGFzaKRkb2NzkKRkb2NzkN4AAqJpZMxfpHR5cGXeAASkcGF0aJOycG9sa2Fkb3RfcGFyYWNoYWluqnByaW1pdGl2ZXOoSGVhZERhdGGmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZQyodHlwZU5hbWWnVmVjPHU4PqRkb2NzkKRkb2NzkN4AAqJpZMxgpHR5cGXeAASkcGF0aJOzcG9sa2Fkb3RfcHJpbWl0aXZlc6J2MqlDb3JlSW5kZXimcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpGRvY3OQ3gAComlkzGGkdHlwZd4ABKRwYXRok7Nwb2xrYWRvdF9wcmltaXRpdmVzonYyqkdyb3VwSW5kZXimcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpGRvY3OQ3gAComlkzGKkdHlwZd4ABKRwYXRolLtwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOlcGFyYXOmcGFsbGV0pUV2ZW50pnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOY3gAEpG5hbWWyQ3VycmVudENvZGVVcGRhdGVkpmZpZWxkc5HeAASkbmFtZcCkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkKVpbmRleACkZG9jc5HZM0N1cnJlbnQgY29kZSBoYXMgYmVlbiB1cGRhdGVkIGZvciBhIFBhcmEuIGBwYXJhX2lkYN4ABKRuYW1lskN1cnJlbnRIZWFkVXBkYXRlZKZmaWVsZHOR3gAEpG5hbWXApHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5ClaW5kZXgBpGRvY3OR2TNDdXJyZW50IGhlYWQgaGFzIGJlZW4gdXBkYXRlZCBmb3IgYSBQYXJhLiBgcGFyYV9pZGDeAASkbmFtZbRDb2RlVXBncmFkZVNjaGVkdWxlZKZmaWVsZHOR3gAEpG5hbWXApHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5ClaW5kZXgCpGRvY3OR2TdBIGNvZGUgdXBncmFkZSBoYXMgYmVlbiBzY2hlZHVsZWQgZm9yIGEgUGFyYS4gYHBhcmFfaWRg3gAEpG5hbWWsTmV3SGVhZE5vdGVkpmZpZWxkc5HeAASkbmFtZcCkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkKVpbmRleAOkZG9jc5HZL0EgbmV3IGhlYWQgaGFzIGJlZW4gbm90ZWQgZm9yIGEgUGFyYS4gYHBhcmFfaWRg3gAEpG5hbWWsQWN0aW9uUXVldWVkpmZpZWxkc5LeAASkbmFtZcCkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lwKR0eXBlBKh0eXBlTmFtZaxTZXNzaW9uSW5kZXikZG9jc5ClaW5kZXgEpGRvY3OR2TxBIHBhcmEgaGFzIGJlZW4gcXVldWVkIHRvIGV4ZWN1dGUgcGVuZGluZyBhY3Rpb25zLiBgcGFyYV9pZGDeAASkbmFtZa9QdmZDaGVja1N0YXJ0ZWSmZmllbGRzkt4ABKRuYW1lwKR0eXBlzF6odHlwZU5hbWWyVmFsaWRhdGlvbkNvZGVIYXNopGRvY3OQ3gAEpG5hbWXApHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5ClaW5kZXgFpGRvY3OS2VVUaGUgZ2l2ZW4gcGFyYSBlaXRoZXIgaW5pdGlhdGVkIG9yIHN1YnNjcmliZWQgdG8gYSBQVkYgY2hlY2sgZm9yIHRoZSBnaXZlbiB2YWxpZGF0aW9uu2NvZGUuIGBjb2RlX2hhc2hgIGBwYXJhX2lkYN4ABKRuYW1lsFB2ZkNoZWNrQWNjZXB0ZWSmZmllbGRzkt4ABKRuYW1lwKR0eXBlzF6odHlwZU5hbWWyVmFsaWRhdGlvbkNvZGVIYXNopGRvY3OQ3gAEpG5hbWXApHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5ClaW5kZXgGpGRvY3OS2URUaGUgZ2l2ZW4gdmFsaWRhdGlvbiBjb2RlIHdhcyBhY2NlcHRlZCBieSB0aGUgUFZGIHByZS1jaGVja2luZyB2b3RlLrVgY29kZV9oYXNoYCBgcGFyYV9pZGDeAASkbmFtZbBQdmZDaGVja1JlamVjdGVkpmZpZWxkc5LeAASkbmFtZcCkdHlwZcxeqHR5cGVOYW1lslZhbGlkYXRpb25Db2RlSGFzaKRkb2NzkN4ABKRuYW1lwKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQpWluZGV4B6Rkb2NzktlEVGhlIGdpdmVuIHZhbGlkYXRpb24gY29kZSB3YXMgcmVqZWN0ZWQgYnkgdGhlIFBWRiBwcmUtY2hlY2tpbmcgdm90ZS61YGNvZGVfaGFzaGAgYHBhcmFfaWRgpGRvY3OR2WgKCQkJVGhlIFtldmVudF0oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pIGVtaXR0ZWQKCQkJYnkgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZMxjpHR5cGXeAASkcGF0aJS7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zo3VtcKZwYWxsZXSlRXZlbnSmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5feAASkbmFtZa1JbnZhbGlkRm9ybWF0pmZpZWxkc5HeAASkbmFtZcCkdHlwZQGodHlwZU5hbWWpTWVzc2FnZUlkpGRvY3OQpWluZGV4AKRkb2Nzkr5VcHdhcmQgbWVzc2FnZSBpcyBpbnZhbGlkIFhDTS6oXFsgaWQgXF3eAASkbmFtZbJVbnN1cHBvcnRlZFZlcnNpb26mZmllbGRzkd4ABKRuYW1lwKR0eXBlAah0eXBlTmFtZalNZXNzYWdlSWSkZG9jc5ClaW5kZXgBpGRvY3OS2S1VcHdhcmQgbWVzc2FnZSBpcyB1bnN1cHBvcnRlZCB2ZXJzaW9uIG9mIFhDTS6oXFsgaWQgXF3eAASkbmFtZa5FeGVjdXRlZFVwd2FyZKZmaWVsZHOS3gAEpG5hbWXApHR5cGUBqHR5cGVOYW1lqU1lc3NhZ2VJZKRkb2NzkN4ABKRuYW1lwKR0eXBlzGSodHlwZU5hbWWnT3V0Y29tZaRkb2NzkKVpbmRleAKkZG9jc5LZL1Vwd2FyZCBtZXNzYWdlIGV4ZWN1dGVkIHdpdGggdGhlIGdpdmVuIG91dGNvbWUusVxbIGlkLCBvdXRjb21lIFxd3gAEpG5hbWWvV2VpZ2h0RXhoYXVzdGVkpmZpZWxkc5PeAASkbmFtZcCkdHlwZQGodHlwZU5hbWWpTWVzc2FnZUlkpGRvY3OQ3gAEpG5hbWXApHR5cGUIqHR5cGVOYW1lpldlaWdodKRkb2NzkN4ABKRuYW1lwKR0eXBlCKh0eXBlTmFtZaZXZWlnaHSkZG9jc5ClaW5kZXgDpGRvY3OS2TpUaGUgd2VpZ2h0IGxpbWl0IGZvciBoYW5kbGluZyB1cHdhcmQgbWVzc2FnZXMgd2FzIHJlYWNoZWQuvVxbIGlkLCByZW1haW5pbmcsIHJlcXVpcmVkIFxd3gAEpG5hbWW2VXB3YXJkTWVzc2FnZXNSZWNlaXZlZKZmaWVsZHOT3gAEpG5hbWXApHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5DeAASkbmFtZcCkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWXApHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleASkZG9jc5LZPlNvbWUgdXB3YXJkIG1lc3NhZ2VzIGhhdmUgYmVlbiByZWNlaXZlZCBhbmQgd2lsbCBiZSBwcm9jZXNzZWQut1xbIHBhcmEsIGNvdW50LCBzaXplIFxd3gAEpG5hbWWyT3ZlcndlaWdodEVucXVldWVkpmZpZWxkc5TeAASkbmFtZcCkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lwKR0eXBlAah0eXBlTmFtZalNZXNzYWdlSWSkZG9jc5DeAASkbmFtZcCkdHlwZQqodHlwZU5hbWWvT3ZlcndlaWdodEluZGV4pGRvY3OQ3gAEpG5hbWXApHR5cGUIqHR5cGVOYW1lpldlaWdodKRkb2NzkKVpbmRleAWkZG9jc5bZQFRoZSB3ZWlnaHQgYnVkZ2V0IHdhcyBleGNlZWRlZCBmb3IgYW4gaW5kaXZpZHVhbCB1cHdhcmQgbWVzc2FnZS6g2VVUaGlzIG1lc3NhZ2UgY2FuIGJlIGxhdGVyIGRpc3BhdGNoZWQgbWFudWFsbHkgdXNpbmcgYHNlcnZpY2Vfb3ZlcndlaWdodGAgZGlzcGF0Y2hhYmxl2SZ1c2luZyB0aGUgYXNzaWduZWQgYG92ZXJ3ZWlnaHRfaW5kZXhgLqDZKlxbIHBhcmEsIGlkLCBvdmVyd2VpZ2h0X2luZGV4LCByZXF1aXJlZCBcXd4ABKRuYW1lsk92ZXJ3ZWlnaHRTZXJ2aWNlZKZmaWVsZHOS3gAEpG5hbWXApHR5cGUKqHR5cGVOYW1lr092ZXJ3ZWlnaHRJbmRleKRkb2NzkN4ABKRuYW1lwKR0eXBlCKh0eXBlTmFtZaZXZWlnaHSkZG9jc5ClaW5kZXgGpGRvY3OU2VJVcHdhcmQgbWVzc2FnZSBmcm9tIHRoZSBvdmVyd2VpZ2h0IHF1ZXVlIHdhcyBleGVjdXRlZCB3aXRoIHRoZSBnaXZlbiBhY3R1YWwgd2VpZ2h0pXVzZWQuoLxcWyBvdmVyd2VpZ2h0X2luZGV4LCB1c2VkIFxdpGRvY3OR2WgKCQkJVGhlIFtldmVudF0oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pIGVtaXR0ZWQKCQkJYnkgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZMxkpHR5cGXeAASkcGF0aJSjeGNtonYzpnRyYWl0c6dPdXRjb21lpnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWWoQ29tcGxldGWmZmllbGRzkd4ABKRuYW1lwKR0eXBlCKh0eXBlTmFtZaZXZWlnaHSkZG9jc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWqSW5jb21wbGV0ZaZmaWVsZHOS3gAEpG5hbWXApHR5cGUIqHR5cGVOYW1lpldlaWdodKRkb2NzkN4ABKRuYW1lwKR0eXBlzGWodHlwZU5hbWWlRXJyb3KkZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWlRXJyb3KmZmllbGRzkd4ABKRuYW1lwKR0eXBlzGWodHlwZU5hbWWlRXJyb3KkZG9jc5ClaW5kZXgCpGRvY3OQpGRvY3OQ3gAComlkzGWkdHlwZd4ABKRwYXRolKN4Y22idjOmdHJhaXRzpUVycm9ypnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHPcACjeAASkbmFtZahPdmVyZmxvd6ZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lrVVuaW1wbGVtZW50ZWSmZmllbGRzkKVpbmRleAGkZG9jc5DeAASkbmFtZbhVbnRydXN0ZWRSZXNlcnZlTG9jYXRpb26mZmllbGRzkKVpbmRleAKkZG9jc5DeAASkbmFtZblVbnRydXN0ZWRUZWxlcG9ydExvY2F0aW9upmZpZWxkc5ClaW5kZXgDpGRvY3OQ3gAEpG5hbWWsTG9jYXRpb25GdWxspmZpZWxkc5ClaW5kZXgEpGRvY3OQ3gAEpG5hbWW1TG9jYXRpb25Ob3RJbnZlcnRpYmxlpmZpZWxkc5ClaW5kZXgFpGRvY3OQ3gAEpG5hbWWpQmFkT3JpZ2lupmZpZWxkc5ClaW5kZXgGpGRvY3OQ3gAEpG5hbWWvSW52YWxpZExvY2F0aW9upmZpZWxkc5ClaW5kZXgHpGRvY3OQ3gAEpG5hbWWtQXNzZXROb3RGb3VuZKZmaWVsZHOQpWluZGV4CKRkb2NzkN4ABKRuYW1ltUZhaWxlZFRvVHJhbnNhY3RBc3NldKZmaWVsZHOQpWluZGV4CaRkb2NzkN4ABKRuYW1lr05vdFdpdGhkcmF3YWJsZaZmaWVsZHOQpWluZGV4CqRkb2NzkN4ABKRuYW1lskxvY2F0aW9uQ2Fubm90SG9sZKZmaWVsZHOQpWluZGV4C6Rkb2NzkN4ABKRuYW1ltUV4Y2VlZHNNYXhNZXNzYWdlU2l6ZaZmaWVsZHOQpWluZGV4DKRkb2NzkN4ABKRuYW1ltkRlc3RpbmF0aW9uVW5zdXBwb3J0ZWSmZmllbGRzkKVpbmRleA2kZG9jc5DeAASkbmFtZalUcmFuc3BvcnSmZmllbGRzkKVpbmRleA6kZG9jc5DeAASkbmFtZapVbnJvdXRhYmxlpmZpZWxkc5ClaW5kZXgPpGRvY3OQ3gAEpG5hbWWsVW5rbm93bkNsYWltpmZpZWxkc5ClaW5kZXgQpGRvY3OQ3gAEpG5hbWWuRmFpbGVkVG9EZWNvZGWmZmllbGRzkKVpbmRleBGkZG9jc5DeAASkbmFtZbBNYXhXZWlnaHRJbnZhbGlkpmZpZWxkc5ClaW5kZXgSpGRvY3OQ3gAEpG5hbWWuTm90SG9sZGluZ0ZlZXOmZmllbGRzkKVpbmRleBOkZG9jc5DeAASkbmFtZaxUb29FeHBlbnNpdmWmZmllbGRzkKVpbmRleBSkZG9jc5DeAASkbmFtZaRUcmFwpmZpZWxkc5HeAASkbmFtZcCkdHlwZQqodHlwZU5hbWWjdTY0pGRvY3OQpWluZGV4FaRkb2NzkN4ABKRuYW1lsEV4cGVjdGF0aW9uRmFsc2WmZmllbGRzkKVpbmRleBakZG9jc5DeAASkbmFtZa5QYWxsZXROb3RGb3VuZKZmaWVsZHOQpWluZGV4F6Rkb2NzkN4ABKRuYW1lrE5hbWVNaXNtYXRjaKZmaWVsZHOQpWluZGV4GKRkb2NzkN4ABKRuYW1ls1ZlcnNpb25JbmNvbXBhdGlibGWmZmllbGRzkKVpbmRleBmkZG9jc5DeAASkbmFtZbRIb2xkaW5nV291bGRPdmVyZmxvd6ZmaWVsZHOQpWluZGV4GqRkb2NzkN4ABKRuYW1lq0V4cG9ydEVycm9ypmZpZWxkc5ClaW5kZXgbpGRvY3OQ3gAEpG5hbWWuUmVhbmNob3JGYWlsZWSmZmllbGRzkKVpbmRleBykZG9jc5DeAASkbmFtZaZOb0RlYWymZmllbGRzkKVpbmRleB2kZG9jc5DeAASkbmFtZapGZWVzTm90TWV0pmZpZWxkc5ClaW5kZXgepGRvY3OQ3gAEpG5hbWWpTG9ja0Vycm9ypmZpZWxkc5ClaW5kZXgfpGRvY3OQ3gAEpG5hbWWsTm9QZXJtaXNzaW9upmZpZWxkc5ClaW5kZXggpGRvY3OQ3gAEpG5hbWWqVW5hbmNob3JlZKZmaWVsZHOQpWluZGV4IaRkb2NzkN4ABKRuYW1lrk5vdERlcG9zaXRhYmxlpmZpZWxkc5ClaW5kZXgipGRvY3OQ3gAEpG5hbWWzVW5oYW5kbGVkWGNtVmVyc2lvbqZmaWVsZHOQpWluZGV4I6Rkb2NzkN4ABKRuYW1lsldlaWdodExpbWl0UmVhY2hlZKZmaWVsZHOR3gAEpG5hbWXApHR5cGUIqHR5cGVOYW1lpldlaWdodKRkb2NzkKVpbmRleCSkZG9jc5DeAASkbmFtZadCYXJyaWVypmZpZWxkc5ClaW5kZXglpGRvY3OQ3gAEpG5hbWWzV2VpZ2h0Tm90Q29tcHV0YWJsZaZmaWVsZHOQpWluZGV4JqRkb2NzkN4ABKRuYW1lsUV4Y2VlZHNTdGFja0xpbWl0pmZpZWxkc5ClaW5kZXgnpGRvY3OQpGRvY3OQ3gAComlkzGakdHlwZd4ABKRwYXRolLtwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOkaHJtcKZwYWxsZXSlRXZlbnSmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOV3gAEpG5hbWW0T3BlbkNoYW5uZWxSZXF1ZXN0ZWSmZmllbGRzlN4ABKRuYW1lwKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQ3gAEpG5hbWXApHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5DeAASkbmFtZcCkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWXApHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleACkZG9jc5K8T3BlbiBIUk1QIGNoYW5uZWwgcmVxdWVzdGVkLtlHYFtzZW5kZXIsIHJlY2lwaWVudCwgcHJvcG9zZWRfbWF4X2NhcGFjaXR5LCBwcm9wb3NlZF9tYXhfbWVzc2FnZV9zaXplXWDeAASkbmFtZbNPcGVuQ2hhbm5lbENhbmNlbGVkpmZpZWxkc5LeAASkbmFtZcCkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lwKR0eXBlzGeodHlwZU5hbWWtSHJtcENoYW5uZWxJZKRkb2NzkKVpbmRleAGkZG9jc5LZSkFuIEhSTVAgY2hhbm5lbCByZXF1ZXN0IHNlbnQgYnkgdGhlIHJlY2VpdmVyIHdhcyBjYW5jZWxlZCBieSBlaXRoZXIgcGFydHkuvGBbYnlfcGFyYWNoYWluLCBjaGFubmVsX2lkXWDeAASkbmFtZbNPcGVuQ2hhbm5lbEFjY2VwdGVkpmZpZWxkc5LeAASkbmFtZcCkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lwKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQpWluZGV4AqRkb2NzkdkxT3BlbiBIUk1QIGNoYW5uZWwgYWNjZXB0ZWQuIGBbc2VuZGVyLCByZWNpcGllbnRdYN4ABKRuYW1lrUNoYW5uZWxDbG9zZWSmZmllbGRzkt4ABKRuYW1lwKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQ3gAEpG5hbWXApHR5cGXMZ6h0eXBlTmFtZa1Icm1wQ2hhbm5lbElkpGRvY3OQpWluZGV4A6Rkb2NzkdkxSFJNUCBjaGFubmVsIGNsb3NlZC4gYFtieV9wYXJhY2hhaW4sIGNoYW5uZWxfaWRdYN4ABKRuYW1ltkhybXBDaGFubmVsRm9yY2VPcGVuZWSmZmllbGRzlN4ABKRuYW1lwKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQ3gAEpG5hbWXApHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5DeAASkbmFtZcCkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWXApHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleASkZG9jc5LZK0FuIEhSTVAgY2hhbm5lbCB3YXMgb3BlbmVkIHZpYSBSb290IG9yaWdpbi7ZR2Bbc2VuZGVyLCByZWNpcGllbnQsIHByb3Bvc2VkX21heF9jYXBhY2l0eSwgcHJvcG9zZWRfbWF4X21lc3NhZ2Vfc2l6ZV1gpGRvY3OR2WgKCQkJVGhlIFtldmVudF0oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pIGVtaXR0ZWQKCQkJYnkgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZMxnpHR5cGXeAASkcGF0aJOycG9sa2Fkb3RfcGFyYWNoYWluqnByaW1pdGl2ZXOtSHJtcENoYW5uZWxJZKZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lpnNlbmRlcqR0eXBlzFmodHlwZU5hbWWiSWSkZG9jc5DeAASkbmFtZalyZWNpcGllbnSkdHlwZcxZqHR5cGVOYW1loklkpGRvY3OQpGRvY3OQ3gAComlkzGikdHlwZd4ABKRwYXRolLtwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOoZGlzcHV0ZXOmcGFsbGV0pUV2ZW50pnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzlN4ABKRuYW1lsERpc3B1dGVJbml0aWF0ZWSmZmllbGRzkt4ABKRuYW1lwKR0eXBlzGmodHlwZU5hbWWtQ2FuZGlkYXRlSGFzaKRkb2NzkN4ABKRuYW1lwKR0eXBlzGqodHlwZU5hbWWvRGlzcHV0ZUxvY2F0aW9upGRvY3OQpWluZGV4AKRkb2NzkdlCQSBkaXNwdXRlIGhhcyBiZWVuIGluaXRpYXRlZC4gXFtjYW5kaWRhdGUgaGFzaCwgZGlzcHV0ZSBsb2NhdGlvblxd3gAEpG5hbWWwRGlzcHV0ZUNvbmNsdWRlZKZmaWVsZHOS3gAEpG5hbWXApHR5cGXMaah0eXBlTmFtZa1DYW5kaWRhdGVIYXNopGRvY3OQ3gAEpG5hbWXApHR5cGXMa6h0eXBlTmFtZa1EaXNwdXRlUmVzdWx0pGRvY3OQpWluZGV4AaRkb2NzktkzQSBkaXNwdXRlIGhhcyBjb25jbHVkZWQgZm9yIG9yIGFnYWluc3QgYSBjYW5kaWRhdGUu2S1gXFtwYXJhIGlkLCBjYW5kaWRhdGUgaGFzaCwgZGlzcHV0ZSByZXN1bHRcXWDeAASkbmFtZa9EaXNwdXRlVGltZWRPdXSmZmllbGRzkd4ABKRuYW1lwKR0eXBlzGmodHlwZU5hbWWtQ2FuZGlkYXRlSGFzaKRkb2NzkKVpbmRleAKkZG9jc5LZOkEgZGlzcHV0ZSBoYXMgdGltZWQgb3V0IGR1ZSB0byBpbnN1ZmZpY2llbnQgcGFydGljaXBhdGlvbi69YFxbcGFyYSBpZCwgY2FuZGlkYXRlIGhhc2hcXWDeAASkbmFtZaZSZXZlcnSmZmllbGRzkd4ABKRuYW1lwKR0eXBlBKh0eXBlTmFtZa5UOjpCbG9ja051bWJlcqRkb2NzkKVpbmRleAOkZG9jc5TZP0EgZGlzcHV0ZSBoYXMgY29uY2x1ZGVkIHdpdGggc3VwZXJtYWpvcml0eSBhZ2FpbnN0IGEgY2FuZGlkYXRlLtlDQmxvY2sgYXV0aG9ycyBzaG91bGQgbm8gbG9uZ2VyIGJ1aWxkIG9uIHRvcCBvZiB0aGlzIGhlYWQgYW5kIHNob3VsZNlAaW5zdGVhZCByZXZlcnQgdGhlIGJsb2NrIGF0IHRoZSBnaXZlbiBoZWlnaHQuIFRoaXMgc2hvdWxkIGJlIHRoZdk/bnVtYmVyIG9mIHRoZSBjaGlsZCBvZiB0aGUgbGFzdCBrbm93biB2YWxpZCBibG9jayBpbiB0aGUgY2hhaW4upGRvY3OR2WgKCQkJVGhlIFtldmVudF0oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pIGVtaXR0ZWQKCQkJYnkgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZMxppHR5cGXeAASkcGF0aJK4cG9sa2Fkb3RfY29yZV9wcmltaXRpdmVzrUNhbmRpZGF0ZUhhc2imcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZQuodHlwZU5hbWWkSGFzaKRkb2NzkKRkb2NzkN4AAqJpZMxqpHR5cGXeAASkcGF0aJO7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zqGRpc3B1dGVzr0Rpc3B1dGVMb2NhdGlvbqZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lpUxvY2FspmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWmUmVtb3RlpmZpZWxkc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzGukdHlwZd4ABKRwYXRok7twb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOoZGlzcHV0ZXOtRGlzcHV0ZVJlc3VsdKZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lpVZhbGlkpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWnSW52YWxpZKZmaWVsZHOQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZMxspHR5cGXeAASkcGF0aJS3cG9sa2Fkb3RfcnVudGltZV9jb21tb26vcGFyYXNfcmVnaXN0cmFypnBhbGxldKVFdmVudKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5PeAASkbmFtZapSZWdpc3RlcmVkpmZpZWxkc5LeAASkbmFtZadwYXJhX2lkpHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5DeAASkbmFtZadtYW5hZ2VypHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkKVpbmRleACkZG9jc5DeAASkbmFtZaxEZXJlZ2lzdGVyZWSmZmllbGRzkd4ABKRuYW1lp3BhcmFfaWSkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkKVpbmRleAGkZG9jc5DeAASkbmFtZahSZXNlcnZlZKZmaWVsZHOS3gAEpG5hbWWncGFyYV9pZKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQ3gAEpG5hbWWjd2hvpHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkKVpbmRleAKkZG9jc5CkZG9jc5HZaAoJCQlUaGUgW2V2ZW50XShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykgZW1pdHRlZAoJCQlieSB0aGlzIHBhbGxldC4KCQkJ3gAComlkzG2kdHlwZd4ABKRwYXRolLdwb2xrYWRvdF9ydW50aW1lX2NvbW1vbqVzbG90c6ZwYWxsZXSlRXZlbnSmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWuTmV3TGVhc2VQZXJpb2SmZmllbGRzkd4ABKRuYW1lrGxlYXNlX3BlcmlvZKR0eXBlBKh0eXBlTmFtZbBMZWFzZVBlcmlvZE9mPFQ+pGRvY3OQpWluZGV4AKRkb2NzkdkkQSBuZXcgYFtsZWFzZV9wZXJpb2RdYCBpcyBiZWdpbm5pbmcu3gAEpG5hbWWmTGVhc2VkpmZpZWxkc5beAASkbmFtZadwYXJhX2lkpHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5DeAASkbmFtZaZsZWFzZXKkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWscGVyaW9kX2JlZ2lupHR5cGUEqHR5cGVOYW1lsExlYXNlUGVyaW9kT2Y8VD6kZG9jc5DeAASkbmFtZaxwZXJpb2RfY291bnSkdHlwZQSodHlwZU5hbWWwTGVhc2VQZXJpb2RPZjxUPqRkb2NzkN4ABKRuYW1lrmV4dHJhX3Jlc2VydmVkpHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkN4ABKRuYW1lrHRvdGFsX2Ftb3VudKR0eXBlBqh0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5ClaW5kZXgBpGRvY3OT2U1BIHBhcmEgaGFzIHdvbiB0aGUgcmlnaHQgdG8gYSBjb250aW51b3VzIHNldCBvZiBsZWFzZSBwZXJpb2RzIGFzIGEgcGFyYWNoYWluLtlRRmlyc3QgYmFsYW5jZSBpcyBhbnkgZXh0cmEgYW1vdW50IHJlc2VydmVkIG9uIHRvcCBvZiB0aGUgcGFyYSdzIGV4aXN0aW5nIGRlcG9zaXQu2SxTZWNvbmQgYmFsYW5jZSBpcyB0aGUgdG90YWwgYW1vdW50IHJlc2VydmVkLqRkb2NzkdloCgkJCVRoZSBbZXZlbnRdKGh0dHBzOi8vZG9jcy5zdWJzdHJhdGUuaW8vbWFpbi1kb2NzL2J1aWxkL2V2ZW50cy1lcnJvcnMvKSBlbWl0dGVkCgkJCWJ5IHRoaXMgcGFsbGV0LgoJCQneAAKiaWTMbqR0eXBl3gAEpHBhdGiUt3BvbGthZG90X3J1bnRpbWVfY29tbW9uqGF1Y3Rpb25zpnBhbGxldKVFdmVudKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5feAASkbmFtZa5BdWN0aW9uU3RhcnRlZKZmaWVsZHOT3gAEpG5hbWWtYXVjdGlvbl9pbmRleKR0eXBlBKh0eXBlTmFtZaxBdWN0aW9uSW5kZXikZG9jc5DeAASkbmFtZaxsZWFzZV9wZXJpb2SkdHlwZQSodHlwZU5hbWWwTGVhc2VQZXJpb2RPZjxUPqRkb2NzkN4ABKRuYW1lpmVuZGluZ6R0eXBlBKh0eXBlTmFtZa5UOjpCbG9ja051bWJlcqRkb2NzkKVpbmRleACkZG9jc5LZUkFuIGF1Y3Rpb24gc3RhcnRlZC4gUHJvdmlkZXMgaXRzIGluZGV4IGFuZCB0aGUgYmxvY2sgbnVtYmVyIHdoZXJlIGl0IHdpbGwgYmVnaW4gdG/ZRWNsb3NlIGFuZCB0aGUgZmlyc3QgbGVhc2UgcGVyaW9kIG9mIHRoZSBxdWFkcnVwbGV0IHRoYXQgaXMgYXVjdGlvbmVkLt4ABKRuYW1lrUF1Y3Rpb25DbG9zZWSmZmllbGRzkd4ABKRuYW1lrWF1Y3Rpb25faW5kZXikdHlwZQSodHlwZU5hbWWsQXVjdGlvbkluZGV4pGRvY3OQpWluZGV4AaRkb2NzkdkuQW4gYXVjdGlvbiBlbmRlZC4gQWxsIGZ1bmRzIGJlY29tZSB1bnJlc2VydmVkLt4ABKRuYW1lqFJlc2VydmVkpmZpZWxkc5PeAASkbmFtZaZiaWRkZXKkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWuZXh0cmFfcmVzZXJ2ZWSkdHlwZQaodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQ3gAEpG5hbWWsdG90YWxfYW1vdW50pHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkKVpbmRleAKkZG9jc5LZUkZ1bmRzIHdlcmUgcmVzZXJ2ZWQgZm9yIGEgd2lubmluZyBiaWQuIEZpcnN0IGJhbGFuY2UgaXMgdGhlIGV4dHJhIGFtb3VudCByZXNlcnZlZC60U2Vjb25kIGlzIHRoZSB0b3RhbC7eAASkbmFtZapVbnJlc2VydmVkpmZpZWxkc5LeAASkbmFtZaZiaWRkZXKkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWmYW1vdW50pHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkKVpbmRleAOkZG9jc5HZSkZ1bmRzIHdlcmUgdW5yZXNlcnZlZCBzaW5jZSBiaWRkZXIgaXMgbm8gbG9uZ2VyIGFjdGl2ZS4gYFtiaWRkZXIsIGFtb3VudF1g3gAEpG5hbWWyUmVzZXJ2ZUNvbmZpc2NhdGVkpmZpZWxkc5PeAASkbmFtZadwYXJhX2lkpHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5DeAASkbmFtZaZsZWFzZXKkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWmYW1vdW50pHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkKVpbmRleASkZG9jc5LZXVNvbWVvbmUgYXR0ZW1wdGVkIHRvIGxlYXNlIHRoZSBzYW1lIHNsb3QgdHdpY2UgZm9yIGEgcGFyYWNoYWluLiBUaGUgYW1vdW50IGlzIGhlbGQgaW4gcmVzZXJ2ZdkmYnV0IG5vIHBhcmFjaGFpbiBzbG90IGhhcyBiZWVuIGxlYXNlZC7eAASkbmFtZatCaWRBY2NlcHRlZKZmaWVsZHOV3gAEpG5hbWWmYmlkZGVypHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lp3BhcmFfaWSkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lpmFtb3VudKR0eXBlBqh0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5DeAASkbmFtZapmaXJzdF9zbG90pHR5cGUEqHR5cGVOYW1lsExlYXNlUGVyaW9kT2Y8VD6kZG9jc5DeAASkbmFtZalsYXN0X3Nsb3SkdHlwZQSodHlwZU5hbWWwTGVhc2VQZXJpb2RPZjxUPqRkb2NzkKVpbmRleAWkZG9jc5HZMkEgbmV3IGJpZCBoYXMgYmVlbiBhY2NlcHRlZCBhcyB0aGUgY3VycmVudCB3aW5uZXIu3gAEpG5hbWWtV2lubmluZ09mZnNldKZmaWVsZHOS3gAEpG5hbWWtYXVjdGlvbl9pbmRleKR0eXBlBKh0eXBlTmFtZaxBdWN0aW9uSW5kZXikZG9jc5DeAASkbmFtZaxibG9ja19udW1iZXKkdHlwZQSodHlwZU5hbWWuVDo6QmxvY2tOdW1iZXKkZG9jc5ClaW5kZXgGpGRvY3OR2VtUaGUgd2lubmluZyBvZmZzZXQgd2FzIGNob3NlbiBmb3IgYW4gYXVjdGlvbi4gVGhpcyB3aWxsIG1hcCBpbnRvIHRoZSBgV2lubmluZ2Agc3RvcmFnZSBtYXAupGRvY3OR2WgKCQkJVGhlIFtldmVudF0oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pIGVtaXR0ZWQKCQkJYnkgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZMxvpHR5cGXeAASkcGF0aJS3cG9sa2Fkb3RfcnVudGltZV9jb21tb26pY3Jvd2Rsb2FupnBhbGxldKVFdmVudKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5reAASkbmFtZadDcmVhdGVkpmZpZWxkc5HeAASkbmFtZadwYXJhX2lkpHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5ClaW5kZXgApGRvY3OR2SNDcmVhdGUgYSBuZXcgY3Jvd2Rsb2FuaW5nIGNhbXBhaWduLt4ABKRuYW1lq0NvbnRyaWJ1dGVkpmZpZWxkc5PeAASkbmFtZaN3aG+kdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWqZnVuZF9pbmRleKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQ3gAEpG5hbWWmYW1vdW50pHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkKVpbmRleAGkZG9jc5G8Q29udHJpYnV0ZWQgdG8gYSBjcm93ZCBzYWxlLt4ABKRuYW1lqFdpdGhkcmV3pmZpZWxkc5PeAASkbmFtZaN3aG+kdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWqZnVuZF9pbmRleKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQ3gAEpG5hbWWmYW1vdW50pHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkKVpbmRleAKkZG9jc5HZJ1dpdGhkcmV3IGZ1bGwgYmFsYW5jZSBvZiBhIGNvbnRyaWJ1dG9yLt4ABKRuYW1lsVBhcnRpYWxseVJlZnVuZGVkpmZpZWxkc5HeAASkbmFtZadwYXJhX2lkpHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5ClaW5kZXgDpGRvY3OS2UtUaGUgbG9hbnMgaW4gYSBmdW5kIGhhdmUgYmVlbiBwYXJ0aWFsbHkgZGlzc29sdmVkLCBpLmUuIHRoZXJlIGFyZSBzb21lIGxlZnTZLW92ZXIgY2hpbGQga2V5cyB0aGF0IHN0aWxsIG5lZWQgdG8gYmUga2lsbGVkLt4ABKRuYW1lq0FsbFJlZnVuZGVkpmZpZWxkc5HeAASkbmFtZadwYXJhX2lkpHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5ClaW5kZXgEpGRvY3OR2SdBbGwgbG9hbnMgaW4gYSBmdW5kIGhhdmUgYmVlbiByZWZ1bmRlZC7eAASkbmFtZalEaXNzb2x2ZWSmZmllbGRzkd4ABKRuYW1lp3BhcmFfaWSkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkKVpbmRleAWkZG9jc5GyRnVuZCBpcyBkaXNzb2x2ZWQu3gAEpG5hbWWvSGFuZGxlQmlkUmVzdWx0pmZpZWxkc5LeAASkbmFtZadwYXJhX2lkpHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5DeAASkbmFtZaZyZXN1bHSkdHlwZTmodHlwZU5hbWWuRGlzcGF0Y2hSZXN1bHSkZG9jc5ClaW5kZXgGpGRvY3OR2T1UaGUgcmVzdWx0IG9mIHRyeWluZyB0byBzdWJtaXQgYSBuZXcgYmlkIHRvIHRoZSBTbG90cyBwYWxsZXQu3gAEpG5hbWWmRWRpdGVkpmZpZWxkc5HeAASkbmFtZadwYXJhX2lkpHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5ClaW5kZXgHpGRvY3OR2TFUaGUgY29uZmlndXJhdGlvbiB0byBhIGNyb3dkbG9hbiBoYXMgYmVlbiBlZGl0ZWQu3gAEpG5hbWWrTWVtb1VwZGF0ZWSmZmllbGRzk94ABKRuYW1lo3dob6R0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZadwYXJhX2lkpHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5DeAASkbmFtZaRtZW1vpHR5cGUMqHR5cGVOYW1lp1ZlYzx1OD6kZG9jc5ClaW5kZXgIpGRvY3ORuEEgbWVtbyBoYXMgYmVlbiB1cGRhdGVkLt4ABKRuYW1lr0FkZGVkVG9OZXdSYWlzZaZmaWVsZHOR3gAEpG5hbWWncGFyYV9pZKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQpWluZGV4CaRkb2NzkdkoQSBwYXJhY2hhaW4gaGFzIGJlZW4gbW92ZWQgdG8gYE5ld1JhaXNlYKRkb2NzkdloCgkJCVRoZSBbZXZlbnRdKGh0dHBzOi8vZG9jcy5zdWJzdHJhdGUuaW8vbWFpbi1kb2NzL2J1aWxkL2V2ZW50cy1lcnJvcnMvKSBlbWl0dGVkCgkJCWJ5IHRoaXMgcGFsbGV0LgoJCQneAAKiaWTMcKR0eXBl3gAEpHBhdGiUt3BvbGthZG90X3J1bnRpbWVfY29tbW9urmFzc2lnbmVkX3Nsb3RzpnBhbGxldKVFdmVudKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZbVQZXJtYW5lbnRTbG90QXNzaWduZWSmZmllbGRzkd4ABKRuYW1lwKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQpWluZGV4AKRkb2NzkdkuQSBwYXJhIHdhcyBhc3NpZ25lZCBhIHBlcm1hbmVudCBwYXJhY2hhaW4gc2xvdN4ABKRuYW1ltVRlbXBvcmFyeVNsb3RBc3NpZ25lZKZmaWVsZHOR3gAEpG5hbWXApHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5ClaW5kZXgBpGRvY3OR2S5BIHBhcmEgd2FzIGFzc2lnbmVkIGEgdGVtcG9yYXJ5IHBhcmFjaGFpbiBzbG90pGRvY3OR2WgKCQkJVGhlIFtldmVudF0oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pIGVtaXR0ZWQKCQkJYnkgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZMxxpHR5cGXeAASkcGF0aJOqcGFsbGV0X3hjbaZwYWxsZXSlRXZlbnSmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHPcABfeAASkbmFtZalBdHRlbXB0ZWSmZmllbGRzkd4ABKRuYW1lwKR0eXBlzGSodHlwZU5hbWW0eGNtOjpsYXRlc3Q6Ok91dGNvbWWkZG9jc5ClaW5kZXgApGRvY3OT2SpFeGVjdXRpb24gb2YgYW4gWENNIG1lc3NhZ2Ugd2FzIGF0dGVtcHRlZC6grVxbIG91dGNvbWUgXF3eAASkbmFtZaRTZW50pmZpZWxkc5PeAASkbmFtZcCkdHlwZcxyqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZcCkdHlwZcxyqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZcCkdHlwZcx7qHR5cGVOYW1lp1hjbTwoKT6kZG9jc5ClaW5kZXgBpGRvY3OTt0EgWENNIG1lc3NhZ2Ugd2FzIHNlbnQuoNkiXFsgb3JpZ2luLCBkZXN0aW5hdGlvbiwgbWVzc2FnZSBcXd4ABKRuYW1lslVuZXhwZWN0ZWRSZXNwb25zZaZmaWVsZHOS3gAEpG5hbWXApHR5cGXMcqh0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGUKqHR5cGVOYW1lp1F1ZXJ5SWSkZG9jc5ClaW5kZXgCpGRvY3OV2VZRdWVyeSByZXNwb25zZSByZWNlaXZlZCB3aGljaCBkb2VzIG5vdCBtYXRjaCBhIHJlZ2lzdGVyZWQgcXVlcnkuIFRoaXMgbWF5IGJlIGJlY2F1c2UgYdlVbWF0Y2hpbmcgcXVlcnkgd2FzIG5ldmVyIHJlZ2lzdGVyZWQsIGl0IG1heSBiZSBiZWNhdXNlIGl0IGlzIGEgZHVwbGljYXRlIHJlc3BvbnNlLCBvcrxiZWNhdXNlIHRoZSBxdWVyeSB0aW1lZCBvdXQuoLlcWyBvcmlnaW4gbG9jYXRpb24sIGlkIFxd3gAEpG5hbWWtUmVzcG9uc2VSZWFkeaZmaWVsZHOS3gAEpG5hbWXApHR5cGUKqHR5cGVOYW1lp1F1ZXJ5SWSkZG9jc5DeAASkbmFtZcCkdHlwZcyFqHR5cGVOYW1lqFJlc3BvbnNlpGRvY3OQpWluZGV4A6Rkb2NzlNlXUXVlcnkgcmVzcG9uc2UgaGFzIGJlZW4gcmVjZWl2ZWQgYW5kIGlzIHJlYWR5IGZvciB0YWtpbmcgd2l0aCBgdGFrZV9yZXNwb25zZWAuIFRoZXJlIGlz2SBubyByZWdpc3RlcmVkIG5vdGlmaWNhdGlvbiBjYWxsLqCyXFsgaWQsIHJlc3BvbnNlIFxd3gAEpG5hbWWoTm90aWZpZWSmZmllbGRzk94ABKRuYW1lwKR0eXBlCqh0eXBlTmFtZadRdWVyeUlkpGRvY3OQ3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lonU4pGRvY3OQ3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lonU4pGRvY3OQpWluZGV4BKRkb2NzlNlWUXVlcnkgcmVzcG9uc2UgaGFzIGJlZW4gcmVjZWl2ZWQgYW5kIHF1ZXJ5IGlzIHJlbW92ZWQuIFRoZSByZWdpc3RlcmVkIG5vdGlmaWNhdGlvbiBoYXPZKmJlZW4gZGlzcGF0Y2hlZCBhbmQgZXhlY3V0ZWQgc3VjY2Vzc2Z1bGx5LqDZIlxbIGlkLCBwYWxsZXQgaW5kZXgsIGNhbGwgaW5kZXggXF3eAASkbmFtZbBOb3RpZnlPdmVyd2VpZ2h0pmZpZWxkc5XeAASkbmFtZcCkdHlwZQqodHlwZU5hbWWnUXVlcnlJZKRkb2NzkN4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZaJ1OKRkb2NzkN4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZaJ1OKRkb2NzkN4ABKRuYW1lwKR0eXBlCKh0eXBlTmFtZaZXZWlnaHSkZG9jc5DeAASkbmFtZcCkdHlwZQiodHlwZU5hbWWmV2VpZ2h0pGRvY3OQpWluZGV4BaRkb2NzldlYUXVlcnkgcmVzcG9uc2UgaGFzIGJlZW4gcmVjZWl2ZWQgYW5kIHF1ZXJ5IGlzIHJlbW92ZWQuIFRoZSByZWdpc3RlcmVkIG5vdGlmaWNhdGlvbiBjb3VsZNlQbm90IGJlIGRpc3BhdGNoZWQgYmVjYXVzZSB0aGUgZGlzcGF0Y2ggd2VpZ2h0IGlzIGdyZWF0ZXIgdGhhbiB0aGUgbWF4aW11bSB3ZWlnaHTZOW9yaWdpbmFsbHkgYnVkZ2V0ZWQgYnkgdGhpcyBydW50aW1lIGZvciB0aGUgcXVlcnkgcmVzdWx0LqDZRlxbIGlkLCBwYWxsZXQgaW5kZXgsIGNhbGwgaW5kZXgsIGFjdHVhbCB3ZWlnaHQsIG1heCBidWRnZXRlZCB3ZWlnaHQgXF3eAASkbmFtZbNOb3RpZnlEaXNwYXRjaEVycm9ypmZpZWxkc5PeAASkbmFtZcCkdHlwZQqodHlwZU5hbWWnUXVlcnlJZKRkb2NzkN4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZaJ1OKRkb2NzkN4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZaJ1OKRkb2NzkKVpbmRleAakZG9jc5TZVVF1ZXJ5IHJlc3BvbnNlIGhhcyBiZWVuIHJlY2VpdmVkIGFuZCBxdWVyeSBpcyByZW1vdmVkLiBUaGVyZSB3YXMgYSBnZW5lcmFsIGVycm9yIHdpdGjZImRpc3BhdGNoaW5nIHRoZSBub3RpZmljYXRpb24gY2FsbC6g2SJcWyBpZCwgcGFsbGV0IGluZGV4LCBjYWxsIGluZGV4IFxd3gAEpG5hbWWyTm90aWZ5RGVjb2RlRmFpbGVkpmZpZWxkc5PeAASkbmFtZcCkdHlwZQqodHlwZU5hbWWnUXVlcnlJZKRkb2NzkN4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZaJ1OKRkb2NzkN4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZaJ1OKRkb2NzkKVpbmRleAekZG9jc5XZVFF1ZXJ5IHJlc3BvbnNlIGhhcyBiZWVuIHJlY2VpdmVkIGFuZCBxdWVyeSBpcyByZW1vdmVkLiBUaGUgZGlzcGF0Y2ggd2FzIHVuYWJsZSB0byBiZdlWZGVjb2RlZCBpbnRvIGEgYENhbGxgOyB0aGlzIG1pZ2h0IGJlIGR1ZSB0byBkaXNwYXRjaCBmdW5jdGlvbiBoYXZpbmcgYSBzaWduYXR1cmUgd2hpY2jZJWlzIG5vdCBgKG9yaWdpbiwgUXVlcnlJZCwgUmVzcG9uc2UpYC6g2SJcWyBpZCwgcGFsbGV0IGluZGV4LCBjYWxsIGluZGV4IFxd3gAEpG5hbWWwSW52YWxpZFJlc3BvbmRlcqZmaWVsZHOT3gAEpG5hbWXApHR5cGXMcqh0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGUKqHR5cGVOYW1lp1F1ZXJ5SWSkZG9jc5DeAASkbmFtZcCkdHlwZcyOqHR5cGVOYW1ltU9wdGlvbjxNdWx0aUxvY2F0aW9uPqRkb2NzkKVpbmRleAikZG9jc5XZVkV4cGVjdGVkIHF1ZXJ5IHJlc3BvbnNlIGhhcyBiZWVuIHJlY2VpdmVkIGJ1dCB0aGUgb3JpZ2luIGxvY2F0aW9uIG9mIHRoZSByZXNwb25zZSBkb2Vz2VVub3QgbWF0Y2ggdGhhdCBleHBlY3RlZC4gVGhlIHF1ZXJ5IHJlbWFpbnMgcmVnaXN0ZXJlZCBmb3IgYSBsYXRlciwgdmFsaWQsIHJlc3BvbnNlIHRvu2JlIHJlY2VpdmVkIGFuZCBhY3RlZCB1cG9uLqDZLFxbIG9yaWdpbiBsb2NhdGlvbiwgaWQsIGV4cGVjdGVkIGxvY2F0aW9uIFxd3gAEpG5hbWW3SW52YWxpZFJlc3BvbmRlclZlcnNpb26mZmllbGRzkt4ABKRuYW1lwKR0eXBlzHKodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlCqh0eXBlTmFtZadRdWVyeUlkpGRvY3OQpWluZGV4CaRkb2NzmdlURXhwZWN0ZWQgcXVlcnkgcmVzcG9uc2UgaGFzIGJlZW4gcmVjZWl2ZWQgYnV0IHRoZSBleHBlY3RlZCBvcmlnaW4gbG9jYXRpb24gcGxhY2VkIGlu2VNzdG9yYWdlIGJ5IHRoaXMgcnVudGltZSBwcmV2aW91c2x5IGNhbm5vdCBiZSBkZWNvZGVkLiBUaGUgcXVlcnkgcmVtYWlucyByZWdpc3RlcmVkLqDZUFRoaXMgaXMgdW5leHBlY3RlZCAoc2luY2UgYSBsb2NhdGlvbiBwbGFjZWQgaW4gc3RvcmFnZSBpbiBhIHByZXZpb3VzbHkgZXhlY3V0aW5n2VNydW50aW1lIHNob3VsZCBiZSByZWFkYWJsZSBwcmlvciB0byBxdWVyeSB0aW1lb3V0KSBhbmQgZGFuZ2Vyb3VzIHNpbmNlIHRoZSBwb3NzaWJsedlWdmFsaWQgcmVzcG9uc2Ugd2lsbCBiZSBkcm9wcGVkLiBNYW51YWwgZ292ZXJuYW5jZSBpbnRlcnZlbnRpb24gaXMgcHJvYmFibHkgZ29pbmcgdG8gYmWnbmVlZGVkLqC5XFsgb3JpZ2luIGxvY2F0aW9uLCBpZCBcXd4ABKRuYW1lrVJlc3BvbnNlVGFrZW6mZmllbGRzkd4ABKRuYW1lwKR0eXBlCqh0eXBlTmFtZadRdWVyeUlkpGRvY3OQpWluZGV4CqRkb2Nzk9kyUmVjZWl2ZWQgcXVlcnkgcmVzcG9uc2UgaGFzIGJlZW4gcmVhZCBhbmQgcmVtb3ZlZC6gqFxbIGlkIFxd3gAEpG5hbWWtQXNzZXRzVHJhcHBlZKZmaWVsZHOT3gAEpG5hbWXApHR5cGULqHR5cGVOYW1lpEgyNTakZG9jc5DeAASkbmFtZcCkdHlwZcxyqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZcCkdHlwZcyWqHR5cGVOYW1ltFZlcnNpb25lZE11bHRpQXNzZXRzpGRvY3OQpWluZGV4C6Rkb2Nzk9kuU29tZSBhc3NldHMgaGF2ZSBiZWVuIHBsYWNlZCBpbiBhbiBhc3NldCB0cmFwLqC6XFsgaGFzaCwgb3JpZ2luLCBhc3NldHMgXF3eAASkbmFtZbVWZXJzaW9uQ2hhbmdlTm90aWZpZWSmZmllbGRzk94ABKRuYW1lwKR0eXBlzHKodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlBKh0eXBlTmFtZapYY21WZXJzaW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMfqh0eXBlTmFtZatNdWx0aUFzc2V0c6Rkb2NzkKVpbmRleAykZG9jc5XZSUFuIFhDTSB2ZXJzaW9uIGNoYW5nZSBub3RpZmljYXRpb24gbWVzc2FnZSBoYXMgYmVlbiBhdHRlbXB0ZWQgdG8gYmUgc2VudC6g2ThUaGUgY29zdCBvZiBzZW5kaW5nIGl0IChib3JuZSBieSB0aGUgY2hhaW4pIGlzIGluY2x1ZGVkLqC/XFsgZGVzdGluYXRpb24sIHJlc3VsdCwgY29zdCBcXd4ABKRuYW1lt1N1cHBvcnRlZFZlcnNpb25DaGFuZ2VkpmZpZWxkc5LeAASkbmFtZcCkdHlwZcxyqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZcCkdHlwZQSodHlwZU5hbWWqWGNtVmVyc2lvbqRkb2NzkKVpbmRleA2kZG9jc5TZTlRoZSBzdXBwb3J0ZWQgdmVyc2lvbiBvZiBhIGxvY2F0aW9uIGhhcyBiZWVuIGNoYW5nZWQuIFRoaXMgbWlnaHQgYmUgdGhyb3VnaCBhbtkwYXV0b21hdGljIG5vdGlmaWNhdGlvbiBvciBhIG1hbnVhbCBpbnRlcnZlbnRpb24uoLtcWyBsb2NhdGlvbiwgWENNIHZlcnNpb24gXF3eAASkbmFtZbROb3RpZnlUYXJnZXRTZW5kRmFpbKZmaWVsZHOT3gAEpG5hbWXApHR5cGXMcqh0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGUKqHR5cGVOYW1lp1F1ZXJ5SWSkZG9jc5DeAASkbmFtZcCkdHlwZcxlqHR5cGVOYW1lqFhjbUVycm9ypGRvY3OQpWluZGV4DqRkb2NzlNlWQSBnaXZlbiBsb2NhdGlvbiB3aGljaCBoYWQgYSB2ZXJzaW9uIGNoYW5nZSBzdWJzY3JpcHRpb24gd2FzIGRyb3BwZWQgb3dpbmcgdG8gYW4gZXJyb3K/c2VuZGluZyB0aGUgbm90aWZpY2F0aW9uIHRvIGl0LqC/XFsgbG9jYXRpb24sIHF1ZXJ5IElELCBlcnJvciBcXd4ABKRuYW1luU5vdGlmeVRhcmdldE1pZ3JhdGlvbkZhaWymZmllbGRzkt4ABKRuYW1lwKR0eXBlzKSodHlwZU5hbWW2VmVyc2lvbmVkTXVsdGlMb2NhdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlCqh0eXBlTmFtZadRdWVyeUlkpGRvY3OQpWluZGV4D6Rkb2NzlNlWQSBnaXZlbiBsb2NhdGlvbiB3aGljaCBoYWQgYSB2ZXJzaW9uIGNoYW5nZSBzdWJzY3JpcHRpb24gd2FzIGRyb3BwZWQgb3dpbmcgdG8gYW4gZXJyb3LZLW1pZ3JhdGluZyB0aGUgbG9jYXRpb24gdG8gb3VyIG5ldyBYQ00gZm9ybWF0LqC4XFsgbG9jYXRpb24sIHF1ZXJ5IElEIFxd3gAEpG5hbWW1SW52YWxpZFF1ZXJpZXJWZXJzaW9upmZpZWxkc5LeAASkbmFtZcCkdHlwZcxyqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZcCkdHlwZQqodHlwZU5hbWWnUXVlcnlJZKRkb2NzkKVpbmRleBCkZG9jc5nZVUV4cGVjdGVkIHF1ZXJ5IHJlc3BvbnNlIGhhcyBiZWVuIHJlY2VpdmVkIGJ1dCB0aGUgZXhwZWN0ZWQgcXVlcmllciBsb2NhdGlvbiBwbGFjZWQgaW7ZU3N0b3JhZ2UgYnkgdGhpcyBydW50aW1lIHByZXZpb3VzbHkgY2Fubm90IGJlIGRlY29kZWQuIFRoZSBxdWVyeSByZW1haW5zIHJlZ2lzdGVyZWQuoNlQVGhpcyBpcyB1bmV4cGVjdGVkIChzaW5jZSBhIGxvY2F0aW9uIHBsYWNlZCBpbiBzdG9yYWdlIGluIGEgcHJldmlvdXNseSBleGVjdXRpbmfZU3J1bnRpbWUgc2hvdWxkIGJlIHJlYWRhYmxlIHByaW9yIHRvIHF1ZXJ5IHRpbWVvdXQpIGFuZCBkYW5nZXJvdXMgc2luY2UgdGhlIHBvc3NpYmx52VZ2YWxpZCByZXNwb25zZSB3aWxsIGJlIGRyb3BwZWQuIE1hbnVhbCBnb3Zlcm5hbmNlIGludGVydmVudGlvbiBpcyBwcm9iYWJseSBnb2luZyB0byBiZaduZWVkZWQuoLlcWyBvcmlnaW4gbG9jYXRpb24sIGlkIFxd3gAEpG5hbWWuSW52YWxpZFF1ZXJpZXKmZmllbGRzlN4ABKRuYW1lwKR0eXBlzHKodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlCqh0eXBlTmFtZadRdWVyeUlkpGRvY3OQ3gAEpG5hbWXApHR5cGXMcqh0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMjqh0eXBlTmFtZbVPcHRpb248TXVsdGlMb2NhdGlvbj6kZG9jc5ClaW5kZXgRpGRvY3OV2VdFeHBlY3RlZCBxdWVyeSByZXNwb25zZSBoYXMgYmVlbiByZWNlaXZlZCBidXQgdGhlIHF1ZXJpZXIgbG9jYXRpb24gb2YgdGhlIHJlc3BvbnNlIGRvZXPZVG5vdCBtYXRjaCB0aGUgZXhwZWN0ZWQuIFRoZSBxdWVyeSByZW1haW5zIHJlZ2lzdGVyZWQgZm9yIGEgbGF0ZXIsIHZhbGlkLCByZXNwb25zZSB0b7tiZSByZWNlaXZlZCBhbmQgYWN0ZWQgdXBvbi6g2UFcWyBvcmlnaW4gbG9jYXRpb24sIGlkLCBleHBlY3RlZCBxdWVyaWVyLCBtYXliZSBhY3R1YWwgcXVlcmllciBcXd4ABKRuYW1ltFZlcnNpb25Ob3RpZnlTdGFydGVkpmZpZWxkc5LeAASkbmFtZcCkdHlwZcxyqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZcCkdHlwZcx+qHR5cGVOYW1lq011bHRpQXNzZXRzpGRvY3OQpWluZGV4EqRkb2NzlNlWQSByZW1vdGUgaGFzIHJlcXVlc3RlZCBYQ00gdmVyc2lvbiBjaGFuZ2Ugbm90aWZpY2F0aW9uIGZyb20gdXMgYW5kIHdlIGhhdmUgaG9ub3JlZCBpdC7ZR0EgdmVyc2lvbiBpbmZvcm1hdGlvbiBtZXNzYWdlIGlzIHNlbnQgdG8gdGhlbSBhbmQgaXRzIGNvc3QgaXMgaW5jbHVkZWQuoNkgXFsgZGVzdGluYXRpb24gbG9jYXRpb24sIGNvc3QgXF3eAASkbmFtZbZWZXJzaW9uTm90aWZ5UmVxdWVzdGVkpmZpZWxkc5LeAASkbmFtZcCkdHlwZcxyqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZcCkdHlwZcx+qHR5cGVOYW1lq011bHRpQXNzZXRzpGRvY3OQpWluZGV4E6Rkb2Nzk9lQV2UgaGF2ZSByZXF1ZXN0ZWQgdGhhdCBhIHJlbW90ZSBjaGFpbiBzZW5kcyB1cyBYQ00gdmVyc2lvbiBjaGFuZ2Ugbm90aWZpY2F0aW9ucy6g2SBcWyBkZXN0aW5hdGlvbiBsb2NhdGlvbiwgY29zdCBcXd4ABKRuYW1luFZlcnNpb25Ob3RpZnlVbnJlcXVlc3RlZKZmaWVsZHOS3gAEpG5hbWXApHR5cGXMcqh0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMfqh0eXBlTmFtZatNdWx0aUFzc2V0c6Rkb2NzkKVpbmRleBSkZG9jc5PZWFdlIGhhdmUgcmVxdWVzdGVkIHRoYXQgYSByZW1vdGUgY2hhaW4gc3RvcHMgc2VuZGluZyB1cyBYQ00gdmVyc2lvbiBjaGFuZ2Ugbm90aWZpY2F0aW9ucy6g2SBcWyBkZXN0aW5hdGlvbiBsb2NhdGlvbiwgY29zdCBcXd4ABKRuYW1lqEZlZXNQYWlkpmZpZWxkc5LeAASkbmFtZcCkdHlwZcxyqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZcCkdHlwZcx+qHR5cGVOYW1lq011bHRpQXNzZXRzpGRvY3OQpWluZGV4FaRkb2Nzk9lMRmVlcyB3ZXJlIHBhaWQgZnJvbSBhIGxvY2F0aW9uIGZvciBhbiBvcGVyYXRpb24gKG9mdGVuIGZvciB1c2luZyBgU2VuZFhjbWApLqC7XFsgcGF5aW5nIGxvY2F0aW9uLCBmZWVzIFxd3gAEpG5hbWWtQXNzZXRzQ2xhaW1lZKZmaWVsZHOT3gAEpG5hbWXApHR5cGULqHR5cGVOYW1lpEgyNTakZG9jc5DeAASkbmFtZcCkdHlwZcxyqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZcCkdHlwZcyWqHR5cGVOYW1ltFZlcnNpb25lZE11bHRpQXNzZXRzpGRvY3OQpWluZGV4FqRkb2Nzk9kwU29tZSBhc3NldHMgaGF2ZSBiZWVuIGNsYWltZWQgZnJvbSBhbiBhc3NldCB0cmFwoLpcWyBoYXNoLCBvcmlnaW4sIGFzc2V0cyBcXaRkb2NzkdloCgkJCVRoZSBbZXZlbnRdKGh0dHBzOi8vZG9jcy5zdWJzdHJhdGUuaW8vbWFpbi1kb2NzL2J1aWxkL2V2ZW50cy1lcnJvcnMvKSBlbWl0dGVkCgkJCWJ5IHRoaXMgcGFsbGV0LgoJCQneAAKiaWTMcqR0eXBl3gAEpHBhdGiUo3hjbaJ2M61tdWx0aWxvY2F0aW9urU11bHRpTG9jYXRpb26mcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5LeAASkbmFtZadwYXJlbnRzpHR5cGUCqHR5cGVOYW1lonU4pGRvY3OQ3gAEpG5hbWWoaW50ZXJpb3KkdHlwZcxzqHR5cGVOYW1lqUp1bmN0aW9uc6Rkb2NzkKRkb2NzkN4AAqJpZMxzpHR5cGXeAASkcGF0aJSjeGNtonYzqWp1bmN0aW9uc6lKdW5jdGlvbnOmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5neAASkbmFtZaRIZXJlpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWiWDGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzHSodHlwZU5hbWWoSnVuY3Rpb26kZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWiWDKmZmllbGRzkt4ABKRuYW1lwKR0eXBlzHSodHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcx0qHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQpWluZGV4AqRkb2NzkN4ABKRuYW1lolgzpmZpZWxkc5PeAASkbmFtZcCkdHlwZcx0qHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMdKh0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzHSodHlwZU5hbWWoSnVuY3Rpb26kZG9jc5ClaW5kZXgDpGRvY3OQ3gAEpG5hbWWiWDSmZmllbGRzlN4ABKRuYW1lwKR0eXBlzHSodHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcx0qHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMdKh0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzHSodHlwZU5hbWWoSnVuY3Rpb26kZG9jc5ClaW5kZXgEpGRvY3OQ3gAEpG5hbWWiWDWmZmllbGRzld4ABKRuYW1lwKR0eXBlzHSodHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcx0qHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMdKh0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzHSodHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcx0qHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQpWluZGV4BaRkb2NzkN4ABKRuYW1lolg2pmZpZWxkc5beAASkbmFtZcCkdHlwZcx0qHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMdKh0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzHSodHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcx0qHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMdKh0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzHSodHlwZU5hbWWoSnVuY3Rpb26kZG9jc5ClaW5kZXgGpGRvY3OQ3gAEpG5hbWWiWDemZmllbGRzl94ABKRuYW1lwKR0eXBlzHSodHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcx0qHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMdKh0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzHSodHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcx0qHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMdKh0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzHSodHlwZU5hbWWoSnVuY3Rpb26kZG9jc5ClaW5kZXgHpGRvY3OQ3gAEpG5hbWWiWDimZmllbGRzmN4ABKRuYW1lwKR0eXBlzHSodHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcx0qHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMdKh0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzHSodHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcx0qHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMdKh0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzHSodHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcx0qHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQpWluZGV4CKRkb2NzkKRkb2NzkN4AAqJpZMx0pHR5cGXeAASkcGF0aJSjeGNtonYzqGp1bmN0aW9uqEp1bmN0aW9upnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOa3gAEpG5hbWWpUGFyYWNoYWlupmZpZWxkc5HeAASkbmFtZcCkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleACkZG9jc5DeAASkbmFtZatBY2NvdW50SWQzMqZmaWVsZHOS3gAEpG5hbWWnbmV0d29ya6R0eXBlzHaodHlwZU5hbWWxT3B0aW9uPE5ldHdvcmtJZD6kZG9jc5DeAASkbmFtZaJpZKR0eXBlAah0eXBlTmFtZahbdTg7IDMyXaRkb2NzkKVpbmRleAGkZG9jc5DeAASkbmFtZa5BY2NvdW50SW5kZXg2NKZmaWVsZHOS3gAEpG5hbWWnbmV0d29ya6R0eXBlzHaodHlwZU5hbWWxT3B0aW9uPE5ldHdvcmtJZD6kZG9jc5DeAASkbmFtZaVpbmRleKR0eXBlCah0eXBlTmFtZaN1NjSkZG9jc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWsQWNjb3VudEtleTIwpmZpZWxkc5LeAASkbmFtZaduZXR3b3JrpHR5cGXMdqh0eXBlTmFtZbFPcHRpb248TmV0d29ya0lkPqRkb2NzkN4ABKRuYW1lo2tleaR0eXBlzHiodHlwZU5hbWWoW3U4OyAyMF2kZG9jc5ClaW5kZXgDpGRvY3OQ3gAEpG5hbWWuUGFsbGV0SW5zdGFuY2WmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZaJ1OKRkb2NzkKVpbmRleASkZG9jc5DeAASkbmFtZaxHZW5lcmFsSW5kZXimZmllbGRzkd4ABKRuYW1lwKR0eXBlNah0eXBlTmFtZaR1MTI4pGRvY3OQpWluZGV4BaRkb2NzkN4ABKRuYW1lqkdlbmVyYWxLZXmmZmllbGRzkt4ABKRuYW1lpmxlbmd0aKR0eXBlAqh0eXBlTmFtZaJ1OKRkb2NzkN4ABKRuYW1lpGRhdGGkdHlwZQGodHlwZU5hbWWoW3U4OyAzMl2kZG9jc5ClaW5kZXgGpGRvY3OQ3gAEpG5hbWWpT25seUNoaWxkpmZpZWxkc5ClaW5kZXgHpGRvY3OQ3gAEpG5hbWWpUGx1cmFsaXR5pmZpZWxkc5LeAASkbmFtZaJpZKR0eXBlzHmodHlwZU5hbWWmQm9keUlkpGRvY3OQ3gAEpG5hbWWkcGFydKR0eXBlzHqodHlwZU5hbWWoQm9keVBhcnSkZG9jc5ClaW5kZXgIpGRvY3OQ3gAEpG5hbWWvR2xvYmFsQ29uc2Vuc3VzpmZpZWxkc5HeAASkbmFtZcCkdHlwZcx3qHR5cGVOYW1lqU5ldHdvcmtJZKRkb2NzkKVpbmRleAmkZG9jc5CkZG9jc5DeAAKiaWTMdaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABp2NvbXBhY3TeAAGkdHlwZQSkZG9jc5DeAAKiaWTMdqR0eXBl3gAEpHBhdGiRpk9wdGlvbqZwYXJhbXOR3gACpG5hbWWhVKR0eXBlzHejZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWkTm9uZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lpFNvbWWmZmllbGRzkd4ABKRuYW1lwKR0eXBlzHeodHlwZU5hbWXApGRvY3OQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZMx3pHR5cGXeAASkcGF0aJSjeGNtonYzqGp1bmN0aW9uqU5ldHdvcmtJZKZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzmt4ABKRuYW1lqUJ5R2VuZXNpc6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUBqHR5cGVOYW1lqFt1ODsgMzJdpGRvY3OQpWluZGV4AKRkb2NzkN4ABKRuYW1lpkJ5Rm9ya6ZmaWVsZHOS3gAEpG5hbWWsYmxvY2tfbnVtYmVypHR5cGUKqHR5cGVOYW1lo3U2NKRkb2NzkN4ABKRuYW1lqmJsb2NrX2hhc2ikdHlwZQGodHlwZU5hbWWoW3U4OyAzMl2kZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWoUG9sa2Fkb3SmZmllbGRzkKVpbmRleAKkZG9jc5DeAASkbmFtZaZLdXNhbWGmZmllbGRzkKVpbmRleAOkZG9jc5DeAASkbmFtZadXZXN0ZW5kpmZpZWxkc5ClaW5kZXgEpGRvY3OQ3gAEpG5hbWWmUm9jb2NvpmZpZWxkc5ClaW5kZXgFpGRvY3OQ3gAEpG5hbWWmV29jb2NvpmZpZWxkc5ClaW5kZXgGpGRvY3OQ3gAEpG5hbWWoRXRoZXJldW2mZmllbGRzkd4ABKRuYW1lqGNoYWluX2lkpHR5cGUJqHR5cGVOYW1lo3U2NKRkb2NzkKVpbmRleAekZG9jc5DeAASkbmFtZatCaXRjb2luQ29yZaZmaWVsZHOQpWluZGV4CKRkb2NzkN4ABKRuYW1lq0JpdGNvaW5DYXNopmZpZWxkc5ClaW5kZXgJpGRvY3OQpGRvY3OQ3gAComlkzHikdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaVhcnJhed4AAqNsZW4UpHR5cGUCpGRvY3OQ3gAComlkzHmkdHlwZd4ABKRwYXRolKN4Y22idjOoanVuY3Rpb26mQm9keUlkpnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOa3gAEpG5hbWWkVW5pdKZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lp01vbmlrZXKmZmllbGRzkd4ABKRuYW1lwKR0eXBlEKh0eXBlTmFtZadbdTg7IDRdpGRvY3OQpWluZGV4AaRkb2NzkN4ABKRuYW1lpUluZGV4pmZpZWxkc5HeAASkbmFtZcCkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAKkZG9jc5DeAASkbmFtZalFeGVjdXRpdmWmZmllbGRzkKVpbmRleAOkZG9jc5DeAASkbmFtZalUZWNobmljYWymZmllbGRzkKVpbmRleASkZG9jc5DeAASkbmFtZatMZWdpc2xhdGl2ZaZmaWVsZHOQpWluZGV4BaRkb2NzkN4ABKRuYW1lqEp1ZGljaWFspmZpZWxkc5ClaW5kZXgGpGRvY3OQ3gAEpG5hbWWnRGVmZW5zZaZmaWVsZHOQpWluZGV4B6Rkb2NzkN4ABKRuYW1lrkFkbWluaXN0cmF0aW9upmZpZWxkc5ClaW5kZXgIpGRvY3OQ3gAEpG5hbWWoVHJlYXN1cnmmZmllbGRzkKVpbmRleAmkZG9jc5CkZG9jc5DeAAKiaWTMeqR0eXBl3gAEpHBhdGiUo3hjbaJ2M6hqdW5jdGlvbqhCb2R5UGFydKZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzld4ABKRuYW1lpVZvaWNlpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWnTWVtYmVyc6ZmaWVsZHOR3gAEpG5hbWWlY291bnSkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAGkZG9jc5DeAASkbmFtZahGcmFjdGlvbqZmaWVsZHOS3gAEpG5hbWWjbm9tpHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZaVkZW5vbaR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4AqRkb2NzkN4ABKRuYW1lsUF0TGVhc3RQcm9wb3J0aW9upmZpZWxkc5LeAASkbmFtZaNub22kdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lpWRlbm9tpHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXgDpGRvY3OQ3gAEpG5hbWWyTW9yZVRoYW5Qcm9wb3J0aW9upmZpZWxkc5LeAASkbmFtZaNub22kdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lpWRlbm9tpHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXgEpGRvY3OQpGRvY3OQ3gAComlkzHukdHlwZd4ABKRwYXRok6N4Y22idjOjWGNtpnBhcmFtc5HeAAKkbmFtZaRDYWxspHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzHyodHlwZU5hbWW2VmVjPEluc3RydWN0aW9uPENhbGw+PqRkb2NzkKRkb2NzkN4AAqJpZMx8pHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZcx9pGRvY3OQ3gAComlkzH2kdHlwZd4ABKRwYXRok6N4Y22idjOrSW5zdHJ1Y3Rpb26mcGFyYW1zkd4AAqRuYW1lpENhbGykdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHPcADDeAASkbmFtZa1XaXRoZHJhd0Fzc2V0pmZpZWxkc5HeAASkbmFtZcCkdHlwZcx+qHR5cGVOYW1lq011bHRpQXNzZXRzpGRvY3OQpWluZGV4AKRkb2NzkN4ABKRuYW1ltVJlc2VydmVBc3NldERlcG9zaXRlZKZmaWVsZHOR3gAEpG5hbWXApHR5cGXMfqh0eXBlTmFtZatNdWx0aUFzc2V0c6Rkb2NzkKVpbmRleAGkZG9jc5DeAASkbmFtZbZSZWNlaXZlVGVsZXBvcnRlZEFzc2V0pmZpZWxkc5HeAASkbmFtZcCkdHlwZcx+qHR5cGVOYW1lq011bHRpQXNzZXRzpGRvY3OQpWluZGV4AqRkb2NzkN4ABKRuYW1lrVF1ZXJ5UmVzcG9uc2WmZmllbGRzlN4ABKRuYW1lqHF1ZXJ5X2lkpHR5cGUJqHR5cGVOYW1lp1F1ZXJ5SWSkZG9jc5DeAASkbmFtZahyZXNwb25zZaR0eXBlzIWodHlwZU5hbWWoUmVzcG9uc2WkZG9jc5DeAASkbmFtZaptYXhfd2VpZ2h0pHR5cGUIqHR5cGVOYW1lpldlaWdodKRkb2NzkN4ABKRuYW1lp3F1ZXJpZXKkdHlwZcyOqHR5cGVOYW1ltU9wdGlvbjxNdWx0aUxvY2F0aW9uPqRkb2NzkKVpbmRleAOkZG9jc5DeAASkbmFtZa1UcmFuc2ZlckFzc2V0pmZpZWxkc5LeAASkbmFtZaZhc3NldHOkdHlwZcx+qHR5cGVOYW1lq011bHRpQXNzZXRzpGRvY3OQ3gAEpG5hbWWrYmVuZWZpY2lhcnmkdHlwZcxyqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5ClaW5kZXgEpGRvY3OQ3gAEpG5hbWW0VHJhbnNmZXJSZXNlcnZlQXNzZXSmZmllbGRzk94ABKRuYW1lpmFzc2V0c6R0eXBlzH6odHlwZU5hbWWrTXVsdGlBc3NldHOkZG9jc5DeAASkbmFtZaRkZXN0pHR5cGXMcqh0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQ3gAEpG5hbWWjeGNtpHR5cGXMe6h0eXBlTmFtZadYY208KCk+pGRvY3OQpWluZGV4BaRkb2NzkN4ABKRuYW1lqFRyYW5zYWN0pmZpZWxkc5PeAASkbmFtZatvcmlnaW5fa2luZKR0eXBlzI+odHlwZU5hbWWqT3JpZ2luS2luZKRkb2NzkN4ABKRuYW1ltnJlcXVpcmVfd2VpZ2h0X2F0X21vc3SkdHlwZQiodHlwZU5hbWWmV2VpZ2h0pGRvY3OQ3gAEpG5hbWWkY2FsbKR0eXBlzJCodHlwZU5hbWWzRG91YmxlRW5jb2RlZDxDYWxsPqRkb2NzkKVpbmRleAakZG9jc5DeAASkbmFtZblIcm1wTmV3Q2hhbm5lbE9wZW5SZXF1ZXN0pmZpZWxkc5PeAASkbmFtZaZzZW5kZXKkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lsG1heF9tZXNzYWdlX3NpemWkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lrG1heF9jYXBhY2l0eaR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4B6Rkb2NzkN4ABKRuYW1ls0hybXBDaGFubmVsQWNjZXB0ZWSmZmllbGRzkd4ABKRuYW1lqXJlY2lwaWVudKR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4CKRkb2NzkN4ABKRuYW1lskhybXBDaGFubmVsQ2xvc2luZ6ZmaWVsZHOT3gAEpG5hbWWpaW5pdGlhdG9ypHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZaZzZW5kZXKkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lqXJlY2lwaWVudKR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4CaRkb2NzkN4ABKRuYW1lq0NsZWFyT3JpZ2lupmZpZWxkc5ClaW5kZXgKpGRvY3OQ3gAEpG5hbWWtRGVzY2VuZE9yaWdpbqZmaWVsZHOR3gAEpG5hbWXApHR5cGXMc6h0eXBlTmFtZbVJbnRlcmlvck11bHRpTG9jYXRpb26kZG9jc5ClaW5kZXgLpGRvY3OQ3gAEpG5hbWWrUmVwb3J0RXJyb3KmZmllbGRzkd4ABKRuYW1lwKR0eXBlzJGodHlwZU5hbWWxUXVlcnlSZXNwb25zZUluZm+kZG9jc5ClaW5kZXgMpGRvY3OQ3gAEpG5hbWWsRGVwb3NpdEFzc2V0pmZpZWxkc5LeAASkbmFtZaZhc3NldHOkdHlwZcySqHR5cGVOYW1lsE11bHRpQXNzZXRGaWx0ZXKkZG9jc5DeAASkbmFtZatiZW5lZmljaWFyeaR0eXBlzHKodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkKVpbmRleA2kZG9jc5DeAASkbmFtZbNEZXBvc2l0UmVzZXJ2ZUFzc2V0pmZpZWxkc5PeAASkbmFtZaZhc3NldHOkdHlwZcySqHR5cGVOYW1lsE11bHRpQXNzZXRGaWx0ZXKkZG9jc5DeAASkbmFtZaRkZXN0pHR5cGXMcqh0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQ3gAEpG5hbWWjeGNtpHR5cGXMe6h0eXBlTmFtZadYY208KCk+pGRvY3OQpWluZGV4DqRkb2NzkN4ABKRuYW1lrUV4Y2hhbmdlQXNzZXSmZmllbGRzk94ABKRuYW1lpGdpdmWkdHlwZcySqHR5cGVOYW1lsE11bHRpQXNzZXRGaWx0ZXKkZG9jc5DeAASkbmFtZaR3YW50pHR5cGXMfqh0eXBlTmFtZatNdWx0aUFzc2V0c6Rkb2NzkN4ABKRuYW1lp21heGltYWykdHlwZSWodHlwZU5hbWWkYm9vbKRkb2NzkKVpbmRleA+kZG9jc5DeAASkbmFtZbdJbml0aWF0ZVJlc2VydmVXaXRoZHJhd6ZmaWVsZHOT3gAEpG5hbWWmYXNzZXRzpHR5cGXMkqh0eXBlTmFtZbBNdWx0aUFzc2V0RmlsdGVypGRvY3OQ3gAEpG5hbWWncmVzZXJ2ZaR0eXBlzHKodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkN4ABKRuYW1lo3hjbaR0eXBlzHuodHlwZU5hbWWnWGNtPCgpPqRkb2NzkKVpbmRleBCkZG9jc5DeAASkbmFtZbBJbml0aWF0ZVRlbGVwb3J0pmZpZWxkc5PeAASkbmFtZaZhc3NldHOkdHlwZcySqHR5cGVOYW1lsE11bHRpQXNzZXRGaWx0ZXKkZG9jc5DeAASkbmFtZaRkZXN0pHR5cGXMcqh0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQ3gAEpG5hbWWjeGNtpHR5cGXMe6h0eXBlTmFtZadYY208KCk+pGRvY3OQpWluZGV4EaRkb2NzkN4ABKRuYW1lrVJlcG9ydEhvbGRpbmemZmllbGRzkt4ABKRuYW1lrXJlc3BvbnNlX2luZm+kdHlwZcyRqHR5cGVOYW1lsVF1ZXJ5UmVzcG9uc2VJbmZvpGRvY3OQ3gAEpG5hbWWmYXNzZXRzpHR5cGXMkqh0eXBlTmFtZbBNdWx0aUFzc2V0RmlsdGVypGRvY3OQpWluZGV4EqRkb2NzkN4ABKRuYW1lrEJ1eUV4ZWN1dGlvbqZmaWVsZHOS3gAEpG5hbWWkZmVlc6R0eXBlzICodHlwZU5hbWWqTXVsdGlBc3NldKRkb2NzkN4ABKRuYW1lrHdlaWdodF9saW1pdKR0eXBlzJWodHlwZU5hbWWrV2VpZ2h0TGltaXSkZG9jc5ClaW5kZXgTpGRvY3OQ3gAEpG5hbWWtUmVmdW5kU3VycGx1c6ZmaWVsZHOQpWluZGV4FKRkb2NzkN4ABKRuYW1lr1NldEVycm9ySGFuZGxlcqZmaWVsZHOR3gAEpG5hbWXApHR5cGXMe6h0eXBlTmFtZalYY208Q2FsbD6kZG9jc5ClaW5kZXgVpGRvY3OQ3gAEpG5hbWWrU2V0QXBwZW5kaXimZmllbGRzkd4ABKRuYW1lwKR0eXBlzHuodHlwZU5hbWWpWGNtPENhbGw+pGRvY3OQpWluZGV4FqRkb2NzkN4ABKRuYW1lqkNsZWFyRXJyb3KmZmllbGRzkKVpbmRleBekZG9jc5DeAASkbmFtZapDbGFpbUFzc2V0pmZpZWxkc5LeAASkbmFtZaZhc3NldHOkdHlwZcx+qHR5cGVOYW1lq011bHRpQXNzZXRzpGRvY3OQ3gAEpG5hbWWmdGlja2V0pHR5cGXMcqh0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQpWluZGV4GKRkb2NzkN4ABKRuYW1lpFRyYXCmZmllbGRzkd4ABKRuYW1lwKR0eXBlCah0eXBlTmFtZaN1NjSkZG9jc5ClaW5kZXgZpGRvY3OQ3gAEpG5hbWWwU3Vic2NyaWJlVmVyc2lvbqZmaWVsZHOS3gAEpG5hbWWocXVlcnlfaWSkdHlwZQmodHlwZU5hbWWnUXVlcnlJZKRkb2NzkN4ABKRuYW1ls21heF9yZXNwb25zZV93ZWlnaHSkdHlwZQiodHlwZU5hbWWmV2VpZ2h0pGRvY3OQpWluZGV4GqRkb2NzkN4ABKRuYW1lslVuc3Vic2NyaWJlVmVyc2lvbqZmaWVsZHOQpWluZGV4G6Rkb2NzkN4ABKRuYW1lqUJ1cm5Bc3NldKZmaWVsZHOR3gAEpG5hbWXApHR5cGXMfqh0eXBlTmFtZatNdWx0aUFzc2V0c6Rkb2NzkKVpbmRleBykZG9jc5DeAASkbmFtZatFeHBlY3RBc3NldKZmaWVsZHOR3gAEpG5hbWXApHR5cGXMfqh0eXBlTmFtZatNdWx0aUFzc2V0c6Rkb2NzkKVpbmRleB2kZG9jc5DeAASkbmFtZaxFeHBlY3RPcmlnaW6mZmllbGRzkd4ABKRuYW1lwKR0eXBlzI6odHlwZU5hbWW1T3B0aW9uPE11bHRpTG9jYXRpb24+pGRvY3OQpWluZGV4HqRkb2NzkN4ABKRuYW1lq0V4cGVjdEVycm9ypmZpZWxkc5HeAASkbmFtZcCkdHlwZcyGqHR5cGVOYW1ltE9wdGlvbjwodTMyLCBFcnJvcik+pGRvY3OQpWluZGV4H6Rkb2NzkN4ABKRuYW1ltEV4cGVjdFRyYW5zYWN0U3RhdHVzpmZpZWxkc5HeAASkbmFtZcCkdHlwZcyMqHR5cGVOYW1lrk1heWJlRXJyb3JDb2RlpGRvY3OQpWluZGV4IKRkb2NzkN4ABKRuYW1lq1F1ZXJ5UGFsbGV0pmZpZWxkc5LeAASkbmFtZattb2R1bGVfbmFtZaR0eXBlDKh0eXBlTmFtZadWZWM8dTg+pGRvY3OQ3gAEpG5hbWWtcmVzcG9uc2VfaW5mb6R0eXBlzJGodHlwZU5hbWWxUXVlcnlSZXNwb25zZUluZm+kZG9jc5ClaW5kZXghpGRvY3OQ3gAEpG5hbWWsRXhwZWN0UGFsbGV0pmZpZWxkc5XeAASkbmFtZaVpbmRleKR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWWkbmFtZaR0eXBlDKh0eXBlTmFtZadWZWM8dTg+pGRvY3OQ3gAEpG5hbWWrbW9kdWxlX25hbWWkdHlwZQyodHlwZU5hbWWnVmVjPHU4PqRkb2NzkN4ABKRuYW1lq2NyYXRlX21ham9ypHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZa9taW5fY3JhdGVfbWlub3KkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleCKkZG9jc5DeAASkbmFtZbRSZXBvcnRUcmFuc2FjdFN0YXR1c6ZmaWVsZHOR3gAEpG5hbWXApHR5cGXMkah0eXBlTmFtZbFRdWVyeVJlc3BvbnNlSW5mb6Rkb2NzkKVpbmRleCOkZG9jc5DeAASkbmFtZbNDbGVhclRyYW5zYWN0U3RhdHVzpmZpZWxkc5ClaW5kZXgkpGRvY3OQ3gAEpG5hbWWvVW5pdmVyc2FsT3JpZ2lupmZpZWxkc5HeAASkbmFtZcCkdHlwZcx0qHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQpWluZGV4JaRkb2NzkN4ABKRuYW1lrUV4cG9ydE1lc3NhZ2WmZmllbGRzk94ABKRuYW1lp25ldHdvcmukdHlwZcx3qHR5cGVOYW1lqU5ldHdvcmtJZKRkb2NzkN4ABKRuYW1lq2Rlc3RpbmF0aW9upHR5cGXMc6h0eXBlTmFtZbVJbnRlcmlvck11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZaN4Y22kdHlwZcx7qHR5cGVOYW1lp1hjbTwoKT6kZG9jc5ClaW5kZXgmpGRvY3OQ3gAEpG5hbWWpTG9ja0Fzc2V0pmZpZWxkc5LeAASkbmFtZaVhc3NldKR0eXBlzICodHlwZU5hbWWqTXVsdGlBc3NldKRkb2NzkN4ABKRuYW1lqHVubG9ja2VypHR5cGXMcqh0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQpWluZGV4J6Rkb2NzkN4ABKRuYW1lq1VubG9ja0Fzc2V0pmZpZWxkc5LeAASkbmFtZaVhc3NldKR0eXBlzICodHlwZU5hbWWqTXVsdGlBc3NldKRkb2NzkN4ABKRuYW1lpnRhcmdldKR0eXBlzHKodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkKVpbmRleCikZG9jc5DeAASkbmFtZa5Ob3RlVW5sb2NrYWJsZaZmaWVsZHOS3gAEpG5hbWWlYXNzZXSkdHlwZcyAqHR5cGVOYW1lqk11bHRpQXNzZXSkZG9jc5DeAASkbmFtZaVvd25lcqR0eXBlzHKodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkKVpbmRleCmkZG9jc5DeAASkbmFtZa1SZXF1ZXN0VW5sb2NrpmZpZWxkc5LeAASkbmFtZaVhc3NldKR0eXBlzICodHlwZU5hbWWqTXVsdGlBc3NldKRkb2NzkN4ABKRuYW1lpmxvY2tlcqR0eXBlzHKodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkKVpbmRleCqkZG9jc5DeAASkbmFtZatTZXRGZWVzTW9kZaZmaWVsZHOR3gAEpG5hbWWsaml0X3dpdGhkcmF3pHR5cGUlqHR5cGVOYW1lpGJvb2ykZG9jc5ClaW5kZXgrpGRvY3OQ3gAEpG5hbWWoU2V0VG9waWOmZmllbGRzkd4ABKRuYW1lwKR0eXBlAah0eXBlTmFtZahbdTg7IDMyXaRkb2NzkKVpbmRleCykZG9jc5DeAASkbmFtZapDbGVhclRvcGljpmZpZWxkc5ClaW5kZXgtpGRvY3OQ3gAEpG5hbWWrQWxpYXNPcmlnaW6mZmllbGRzkd4ABKRuYW1lwKR0eXBlzHKodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkKVpbmRleC6kZG9jc5DeAASkbmFtZa9VbnBhaWRFeGVjdXRpb26mZmllbGRzkt4ABKRuYW1lrHdlaWdodF9saW1pdKR0eXBlzJWodHlwZU5hbWWrV2VpZ2h0TGltaXSkZG9jc5DeAASkbmFtZaxjaGVja19vcmlnaW6kdHlwZcyOqHR5cGVOYW1ltU9wdGlvbjxNdWx0aUxvY2F0aW9uPqRkb2NzkKVpbmRleC+kZG9jc5CkZG9jc5DeAAKiaWTMfqR0eXBl3gAEpHBhdGiUo3hjbaJ2M6ptdWx0aWFzc2V0q011bHRpQXNzZXRzpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGXMf6h0eXBlTmFtZa9WZWM8TXVsdGlBc3NldD6kZG9jc5CkZG9jc5DeAAKiaWTMf6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXMgKRkb2NzkN4AAqJpZMyApHR5cGXeAASkcGF0aJSjeGNtonYzqm11bHRpYXNzZXSqTXVsdGlBc3NldKZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lomlkpHR5cGXMgah0eXBlTmFtZadBc3NldElkpGRvY3OQ3gAEpG5hbWWjZnVupHR5cGXMgqh0eXBlTmFtZatGdW5naWJpbGl0eaRkb2NzkKRkb2NzkN4AAqJpZMyBpHR5cGXeAASkcGF0aJSjeGNtonYzqm11bHRpYXNzZXSnQXNzZXRJZKZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lqENvbmNyZXRlpmZpZWxkc5HeAASkbmFtZcCkdHlwZcxyqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWoQWJzdHJhY3SmZmllbGRzkd4ABKRuYW1lwKR0eXBlAah0eXBlTmFtZahbdTg7IDMyXaRkb2NzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTMgqR0eXBl3gAEpHBhdGiUo3hjbaJ2M6ptdWx0aWFzc2V0q0Z1bmdpYmlsaXR5pnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWoRnVuZ2libGWmZmllbGRzkd4ABKRuYW1lwKR0eXBlNah0eXBlTmFtZaR1MTI4pGRvY3OQpWluZGV4AKRkb2NzkN4ABKRuYW1lq05vbkZ1bmdpYmxlpmZpZWxkc5HeAASkbmFtZcCkdHlwZcyDqHR5cGVOYW1lrUFzc2V0SW5zdGFuY2WkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzIOkdHlwZd4ABKRwYXRolKN4Y22idjOqbXVsdGlhc3NldK1Bc3NldEluc3RhbmNlpnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOW3gAEpG5hbWWpVW5kZWZpbmVkpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWlSW5kZXimZmllbGRzkd4ABKRuYW1lwKR0eXBlNah0eXBlTmFtZaR1MTI4pGRvY3OQpWluZGV4AaRkb2NzkN4ABKRuYW1lpkFycmF5NKZmaWVsZHOR3gAEpG5hbWXApHR5cGUQqHR5cGVOYW1lp1t1ODsgNF2kZG9jc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWmQXJyYXk4pmZpZWxkc5HeAASkbmFtZcCkdHlwZcyEqHR5cGVOYW1lp1t1ODsgOF2kZG9jc5ClaW5kZXgDpGRvY3OQ3gAEpG5hbWWnQXJyYXkxNqZmaWVsZHOR3gAEpG5hbWXApHR5cGUoqHR5cGVOYW1lqFt1ODsgMTZdpGRvY3OQpWluZGV4BKRkb2NzkN4ABKRuYW1lp0FycmF5MzKmZmllbGRzkd4ABKRuYW1lwKR0eXBlAah0eXBlTmFtZahbdTg7IDMyXaRkb2NzkKVpbmRleAWkZG9jc5CkZG9jc5DeAAKiaWTMhKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbgikdHlwZQKkZG9jc5DeAAKiaWTMhaR0eXBl3gAEpHBhdGiTo3hjbaJ2M6hSZXNwb25zZaZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzlt4ABKRuYW1lpE51bGymZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZaZBc3NldHOmZmllbGRzkd4ABKRuYW1lwKR0eXBlzH6odHlwZU5hbWWrTXVsdGlBc3NldHOkZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWvRXhlY3V0aW9uUmVzdWx0pmZpZWxkc5HeAASkbmFtZcCkdHlwZcyGqHR5cGVOYW1ltE9wdGlvbjwodTMyLCBFcnJvcik+pGRvY3OQpWluZGV4AqRkb2NzkN4ABKRuYW1lp1ZlcnNpb26mZmllbGRzkd4ABKRuYW1lwKR0eXBlBKh0eXBlTmFtZa5zdXBlcjo6VmVyc2lvbqRkb2NzkKVpbmRleAOkZG9jc5DeAASkbmFtZatQYWxsZXRzSW5mb6ZmaWVsZHOR3gAEpG5hbWXApHR5cGXMiKh0eXBlTmFtZdkmQm91bmRlZFZlYzxQYWxsZXRJbmZvLCBNYXhQYWxsZXRzSW5mbz6kZG9jc5ClaW5kZXgEpGRvY3OQ3gAEpG5hbWWuRGlzcGF0Y2hSZXN1bHSmZmllbGRzkd4ABKRuYW1lwKR0eXBlzIyodHlwZU5hbWWuTWF5YmVFcnJvckNvZGWkZG9jc5ClaW5kZXgFpGRvY3OQpGRvY3OQ3gAComlkzIakdHlwZd4ABKRwYXRokaZPcHRpb26mcGFyYW1zkd4AAqRuYW1loVSkdHlwZcyHo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lpE5vbmWmZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZaRTb21lpmZpZWxkc5HeAASkbmFtZcCkdHlwZcyHqHR5cGVOYW1lwKRkb2NzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTMh6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpXR1cGxlkgTMZaRkb2NzkN4AAqJpZMyIpHR5cGXeAASkcGF0aJOzYm91bmRlZF9jb2xsZWN0aW9uc6tib3VuZGVkX3ZlY6pCb3VuZGVkVmVjpnBhcmFtc5LeAAKkbmFtZaFUpHR5cGXMid4AAqRuYW1loVOkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGXMi6h0eXBlTmFtZaZWZWM8VD6kZG9jc5CkZG9jc5DeAAKiaWTMiaR0eXBl3gAEpHBhdGiTo3hjbaJ2M6pQYWxsZXRJbmZvpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOW3gAEpG5hbWWlaW5kZXikdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lpG5hbWWkdHlwZcyKqHR5cGVOYW1l2SBCb3VuZGVkVmVjPHU4LCBNYXhQYWxsZXROYW1lTGVuPqRkb2NzkN4ABKRuYW1lq21vZHVsZV9uYW1lpHR5cGXMiqh0eXBlTmFtZdkgQm91bmRlZFZlYzx1OCwgTWF4UGFsbGV0TmFtZUxlbj6kZG9jc5DeAASkbmFtZaVtYWpvcqR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWWlbWlub3KkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lpXBhdGNopHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5CkZG9jc5DeAAKiaWTMiqR0eXBl3gAEpHBhdGiTs2JvdW5kZWRfY29sbGVjdGlvbnOrYm91bmRlZF92ZWOqQm91bmRlZFZlY6ZwYXJhbXOS3gACpG5hbWWhVKR0eXBlAt4AAqRuYW1loVOkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGUMqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZMyLpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZcyJpGRvY3OQ3gAComlkzIykdHlwZd4ABKRwYXRok6N4Y22idjOuTWF5YmVFcnJvckNvZGWmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5PeAASkbmFtZadTdWNjZXNzpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWlRXJyb3KmZmllbGRzkd4ABKRuYW1lwKR0eXBlzI2odHlwZU5hbWXZI0JvdW5kZWRWZWM8dTgsIE1heERpc3BhdGNoRXJyb3JMZW4+pGRvY3OQpWluZGV4AaRkb2NzkN4ABKRuYW1lrlRydW5jYXRlZEVycm9ypmZpZWxkc5HeAASkbmFtZcCkdHlwZcyNqHR5cGVOYW1l2SNCb3VuZGVkVmVjPHU4LCBNYXhEaXNwYXRjaEVycm9yTGVuPqRkb2NzkKVpbmRleAKkZG9jc5CkZG9jc5DeAAKiaWTMjaR0eXBl3gAEpHBhdGiTs2JvdW5kZWRfY29sbGVjdGlvbnOrYm91bmRlZF92ZWOqQm91bmRlZFZlY6ZwYXJhbXOS3gACpG5hbWWhVKR0eXBlAt4AAqRuYW1loVOkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGUMqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZMyOpHR5cGXeAASkcGF0aJGmT3B0aW9upnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXMcqNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZaROb25lpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWkU29tZaZmaWVsZHOR3gAEpG5hbWXApHR5cGXMcqh0eXBlTmFtZcCkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzI+kdHlwZd4ABKRwYXRok6N4Y22idjKqT3JpZ2luS2luZKZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzlN4ABKRuYW1lpk5hdGl2ZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lsFNvdmVyZWlnbkFjY291bnSmZmllbGRzkKVpbmRleAGkZG9jc5DeAASkbmFtZalTdXBlcnVzZXKmZmllbGRzkKVpbmRleAKkZG9jc5DeAASkbmFtZaNYY22mZmllbGRzkKVpbmRleAOkZG9jc5CkZG9jc5DeAAKiaWTMkKR0eXBl3gAEpHBhdGiTo3hjba5kb3VibGVfZW5jb2RlZK1Eb3VibGVFbmNvZGVkpnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lp2VuY29kZWSkdHlwZQyodHlwZU5hbWWnVmVjPHU4PqRkb2NzkKRkb2NzkN4AAqJpZMyRpHR5cGXeAASkcGF0aJOjeGNtonYzsVF1ZXJ5UmVzcG9uc2VJbmZvpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOT3gAEpG5hbWWrZGVzdGluYXRpb26kdHlwZcxyqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZahxdWVyeV9pZKR0eXBlCah0eXBlTmFtZadRdWVyeUlkpGRvY3OQ3gAEpG5hbWWqbWF4X3dlaWdodKR0eXBlCKh0eXBlTmFtZaZXZWlnaHSkZG9jc5CkZG9jc5DeAAKiaWTMkqR0eXBl3gAEpHBhdGiUo3hjbaJ2M6ptdWx0aWFzc2V0sE11bHRpQXNzZXRGaWx0ZXKmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZahEZWZpbml0ZaZmaWVsZHOR3gAEpG5hbWXApHR5cGXMfqh0eXBlTmFtZatNdWx0aUFzc2V0c6Rkb2NzkKVpbmRleACkZG9jc5DeAASkbmFtZaRXaWxkpmZpZWxkc5HeAASkbmFtZcCkdHlwZcyTqHR5cGVOYW1lrldpbGRNdWx0aUFzc2V0pGRvY3OQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZMyTpHR5cGXeAASkcGF0aJSjeGNtonYzqm11bHRpYXNzZXSuV2lsZE11bHRpQXNzZXSmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5TeAASkbmFtZaNBbGymZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZaVBbGxPZqZmaWVsZHOS3gAEpG5hbWWiaWSkdHlwZcyBqHR5cGVOYW1lp0Fzc2V0SWSkZG9jc5DeAASkbmFtZaNmdW6kdHlwZcyUqHR5cGVOYW1lr1dpbGRGdW5naWJpbGl0eaRkb2NzkKVpbmRleAGkZG9jc5DeAASkbmFtZapBbGxDb3VudGVkpmZpZWxkc5HeAASkbmFtZcCkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAKkZG9jc5DeAASkbmFtZaxBbGxPZkNvdW50ZWSmZmllbGRzk94ABKRuYW1lomlkpHR5cGXMgah0eXBlTmFtZadBc3NldElkpGRvY3OQ3gAEpG5hbWWjZnVupHR5cGXMlKh0eXBlTmFtZa9XaWxkRnVuZ2liaWxpdHmkZG9jc5DeAASkbmFtZaVjb3VudKR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4A6Rkb2NzkKRkb2NzkN4AAqJpZMyUpHR5cGXeAASkcGF0aJSjeGNtonYzqm11bHRpYXNzZXSvV2lsZEZ1bmdpYmlsaXR5pnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWoRnVuZ2libGWmZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZatOb25GdW5naWJsZaZmaWVsZHOQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZMyVpHR5cGXeAASkcGF0aJOjeGNtonYzq1dlaWdodExpbWl0pnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWpVW5saW1pdGVkpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWnTGltaXRlZKZmaWVsZHOR3gAEpG5hbWXApHR5cGUIqHR5cGVOYW1lpldlaWdodKRkb2NzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTMlqR0eXBl3gAEpHBhdGiSo3hjbbRWZXJzaW9uZWRNdWx0aUFzc2V0c6ZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lolYypmZpZWxkc5HeAASkbmFtZcCkdHlwZcyXqHR5cGVOYW1lr3YyOjpNdWx0aUFzc2V0c6Rkb2NzkKVpbmRleAGkZG9jc5DeAASkbmFtZaJWM6ZmaWVsZHOR3gAEpG5hbWXApHR5cGXMfqh0eXBlTmFtZa92Mzo6TXVsdGlBc3NldHOkZG9jc5ClaW5kZXgDpGRvY3OQpGRvY3OQ3gAComlkzJekdHlwZd4ABKRwYXRolKN4Y22idjKqbXVsdGlhc3NldKtNdWx0aUFzc2V0c6ZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzJiodHlwZU5hbWWvVmVjPE11bHRpQXNzZXQ+pGRvY3OQpGRvY3OQ3gAComlkzJikdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzJmkZG9jc5DeAAKiaWTMmaR0eXBl3gAEpHBhdGiUo3hjbaJ2MqptdWx0aWFzc2V0qk11bHRpQXNzZXSmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5LeAASkbmFtZaJpZKR0eXBlzJqodHlwZU5hbWWnQXNzZXRJZKRkb2NzkN4ABKRuYW1lo2Z1bqR0eXBlzKKodHlwZU5hbWWrRnVuZ2liaWxpdHmkZG9jc5CkZG9jc5DeAAKiaWTMmqR0eXBl3gAEpHBhdGiUo3hjbaJ2MqptdWx0aWFzc2V0p0Fzc2V0SWSmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZahDb25jcmV0ZaZmaWVsZHOR3gAEpG5hbWXApHR5cGXMm6h0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQpWluZGV4AKRkb2NzkN4ABKRuYW1lqEFic3RyYWN0pmZpZWxkc5HeAASkbmFtZcCkdHlwZQyodHlwZU5hbWWnVmVjPHU4PqRkb2NzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTMm6R0eXBl3gAEpHBhdGiUo3hjbaJ2Mq1tdWx0aWxvY2F0aW9urU11bHRpTG9jYXRpb26mcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5LeAASkbmFtZadwYXJlbnRzpHR5cGUCqHR5cGVOYW1lonU4pGRvY3OQ3gAEpG5hbWWoaW50ZXJpb3KkdHlwZcycqHR5cGVOYW1lqUp1bmN0aW9uc6Rkb2NzkKRkb2NzkN4AAqJpZMycpHR5cGXeAASkcGF0aJSjeGNtonYyrW11bHRpbG9jYXRpb26pSnVuY3Rpb25zpnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOZ3gAEpG5hbWWkSGVyZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lolgxpmZpZWxkc5HeAASkbmFtZcCkdHlwZcydqHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQpWluZGV4AaRkb2NzkN4ABKRuYW1lolgypmZpZWxkc5LeAASkbmFtZcCkdHlwZcydqHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMnah0eXBlTmFtZahKdW5jdGlvbqRkb2NzkKVpbmRleAKkZG9jc5DeAASkbmFtZaJYM6ZmaWVsZHOT3gAEpG5hbWXApHR5cGXMnah0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzJ2odHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcydqHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQpWluZGV4A6Rkb2NzkN4ABKRuYW1lolg0pmZpZWxkc5TeAASkbmFtZcCkdHlwZcydqHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMnah0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzJ2odHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcydqHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQpWluZGV4BKRkb2NzkN4ABKRuYW1lolg1pmZpZWxkc5XeAASkbmFtZcCkdHlwZcydqHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMnah0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzJ2odHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcydqHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMnah0eXBlTmFtZahKdW5jdGlvbqRkb2NzkKVpbmRleAWkZG9jc5DeAASkbmFtZaJYNqZmaWVsZHOW3gAEpG5hbWXApHR5cGXMnah0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzJ2odHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcydqHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMnah0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzJ2odHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcydqHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQpWluZGV4BqRkb2NzkN4ABKRuYW1lolg3pmZpZWxkc5feAASkbmFtZcCkdHlwZcydqHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMnah0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzJ2odHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcydqHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMnah0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzJ2odHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcydqHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQpWluZGV4B6Rkb2NzkN4ABKRuYW1lolg4pmZpZWxkc5jeAASkbmFtZcCkdHlwZcydqHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMnah0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzJ2odHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcydqHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMnah0eXBlTmFtZahKdW5jdGlvbqRkb2NzkN4ABKRuYW1lwKR0eXBlzJ2odHlwZU5hbWWoSnVuY3Rpb26kZG9jc5DeAASkbmFtZcCkdHlwZcydqHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQ3gAEpG5hbWXApHR5cGXMnah0eXBlTmFtZahKdW5jdGlvbqRkb2NzkKVpbmRleAikZG9jc5CkZG9jc5DeAAKiaWTMnaR0eXBl3gAEpHBhdGiUo3hjbaJ2MqhqdW5jdGlvbqhKdW5jdGlvbqZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzmd4ABKRuYW1lqVBhcmFjaGFpbqZmaWVsZHOR3gAEpG5hbWXApHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWrQWNjb3VudElkMzKmZmllbGRzkt4ABKRuYW1lp25ldHdvcmukdHlwZcyeqHR5cGVOYW1lqU5ldHdvcmtJZKRkb2NzkN4ABKRuYW1lomlkpHR5cGUBqHR5cGVOYW1lqFt1ODsgMzJdpGRvY3OQpWluZGV4AaRkb2NzkN4ABKRuYW1lrkFjY291bnRJbmRleDY0pmZpZWxkc5LeAASkbmFtZaduZXR3b3JrpHR5cGXMnqh0eXBlTmFtZalOZXR3b3JrSWSkZG9jc5DeAASkbmFtZaVpbmRleKR0eXBlCah0eXBlTmFtZaN1NjSkZG9jc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWsQWNjb3VudEtleTIwpmZpZWxkc5LeAASkbmFtZaduZXR3b3JrpHR5cGXMnqh0eXBlTmFtZalOZXR3b3JrSWSkZG9jc5DeAASkbmFtZaNrZXmkdHlwZcx4qHR5cGVOYW1lqFt1ODsgMjBdpGRvY3OQpWluZGV4A6Rkb2NzkN4ABKRuYW1lrlBhbGxldEluc3RhbmNlpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWWidTikZG9jc5ClaW5kZXgEpGRvY3OQ3gAEpG5hbWWsR2VuZXJhbEluZGV4pmZpZWxkc5HeAASkbmFtZcCkdHlwZTWodHlwZU5hbWWkdTEyOKRkb2NzkKVpbmRleAWkZG9jc5DeAASkbmFtZapHZW5lcmFsS2V5pmZpZWxkc5HeAASkbmFtZcCkdHlwZcyfqHR5cGVOYW1l2SBXZWFrQm91bmRlZFZlYzx1OCwgQ29uc3RVMzI8MzI+PqRkb2NzkKVpbmRleAakZG9jc5DeAASkbmFtZalPbmx5Q2hpbGSmZmllbGRzkKVpbmRleAekZG9jc5DeAASkbmFtZalQbHVyYWxpdHmmZmllbGRzkt4ABKRuYW1lomlkpHR5cGXMoKh0eXBlTmFtZaZCb2R5SWSkZG9jc5DeAASkbmFtZaRwYXJ0pHR5cGXMoah0eXBlTmFtZahCb2R5UGFydKRkb2NzkKVpbmRleAikZG9jc5CkZG9jc5DeAAKiaWTMnqR0eXBl3gAEpHBhdGiTo3hjbaJ2MqlOZXR3b3JrSWSmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5TeAASkbmFtZaNBbnmmZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZaVOYW1lZKZmaWVsZHOR3gAEpG5hbWXApHR5cGXMn6h0eXBlTmFtZdkgV2Vha0JvdW5kZWRWZWM8dTgsIENvbnN0VTMyPDMyPj6kZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWoUG9sa2Fkb3SmZmllbGRzkKVpbmRleAKkZG9jc5DeAASkbmFtZaZLdXNhbWGmZmllbGRzkKVpbmRleAOkZG9jc5CkZG9jc5DeAAKiaWTMn6R0eXBl3gAEpHBhdGiTs2JvdW5kZWRfY29sbGVjdGlvbnOwd2Vha19ib3VuZGVkX3ZlY65XZWFrQm91bmRlZFZlY6ZwYXJhbXOS3gACpG5hbWWhVKR0eXBlAt4AAqRuYW1loVOkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGUMqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZMygpHR5cGXeAASkcGF0aJOjeGNtonYypkJvZHlJZKZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzmt4ABKRuYW1lpFVuaXSmZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZaVOYW1lZKZmaWVsZHOR3gAEpG5hbWXApHR5cGXMn6h0eXBlTmFtZdkgV2Vha0JvdW5kZWRWZWM8dTgsIENvbnN0VTMyPDMyPj6kZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWlSW5kZXimZmllbGRzkd4ABKRuYW1lwKR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4AqRkb2NzkN4ABKRuYW1lqUV4ZWN1dGl2ZaZmaWVsZHOQpWluZGV4A6Rkb2NzkN4ABKRuYW1lqVRlY2huaWNhbKZmaWVsZHOQpWluZGV4BKRkb2NzkN4ABKRuYW1lq0xlZ2lzbGF0aXZlpmZpZWxkc5ClaW5kZXgFpGRvY3OQ3gAEpG5hbWWoSnVkaWNpYWymZmllbGRzkKVpbmRleAakZG9jc5DeAASkbmFtZadEZWZlbnNlpmZpZWxkc5ClaW5kZXgHpGRvY3OQ3gAEpG5hbWWuQWRtaW5pc3RyYXRpb26mZmllbGRzkKVpbmRleAikZG9jc5DeAASkbmFtZahUcmVhc3VyeaZmaWVsZHOQpWluZGV4CaRkb2NzkKRkb2NzkN4AAqJpZMyhpHR5cGXeAASkcGF0aJOjeGNtonYyqEJvZHlQYXJ0pnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOV3gAEpG5hbWWlVm9pY2WmZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZadNZW1iZXJzpmZpZWxkc5HeAASkbmFtZaVjb3VudKR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4AaRkb2NzkN4ABKRuYW1lqEZyYWN0aW9upmZpZWxkc5LeAASkbmFtZaNub22kdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lpWRlbm9tpHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWxQXRMZWFzdFByb3BvcnRpb26mZmllbGRzkt4ABKRuYW1lo25vbaR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWWlZGVub22kdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAOkZG9jc5DeAASkbmFtZbJNb3JlVGhhblByb3BvcnRpb26mZmllbGRzkt4ABKRuYW1lo25vbaR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWWlZGVub22kdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleASkZG9jc5CkZG9jc5DeAAKiaWTMoqR0eXBl3gAEpHBhdGiUo3hjbaJ2MqptdWx0aWFzc2V0q0Z1bmdpYmlsaXR5pnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWoRnVuZ2libGWmZmllbGRzkd4ABKRuYW1lwKR0eXBlNah0eXBlTmFtZaR1MTI4pGRvY3OQpWluZGV4AKRkb2NzkN4ABKRuYW1lq05vbkZ1bmdpYmxlpmZpZWxkc5HeAASkbmFtZcCkdHlwZcyjqHR5cGVOYW1lrUFzc2V0SW5zdGFuY2WkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzKOkdHlwZd4ABKRwYXRolKN4Y22idjKqbXVsdGlhc3NldK1Bc3NldEluc3RhbmNlpnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOX3gAEpG5hbWWpVW5kZWZpbmVkpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWlSW5kZXimZmllbGRzkd4ABKRuYW1lwKR0eXBlNah0eXBlTmFtZaR1MTI4pGRvY3OQpWluZGV4AaRkb2NzkN4ABKRuYW1lpkFycmF5NKZmaWVsZHOR3gAEpG5hbWXApHR5cGUQqHR5cGVOYW1lp1t1ODsgNF2kZG9jc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWmQXJyYXk4pmZpZWxkc5HeAASkbmFtZcCkdHlwZcyEqHR5cGVOYW1lp1t1ODsgOF2kZG9jc5ClaW5kZXgDpGRvY3OQ3gAEpG5hbWWnQXJyYXkxNqZmaWVsZHOR3gAEpG5hbWXApHR5cGUoqHR5cGVOYW1lqFt1ODsgMTZdpGRvY3OQpWluZGV4BKRkb2NzkN4ABKRuYW1lp0FycmF5MzKmZmllbGRzkd4ABKRuYW1lwKR0eXBlAah0eXBlTmFtZahbdTg7IDMyXaRkb2NzkKVpbmRleAWkZG9jc5DeAASkbmFtZaRCbG9ipmZpZWxkc5HeAASkbmFtZcCkdHlwZQyodHlwZU5hbWWnVmVjPHU4PqRkb2NzkKVpbmRleAakZG9jc5CkZG9jc5DeAAKiaWTMpKR0eXBl3gAEpHBhdGiSo3hjbbZWZXJzaW9uZWRNdWx0aUxvY2F0aW9upnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWiVjKmZmllbGRzkd4ABKRuYW1lwKR0eXBlzJuodHlwZU5hbWWxdjI6Ok11bHRpTG9jYXRpb26kZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWiVjOmZmllbGRzkd4ABKRuYW1lwKR0eXBlzHKodHlwZU5hbWWxdjM6Ok11bHRpTG9jYXRpb26kZG9jc5ClaW5kZXgDpGRvY3OQpGRvY3OQ3gAComlkzKWkdHlwZd4ABKRwYXRokqxmcmFtZV9zeXN0ZW2lUGhhc2WmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5PeAASkbmFtZa5BcHBseUV4dHJpbnNpY6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleACkZG9jc5DeAASkbmFtZaxGaW5hbGl6YXRpb26mZmllbGRzkKVpbmRleAGkZG9jc5DeAASkbmFtZa5Jbml0aWFsaXphdGlvbqZmaWVsZHOQpWluZGV4AqRkb2NzkKRkb2NzkN4AAqJpZMympHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZQukZG9jc5DeAAKiaWTMp6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGU/pGRvY3OQ3gAComlkzKikdHlwZd4ABKRwYXRokqxmcmFtZV9zeXN0ZW22TGFzdFJ1bnRpbWVVcGdyYWRlSW5mb6ZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lrHNwZWNfdmVyc2lvbqR0eXBlzHWodHlwZU5hbWWzY29kZWM6OkNvbXBhY3Q8dTMyPqRkb2NzkN4ABKRuYW1lqXNwZWNfbmFtZaR0eXBlzKmodHlwZU5hbWW5c3BfcnVudGltZTo6UnVudGltZVN0cmluZ6Rkb2NzkKRkb2NzkN4AAqJpZMyppHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGpcHJpbWl0aXZlo1N0cqRkb2NzkN4AAqJpZMyqpHR5cGXeAASkcGF0aJOsZnJhbWVfc3lzdGVtpnBhbGxldKRDYWxspnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzmN4ABKRuYW1lpnJlbWFya6ZmaWVsZHOR3gAEpG5hbWWmcmVtYXJrpHR5cGUMqHR5cGVOYW1lp1ZlYzx1OD6kZG9jc5ClaW5kZXgApGRvY3OUuk1ha2Ugc29tZSBvbi1jaGFpbiByZW1hcmsuoK0jIyBDb21wbGV4aXR5qC0gYE8oMSlg3gAEpG5hbWWuc2V0X2hlYXBfcGFnZXOmZmllbGRzkd4ABKRuYW1lpXBhZ2VzpHR5cGUKqHR5cGVOYW1lo3U2NKRkb2NzkKVpbmRleAGkZG9jc5HZPlNldCB0aGUgbnVtYmVyIG9mIHBhZ2VzIGluIHRoZSBXZWJBc3NlbWJseSBlbnZpcm9ubWVudCdzIGhlYXAu3gAEpG5hbWWoc2V0X2NvZGWmZmllbGRzkd4ABKRuYW1lpGNvZGWkdHlwZQyodHlwZU5hbWWnVmVjPHU4PqRkb2NzkKVpbmRleAKkZG9jc5S5U2V0IHRoZSBuZXcgcnVudGltZSBjb2RlLqCtIyMgQ29tcGxleGl0edlMLSBgTyhDICsgUylgIHdoZXJlIGBDYCBsZW5ndGggb2YgYGNvZGVgIGFuZCBgU2AgY29tcGxleGl0eSBvZiBgY2FuX3NldF9jb2RlYN4ABKRuYW1lt3NldF9jb2RlX3dpdGhvdXRfY2hlY2tzpmZpZWxkc5HeAASkbmFtZaRjb2RlpHR5cGUMqHR5cGVOYW1lp1ZlYzx1OD6kZG9jc5ClaW5kZXgDpGRvY3OU2UZTZXQgdGhlIG5ldyBydW50aW1lIGNvZGUgd2l0aG91dCBkb2luZyBhbnkgY2hlY2tzIG9mIHRoZSBnaXZlbiBgY29kZWAuoK0jIyBDb21wbGV4aXR52SMtIGBPKEMpYCB3aGVyZSBgQ2AgbGVuZ3RoIG9mIGBjb2RlYN4ABKRuYW1lq3NldF9zdG9yYWdlpmZpZWxkc5HeAASkbmFtZaVpdGVtc6R0eXBlzKuodHlwZU5hbWWtVmVjPEtleVZhbHVlPqRkb2NzkKVpbmRleASkZG9jc5G6U2V0IHNvbWUgaXRlbXMgb2Ygc3RvcmFnZS7eAASkbmFtZaxraWxsX3N0b3JhZ2WmZmllbGRzkd4ABKRuYW1lpGtleXOkdHlwZcytqHR5cGVOYW1lqFZlYzxLZXk+pGRvY3OQpWluZGV4BaRkb2Nzkb1LaWxsIHNvbWUgaXRlbXMgZnJvbSBzdG9yYWdlLt4ABKRuYW1lq2tpbGxfcHJlZml4pmZpZWxkc5LeAASkbmFtZaZwcmVmaXikdHlwZQyodHlwZU5hbWWjS2V5pGRvY3OQ3gAEpG5hbWWnc3Via2V5c6R0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXgGpGRvY3OU2URLaWxsIGFsbCBzdG9yYWdlIGl0ZW1zIHdpdGggYSBrZXkgdGhhdCBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gcHJlZml4LqDZTioqTk9URToqKiBXZSByZWx5IG9uIHRoZSBSb290IG9yaWdpbiB0byBwcm92aWRlIHVzIHRoZSBudW1iZXIgb2Ygc3Via2V5cyB1bmRlctlPdGhlIHByZWZpeCB3ZSBhcmUgcmVtb3ZpbmcgdG8gYWNjdXJhdGVseSBjYWxjdWxhdGUgdGhlIHdlaWdodCBvZiB0aGlzIGZ1bmN0aW9uLt4ABKRuYW1lsXJlbWFya193aXRoX2V2ZW50pmZpZWxkc5HeAASkbmFtZaZyZW1hcmukdHlwZQyodHlwZU5hbWWnVmVjPHU4PqRkb2NzkKVpbmRleAekZG9jc5HZKU1ha2Ugc29tZSBvbi1jaGFpbiByZW1hcmsgYW5kIGVtaXQgZXZlbnQupGRvY3OR2UlDb250YWlucyBvbmUgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIHRoYXQgY2FuIGJlIGNhbGxlZCBieSBhbiBleHRyaW5zaWMu3gAComlkzKukdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzKykZG9jc5DeAAKiaWTMrKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpXR1cGxlkgwMpGRvY3OQ3gAComlkzK2kdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlDKRkb2NzkN4AAqJpZMyupHR5cGXeAASkcGF0aJOsZnJhbWVfc3lzdGVtpmxpbWl0c6xCbG9ja1dlaWdodHOmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5PeAASkbmFtZapiYXNlX2Jsb2NrpHR5cGUIqHR5cGVOYW1lpldlaWdodKRkb2NzkN4ABKRuYW1lqW1heF9ibG9ja6R0eXBlCKh0eXBlTmFtZaZXZWlnaHSkZG9jc5DeAASkbmFtZalwZXJfY2xhc3OkdHlwZcyvqHR5cGVOYW1l2SFQZXJEaXNwYXRjaENsYXNzPFdlaWdodHNQZXJDbGFzcz6kZG9jc5CkZG9jc5DeAAKiaWTMr6R0eXBl3gAEpHBhdGiTrWZyYW1lX3N1cHBvcnSoZGlzcGF0Y2iwUGVyRGlzcGF0Y2hDbGFzc6ZwYXJhbXOR3gACpG5hbWWhVKR0eXBlzLCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOT3gAEpG5hbWWmbm9ybWFspHR5cGXMsKh0eXBlTmFtZaFUpGRvY3OQ3gAEpG5hbWWrb3BlcmF0aW9uYWykdHlwZcywqHR5cGVOYW1loVSkZG9jc5DeAASkbmFtZaltYW5kYXRvcnmkdHlwZcywqHR5cGVOYW1loVSkZG9jc5CkZG9jc5DeAAKiaWTMsKR0eXBl3gAEpHBhdGiTrGZyYW1lX3N5c3RlbaZsaW1pdHOvV2VpZ2h0c1BlckNsYXNzpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOU3gAEpG5hbWWuYmFzZV9leHRyaW5zaWOkdHlwZQiodHlwZU5hbWWmV2VpZ2h0pGRvY3OQ3gAEpG5hbWWtbWF4X2V4dHJpbnNpY6R0eXBlzLGodHlwZU5hbWWuT3B0aW9uPFdlaWdodD6kZG9jc5DeAASkbmFtZaltYXhfdG90YWykdHlwZcyxqHR5cGVOYW1lrk9wdGlvbjxXZWlnaHQ+pGRvY3OQ3gAEpG5hbWWocmVzZXJ2ZWSkdHlwZcyxqHR5cGVOYW1lrk9wdGlvbjxXZWlnaHQ+pGRvY3OQpGRvY3OQ3gAComlkzLGkdHlwZd4ABKRwYXRokaZPcHRpb26mcGFyYW1zkd4AAqRuYW1loVSkdHlwZQijZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWkTm9uZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lpFNvbWWmZmllbGRzkd4ABKRuYW1lwKR0eXBlCKh0eXBlTmFtZcCkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzLKkdHlwZd4ABKRwYXRok6xmcmFtZV9zeXN0ZW2mbGltaXRzq0Jsb2NrTGVuZ3RopnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWWjbWF4pHR5cGXMs6h0eXBlTmFtZbVQZXJEaXNwYXRjaENsYXNzPHUzMj6kZG9jc5CkZG9jc5DeAAKiaWTMs6R0eXBl3gAEpHBhdGiTrWZyYW1lX3N1cHBvcnSoZGlzcGF0Y2iwUGVyRGlzcGF0Y2hDbGFzc6ZwYXJhbXOR3gACpG5hbWWhVKR0eXBlBKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5PeAASkbmFtZaZub3JtYWykdHlwZQSodHlwZU5hbWWhVKRkb2NzkN4ABKRuYW1lq29wZXJhdGlvbmFspHR5cGUEqHR5cGVOYW1loVSkZG9jc5DeAASkbmFtZaltYW5kYXRvcnmkdHlwZQSodHlwZU5hbWWhVKRkb2NzkKRkb2NzkN4AAqJpZMy0pHR5cGXeAASkcGF0aJKqc3Bfd2VpZ2h0c69SdW50aW1lRGJXZWlnaHSmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5LeAASkbmFtZaRyZWFkpHR5cGUKqHR5cGVOYW1lo3U2NKRkb2NzkN4ABKRuYW1lpXdyaXRlpHR5cGUKqHR5cGVOYW1lo3U2NKRkb2NzkKRkb2NzkN4AAqJpZMy1pHR5cGXeAASkcGF0aJKqc3BfdmVyc2lvbq5SdW50aW1lVmVyc2lvbqZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzmN4ABKRuYW1lqXNwZWNfbmFtZaR0eXBlzKmodHlwZU5hbWWtUnVudGltZVN0cmluZ6Rkb2NzkN4ABKRuYW1lqWltcGxfbmFtZaR0eXBlzKmodHlwZU5hbWWtUnVudGltZVN0cmluZ6Rkb2NzkN4ABKRuYW1lsWF1dGhvcmluZ192ZXJzaW9upHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lrHNwZWNfdmVyc2lvbqR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZaxpbXBsX3ZlcnNpb26kdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWWkYXBpc6R0eXBlzLaodHlwZU5hbWWnQXBpc1ZlY6Rkb2NzkN4ABKRuYW1ls3RyYW5zYWN0aW9uX3ZlcnNpb26kdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWWtc3RhdGVfdmVyc2lvbqR0eXBlAqh0eXBlTmFtZaJ1OKRkb2NzkKRkb2NzkN4AAqJpZMy2pHR5cGXeAASkcGF0aJGjQ293pnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXMt6NkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZcy3qHR5cGVOYW1lwKRkb2NzkKRkb2NzkN4AAqJpZMy3pHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZcy4pGRvY3OQ3gAComlkzLikdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZLMhASkZG9jc5DeAAKiaWTMuaR0eXBl3gAEpHBhdGiTrGZyYW1lX3N5c3RlbaZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOW3gAEpG5hbWWvSW52YWxpZFNwZWNOYW1lpmZpZWxkc5ClaW5kZXgApGRvY3OS2URUaGUgbmFtZSBvZiBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IG1hdGNoIGJldHdlZW4gdGhlIGN1cnJlbnQgcnVudGltZbRhbmQgdGhlIG5ldyBydW50aW1lLt4ABKRuYW1lulNwZWNWZXJzaW9uTmVlZHNUb0luY3JlYXNlpmZpZWxkc5ClaW5kZXgBpGRvY3OS2VBUaGUgc3BlY2lmaWNhdGlvbiB2ZXJzaW9uIGlzIG5vdCBhbGxvd2VkIHRvIGRlY3JlYXNlIGJldHdlZW4gdGhlIGN1cnJlbnQgcnVudGltZbRhbmQgdGhlIG5ldyBydW50aW1lLt4ABKRuYW1lvUZhaWxlZFRvRXh0cmFjdFJ1bnRpbWVWZXJzaW9upmZpZWxkc5ClaW5kZXgCpGRvY3OT2TtGYWlsZWQgdG8gZXh0cmFjdCB0aGUgcnVudGltZSB2ZXJzaW9uIGZyb20gdGhlIG5ldyBydW50aW1lLqDZQkVpdGhlciBjYWxsaW5nIGBDb3JlX3ZlcnNpb25gIG9yIGRlY29kaW5nIGBSdW50aW1lVmVyc2lvbmAgZmFpbGVkLt4ABKRuYW1ls05vbkRlZmF1bHRDb21wb3NpdGWmZmllbGRzkKVpbmRleAOkZG9jc5HZP1N1aWNpZGUgY2FsbGVkIHdoZW4gdGhlIGFjY291bnQgaGFzIG5vbi1kZWZhdWx0IGNvbXBvc2l0ZSBkYXRhLt4ABKRuYW1lr05vblplcm9SZWZDb3VudKZmaWVsZHOQpWluZGV4BKRkb2NzkdlNVGhlcmUgaXMgYSBub24temVybyByZWZlcmVuY2UgY291bnQgcHJldmVudGluZyB0aGUgYWNjb3VudCBmcm9tIGJlaW5nIHB1cmdlZC7eAASkbmFtZaxDYWxsRmlsdGVyZWSmZmllbGRzkKVpbmRleAWkZG9jc5HZNFRoZSBvcmlnaW4gZmlsdGVyIHByZXZlbnQgdGhlIGNhbGwgdG8gYmUgZGlzcGF0Y2hlZC6kZG9jc5G7RXJyb3IgZm9yIHRoZSBTeXN0ZW0gcGFsbGV03gAComlkzLqkdHlwZd4ABKRwYXRok7Nib3VuZGVkX2NvbGxlY3Rpb25zsHdlYWtfYm91bmRlZF92ZWOuV2Vha0JvdW5kZWRWZWOmcGFyYW1zkt4AAqRuYW1loVSkdHlwZcy73gACpG5hbWWhU6R0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZcy9qHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZMy7pHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSzLwKpGRvY3OQ3gAComlkzLykdHlwZd4ABKRwYXRok7FzcF9jb25zZW5zdXNfYmFiZaNhcHCmUHVibGljpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGUxqHR5cGVOYW1lr3NyMjU1MTk6OlB1YmxpY6Rkb2NzkKRkb2NzkN4AAqJpZMy9pHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZcy7pGRvY3OQ3gAComlkzL6kdHlwZd4ABKRwYXRokrJzcF9jb25zZW5zdXNfc2xvdHOkU2xvdKZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlCqh0eXBlTmFtZaN1NjSkZG9jc5CkZG9jc5DeAAKiaWTMv6R0eXBl3gAEpHBhdGiTsXNwX2NvbnNlbnN1c19iYWJlp2RpZ2VzdHO0TmV4dENvbmZpZ0Rlc2NyaXB0b3KmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5HeAASkbmFtZaJWMaZmaWVsZHOS3gAEpG5hbWWhY6R0eXBlzMCodHlwZU5hbWWqKHU2NCwgdTY0KaRkb2NzkN4ABKRuYW1lrWFsbG93ZWRfc2xvdHOkdHlwZczBqHR5cGVOYW1lrEFsbG93ZWRTbG90c6Rkb2NzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTMwKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpXR1cGxlkgoKpGRvY3OQ3gAComlkzMGkdHlwZd4ABKRwYXRokrFzcF9jb25zZW5zdXNfYmFiZaxBbGxvd2VkU2xvdHOmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5PeAASkbmFtZaxQcmltYXJ5U2xvdHOmZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZb1QcmltYXJ5QW5kU2Vjb25kYXJ5UGxhaW5TbG90c6ZmaWVsZHOQpWluZGV4AaRkb2NzkN4ABKRuYW1lu1ByaW1hcnlBbmRTZWNvbmRhcnlWUkZTbG90c6ZmaWVsZHOQpWluZGV4AqRkb2NzkKRkb2NzkN4AAqJpZMzCpHR5cGXeAASkcGF0aJOzYm91bmRlZF9jb2xsZWN0aW9uc6tib3VuZGVkX3ZlY6pCb3VuZGVkVmVjpnBhcmFtc5LeAAKkbmFtZaFUpHR5cGUB3gACpG5hbWWhU6R0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZczDqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZMzDpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZQGkZG9jc5DeAAKiaWTMxKR0eXBl3gAEpHBhdGiRpk9wdGlvbqZwYXJhbXOR3gACpG5hbWWhVKR0eXBlzMWjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWkTm9uZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lpFNvbWWmZmllbGRzkd4ABKRuYW1lwKR0eXBlzMWodHlwZU5hbWXApGRvY3OQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZMzFpHR5cGXeAASkcGF0aJOxc3BfY29uc2Vuc3VzX2JhYmWnZGlnZXN0c6lQcmVEaWdlc3SmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5PeAASkbmFtZadQcmltYXJ5pmZpZWxkc5HeAASkbmFtZcCkdHlwZczGqHR5cGVOYW1lsFByaW1hcnlQcmVEaWdlc3SkZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWuU2Vjb25kYXJ5UGxhaW6mZmllbGRzkd4ABKRuYW1lwKR0eXBlzMeodHlwZU5hbWW3U2Vjb25kYXJ5UGxhaW5QcmVEaWdlc3SkZG9jc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWsU2Vjb25kYXJ5VlJGpmZpZWxkc5HeAASkbmFtZcCkdHlwZczIqHR5cGVOYW1ltVNlY29uZGFyeVZSRlByZURpZ2VzdKRkb2NzkKVpbmRleAOkZG9jc5CkZG9jc5DeAAKiaWTMxqR0eXBl3gAEpHBhdGiTsXNwX2NvbnNlbnN1c19iYWJlp2RpZ2VzdHOwUHJpbWFyeVByZURpZ2VzdKZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzlN4ABKRuYW1lr2F1dGhvcml0eV9pbmRleKR0eXBlBKh0eXBlTmFtZbVzdXBlcjo6QXV0aG9yaXR5SW5kZXikZG9jc5DeAASkbmFtZaRzbG90pHR5cGXMvqh0eXBlTmFtZaRTbG90pGRvY3OQ3gAEpG5hbWWqdnJmX291dHB1dKR0eXBlAah0eXBlTmFtZalWUkZPdXRwdXSkZG9jc5DeAASkbmFtZal2cmZfcHJvb2akdHlwZcxdqHR5cGVOYW1lqFZSRlByb29mpGRvY3OQpGRvY3OQ3gAComlkzMekdHlwZd4ABKRwYXRok7FzcF9jb25zZW5zdXNfYmFiZadkaWdlc3Rzt1NlY29uZGFyeVBsYWluUHJlRGlnZXN0pnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOS3gAEpG5hbWWvYXV0aG9yaXR5X2luZGV4pHR5cGUEqHR5cGVOYW1ltXN1cGVyOjpBdXRob3JpdHlJbmRleKRkb2NzkN4ABKRuYW1lpHNsb3SkdHlwZcy+qHR5cGVOYW1lpFNsb3SkZG9jc5CkZG9jc5DeAAKiaWTMyKR0eXBl3gAEpHBhdGiTsXNwX2NvbnNlbnN1c19iYWJlp2RpZ2VzdHO1U2Vjb25kYXJ5VlJGUHJlRGlnZXN0pnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOU3gAEpG5hbWWvYXV0aG9yaXR5X2luZGV4pHR5cGUEqHR5cGVOYW1ltXN1cGVyOjpBdXRob3JpdHlJbmRleKRkb2NzkN4ABKRuYW1lpHNsb3SkdHlwZcy+qHR5cGVOYW1lpFNsb3SkZG9jc5DeAASkbmFtZap2cmZfb3V0cHV0pHR5cGUBqHR5cGVOYW1lqVZSRk91dHB1dKRkb2NzkN4ABKRuYW1lqXZyZl9wcm9vZqR0eXBlzF2odHlwZU5hbWWoVlJGUHJvb2akZG9jc5CkZG9jc5DeAAKiaWTMyaR0eXBl3gAEpHBhdGiSsXNwX2NvbnNlbnN1c19iYWJltkJhYmVFcG9jaENvbmZpZ3VyYXRpb26mcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5LeAASkbmFtZaFjpHR5cGXMwKh0eXBlTmFtZaoodTY0LCB1NjQppGRvY3OQ3gAEpG5hbWWtYWxsb3dlZF9zbG90c6R0eXBlzMGodHlwZU5hbWWsQWxsb3dlZFNsb3RzpGRvY3OQpGRvY3OQ3gAComlkzMqkdHlwZd4ABKRwYXRok7Nib3VuZGVkX2NvbGxlY3Rpb25zq2JvdW5kZWRfdmVjqkJvdW5kZWRWZWOmcGFyYW1zkt4AAqRuYW1loVSkdHlwZczL3gACpG5hbWWhU6R0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZczMqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZMzLpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSCgSkZG9jc5DeAAKiaWTMzKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXMy6Rkb2NzkN4AAqJpZMzNpHR5cGXeAASkcGF0aJOrcGFsbGV0X2JhYmWmcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWWzcmVwb3J0X2VxdWl2b2NhdGlvbqZmaWVsZHOS3gAEpG5hbWWyZXF1aXZvY2F0aW9uX3Byb29mpHR5cGXMzqh0eXBlTmFtZdkhQm94PEVxdWl2b2NhdGlvblByb29mPFQ6OkhlYWRlcj4+pGRvY3OQ3gAEpG5hbWWva2V5X293bmVyX3Byb29mpHR5cGXM0ah0eXBlTmFtZbBUOjpLZXlPd25lclByb29mpGRvY3OQpWluZGV4AKRkb2NzlNlCUmVwb3J0IGF1dGhvcml0eSBlcXVpdm9jYXRpb24vbWlzYmVoYXZpb3IuIFRoaXMgbWV0aG9kIHdpbGwgdmVyaWZ52UF0aGUgZXF1aXZvY2F0aW9uIHByb29mIGFuZCB2YWxpZGF0ZSB0aGUgZ2l2ZW4ga2V5IG93bmVyc2hpcCBwcm9vZtlDYWdhaW5zdCB0aGUgZXh0cmFjdGVkIG9mZmVuZGVyLiBJZiBib3RoIGFyZSB2YWxpZCwgdGhlIG9mZmVuY2Ugd2lsbKxiZSByZXBvcnRlZC7eAASkbmFtZbxyZXBvcnRfZXF1aXZvY2F0aW9uX3Vuc2lnbmVkpmZpZWxkc5LeAASkbmFtZbJlcXVpdm9jYXRpb25fcHJvb2akdHlwZczOqHR5cGVOYW1l2SFCb3g8RXF1aXZvY2F0aW9uUHJvb2Y8VDo6SGVhZGVyPj6kZG9jc5DeAASkbmFtZa9rZXlfb3duZXJfcHJvb2akdHlwZczRqHR5cGVOYW1lsFQ6OktleU93bmVyUHJvb2akZG9jc5ClaW5kZXgBpGRvY3OY2UJSZXBvcnQgYXV0aG9yaXR5IGVxdWl2b2NhdGlvbi9taXNiZWhhdmlvci4gVGhpcyBtZXRob2Qgd2lsbCB2ZXJpZnnZQXRoZSBlcXVpdm9jYXRpb24gcHJvb2YgYW5kIHZhbGlkYXRlIHRoZSBnaXZlbiBrZXkgb3duZXJzaGlwIHByb29m2UNhZ2FpbnN0IHRoZSBleHRyYWN0ZWQgb2ZmZW5kZXIuIElmIGJvdGggYXJlIHZhbGlkLCB0aGUgb2ZmZW5jZSB3aWxsrGJlIHJlcG9ydGVkLtlDVGhpcyBleHRyaW5zaWMgbXVzdCBiZSBjYWxsZWQgdW5zaWduZWQgYW5kIGl0IGlzIGV4cGVjdGVkIHRoYXQgb25sedlFYmxvY2sgYXV0aG9ycyB3aWxsIGNhbGwgaXQgKHZhbGlkYXRlZCBpbiBgVmFsaWRhdGVVbnNpZ25lZGApLCBhcyBzdWNo2UVpZiB0aGUgYmxvY2sgYXV0aG9yIGlzIGRlZmluZWQgaXQgd2lsbCBiZSBkZWZpbmVkIGFzIHRoZSBlcXVpdm9jYXRpb26pcmVwb3J0ZXIu3gAEpG5hbWWycGxhbl9jb25maWdfY2hhbmdlpmZpZWxkc5HeAASkbmFtZaZjb25maWekdHlwZcy/qHR5cGVOYW1ltE5leHRDb25maWdEZXNjcmlwdG9ypGRvY3OQpWluZGV4AqRkb2NzlNlXUGxhbiBhbiBlcG9jaCBjb25maWcgY2hhbmdlLiBUaGUgZXBvY2ggY29uZmlnIGNoYW5nZSBpcyByZWNvcmRlZCBhbmQgd2lsbCBiZSBlbmFjdGVkIG9u2VR0aGUgbmV4dCBjYWxsIHRvIGBlbmFjdF9lcG9jaF9jaGFuZ2VgLiBUaGUgY29uZmlnIHdpbGwgYmUgYWN0aXZhdGVkIG9uZSBlcG9jaCBhZnRlci7ZVk11bHRpcGxlIGNhbGxzIHRvIHRoaXMgbWV0aG9kIHdpbGwgcmVwbGFjZSBhbnkgZXhpc3RpbmcgcGxhbm5lZCBjb25maWcgY2hhbmdlIHRoYXQgaGFktW5vdCBiZWVuIGVuYWN0ZWQgeWV0LqRkb2NzkdlJQ29udGFpbnMgb25lIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSB0aGF0IGNhbiBiZSBjYWxsZWQgYnkgYW4gZXh0cmluc2ljLt4AAqJpZMzOpHR5cGXeAASkcGF0aJKyc3BfY29uc2Vuc3VzX3Nsb3RzsUVxdWl2b2NhdGlvblByb29mpnBhcmFtc5LeAAKkbmFtZaZIZWFkZXKkdHlwZczP3gACpG5hbWWiSWSkdHlwZcy8o2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzlN4ABKRuYW1lqG9mZmVuZGVypHR5cGXMvKh0eXBlTmFtZaJJZKRkb2NzkN4ABKRuYW1lpHNsb3SkdHlwZcy+qHR5cGVOYW1lpFNsb3SkZG9jc5DeAASkbmFtZaxmaXJzdF9oZWFkZXKkdHlwZczPqHR5cGVOYW1lpkhlYWRlcqRkb2NzkN4ABKRuYW1lrXNlY29uZF9oZWFkZXKkdHlwZczPqHR5cGVOYW1lpkhlYWRlcqRkb2NzkKRkb2NzkN4AAqJpZMzPpHR5cGXeAASkcGF0aJSqc3BfcnVudGltZadnZW5lcmljpmhlYWRlcqZIZWFkZXKmcGFyYW1zkt4AAqRuYW1lpk51bWJlcqR0eXBlBN4AAqRuYW1lpEhhc2ikdHlwZczQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzld4ABKRuYW1lq3BhcmVudF9oYXNopHR5cGULqHR5cGVOYW1lrEhhc2g6Ok91dHB1dKRkb2NzkN4ABKRuYW1lpm51bWJlcqR0eXBlzHWodHlwZU5hbWWmTnVtYmVypGRvY3OQ3gAEpG5hbWWqc3RhdGVfcm9vdKR0eXBlC6h0eXBlTmFtZaxIYXNoOjpPdXRwdXSkZG9jc5DeAASkbmFtZa9leHRyaW5zaWNzX3Jvb3SkdHlwZQuodHlwZU5hbWWsSGFzaDo6T3V0cHV0pGRvY3OQ3gAEpG5hbWWmZGlnZXN0pHR5cGUNqHR5cGVOYW1lpkRpZ2VzdKRkb2NzkKRkb2NzkN4AAqJpZMzQpHR5cGXeAASkcGF0aJOqc3BfcnVudGltZaZ0cmFpdHOrQmxha2VUd28yNTamcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5CkZG9jc5DeAAKiaWTM0aR0eXBl3gAEpHBhdGiSqnNwX3Nlc3Npb26vTWVtYmVyc2hpcFByb29mpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOT3gAEpG5hbWWnc2Vzc2lvbqR0eXBlBKh0eXBlTmFtZaxTZXNzaW9uSW5kZXikZG9jc5DeAASkbmFtZap0cmllX25vZGVzpHR5cGXMrah0eXBlTmFtZaxWZWM8VmVjPHU4Pj6kZG9jc5DeAASkbmFtZa92YWxpZGF0b3JfY291bnSkdHlwZQSodHlwZU5hbWWuVmFsaWRhdG9yQ291bnSkZG9jc5CkZG9jc5DeAAKiaWTM0qR0eXBl3gAEpHBhdGiTq3BhbGxldF9iYWJlpnBhbGxldKVFcnJvcqZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5TeAASkbmFtZbhJbnZhbGlkRXF1aXZvY2F0aW9uUHJvb2amZmllbGRzkKVpbmRleACkZG9jc5HZTEFuIGVxdWl2b2NhdGlvbiBwcm9vZiBwcm92aWRlZCBhcyBwYXJ0IG9mIGFuIGVxdWl2b2NhdGlvbiByZXBvcnQgaXMgaW52YWxpZC7eAASkbmFtZbhJbnZhbGlkS2V5T3duZXJzaGlwUHJvb2amZmllbGRzkKVpbmRleAGkZG9jc5HZTEEga2V5IG93bmVyc2hpcCBwcm9vZiBwcm92aWRlZCBhcyBwYXJ0IG9mIGFuIGVxdWl2b2NhdGlvbiByZXBvcnQgaXMgaW52YWxpZC7eAASkbmFtZbZEdXBsaWNhdGVPZmZlbmNlUmVwb3J0pmZpZWxkc5ClaW5kZXgCpGRvY3OR2UVBIGdpdmVuIGVxdWl2b2NhdGlvbiByZXBvcnQgaXMgdmFsaWQgYnV0IGFscmVhZHkgcHJldmlvdXNseSByZXBvcnRlZC7eAASkbmFtZbRJbnZhbGlkQ29uZmlndXJhdGlvbqZmaWVsZHOQpWluZGV4A6Rkb2NzkdkjU3VibWl0dGVkIGNvbmZpZ3VyYXRpb24gaXMgaW52YWxpZC6kZG9jc5HZbQoJCQlDdXN0b20gW2Rpc3BhdGNoIGVycm9yc10oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pCgkJCW9mIHRoaXMgcGFsbGV0LgoJCQneAAKiaWTM06R0eXBl3gAEpHBhdGiTsHBhbGxldF90aW1lc3RhbXCmcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOR3gAEpG5hbWWjc2V0pmZpZWxkc5HeAASkbmFtZaNub3ekdHlwZQmodHlwZU5hbWWpVDo6TW9tZW50pGRvY3OQpWluZGV4AKRkb2Nzn7VTZXQgdGhlIGN1cnJlbnQgdGltZS6g2VVUaGlzIGNhbGwgc2hvdWxkIGJlIGludm9rZWQgZXhhY3RseSBvbmNlIHBlciBibG9jay4gSXQgd2lsbCBwYW5pYyBhdCB0aGUgZmluYWxpemF0aW9u2TVwaGFzZSwgaWYgdGhpcyBjYWxsIGhhc24ndCBiZWVuIGludm9rZWQgYnkgdGhhdCB0aW1lLqDZUFRoZSB0aW1lc3RhbXAgc2hvdWxkIGJlIGdyZWF0ZXIgdGhhbiB0aGUgcHJldmlvdXMgb25lIGJ5IHRoZSBhbW91bnQgc3BlY2lmaWVkIGJ5sGBNaW5pbXVtUGVyaW9kYC6g2TVUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBgSW5oZXJlbnRgLqCtIyMgQ29tcGxleGl0edlMLSBgTygxKWAgKE5vdGUgdGhhdCBpbXBsZW1lbnRhdGlvbnMgb2YgYE9uVGltZXN0YW1wU2V0YCBtdXN0IGFsc28gYmUgYE8oMSlgKdlYLSAxIHN0b3JhZ2UgcmVhZCBhbmQgMSBzdG9yYWdlIG11dGF0aW9uIChjb2RlYyBgTygxKWApLiAoYmVjYXVzZSBvZiBgRGlkVXBkYXRlOjp0YWtlYCBpbrAgIGBvbl9maW5hbGl6ZWAp2TUtIDEgZXZlbnQgaGFuZGxlciBgb25fdGltZXN0YW1wX3NldGAuIE11c3QgYmUgYE8oMSlgLqRkb2NzkdlJQ29udGFpbnMgb25lIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSB0aGF0IGNhbiBiZSBjYWxsZWQgYnkgYW4gZXh0cmluc2ljLt4AAqJpZMzUpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWTAAYlpGRvY3OQ3gAComlkzNWkdHlwZd4ABKRwYXRok65wYWxsZXRfaW5kaWNlc6ZwYWxsZXSkQ2FsbKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5XeAASkbmFtZaVjbGFpbaZmaWVsZHOR3gAEpG5hbWWlaW5kZXikdHlwZQSodHlwZU5hbWWvVDo6QWNjb3VudEluZGV4pGRvY3OQpWluZGV4AKRkb2NznNkmQXNzaWduIGFuIHByZXZpb3VzbHkgdW5hc3NpZ25lZCBpbmRleC6g2TdQYXltZW50OiBgRGVwb3NpdGAgaXMgcmVzZXJ2ZWQgZnJvbSB0aGUgc2VuZGVyIGFjY291bnQuoNkzVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uoNk8LSBgaW5kZXhgOiB0aGUgaW5kZXggdG8gYmUgY2xhaW1lZC4gVGhpcyBtdXN0IG5vdCBiZSBpbiB1c2UuoNkkRW1pdHMgYEluZGV4QXNzaWduZWRgIGlmIHN1Y2Nlc3NmdWwuoK0jIyBDb21wbGV4aXR5qS0gYE8oMSlgLt4ABKRuYW1lqHRyYW5zZmVypmZpZWxkc5LeAASkbmFtZaNuZXekdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQ3gAEpG5hbWWlaW5kZXikdHlwZQSodHlwZU5hbWWvVDo6QWNjb3VudEluZGV4pGRvY3OQpWluZGV4AaRkb2NznNlXQXNzaWduIGFuIGluZGV4IGFscmVhZHkgb3duZWQgYnkgdGhlIHNlbmRlciB0byBhbm90aGVyIGFjY291bnQuIFRoZSBiYWxhbmNlIHJlc2VydmF0aW9u2S5pcyBlZmZlY3RpdmVseSB0cmFuc2ZlcnJlZCB0byB0aGUgbmV3IGFjY291bnQuoNkzVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uoNlJLSBgaW5kZXhgOiB0aGUgaW5kZXggdG8gYmUgcmUtYXNzaWduZWQuIFRoaXMgbXVzdCBiZSBvd25lZCBieSB0aGUgc2VuZGVyLtlXLSBgbmV3YDogdGhlIG5ldyBvd25lciBvZiB0aGUgaW5kZXguIFRoaXMgZnVuY3Rpb24gaXMgYSBuby1vcCBpZiBpdCBpcyBlcXVhbCB0byBzZW5kZXIuoNkkRW1pdHMgYEluZGV4QXNzaWduZWRgIGlmIHN1Y2Nlc3NmdWwuoK0jIyBDb21wbGV4aXR5qS0gYE8oMSlgLt4ABKRuYW1lpGZyZWWmZmllbGRzkd4ABKRuYW1lpWluZGV4pHR5cGUEqHR5cGVOYW1lr1Q6OkFjY291bnRJbmRleKRkb2NzkKVpbmRleAKkZG9jc5zZJUZyZWUgdXAgYW4gaW5kZXggb3duZWQgYnkgdGhlIHNlbmRlci6g2VdQYXltZW50OiBBbnkgcHJldmlvdXMgZGVwb3NpdCBwbGFjZWQgZm9yIHRoZSBpbmRleCBpcyB1bnJlc2VydmVkIGluIHRoZSBzZW5kZXIgYWNjb3VudC6g2VVUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgdGhlIHNlbmRlciBtdXN0IG93biB0aGUgaW5kZXguoNlDLSBgaW5kZXhgOiB0aGUgaW5kZXggdG8gYmUgZnJlZWQuIFRoaXMgbXVzdCBiZSBvd25lZCBieSB0aGUgc2VuZGVyLqDZIUVtaXRzIGBJbmRleEZyZWVkYCBpZiBzdWNjZXNzZnVsLqCtIyMgQ29tcGxleGl0eaktIGBPKDEpYC7eAASkbmFtZa5mb3JjZV90cmFuc2ZlcqZmaWVsZHOT3gAEpG5hbWWjbmV3pHR5cGXM1qh0eXBlTmFtZbRBY2NvdW50SWRMb29rdXBPZjxUPqRkb2NzkN4ABKRuYW1lpWluZGV4pHR5cGUEqHR5cGVOYW1lr1Q6OkFjY291bnRJbmRleKRkb2NzkN4ABKRuYW1lpmZyZWV6ZaR0eXBlJah0eXBlTmFtZaRib29spGRvY3OQpWluZGV4A6Rkb2NzndlVRm9yY2UgYW4gaW5kZXggdG8gYW4gYWNjb3VudC4gVGhpcyBkb2Vzbid0IHJlcXVpcmUgYSBkZXBvc2l0LiBJZiB0aGUgaW5kZXggaXMgYWxyZWFkedk6aGVsZCwgdGhlbiBhbnkgZGVwb3NpdCBpcyByZWltYnVyc2VkIHRvIGl0cyBjdXJyZW50IG93bmVyLqDZMVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9Sb290Xy6g2SktIGBpbmRleGA6IHRoZSBpbmRleCB0byBiZSAocmUtKWFzc2lnbmVkLtlXLSBgbmV3YDogdGhlIG5ldyBvd25lciBvZiB0aGUgaW5kZXguIFRoaXMgZnVuY3Rpb24gaXMgYSBuby1vcCBpZiBpdCBpcyBlcXVhbCB0byBzZW5kZXIu2VAtIGBmcmVlemVgOiBpZiBzZXQgdG8gYHRydWVgLCB3aWxsIGZyZWV6ZSB0aGUgaW5kZXggc28gaXQgY2Fubm90IGJlIHRyYW5zZmVycmVkLqDZJEVtaXRzIGBJbmRleEFzc2lnbmVkYCBpZiBzdWNjZXNzZnVsLqCtIyMgQ29tcGxleGl0eaktIGBPKDEpYC7eAASkbmFtZaZmcmVlemWmZmllbGRzkd4ABKRuYW1lpWluZGV4pHR5cGUEqHR5cGVOYW1lr1Q6OkFjY291bnRJbmRleKRkb2NzkKVpbmRleASkZG9jc5zZUEZyZWV6ZSBhbiBpbmRleCBzbyBpdCB3aWxsIGFsd2F5cyBwb2ludCB0byB0aGUgc2VuZGVyIGFjY291bnQuIFRoaXMgY29uc3VtZXMgdGhlqGRlcG9zaXQuoNlWVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYW5kIHRoZSBzaWduaW5nIGFjY291bnQgbXVzdCBoYXZlIGG7bm9uLWZyb3plbiBhY2NvdW50IGBpbmRleGAuoNkrLSBgaW5kZXhgOiB0aGUgaW5kZXggdG8gYmUgZnJvemVuIGluIHBsYWNlLqDZIkVtaXRzIGBJbmRleEZyb3plbmAgaWYgc3VjY2Vzc2Z1bC6grSMjIENvbXBsZXhpdHmpLSBgTygxKWAupGRvY3OR2UlDb250YWlucyBvbmUgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIHRoYXQgY2FuIGJlIGNhbGxlZCBieSBhbiBleHRyaW5zaWMu3gAComlkzNakdHlwZd4ABKRwYXRok6pzcF9ydW50aW1lrG11bHRpYWRkcmVzc6xNdWx0aUFkZHJlc3OmcGFyYW1zkt4AAqRuYW1lqUFjY291bnRJZKR0eXBlAN4AAqRuYW1lrEFjY291bnRJbmRleKR0eXBlOqNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5XeAASkbmFtZaJJZKZmaWVsZHOR3gAEpG5hbWXApHR5cGUAqHR5cGVOYW1lqUFjY291bnRJZKRkb2NzkKVpbmRleACkZG9jc5DeAASkbmFtZaVJbmRleKZmaWVsZHOR3gAEpG5hbWXApHR5cGXM16h0eXBlTmFtZaxBY2NvdW50SW5kZXikZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWjUmF3pmZpZWxkc5HeAASkbmFtZcCkdHlwZQyodHlwZU5hbWWnVmVjPHU4PqRkb2NzkKVpbmRleAKkZG9jc5DeAASkbmFtZalBZGRyZXNzMzKmZmllbGRzkd4ABKRuYW1lwKR0eXBlAah0eXBlTmFtZahbdTg7IDMyXaRkb2NzkKVpbmRleAOkZG9jc5DeAASkbmFtZalBZGRyZXNzMjCmZmllbGRzkd4ABKRuYW1lwKR0eXBlzHiodHlwZU5hbWWoW3U4OyAyMF2kZG9jc5ClaW5kZXgEpGRvY3OQpGRvY3OQ3gAComlkzNekdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAadjb21wYWN03gABpHR5cGU6pGRvY3OQ3gAComlkzNikdHlwZd4ABKRwYXRok65wYWxsZXRfaW5kaWNlc6ZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOV3gAEpG5hbWWrTm90QXNzaWduZWSmZmllbGRzkKVpbmRleACkZG9jc5HZI1RoZSBpbmRleCB3YXMgbm90IGFscmVhZHkgYXNzaWduZWQu3gAEpG5hbWWoTm90T3duZXKmZmllbGRzkKVpbmRleAGkZG9jc5HZKVRoZSBpbmRleCBpcyBhc3NpZ25lZCB0byBhbm90aGVyIGFjY291bnQu3gAEpG5hbWWlSW5Vc2WmZmllbGRzkKVpbmRleAKkZG9jc5G8VGhlIGluZGV4IHdhcyBub3QgYXZhaWxhYmxlLt4ABKRuYW1lq05vdFRyYW5zZmVypmZpZWxkc5ClaW5kZXgDpGRvY3OR2TJUaGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBhY2NvdW50cyBhcmUgaWRlbnRpY2FsLt4ABKRuYW1lqVBlcm1hbmVudKZmaWVsZHOQpWluZGV4BKRkb2Nzkdk0VGhlIGluZGV4IGlzIHBlcm1hbmVudCBhbmQgbWF5IG5vdCBiZSBmcmVlZC9jaGFuZ2VkLqRkb2NzkdltCgkJCUN1c3RvbSBbZGlzcGF0Y2ggZXJyb3JzXShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykKCQkJb2YgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZMzZpHR5cGXeAASkcGF0aJOzYm91bmRlZF9jb2xsZWN0aW9uc7B3ZWFrX2JvdW5kZWRfdmVjrldlYWtCb3VuZGVkVmVjpnBhcmFtc5LeAAKkbmFtZaFUpHR5cGXM2t4AAqRuYW1loVOkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGXM3Kh0eXBlTmFtZaZWZWM8VD6kZG9jc5CkZG9jc5DeAAKiaWTM2qR0eXBl3gAEpHBhdGiSr3BhbGxldF9iYWxhbmNlc6tCYWxhbmNlTG9ja6ZwYXJhbXOR3gACpG5hbWWnQmFsYW5jZaR0eXBlBqNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5PeAASkbmFtZaJpZKR0eXBlzISodHlwZU5hbWWuTG9ja0lkZW50aWZpZXKkZG9jc5DeAASkbmFtZaZhbW91bnSkdHlwZQaodHlwZU5hbWWnQmFsYW5jZaRkb2NzkN4ABKRuYW1lp3JlYXNvbnOkdHlwZczbqHR5cGVOYW1lp1JlYXNvbnOkZG9jc5CkZG9jc5DeAAKiaWTM26R0eXBl3gAEpHBhdGiSr3BhbGxldF9iYWxhbmNlc6dSZWFzb25zpnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWWjRmVlpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWkTWlzY6ZmaWVsZHOQpWluZGV4AaRkb2NzkN4ABKRuYW1lo0FsbKZmaWVsZHOQpWluZGV4AqRkb2NzkKRkb2NzkN4AAqJpZMzcpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZczapGRvY3OQ3gAComlkzN2kdHlwZd4ABKRwYXRok7Nib3VuZGVkX2NvbGxlY3Rpb25zq2JvdW5kZWRfdmVjqkJvdW5kZWRWZWOmcGFyYW1zkt4AAqRuYW1loVSkdHlwZcze3gACpG5hbWWhU6R0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZczfqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZMzepHR5cGXeAASkcGF0aJKvcGFsbGV0X2JhbGFuY2Vzq1Jlc2VydmVEYXRhpnBhcmFtc5LeAAKkbmFtZbFSZXNlcnZlSWRlbnRpZmllcqR0eXBlzITeAAKkbmFtZadCYWxhbmNlpHR5cGUGo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lomlkpHR5cGXMhKh0eXBlTmFtZbFSZXNlcnZlSWRlbnRpZmllcqRkb2NzkN4ABKRuYW1lpmFtb3VudKR0eXBlBqh0eXBlTmFtZadCYWxhbmNlpGRvY3OQpGRvY3OQ3gAComlkzN+kdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzN6kZG9jc5DeAAKiaWTM4KR0eXBl3gAEpHBhdGiTr3BhbGxldF9iYWxhbmNlc6ZwYWxsZXSkQ2FsbKZwYXJhbXOS3gACpG5hbWWhVKR0eXBlwN4AAqRuYW1loUmkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOW3gAEpG5hbWWodHJhbnNmZXKmZmllbGRzkt4ABKRuYW1lpGRlc3SkdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQ3gAEpG5hbWWldmFsdWWkdHlwZTWodHlwZU5hbWWqVDo6QmFsYW5jZaRkb2NzkKVpbmRleACkZG9jc9wAFtk1VHJhbnNmZXIgc29tZSBsaXF1aWQgZnJlZSBiYWxhbmNlIHRvIGFub3RoZXIgYWNjb3VudC6g2UFgdHJhbnNmZXJgIHdpbGwgc2V0IHRoZSBgRnJlZUJhbGFuY2VgIG9mIHRoZSBzZW5kZXIgYW5kIHJlY2VpdmVyLtlESWYgdGhlIHNlbmRlcidzIGFjY291bnQgaXMgYmVsb3cgdGhlIGV4aXN0ZW50aWFsIGRlcG9zaXQgYXMgYSByZXN1bHTZLG9mIHRoZSB0cmFuc2ZlciwgdGhlIGFjY291bnQgd2lsbCBiZSByZWFwZWQuoNlFVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgYFNpZ25lZGAgYnkgdGhlIHRyYW5zYWN0b3IuoK0jIyBDb21wbGV4aXR52VgtIERlcGVuZGVudCBvbiBhcmd1bWVudHMgYnV0IG5vdCBjcml0aWNhbCwgZ2l2ZW4gcHJvcGVyIGltcGxlbWVudGF0aW9ucyBmb3IgaW5wdXQgY29uZmln2SUgIHR5cGVzLiBTZWUgcmVsYXRlZCBmdW5jdGlvbnMgYmVsb3cu2UwtIEl0IGNvbnRhaW5zIGEgbGltaXRlZCBudW1iZXIgb2YgcmVhZHMgYW5kIHdyaXRlcyBpbnRlcm5hbGx5IGFuZCBubyBjb21wbGV4riAgY29tcHV0YXRpb24uoLJSZWxhdGVkIGZ1bmN0aW9uczqg2VMgIC0gYGVuc3VyZV9jYW5fd2l0aGRyYXdgIGlzIGFsd2F5cyBjYWxsZWQgaW50ZXJuYWxseSBidXQgaGFzIGEgYm91bmRlZCBjb21wbGV4aXR5LtlKICAtIFRyYW5zZmVycmluZyBiYWxhbmNlcyB0byBhY2NvdW50cyB0aGF0IGRpZCBub3QgZXhpc3QgYmVmb3JlIHdpbGwgY2F1c2XZMyAgICBgVDo6T25OZXdBY2NvdW50Ojpvbl9uZXdfYWNjb3VudGAgdG8gYmUgY2FsbGVkLtlXICAtIFJlbW92aW5nIGVub3VnaCBmdW5kcyBmcm9tIGFuIGFjY291bnQgd2lsbCB0cmlnZ2VyIGBUOjpEdXN0UmVtb3ZhbDo6b25fdW5iYWxhbmNlZGAu2VcgIC0gYHRyYW5zZmVyX2tlZXBfYWxpdmVgIHdvcmtzIHRoZSBzYW1lIHdheSBhcyBgdHJhbnNmZXJgLCBidXQgaGFzIGFuIGFkZGl0aW9uYWwgY2hlY2vZNyAgICB0aGF0IHRoZSB0cmFuc2ZlciB3aWxsIG5vdCBraWxsIHRoZSBvcmlnaW4gYWNjb3VudC7eAASkbmFtZatzZXRfYmFsYW5jZaZmaWVsZHOT3gAEpG5hbWWjd2hvpHR5cGXM1qh0eXBlTmFtZbRBY2NvdW50SWRMb29rdXBPZjxUPqRkb2NzkN4ABKRuYW1lqG5ld19mcmVlpHR5cGU1qHR5cGVOYW1lqlQ6OkJhbGFuY2WkZG9jc5DeAASkbmFtZaxuZXdfcmVzZXJ2ZWSkdHlwZTWodHlwZU5hbWWqVDo6QmFsYW5jZaRkb2NzkKVpbmRleAGkZG9jc5jZJFNldCB0aGUgYmFsYW5jZXMgb2YgYSBnaXZlbiBhY2NvdW50LqDZR1RoaXMgd2lsbCBhbHRlciBgRnJlZUJhbGFuY2VgIGFuZCBgUmVzZXJ2ZWRCYWxhbmNlYCBpbiBzdG9yYWdlLiBpdCB3aWxs2UxhbHNvIGFsdGVyIHRoZSB0b3RhbCBpc3N1YW5jZSBvZiB0aGUgc3lzdGVtIChgVG90YWxJc3N1YW5jZWApIGFwcHJvcHJpYXRlbHku2UVJZiB0aGUgbmV3IGZyZWUgb3IgcmVzZXJ2ZWQgYmFsYW5jZSBpcyBiZWxvdyB0aGUgZXhpc3RlbnRpYWwgZGVwb3NpdCzZP2l0IHdpbGwgcmVzZXQgdGhlIGFjY291bnQgbm9uY2UgKGBmcmFtZV9zeXN0ZW06OkFjY291bnROb25jZWApLqDZLFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBpcyBgcm9vdGAu3gAEpG5hbWWuZm9yY2VfdHJhbnNmZXKmZmllbGRzk94ABKRuYW1lpnNvdXJjZaR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5DeAASkbmFtZaRkZXN0pHR5cGXM1qh0eXBlTmFtZbRBY2NvdW50SWRMb29rdXBPZjxUPqRkb2NzkN4ABKRuYW1lpXZhbHVlpHR5cGU1qHR5cGVOYW1lqlQ6OkJhbGFuY2WkZG9jc5ClaW5kZXgCpGRvY3OV2VNFeGFjdGx5IGFzIGB0cmFuc2ZlcmAsIGV4Y2VwdCB0aGUgb3JpZ2luIG11c3QgYmUgcm9vdCBhbmQgdGhlIHNvdXJjZSBhY2NvdW50IG1heSBiZapzcGVjaWZpZWQurSMjIENvbXBsZXhpdHnZUy0gU2FtZSBhcyB0cmFuc2ZlciwgYnV0IGFkZGl0aW9uYWwgcmVhZCBhbmQgd3JpdGUgYmVjYXVzZSB0aGUgc291cmNlIGFjY291bnQgaXMgbm90vyAgYXNzdW1lZCB0byBiZSBpbiB0aGUgb3ZlcmxheS7eAASkbmFtZbN0cmFuc2Zlcl9rZWVwX2FsaXZlpmZpZWxkc5LeAASkbmFtZaRkZXN0pHR5cGXM1qh0eXBlTmFtZbRBY2NvdW50SWRMb29rdXBPZjxUPqRkb2NzkN4ABKRuYW1lpXZhbHVlpHR5cGU1qHR5cGVOYW1lqlQ6OkJhbGFuY2WkZG9jc5ClaW5kZXgDpGRvY3OW2VNTYW1lIGFzIHRoZSBbYHRyYW5zZmVyYF0gY2FsbCwgYnV0IHdpdGggYSBjaGVjayB0aGF0IHRoZSB0cmFuc2ZlciB3aWxsIG5vdCBraWxsIHRoZa9vcmlnaW4gYWNjb3VudC6g2S45OSUgb2YgdGhlIHRpbWUgeW91IHdhbnQgW2B0cmFuc2ZlcmBdIGluc3RlYWQuoNkwW2B0cmFuc2ZlcmBdOiBzdHJ1Y3QuUGFsbGV0Lmh0bWwjbWV0aG9kLnRyYW5zZmVy3gAEpG5hbWWsdHJhbnNmZXJfYWxspmZpZWxkc5LeAASkbmFtZaRkZXN0pHR5cGXM1qh0eXBlTmFtZbRBY2NvdW50SWRMb29rdXBPZjxUPqRkb2NzkN4ABKRuYW1lqmtlZXBfYWxpdmWkdHlwZSWodHlwZU5hbWWkYm9vbKRkb2NzkKVpbmRleASkZG9jc9wAENlBVHJhbnNmZXIgdGhlIGVudGlyZSB0cmFuc2ZlcmFibGUgYmFsYW5jZSBmcm9tIHRoZSBjYWxsZXIgYWNjb3VudC6g2VZOT1RFOiBUaGlzIGZ1bmN0aW9uIG9ubHkgYXR0ZW1wdHMgdG8gdHJhbnNmZXIgX3RyYW5zZmVyYWJsZV8gYmFsYW5jZXMuIFRoaXMgbWVhbnMgdGhhdNlYYW55IGxvY2tlZCwgcmVzZXJ2ZWQsIG9yIGV4aXN0ZW50aWFsIGRlcG9zaXRzICh3aGVuIGBrZWVwX2FsaXZlYCBpcyBgdHJ1ZWApLCB3aWxsIG5vdCBiZdlXdHJhbnNmZXJyZWQgYnkgdGhpcyBmdW5jdGlvbi4gVG8gZW5zdXJlIHRoYXQgdGhpcyBmdW5jdGlvbiByZXN1bHRzIGluIGEga2lsbGVkIGFjY291bnQs2VF5b3UgbWlnaHQgbmVlZCB0byBwcmVwYXJlIHRoZSBhY2NvdW50IGJ5IHJlbW92aW5nIGFueSByZWZlcmVuY2UgY291bnRlcnMsIHN0b3JhZ2WwZGVwb3NpdHMsIGV0Yy4uLqDZMFRoZSBkaXNwYXRjaCBvcmlnaW4gb2YgdGhpcyBjYWxsIG11c3QgYmUgU2lnbmVkLqDZKC0gYGRlc3RgOiBUaGUgcmVjaXBpZW50IG9mIHRoZSB0cmFuc2Zlci7ZVi0gYGtlZXBfYWxpdmVgOiBBIGJvb2xlYW4gdG8gZGV0ZXJtaW5lIGlmIHRoZSBgdHJhbnNmZXJfYWxsYCBvcGVyYXRpb24gc2hvdWxkIHNlbmQgYWxs2VMgIG9mIHRoZSBmdW5kcyB0aGUgYWNjb3VudCBoYXMsIGNhdXNpbmcgdGhlIHNlbmRlciBhY2NvdW50IHRvIGJlIGtpbGxlZCAoZmFsc2UpLCBvctlWICB0cmFuc2ZlciBldmVyeXRoaW5nIGV4Y2VwdCBhdCBsZWFzdCB0aGUgZXhpc3RlbnRpYWwgZGVwb3NpdCwgd2hpY2ggd2lsbCBndWFyYW50ZWUgdG/ZNSAga2VlcCB0aGUgc2VuZGVyIGFjY291bnQgYWxpdmUgKHRydWUpLiAjIyBDb21wbGV4aXR52U4tIE8oMSkuIEp1c3QgbGlrZSB0cmFuc2ZlciwgYnV0IHJlYWRpbmcgdGhlIHVzZXIncyB0cmFuc2ZlcmFibGUgYmFsYW5jZSBmaXJzdC7eAASkbmFtZa9mb3JjZV91bnJlc2VydmWmZmllbGRzkt4ABKRuYW1lo3dob6R0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5DeAASkbmFtZaZhbW91bnSkdHlwZQaodHlwZU5hbWWqVDo6QmFsYW5jZaRkb2NzkKVpbmRleAWkZG9jc5PZLFVucmVzZXJ2ZSBzb21lIGJhbGFuY2UgZnJvbSBhIHVzZXIgYnkgZm9yY2UuoLtDYW4gb25seSBiZSBjYWxsZWQgYnkgUk9PVC6kZG9jc5HZSUNvbnRhaW5zIG9uZSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgdGhhdCBjYW4gYmUgY2FsbGVkIGJ5IGFuIGV4dHJpbnNpYy7eAAKiaWTM4aR0eXBl3gAEpHBhdGiTr3BhbGxldF9iYWxhbmNlc6ZwYWxsZXSlRXJyb3KmcGFyYW1zkt4AAqRuYW1loVSkdHlwZcDeAAKkbmFtZaFJpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzmN4ABKRuYW1lrlZlc3RpbmdCYWxhbmNlpmZpZWxkc5ClaW5kZXgApGRvY3OR2SZWZXN0aW5nIGJhbGFuY2UgdG9vIGhpZ2ggdG8gc2VuZCB2YWx1Zd4ABKRuYW1ltUxpcXVpZGl0eVJlc3RyaWN0aW9uc6ZmaWVsZHOQpWluZGV4AaRkb2NzkdkxQWNjb3VudCBsaXF1aWRpdHkgcmVzdHJpY3Rpb25zIHByZXZlbnQgd2l0aGRyYXdhbN4ABKRuYW1ls0luc3VmZmljaWVudEJhbGFuY2WmZmllbGRzkKVpbmRleAKkZG9jc5G+QmFsYW5jZSB0b28gbG93IHRvIHNlbmQgdmFsdWUu3gAEpG5hbWWyRXhpc3RlbnRpYWxEZXBvc2l0pmZpZWxkc5ClaW5kZXgDpGRvY3OR2TpWYWx1ZSB0b28gbG93IHRvIGNyZWF0ZSBhY2NvdW50IGR1ZSB0byBleGlzdGVudGlhbCBkZXBvc2l03gAEpG5hbWWpS2VlcEFsaXZlpmZpZWxkc5ClaW5kZXgEpGRvY3OR2SNUcmFuc2Zlci9wYXltZW50IHdvdWxkIGtpbGwgYWNjb3VudN4ABKRuYW1lt0V4aXN0aW5nVmVzdGluZ1NjaGVkdWxlpmZpZWxkc5ClaW5kZXgFpGRvY3OR2TJBIHZlc3Rpbmcgc2NoZWR1bGUgYWxyZWFkeSBleGlzdHMgZm9yIHRoaXMgYWNjb3VudN4ABKRuYW1lq0RlYWRBY2NvdW50pmZpZWxkc5ClaW5kZXgGpGRvY3OR2SJCZW5lZmljaWFyeSBhY2NvdW50IG11c3QgcHJlLWV4aXN03gAEpG5hbWWvVG9vTWFueVJlc2VydmVzpmZpZWxkc5ClaW5kZXgHpGRvY3OR2StOdW1iZXIgb2YgbmFtZWQgcmVzZXJ2ZXMgZXhjZWVkIE1heFJlc2VydmVzpGRvY3OR2W0KCQkJQ3VzdG9tIFtkaXNwYXRjaCBlcnJvcnNdKGh0dHBzOi8vZG9jcy5zdWJzdHJhdGUuaW8vbWFpbi1kb2NzL2J1aWxkL2V2ZW50cy1lcnJvcnMvKQoJCQlvZiB0aGlzIHBhbGxldC4KCQkJ3gAComlkzOKkdHlwZd4ABKRwYXRok61zcF9hcml0aG1ldGljq2ZpeGVkX3BvaW50qUZpeGVkVTEyOKZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlBqh0eXBlTmFtZaR1MTI4pGRvY3OQpGRvY3OQ3gAComlkzOOkdHlwZd4ABKRwYXRokrpwYWxsZXRfdHJhbnNhY3Rpb25fcGF5bWVudKhSZWxlYXNlc6ZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lqVYxQW5jaWVudKZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lolYypmZpZWxkc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzOSkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlAKRkb2NzkN4AAqJpZMzlpHR5cGXeAASkcGF0aJKucGFsbGV0X3N0YWtpbmetU3Rha2luZ0xlZGdlcqZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5XeAASkbmFtZaVzdGFzaKR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaV0b3RhbKR0eXBlNah0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5DeAASkbmFtZaZhY3RpdmWkdHlwZTWodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQ3gAEpG5hbWWpdW5sb2NraW5npHR5cGXM5qh0eXBlTmFtZdk8Qm91bmRlZFZlYzxVbmxvY2tDaHVuazxCYWxhbmNlT2Y8VD4+LCBUOjpNYXhVbmxvY2tpbmdDaHVua3M+pGRvY3OQ3gAEpG5hbWWvY2xhaW1lZF9yZXdhcmRzpHR5cGXM6ah0eXBlTmFtZdklQm91bmRlZFZlYzxFcmFJbmRleCwgVDo6SGlzdG9yeURlcHRoPqRkb2NzkKRkb2NzkN4AAqJpZMzmpHR5cGXeAASkcGF0aJOzYm91bmRlZF9jb2xsZWN0aW9uc6tib3VuZGVkX3ZlY6pCb3VuZGVkVmVjpnBhcmFtc5LeAAKkbmFtZaFUpHR5cGXM594AAqRuYW1loVOkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGXM6Kh0eXBlTmFtZaZWZWM8VD6kZG9jc5CkZG9jc5DeAAKiaWTM56R0eXBl3gAEpHBhdGiSrnBhbGxldF9zdGFraW5nq1VubG9ja0NodW5rpnBhcmFtc5HeAAKkbmFtZadCYWxhbmNlpHR5cGUGo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lpXZhbHVlpHR5cGU1qHR5cGVOYW1lp0JhbGFuY2WkZG9jc5DeAASkbmFtZaNlcmGkdHlwZcx1qHR5cGVOYW1lqEVyYUluZGV4pGRvY3OQpGRvY3OQ3gAComlkzOikdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzOekZG9jc5DeAAKiaWTM6aR0eXBl3gAEpHBhdGiTs2JvdW5kZWRfY29sbGVjdGlvbnOrYm91bmRlZF92ZWOqQm91bmRlZFZlY6ZwYXJhbXOS3gACpG5hbWWhVKR0eXBlBN4AAqRuYW1loVOkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGXMVah0eXBlTmFtZaZWZWM8VD6kZG9jc5CkZG9jc5DeAAKiaWTM6qR0eXBl3gAEpHBhdGiSrnBhbGxldF9zdGFraW5nsVJld2FyZERlc3RpbmF0aW9upnBhcmFtc5HeAAKkbmFtZalBY2NvdW50SWSkdHlwZQCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOV3gAEpG5hbWWmU3Rha2VkpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWlU3Rhc2imZmllbGRzkKVpbmRleAGkZG9jc5DeAASkbmFtZapDb250cm9sbGVypmZpZWxkc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWnQWNjb3VudKZmaWVsZHOR3gAEpG5hbWXApHR5cGUAqHR5cGVOYW1lqUFjY291bnRJZKRkb2NzkKVpbmRleAOkZG9jc5DeAASkbmFtZaROb25lpmZpZWxkc5ClaW5kZXgEpGRvY3OQpGRvY3OQ3gAComlkzOukdHlwZd4ABKRwYXRokq5wYWxsZXRfc3Rha2luZ6tOb21pbmF0aW9uc6ZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5PeAASkbmFtZad0YXJnZXRzpHR5cGXM7Kh0eXBlTmFtZdkrQm91bmRlZFZlYzxUOjpBY2NvdW50SWQsIFQ6Ok1heE5vbWluYXRpb25zPqRkb2NzkN4ABKRuYW1lrHN1Ym1pdHRlZF9pbqR0eXBlBKh0eXBlTmFtZahFcmFJbmRleKRkb2NzkN4ABKRuYW1lqnN1cHByZXNzZWSkdHlwZSWodHlwZU5hbWWkYm9vbKRkb2NzkKRkb2NzkN4AAqJpZMzspHR5cGXeAASkcGF0aJOzYm91bmRlZF9jb2xsZWN0aW9uc6tib3VuZGVkX3ZlY6pCb3VuZGVkVmVjpnBhcmFtc5LeAAKkbmFtZaFUpHR5cGUA3gACpG5hbWWhU6R0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZczkqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZMztpHR5cGXeAASkcGF0aJKucGFsbGV0X3N0YWtpbmetQWN0aXZlRXJhSW5mb6ZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lpWluZGV4pHR5cGUEqHR5cGVOYW1lqEVyYUluZGV4pGRvY3OQ3gAEpG5hbWWlc3RhcnSkdHlwZczuqHR5cGVOYW1lq09wdGlvbjx1NjQ+pGRvY3OQpGRvY3OQ3gAComlkzO6kdHlwZd4ABKRwYXRokaZPcHRpb26mcGFyYW1zkd4AAqRuYW1loVSkdHlwZQqjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWkTm9uZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lpFNvbWWmZmllbGRzkd4ABKRuYW1lwKR0eXBlCqh0eXBlTmFtZcCkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzO+kdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZIEAKRkb2NzkN4AAqJpZMzwpHR5cGXeAASkcGF0aJKucGFsbGV0X3N0YWtpbmevRXJhUmV3YXJkUG9pbnRzpnBhcmFtc5HeAAKkbmFtZalBY2NvdW50SWSkdHlwZQCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOS3gAEpG5hbWWldG90YWykdHlwZQSodHlwZU5hbWWrUmV3YXJkUG9pbnSkZG9jc5DeAASkbmFtZappbmRpdmlkdWFspHR5cGXM8ah0eXBlTmFtZdkgQlRyZWVNYXA8QWNjb3VudElkLCBSZXdhcmRQb2ludD6kZG9jc5CkZG9jc5DeAAKiaWTM8aR0eXBl3gAEpHBhdGiRqEJUcmVlTWFwpnBhcmFtc5LeAAKkbmFtZaFLpHR5cGUA3gACpG5hbWWhVqR0eXBlBKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZczyqHR5cGVOYW1lwKRkb2NzkKRkb2NzkN4AAqJpZMzypHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZczzpGRvY3OQ3gAComlkzPOkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZIABKRkb2NzkN4AAqJpZMz0pHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZcz1pGRvY3OQ3gAComlkzPWkdHlwZd4ABKRwYXRokq5wYWxsZXRfc3Rha2luZ65VbmFwcGxpZWRTbGFzaKZwYXJhbXOS3gACpG5hbWWpQWNjb3VudElkpHR5cGUA3gACpG5hbWWnQmFsYW5jZaR0eXBlBqNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5XeAASkbmFtZal2YWxpZGF0b3KkdHlwZQCodHlwZU5hbWWpQWNjb3VudElkpGRvY3OQ3gAEpG5hbWWjb3dupHR5cGUGqHR5cGVOYW1lp0JhbGFuY2WkZG9jc5DeAASkbmFtZaZvdGhlcnOkdHlwZcz2qHR5cGVOYW1luVZlYzwoQWNjb3VudElkLCBCYWxhbmNlKT6kZG9jc5DeAASkbmFtZalyZXBvcnRlcnOkdHlwZczkqHR5cGVOYW1lrlZlYzxBY2NvdW50SWQ+pGRvY3OQ3gAEpG5hbWWmcGF5b3V0pHR5cGUGqHR5cGVOYW1lp0JhbGFuY2WkZG9jc5CkZG9jc5DeAAKiaWTM9qR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXM96Rkb2NzkN4AAqJpZMz3pHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSAAakZG9jc5DeAAKiaWTM+KR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpXR1cGxlkiIGpGRvY3OQ3gAComlkzPmkdHlwZd4ABKRwYXRok65wYWxsZXRfc3Rha2luZ6hzbGFzaGluZ61TbGFzaGluZ1NwYW5zpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOU3gAEpG5hbWWqc3Bhbl9pbmRleKR0eXBlBKh0eXBlTmFtZalTcGFuSW5kZXikZG9jc5DeAASkbmFtZapsYXN0X3N0YXJ0pHR5cGUEqHR5cGVOYW1lqEVyYUluZGV4pGRvY3OQ3gAEpG5hbWWybGFzdF9ub256ZXJvX3NsYXNopHR5cGUEqHR5cGVOYW1lqEVyYUluZGV4pGRvY3OQ3gAEpG5hbWWlcHJpb3KkdHlwZcxVqHR5cGVOYW1lrVZlYzxFcmFJbmRleD6kZG9jc5CkZG9jc5DeAAKiaWTM+qR0eXBl3gAEpHBhdGiTrnBhbGxldF9zdGFraW5nqHNsYXNoaW5nqlNwYW5SZWNvcmSmcGFyYW1zkd4AAqRuYW1lp0JhbGFuY2WkdHlwZQajZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOS3gAEpG5hbWWnc2xhc2hlZKR0eXBlBqh0eXBlTmFtZadCYWxhbmNlpGRvY3OQ3gAEpG5hbWWocGFpZF9vdXSkdHlwZQaodHlwZU5hbWWnQmFsYW5jZaRkb2NzkKRkb2NzkN4AAqJpZMz7pHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZcz8pGRvY3OQ3gAComlkzPykdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZIEJaRkb2NzkN4AAqJpZMz9pHR5cGXeAASkcGF0aJOtc3BfYXJpdGhtZXRpY6pwZXJfdGhpbmdzp1BlcmNlbnSmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWWidTikZG9jc5CkZG9jc5DeAAKiaWTM/qR0eXBl3gAEpHBhdGiUrnBhbGxldF9zdGFraW5npnBhbGxldKZwYWxsZXSkQ2FsbKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c9wAGt4ABKRuYW1lpGJvbmSmZmllbGRzk94ABKRuYW1lqmNvbnRyb2xsZXKkdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQ3gAEpG5hbWWldmFsdWWkdHlwZTWodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQ3gAEpG5hbWWlcGF5ZWWkdHlwZczqqHR5cGVOYW1lv1Jld2FyZERlc3RpbmF0aW9uPFQ6OkFjY291bnRJZD6kZG9jc5ClaW5kZXgApGRvY3Of2VhUYWtlIHRoZSBvcmlnaW4gYWNjb3VudCBhcyBhIHN0YXNoIGFuZCBsb2NrIHVwIGB2YWx1ZWAgb2YgaXRzIGJhbGFuY2UuIGBjb250cm9sbGVyYCB3aWxs2SBiZSB0aGUgYWNjb3VudCB0aGF0IGNvbnRyb2xzIGl0LqDZS2B2YWx1ZWAgbXVzdCBiZSBtb3JlIHRoYW4gdGhlIGBtaW5pbXVtX2JhbGFuY2VgIHNwZWNpZmllZCBieSBgVDo6Q3VycmVuY3lgLqDZSFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGJ5IHRoZSBzdGFzaCBhY2NvdW50LqCvRW1pdHMgYEJvbmRlZGAurSMjIENvbXBsZXhpdHnZNC0gSW5kZXBlbmRlbnQgb2YgdGhlIGFyZ3VtZW50cy4gTW9kZXJhdGUgY29tcGxleGl0eS6nLSBPKDEpLrktIFRocmVlIGV4dHJhIERCIGVudHJpZXMuoNlTTk9URTogVHdvIG9mIHRoZSBzdG9yYWdlIHdyaXRlcyAoYFNlbGY6OmJvbmRlZGAsIGBTZWxmOjpwYXllZWApIGFyZSBfbmV2ZXJfIGNsZWFuZWTZT3VubGVzcyB0aGUgYG9yaWdpbmAgZmFsbHMgYmVsb3cgX2V4aXN0ZW50aWFsIGRlcG9zaXRfIGFuZCBnZXRzIHJlbW92ZWQgYXMgZHVzdC7eAASkbmFtZapib25kX2V4dHJhpmZpZWxkc5HeAASkbmFtZa5tYXhfYWRkaXRpb25hbKR0eXBlNah0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5ClaW5kZXgBpGRvY3Oe2VhBZGQgc29tZSBleHRyYSBhbW91bnQgdGhhdCBoYXZlIGFwcGVhcmVkIGluIHRoZSBzdGFzaCBgZnJlZV9iYWxhbmNlYCBpbnRvIHRoZSBiYWxhbmNlIHVwrGZvciBzdGFraW5nLqDZVFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGJ5IHRoZSBzdGFzaCwgbm90IHRoZSBjb250cm9sbGVyLqDZU1VzZSB0aGlzIGlmIHRoZXJlIGFyZSBhZGRpdGlvbmFsIGZ1bmRzIGluIHlvdXIgc3Rhc2ggYWNjb3VudCB0aGF0IHlvdSB3aXNoIHRvIGJvbmQu2VVVbmxpa2UgW2Bib25kYF0oU2VsZjo6Ym9uZCkgb3IgW2B1bmJvbmRgXShTZWxmOjp1bmJvbmQpIHRoaXMgZnVuY3Rpb24gZG9lcyBub3QgaW1wb3Nl2S9hbnkgbGltaXRhdGlvbiBvbiB0aGUgYW1vdW50IHRoYXQgY2FuIGJlIGFkZGVkLqCvRW1pdHMgYEJvbmRlZGAuoK0jIyBDb21wbGV4aXR52TktIEluZGVwZW5kZW50IG9mIHRoZSBhcmd1bWVudHMuIEluc2lnbmlmaWNhbnQgY29tcGxleGl0eS6nLSBPKDEpLt4ABKRuYW1lpnVuYm9uZKZmaWVsZHOR3gAEpG5hbWWldmFsdWWkdHlwZTWodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQpWluZGV4AqRkb2Nz3AAT2VRTY2hlZHVsZSBhIHBvcnRpb24gb2YgdGhlIHN0YXNoIHRvIGJlIHVubG9ja2VkIHJlYWR5IGZvciB0cmFuc2ZlciBvdXQgYWZ0ZXIgdGhlIGJvbmTZP3BlcmlvZCBlbmRzLiBJZiB0aGlzIGxlYXZlcyBhbiBhbW91bnQgYWN0aXZlbHkgYm9uZGVkIGxlc3MgdGhhbtlIVDo6Q3VycmVuY3k6Om1pbmltdW1fYmFsYW5jZSgpLCB0aGVuIGl0IGlzIGluY3JlYXNlZCB0byB0aGUgZnVsbCBhbW91bnQuoNlUVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYnkgdGhlIGNvbnRyb2xsZXIsIG5vdCB0aGUgc3Rhc2guoNlRT25jZSB0aGUgdW5sb2NrIHBlcmlvZCBpcyBkb25lLCB5b3UgY2FuIGNhbGwgYHdpdGhkcmF3X3VuYm9uZGVkYCB0byBhY3R1YWxseSBtb3Zl2S90aGUgZnVuZHMgb3V0IG9mIG1hbmFnZW1lbnQgcmVhZHkgZm9yIHRyYW5zZmVyLqDZTE5vIG1vcmUgdGhhbiBhIGxpbWl0ZWQgbnVtYmVyIG9mIHVubG9ja2luZyBjaHVua3MgKHNlZSBgTWF4VW5sb2NraW5nQ2h1bmtzYCnZUGNhbiBjby1leGlzdHMgYXQgdGhlIHNhbWUgdGltZS4gSWYgdGhlcmUgYXJlIG5vIHVubG9ja2luZyBjaHVua3Mgc2xvdHMgYXZhaWxhYmxl2VFbYENhbGw6OndpdGhkcmF3X3VuYm9uZGVkYF0gaXMgY2FsbGVkIHRvIHJlbW92ZSBzb21lIG9mIHRoZSBjaHVua3MgKGlmIHBvc3NpYmxlKS6g2U5JZiBhIHVzZXIgZW5jb3VudGVycyB0aGUgYEluc3VmZmljaWVudEJvbmRgIGVycm9yIHdoZW4gY2FsbGluZyB0aGlzIGV4dHJpbnNpYyzZRnRoZXkgc2hvdWxkIGNhbGwgYGNoaWxsYCBmaXJzdCBpbiBvcmRlciB0byBmcmVlIHVwIHRoZWlyIGJvbmRlZCBmdW5kcy6gsUVtaXRzIGBVbmJvbmRlZGAuoNklU2VlIGFsc28gW2BDYWxsOjp3aXRoZHJhd191bmJvbmRlZGBdLt4ABKRuYW1lsXdpdGhkcmF3X3VuYm9uZGVkpmZpZWxkc5HeAASkbmFtZbJudW1fc2xhc2hpbmdfc3BhbnOkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4A6Rkb2NzntlKUmVtb3ZlIGFueSB1bmxvY2tlZCBjaHVua3MgZnJvbSB0aGUgYHVubG9ja2luZ2AgcXVldWUgZnJvbSBvdXIgbWFuYWdlbWVudC6g2UxUaGlzIGVzc2VudGlhbGx5IGZyZWVzIHVwIHRoYXQgYmFsYW5jZSB0byBiZSB1c2VkIGJ5IHRoZSBzdGFzaCBhY2NvdW50IHRvIGRvsndoYXRldmVyIGl0IHdhbnRzLqDZRVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGJ5IHRoZSBjb250cm9sbGVyLqCyRW1pdHMgYFdpdGhkcmF3bmAuoLpTZWUgYWxzbyBbYENhbGw6OnVuYm9uZGBdLqCtIyMgQ29tcGxleGl0edk2TyhTKSB3aGVyZSBTIGlzIHRoZSBudW1iZXIgb2Ygc2xhc2hpbmcgc3BhbnMgdG8gcmVtb3Zl2UJOT1RFOiBXZWlnaHQgYW5ub3RhdGlvbiBpcyB0aGUga2lsbCBzY2VuYXJpbywgd2UgcmVmdW5kIG90aGVyd2lzZS7eAASkbmFtZah2YWxpZGF0ZaZmaWVsZHOR3gAEpG5hbWWlcHJlZnOkdHlwZSOodHlwZU5hbWWuVmFsaWRhdG9yUHJlZnOkZG9jc5ClaW5kZXgEpGRvY3OV2TlEZWNsYXJlIHRoZSBkZXNpcmUgdG8gdmFsaWRhdGUgZm9yIHRoZSBvcmlnaW4gY29udHJvbGxlci6g2TZFZmZlY3RzIHdpbGwgYmUgZmVsdCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBuZXh0IGVyYS6g2VRUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBieSB0aGUgY29udHJvbGxlciwgbm90IHRoZSBzdGFzaC7eAASkbmFtZahub21pbmF0ZaZmaWVsZHOR3gAEpG5hbWWndGFyZ2V0c6R0eXBlzP+odHlwZU5hbWW5VmVjPEFjY291bnRJZExvb2t1cE9mPFQ+PqRkb2NzkKVpbmRleAWkZG9jc5rZQ0RlY2xhcmUgdGhlIGRlc2lyZSB0byBub21pbmF0ZSBgdGFyZ2V0c2AgZm9yIHRoZSBvcmlnaW4gY29udHJvbGxlci6g2TZFZmZlY3RzIHdpbGwgYmUgZmVsdCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBuZXh0IGVyYS6g2VRUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBieSB0aGUgY29udHJvbGxlciwgbm90IHRoZSBzdGFzaC6grSMjIENvbXBsZXhpdHnZSy0gVGhlIHRyYW5zYWN0aW9uJ3MgY29tcGxleGl0eSBpcyBwcm9wb3J0aW9uYWwgdG8gdGhlIHNpemUgb2YgYHRhcmdldHNgIChOKdlBd2hpY2ggaXMgY2FwcGVkIGF0IENvbXBhY3RBc3NpZ25tZW50czo6TElNSVQgKFQ6Ok1heE5vbWluYXRpb25zKS7ZNS0gQm90aCB0aGUgcmVhZHMgYW5kIHdyaXRlcyBmb2xsb3cgYSBzaW1pbGFyIHBhdHRlcm4u3gAEpG5hbWWlY2hpbGymZmllbGRzkKVpbmRleAakZG9jc5rZMURlY2xhcmUgbm8gZGVzaXJlIHRvIGVpdGhlciB2YWxpZGF0ZSBvciBub21pbmF0ZS6g2TZFZmZlY3RzIHdpbGwgYmUgZmVsdCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBuZXh0IGVyYS6g2VRUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBieSB0aGUgY29udHJvbGxlciwgbm90IHRoZSBzdGFzaC6grSMjIENvbXBsZXhpdHnZOS0gSW5kZXBlbmRlbnQgb2YgdGhlIGFyZ3VtZW50cy4gSW5zaWduaWZpY2FudCBjb21wbGV4aXR5LrQtIENvbnRhaW5zIG9uZSByZWFkLtkxLSBXcml0ZXMgYXJlIGxpbWl0ZWQgdG8gdGhlIGBvcmlnaW5gIGFjY291bnQga2V5Lt4ABKRuYW1lqXNldF9wYXllZaZmaWVsZHOR3gAEpG5hbWWlcGF5ZWWkdHlwZczqqHR5cGVOYW1lv1Jld2FyZERlc3RpbmF0aW9uPFQ6OkFjY291bnRJZD6kZG9jc5ClaW5kZXgHpGRvY3Oc2S0oUmUtKXNldCB0aGUgcGF5bWVudCB0YXJnZXQgZm9yIGEgY29udHJvbGxlci6g2VRFZmZlY3RzIHdpbGwgYmUgZmVsdCBpbnN0YW50bHkgKGFzIHNvb24gYXMgdGhpcyBmdW5jdGlvbiBpcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5KS6g2VRUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBieSB0aGUgY29udHJvbGxlciwgbm90IHRoZSBzdGFzaC6grSMjIENvbXBsZXhpdHmmLSBPKDEp2TktIEluZGVwZW5kZW50IG9mIHRoZSBhcmd1bWVudHMuIEluc2lnbmlmaWNhbnQgY29tcGxleGl0eS7ZJS0gQ29udGFpbnMgYSBsaW1pdGVkIG51bWJlciBvZiByZWFkcy7ZMS0gV3JpdGVzIGFyZSBsaW1pdGVkIHRvIHRoZSBgb3JpZ2luYCBhY2NvdW50IGtleS6pLS0tLS0tLS0t3gAEpG5hbWWuc2V0X2NvbnRyb2xsZXKmZmllbGRzkd4ABKRuYW1lqmNvbnRyb2xsZXKkdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQpWluZGV4CKRkb2Nzm9kjKFJlLSlzZXQgdGhlIGNvbnRyb2xsZXIgb2YgYSBzdGFzaC6g2VRFZmZlY3RzIHdpbGwgYmUgZmVsdCBpbnN0YW50bHkgKGFzIHNvb24gYXMgdGhpcyBmdW5jdGlvbiBpcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5KS6g2VRUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBieSB0aGUgc3Rhc2gsIG5vdCB0aGUgY29udHJvbGxlci6grSMjIENvbXBsZXhpdHmkTygxKdk5LSBJbmRlcGVuZGVudCBvZiB0aGUgYXJndW1lbnRzLiBJbnNpZ25pZmljYW50IGNvbXBsZXhpdHku2SUtIENvbnRhaW5zIGEgbGltaXRlZCBudW1iZXIgb2YgcmVhZHMu2TEtIFdyaXRlcyBhcmUgbGltaXRlZCB0byB0aGUgYG9yaWdpbmAgYWNjb3VudCBrZXku3gAEpG5hbWWzc2V0X3ZhbGlkYXRvcl9jb3VudKZmaWVsZHOR3gAEpG5hbWWjbmV3pHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXgJpGRvY3OW2SRTZXRzIHRoZSBpZGVhbCBudW1iZXIgb2YgdmFsaWRhdG9ycy6g2SFUaGUgZGlzcGF0Y2ggb3JpZ2luIG11c3QgYmUgUm9vdC6grSMjIENvbXBsZXhpdHmkTygxKd4ABKRuYW1luGluY3JlYXNlX3ZhbGlkYXRvcl9jb3VudKZmaWVsZHOR3gAEpG5hbWWqYWRkaXRpb25hbKR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4CqRkb2Nzl9k5SW5jcmVtZW50cyB0aGUgaWRlYWwgbnVtYmVyIG9mIHZhbGlkYXRvcnMgdXB0byBtYXhpbXVtIG9m2SNgRWxlY3Rpb25Qcm92aWRlckJhc2U6Ok1heFdpbm5lcnNgLqDZIVRoZSBkaXNwYXRjaCBvcmlnaW4gbXVzdCBiZSBSb290LqCtIyMgQ29tcGxleGl0edkmU2FtZSBhcyBbYFNlbGY6OnNldF92YWxpZGF0b3JfY291bnRgXS7eAASkbmFtZbVzY2FsZV92YWxpZGF0b3JfY291bnSmZmllbGRzkd4ABKRuYW1lpmZhY3RvcqR0eXBlzP2odHlwZU5hbWWnUGVyY2VudKRkb2NzkKVpbmRleAukZG9jc5fZQ1NjYWxlIHVwIHRoZSBpZGVhbCBudW1iZXIgb2YgdmFsaWRhdG9ycyBieSBhIGZhY3RvciB1cHRvIG1heGltdW0gb2bZI2BFbGVjdGlvblByb3ZpZGVyQmFzZTo6TWF4V2lubmVyc2AuoNkhVGhlIGRpc3BhdGNoIG9yaWdpbiBtdXN0IGJlIFJvb3QuoK0jIyBDb21wbGV4aXR52SZTYW1lIGFzIFtgU2VsZjo6c2V0X3ZhbGlkYXRvcl9jb3VudGBdLt4ABKRuYW1lrWZvcmNlX25vX2VyYXOmZmllbGRzkKVpbmRleAykZG9jc53ZK0ZvcmNlIHRoZXJlIHRvIGJlIG5vIG5ldyBlcmFzIGluZGVmaW5pdGVseS6g2SFUaGUgZGlzcGF0Y2ggb3JpZ2luIG11c3QgYmUgUm9vdC6gqSMgV2FybmluZ6DZRlRoZSBlbGVjdGlvbiBwcm9jZXNzIHN0YXJ0cyBtdWx0aXBsZSBibG9ja3MgYmVmb3JlIHRoZSBlbmQgb2YgdGhlIGVyYS7ZTlRodXMgdGhlIGVsZWN0aW9uIHByb2Nlc3MgbWF5IGJlIG9uZ29pbmcgd2hlbiB0aGlzIGlzIGNhbGxlZC4gSW4gdGhpcyBjYXNlIHRoZdk3ZWxlY3Rpb24gd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgbmV4dCBlcmEgaXMgdHJpZ2dlcmVkLqCtIyMgQ29tcGxleGl0ea8tIE5vIGFyZ3VtZW50cy6uLSBXZWlnaHQ6IE8oMSneAASkbmFtZa1mb3JjZV9uZXdfZXJhpmZpZWxkc5ClaW5kZXgNpGRvY3Oe2VJGb3JjZSB0aGVyZSB0byBiZSBhIG5ldyBlcmEgYXQgdGhlIGVuZCBvZiB0aGUgbmV4dCBzZXNzaW9uLiBBZnRlciB0aGlzLCBpdCB3aWxsIGJl2SdyZXNldCB0byBub3JtYWwgKG5vbi1mb3JjZWQpIGJlaGF2aW91ci6g2SFUaGUgZGlzcGF0Y2ggb3JpZ2luIG11c3QgYmUgUm9vdC6gqSMgV2FybmluZ6DZRlRoZSBlbGVjdGlvbiBwcm9jZXNzIHN0YXJ0cyBtdWx0aXBsZSBibG9ja3MgYmVmb3JlIHRoZSBlbmQgb2YgdGhlIGVyYS7ZUklmIHRoaXMgaXMgY2FsbGVkIGp1c3QgYmVmb3JlIGEgbmV3IGVyYSBpcyB0cmlnZ2VyZWQsIHRoZSBlbGVjdGlvbiBwcm9jZXNzIG1heSBub3TZI2hhdmUgZW5vdWdoIGJsb2NrcyB0byBnZXQgYSByZXN1bHQuoK0jIyBDb21wbGV4aXR5ry0gTm8gYXJndW1lbnRzLq4tIFdlaWdodDogTygxKd4ABKRuYW1lsXNldF9pbnZ1bG5lcmFibGVzpmZpZWxkc5HeAASkbmFtZa1pbnZ1bG5lcmFibGVzpHR5cGXM5Kh0eXBlTmFtZbFWZWM8VDo6QWNjb3VudElkPqRkb2NzkKVpbmRleA6kZG9jc5PZMlNldCB0aGUgdmFsaWRhdG9ycyB3aG8gY2Fubm90IGJlIHNsYXNoZWQgKGlmIGFueSkuoNkhVGhlIGRpc3BhdGNoIG9yaWdpbiBtdXN0IGJlIFJvb3Qu3gAEpG5hbWWtZm9yY2VfdW5zdGFrZaZmaWVsZHOS3gAEpG5hbWWlc3Rhc2ikdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWybnVtX3NsYXNoaW5nX3NwYW5zpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleA+kZG9jc5PZQkZvcmNlIGEgY3VycmVudCBzdGFrZXIgdG8gYmVjb21lIGNvbXBsZXRlbHkgdW5zdGFrZWQsIGltbWVkaWF0ZWx5LqDZIVRoZSBkaXNwYXRjaCBvcmlnaW4gbXVzdCBiZSBSb290Lt4ABKRuYW1ltGZvcmNlX25ld19lcmFfYWx3YXlzpmZpZWxkc5ClaW5kZXgQpGRvY3OZ2UBGb3JjZSB0aGVyZSB0byBiZSBhIG5ldyBlcmEgYXQgdGhlIGVuZCBvZiBzZXNzaW9ucyBpbmRlZmluaXRlbHkuoNkhVGhlIGRpc3BhdGNoIG9yaWdpbiBtdXN0IGJlIFJvb3QuoKkjIFdhcm5pbmeg2UZUaGUgZWxlY3Rpb24gcHJvY2VzcyBzdGFydHMgbXVsdGlwbGUgYmxvY2tzIGJlZm9yZSB0aGUgZW5kIG9mIHRoZSBlcmEu2VJJZiB0aGlzIGlzIGNhbGxlZCBqdXN0IGJlZm9yZSBhIG5ldyBlcmEgaXMgdHJpZ2dlcmVkLCB0aGUgZWxlY3Rpb24gcHJvY2VzcyBtYXkgbm902SNoYXZlIGVub3VnaCBibG9ja3MgdG8gZ2V0IGEgcmVzdWx0Lt4ABKRuYW1ltWNhbmNlbF9kZWZlcnJlZF9zbGFzaKZmaWVsZHOS3gAEpG5hbWWjZXJhpHR5cGUEqHR5cGVOYW1lqEVyYUluZGV4pGRvY3OQ3gAEpG5hbWWtc2xhc2hfaW5kaWNlc6R0eXBlzFWodHlwZU5hbWWoVmVjPHUzMj6kZG9jc5ClaW5kZXgRpGRvY3OV2SVDYW5jZWwgZW5hY3RtZW50IG9mIGEgZGVmZXJyZWQgc2xhc2guoNkmQ2FuIGJlIGNhbGxlZCBieSB0aGUgYFQ6OkFkbWluT3JpZ2luYC6g2UBQYXJhbWV0ZXJzOiBlcmEgYW5kIGluZGljZXMgb2YgdGhlIHNsYXNoZXMgZm9yIHRoYXQgZXJhIHRvIGtpbGwu3gAEpG5hbWWucGF5b3V0X3N0YWtlcnOmZmllbGRzkt4ABKRuYW1lr3ZhbGlkYXRvcl9zdGFzaKR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaNlcmGkdHlwZQSodHlwZU5hbWWoRXJhSW5kZXikZG9jc5ClaW5kZXgSpGRvY3Ob2UNQYXkgb3V0IGFsbCB0aGUgc3Rha2VycyBiZWhpbmQgYSBzaW5nbGUgdmFsaWRhdG9yIGZvciBhIHNpbmdsZSBlcmEuoNlSLSBgdmFsaWRhdG9yX3N0YXNoYCBpcyB0aGUgc3Rhc2ggYWNjb3VudCBvZiB0aGUgdmFsaWRhdG9yLiBUaGVpciBub21pbmF0b3JzLCB1cCB0b9lJICBgVDo6TWF4Tm9taW5hdG9yUmV3YXJkZWRQZXJWYWxpZGF0b3JgLCB3aWxsIGFsc28gcmVjZWl2ZSB0aGVpciByZXdhcmRzLtlMLSBgZXJhYCBtYXkgYmUgYW55IGVyYSBiZXR3ZWVuIGBbY3VycmVudF9lcmEgLSBoaXN0b3J5X2RlcHRoOyBjdXJyZW50X2VyYV1gLqDZVVRoZSBvcmlnaW4gb2YgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uIEFueSBhY2NvdW50IGNhbiBjYWxsIHRoaXMgZnVuY3Rpb24sIGV2ZW4gaWa9aXQgaXMgbm90IG9uZSBvZiB0aGUgc3Rha2Vycy6grSMjIENvbXBsZXhpdHnZLi0gQXQgbW9zdCBPKE1heE5vbWluYXRvclJld2FyZGVkUGVyVmFsaWRhdG9yKS7eAASkbmFtZaZyZWJvbmSmZmllbGRzkd4ABKRuYW1lpXZhbHVlpHR5cGU1qHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkKVpbmRleBOkZG9jc5fZN1JlYm9uZCBhIHBvcnRpb24gb2YgdGhlIHN0YXNoIHNjaGVkdWxlZCB0byBiZSB1bmxvY2tlZC6g2TVUaGUgZGlzcGF0Y2ggb3JpZ2luIG11c3QgYmUgc2lnbmVkIGJ5IHRoZSBjb250cm9sbGVyLqCtIyMgQ29tcGxleGl0edk0LSBUaW1lIGNvbXBsZXhpdHk6IE8oTCksIHdoZXJlIEwgaXMgdW5sb2NraW5nIGNodW5rc9kiLSBCb3VuZGVkIGJ5IGBNYXhVbmxvY2tpbmdDaHVua3NgLt4ABKRuYW1lqnJlYXBfc3Rhc2imZmllbGRzkt4ABKRuYW1lpXN0YXNopHR5cGUAqHR5cGVOYW1lrFQ6OkFjY291bnRJZKRkb2NzkN4ABKRuYW1lsm51bV9zbGFzaGluZ19zcGFuc6R0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXgUpGRvY3Oc2VdSZW1vdmUgYWxsIGRhdGEgc3RydWN0dXJlcyBjb25jZXJuaW5nIGEgc3Rha2VyL3N0YXNoIG9uY2UgaXQgaXMgYXQgYSBzdGF0ZSB3aGVyZSBpdCBjYW7ZQWJlIGNvbnNpZGVyZWQgYGR1c3RgIGluIHRoZSBzdGFraW5nIHN5c3RlbS4gVGhlIHJlcXVpcmVtZW50cyBhcmU6oNlBMS4gdGhlIGB0b3RhbF9iYWxhbmNlYCBvZiB0aGUgc3Rhc2ggaXMgYmVsb3cgZXhpc3RlbnRpYWwgZGVwb3NpdC7ZRDIuIG9yLCB0aGUgYGxlZGdlci50b3RhbGAgb2YgdGhlIHN0YXNoIGlzIGJlbG93IGV4aXN0ZW50aWFsIGRlcG9zaXQuoNlVVGhlIGZvcm1lciBjYW4gaGFwcGVuIGluIGNhc2VzIGxpa2UgYSBzbGFzaDsgdGhlIGxhdHRlciB3aGVuIGEgZnVsbHkgdW5ib25kZWQgYWNjb3VudNlCaXMgc3RpbGwgcmVjZWl2aW5nIHN0YWtpbmcgcmV3YXJkcyBpbiBgUmV3YXJkRGVzdGluYXRpb246OlN0YWtlZGAuoNlMSXQgY2FuIGJlIGNhbGxlZCBieSBhbnlvbmUsIGFzIGxvbmcgYXMgYHN0YXNoYCBtZWV0cyB0aGUgYWJvdmUgcmVxdWlyZW1lbnRzLqDZN1JlZnVuZHMgdGhlIHRyYW5zYWN0aW9uIGZlZXMgdXBvbiBzdWNjZXNzZnVsIGV4ZWN1dGlvbi7eAASkbmFtZaRraWNrpmZpZWxkc5HeAASkbmFtZaN3aG+kdHlwZcz/qHR5cGVOYW1luVZlYzxBY2NvdW50SWRMb29rdXBPZjxUPj6kZG9jc5ClaW5kZXgVpGRvY3Ob2ThSZW1vdmUgdGhlIGdpdmVuIG5vbWluYXRpb25zIGZyb20gdGhlIGNhbGxpbmcgdmFsaWRhdG9yLqDZNkVmZmVjdHMgd2lsbCBiZSBmZWx0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIG5leHQgZXJhLqDZVFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGJ5IHRoZSBjb250cm9sbGVyLCBub3QgdGhlIHN0YXNoLqDZUy0gYHdob2A6IEEgbGlzdCBvZiBub21pbmF0b3Igc3Rhc2ggYWNjb3VudHMgd2hvIGFyZSBub21pbmF0aW5nIHRoaXMgdmFsaWRhdG9yIHdoaWNo2TAgIHNob3VsZCBubyBsb25nZXIgYmUgbm9taW5hdGluZyB0aGlzIHZhbGlkYXRvci6g2VVOb3RlOiBNYWtpbmcgdGhpcyBjYWxsIG9ubHkgbWFrZXMgc2Vuc2UgaWYgeW91IGZpcnN0IHNldCB0aGUgdmFsaWRhdG9yIHByZWZlcmVuY2VzIHRvvmJsb2NrIGFueSBmdXJ0aGVyIG5vbWluYXRpb25zLt4ABKRuYW1ls3NldF9zdGFraW5nX2NvbmZpZ3OmZmllbGRzlt4ABKRuYW1lsm1pbl9ub21pbmF0b3JfYm9uZKR0eXBlzQEAqHR5cGVOYW1ltkNvbmZpZ09wPEJhbGFuY2VPZjxUPj6kZG9jc5DeAASkbmFtZbJtaW5fdmFsaWRhdG9yX2JvbmSkdHlwZc0BAKh0eXBlTmFtZbZDb25maWdPcDxCYWxhbmNlT2Y8VD4+pGRvY3OQ3gAEpG5hbWWzbWF4X25vbWluYXRvcl9jb3VudKR0eXBlzQEBqHR5cGVOYW1lrUNvbmZpZ09wPHUzMj6kZG9jc5DeAASkbmFtZbNtYXhfdmFsaWRhdG9yX2NvdW50pHR5cGXNAQGodHlwZU5hbWWtQ29uZmlnT3A8dTMyPqRkb2NzkN4ABKRuYW1lr2NoaWxsX3RocmVzaG9sZKR0eXBlzQECqHR5cGVOYW1lsUNvbmZpZ09wPFBlcmNlbnQ+pGRvY3OQ3gAEpG5hbWWubWluX2NvbW1pc3Npb26kdHlwZc0BA6h0eXBlTmFtZbFDb25maWdPcDxQZXJiaWxsPqRkb2NzkKVpbmRleBakZG9jc9wAEdkrVXBkYXRlIHRoZSB2YXJpb3VzIHN0YWtpbmcgY29uZmlndXJhdGlvbnMgLqDZSSogYG1pbl9ub21pbmF0b3JfYm9uZGA6IFRoZSBtaW5pbXVtIGFjdGl2ZSBib25kIG5lZWRlZCB0byBiZSBhIG5vbWluYXRvci7ZSSogYG1pbl92YWxpZGF0b3JfYm9uZGA6IFRoZSBtaW5pbXVtIGFjdGl2ZSBib25kIG5lZWRlZCB0byBiZSBhIHZhbGlkYXRvci7ZVSogYG1heF9ub21pbmF0b3JfY291bnRgOiBUaGUgbWF4IG51bWJlciBvZiB1c2VycyB3aG8gY2FuIGJlIGEgbm9taW5hdG9yIGF0IG9uY2UuIFdoZW7ZJiAgc2V0IHRvIGBOb25lYCwgbm8gbGltaXQgaXMgZW5mb3JjZWQu2VUqIGBtYXhfdmFsaWRhdG9yX2NvdW50YDogVGhlIG1heCBudW1iZXIgb2YgdXNlcnMgd2hvIGNhbiBiZSBhIHZhbGlkYXRvciBhdCBvbmNlLiBXaGVu2SYgIHNldCB0byBgTm9uZWAsIG5vIGxpbWl0IGlzIGVuZm9yY2VkLtlWKiBgY2hpbGxfdGhyZXNob2xkYDogVGhlIHJhdGlvIG9mIGBtYXhfbm9taW5hdG9yX2NvdW50YCBvciBgbWF4X3ZhbGlkYXRvcl9jb3VudGAgd2hpY2jZRiAgc2hvdWxkIGJlIGZpbGxlZCBpbiBvcmRlciBmb3IgdGhlIGBjaGlsbF9vdGhlcmAgdHJhbnNhY3Rpb24gdG8gd29yay7ZWCogYG1pbl9jb21taXNzaW9uYDogVGhlIG1pbmltdW0gYW1vdW50IG9mIGNvbW1pc3Npb24gdGhhdCBlYWNoIHZhbGlkYXRvcnMgbXVzdCBtYWludGFpbi7ZVSAgVGhpcyBpcyBjaGVja2VkIG9ubHkgdXBvbiBjYWxsaW5nIGB2YWxpZGF0ZWAuIEV4aXN0aW5nIHZhbGlkYXRvcnMgYXJlIG5vdCBhZmZlY3RlZC6g2TFSdW50aW1lT3JpZ2luIG11c3QgYmUgUm9vdCB0byBjYWxsIHRoaXMgZnVuY3Rpb24uoNlNTk9URTogRXhpc3Rpbmcgbm9taW5hdG9ycyBhbmQgdmFsaWRhdG9ycyB3aWxsIG5vdCBiZSBhZmZlY3RlZCBieSB0aGlzIHVwZGF0ZS7ZRHRvIGtpY2sgcGVvcGxlIHVuZGVyIHRoZSBuZXcgbGltaXRzLCBgY2hpbGxfb3RoZXJgIHNob3VsZCBiZSBjYWxsZWQu3gAEpG5hbWWrY2hpbGxfb3RoZXKmZmllbGRzkd4ABKRuYW1lqmNvbnRyb2xsZXKkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQpWluZGV4F6Rkb2Nz3AAa2VBEZWNsYXJlIGEgYGNvbnRyb2xsZXJgIHRvIHN0b3AgcGFydGljaXBhdGluZyBhcyBlaXRoZXIgYSB2YWxpZGF0b3Igb3Igbm9taW5hdG9yLqDZNkVmZmVjdHMgd2lsbCBiZSBmZWx0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIG5leHQgZXJhLqDZUFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLCBidXQgY2FuIGJlIGNhbGxlZCBieSBhbnlvbmUuoNlWSWYgdGhlIGNhbGxlciBpcyB0aGUgc2FtZSBhcyB0aGUgY29udHJvbGxlciBiZWluZyB0YXJnZXRlZCwgdGhlbiBubyBmdXJ0aGVyIGNoZWNrcyBhcmXZNmVuZm9yY2VkLCBhbmQgdGhpcyBmdW5jdGlvbiBiZWhhdmVzIGp1c3QgbGlrZSBgY2hpbGxgLqDZV0lmIHRoZSBjYWxsZXIgaXMgZGlmZmVyZW50IHRoYW4gdGhlIGNvbnRyb2xsZXIgYmVpbmcgdGFyZ2V0ZWQsIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uc6xtdXN0IGJlIG1ldDqg2UcqIGBjb250cm9sbGVyYCBtdXN0IGJlbG9uZyB0byBhIG5vbWluYXRvciB3aG8gaGFzIGJlY29tZSBub24tZGVjb2RhYmxlLKCjT3I6oNlPKiBBIGBDaGlsbFRocmVzaG9sZGAgbXVzdCBiZSBzZXQgYW5kIGNoZWNrZWQgd2hpY2ggZGVmaW5lcyBob3cgY2xvc2UgdG8gdGhlIG1heNlVICBub21pbmF0b3JzIG9yIHZhbGlkYXRvcnMgd2UgbXVzdCByZWFjaCBiZWZvcmUgdXNlcnMgY2FuIHN0YXJ0IGNoaWxsaW5nIG9uZS1hbm90aGVyLtlWKiBBIGBNYXhOb21pbmF0b3JDb3VudGAgYW5kIGBNYXhWYWxpZGF0b3JDb3VudGAgbXVzdCBiZSBzZXQgd2hpY2ggaXMgdXNlZCB0byBkZXRlcm1pbmXZJCAgaG93IGNsb3NlIHdlIGFyZSB0byB0aGUgdGhyZXNob2xkLtlXKiBBIGBNaW5Ob21pbmF0b3JCb25kYCBhbmQgYE1pblZhbGlkYXRvckJvbmRgIG11c3QgYmUgc2V0IGFuZCBjaGVja2VkLCB3aGljaCBkZXRlcm1pbmVz2VQgIGlmIHRoaXMgaXMgYSBwZXJzb24gdGhhdCBzaG91bGQgYmUgY2hpbGxlZCBiZWNhdXNlIHRoZXkgaGF2ZSBub3QgbWV0IHRoZSB0aHJlc2hvbGSwICBib25kIHJlcXVpcmVkLqDZVVRoaXMgY2FuIGJlIGhlbHBmdWwgaWYgYm9uZCByZXF1aXJlbWVudHMgYXJlIHVwZGF0ZWQsIGFuZCB3ZSBuZWVkIHRvIHJlbW92ZSBvbGQgdXNlcnPZJndobyBkbyBub3Qgc2F0aXNmeSB0aGVzZSByZXF1aXJlbWVudHMu3gAEpG5hbWW6Zm9yY2VfYXBwbHlfbWluX2NvbW1pc3Npb26mZmllbGRzkd4ABKRuYW1lr3ZhbGlkYXRvcl9zdGFzaKR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5ClaW5kZXgYpGRvY3OT2VFGb3JjZSBhIHZhbGlkYXRvciB0byBoYXZlIGF0IGxlYXN0IHRoZSBtaW5pbXVtIGNvbW1pc3Npb24uIFRoaXMgd2lsbCBub3QgYWZmZWN0IGHZWHZhbGlkYXRvciB3aG8gYWxyZWFkeSBoYXMgYSBjb21taXNzaW9uIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgbWluaW11bS4gQW55IGFjY291bnSuY2FuIGNhbGwgdGhpcy7eAASkbmFtZbJzZXRfbWluX2NvbW1pc3Npb26mZmllbGRzkd4ABKRuYW1lo25ld6R0eXBlIqh0eXBlTmFtZadQZXJiaWxspGRvY3OQpWluZGV4GaRkb2NzlNlJU2V0cyB0aGUgbWluaW11bSBhbW91bnQgb2YgY29tbWlzc2lvbiB0aGF0IGVhY2ggdmFsaWRhdG9ycyBtdXN0IG1haW50YWluLqDZVlRoaXMgY2FsbCBoYXMgbG93ZXIgcHJpdmlsZWdlIHJlcXVpcmVtZW50cyB0aGFuIGBzZXRfc3Rha2luZ19jb25maWdgIGFuZCBjYW4gYmUgY2FsbGVk2TNieSB0aGUgYFQ6OkFkbWluT3JpZ2luYC4gUm9vdCBjYW4gYWx3YXlzIGNhbGwgdGhpcy6kZG9jc5HZSUNvbnRhaW5zIG9uZSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgdGhhdCBjYW4gYmUgY2FsbGVkIGJ5IGFuIGV4dHJpbnNpYy7eAAKiaWTM/6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXM1qRkb2NzkN4AAqJpZM0BAKR0eXBl3gAEpHBhdGiUrnBhbGxldF9zdGFraW5npnBhbGxldKZwYWxsZXSoQ29uZmlnT3CmcGFyYW1zkd4AAqRuYW1loVSkdHlwZQajZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWWkTm9vcKZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lo1NldKZmaWVsZHOR3gAEpG5hbWXApHR5cGUGqHR5cGVOYW1loVSkZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWmUmVtb3ZlpmZpZWxkc5ClaW5kZXgCpGRvY3OQpGRvY3OQ3gAComlkzQEBpHR5cGXeAASkcGF0aJSucGFsbGV0X3N0YWtpbmemcGFsbGV0pnBhbGxldKhDb25maWdPcKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlBKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5PeAASkbmFtZaROb29wpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWjU2V0pmZpZWxkc5HeAASkbmFtZcCkdHlwZQSodHlwZU5hbWWhVKRkb2NzkKVpbmRleAGkZG9jc5DeAASkbmFtZaZSZW1vdmWmZmllbGRzkKVpbmRleAKkZG9jc5CkZG9jc5DeAAKiaWTNAQKkdHlwZd4ABKRwYXRolK5wYWxsZXRfc3Rha2luZ6ZwYWxsZXSmcGFsbGV0qENvbmZpZ09wpnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXM/aNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5PeAASkbmFtZaROb29wpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWjU2V0pmZpZWxkc5HeAASkbmFtZcCkdHlwZcz9qHR5cGVOYW1loVSkZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWmUmVtb3ZlpmZpZWxkc5ClaW5kZXgCpGRvY3OQpGRvY3OQ3gAComlkzQEDpHR5cGXeAASkcGF0aJSucGFsbGV0X3N0YWtpbmemcGFsbGV0pnBhbGxldKhDb25maWdPcKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlIqNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5PeAASkbmFtZaROb29wpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWjU2V0pmZpZWxkc5HeAASkbmFtZcCkdHlwZSKodHlwZU5hbWWhVKRkb2NzkKVpbmRleAGkZG9jc5DeAASkbmFtZaZSZW1vdmWmZmllbGRzkKVpbmRleAKkZG9jc5CkZG9jc5DeAAKiaWTNAQSkdHlwZd4ABKRwYXRolK5wYWxsZXRfc3Rha2luZ6ZwYWxsZXSmcGFsbGV0pUVycm9ypnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRz3AAZ3gAEpG5hbWWtTm90Q29udHJvbGxlcqZmaWVsZHOQpWluZGV4AKRkb2NzkblOb3QgYSBjb250cm9sbGVyIGFjY291bnQu3gAEpG5hbWWoTm90U3Rhc2imZmllbGRzkKVpbmRleAGkZG9jc5G0Tm90IGEgc3Rhc2ggYWNjb3VudC7eAASkbmFtZa1BbHJlYWR5Qm9uZGVkpmZpZWxkc5ClaW5kZXgCpGRvY3ORuFN0YXNoIGlzIGFscmVhZHkgYm9uZGVkLt4ABKRuYW1lrUFscmVhZHlQYWlyZWSmZmllbGRzkKVpbmRleAOkZG9jc5G9Q29udHJvbGxlciBpcyBhbHJlYWR5IHBhaXJlZC7eAASkbmFtZaxFbXB0eVRhcmdldHOmZmllbGRzkKVpbmRleASkZG9jc5G4VGFyZ2V0cyBjYW5ub3QgYmUgZW1wdHku3gAEpG5hbWWuRHVwbGljYXRlSW5kZXimZmllbGRzkKVpbmRleAWkZG9jc5GwRHVwbGljYXRlIGluZGV4Lt4ABKRuYW1lsUludmFsaWRTbGFzaEluZGV4pmZpZWxkc5ClaW5kZXgGpGRvY3OR2SFTbGFzaCByZWNvcmQgaW5kZXggb3V0IG9mIGJvdW5kcy7eAASkbmFtZbBJbnN1ZmZpY2llbnRCb25kpmZpZWxkc5ClaW5kZXgHpGRvY3OT2VZDYW5ub3QgaGF2ZSBhIHZhbGlkYXRvciBvciBub21pbmF0b3Igcm9sZSwgd2l0aCB2YWx1ZSBsZXNzIHRoYW4gdGhlIG1pbmltdW0gZGVmaW5lZCBiedlPZ292ZXJuYW5jZSAoc2VlIGBNaW5WYWxpZGF0b3JCb25kYCBhbmQgYE1pbk5vbWluYXRvckJvbmRgKS4gSWYgdW5ib25kaW5nIGlzIHRoZdlFaW50ZW50aW9uLCBgY2hpbGxgIGZpcnN0IHRvIHJlbW92ZSBvbmUncyByb2xlIGFzIHZhbGlkYXRvci9ub21pbmF0b3Iu3gAEpG5hbWWsTm9Nb3JlQ2h1bmtzpmZpZWxkc5ClaW5kZXgIpGRvY3OR2SRDYW4gbm90IHNjaGVkdWxlIG1vcmUgdW5sb2NrIGNodW5rcy7eAASkbmFtZa1Ob1VubG9ja0NodW5rpmZpZWxkc5ClaW5kZXgJpGRvY3OR2ShDYW4gbm90IHJlYm9uZCB3aXRob3V0IHVubG9ja2luZyBjaHVua3Mu3gAEpG5hbWWsRnVuZGVkVGFyZ2V0pmZpZWxkc5ClaW5kZXgKpGRvY3OR2TJBdHRlbXB0aW5nIHRvIHRhcmdldCBhIHN0YXNoIHRoYXQgc3RpbGwgaGFzIGZ1bmRzLt4ABKRuYW1lskludmFsaWRFcmFUb1Jld2FyZKZmaWVsZHOQpWluZGV4C6Rkb2NzkbZJbnZhbGlkIGVyYSB0byByZXdhcmQu3gAEpG5hbWW6SW52YWxpZE51bWJlck9mTm9taW5hdGlvbnOmZmllbGRzkKVpbmRleAykZG9jc5G+SW52YWxpZCBudW1iZXIgb2Ygbm9taW5hdGlvbnMu3gAEpG5hbWWyTm90U29ydGVkQW5kVW5pcXVlpmZpZWxkc5ClaW5kZXgNpGRvY3OR2SBJdGVtcyBhcmUgbm90IHNvcnRlZCBhbmQgdW5pcXVlLt4ABKRuYW1lrkFscmVhZHlDbGFpbWVkpmZpZWxkc5ClaW5kZXgOpGRvY3OR2UJSZXdhcmRzIGZvciB0aGlzIGVyYSBoYXZlIGFscmVhZHkgYmVlbiBjbGFpbWVkIGZvciB0aGlzIHZhbGlkYXRvci7eAASkbmFtZbVJbmNvcnJlY3RIaXN0b3J5RGVwdGimZmllbGRzkKVpbmRleA+kZG9jc5HZMEluY29ycmVjdCBwcmV2aW91cyBoaXN0b3J5IGRlcHRoIGlucHV0IHByb3ZpZGVkLt4ABKRuYW1ltkluY29ycmVjdFNsYXNoaW5nU3BhbnOmZmllbGRzkKVpbmRleBCkZG9jc5HZLEluY29ycmVjdCBudW1iZXIgb2Ygc2xhc2hpbmcgc3BhbnMgcHJvdmlkZWQu3gAEpG5hbWWoQmFkU3RhdGWmZmllbGRzkKVpbmRleBGkZG9jc5HZTkludGVybmFsIHN0YXRlIGhhcyBiZWNvbWUgc29tZWhvdyBjb3JydXB0ZWQgYW5kIHRoZSBvcGVyYXRpb24gY2Fubm90IGNvbnRpbnVlLt4ABKRuYW1lrlRvb01hbnlUYXJnZXRzpmZpZWxkc5ClaW5kZXgSpGRvY3OR2SVUb28gbWFueSBub21pbmF0aW9uIHRhcmdldHMgc3VwcGxpZWQu3gAEpG5hbWWpQmFkVGFyZ2V0pmZpZWxkc5ClaW5kZXgTpGRvY3OR2U9BIG5vbWluYXRpb24gdGFyZ2V0IHdhcyBzdXBwbGllZCB0aGF0IHdhcyBibG9ja2VkIG9yIG90aGVyd2lzZSBub3QgYSB2YWxpZGF0b3Iu3gAEpG5hbWWwQ2Fubm90Q2hpbGxPdGhlcqZmaWVsZHOQpWluZGV4FKRkb2NzkdlVVGhlIHVzZXIgaGFzIGVub3VnaCBib25kIGFuZCB0aHVzIGNhbm5vdCBiZSBjaGlsbGVkIGZvcmNlZnVsbHkgYnkgYW4gZXh0ZXJuYWwgcGVyc29uLt4ABKRuYW1lsVRvb01hbnlOb21pbmF0b3JzpmZpZWxkc5ClaW5kZXgVpGRvY3OS2VNUaGVyZSBhcmUgdG9vIG1hbnkgbm9taW5hdG9ycyBpbiB0aGUgc3lzdGVtLiBHb3Zlcm5hbmNlIG5lZWRzIHRvIGFkanVzdCB0aGUgc3Rha2luZ9ktc2V0dGluZ3MgdG8ga2VlcCB0aGluZ3Mgc2FmZSBmb3IgdGhlIHJ1bnRpbWUu3gAEpG5hbWWxVG9vTWFueVZhbGlkYXRvcnOmZmllbGRzkKVpbmRleBakZG9jc5LZVVRoZXJlIGFyZSB0b28gbWFueSB2YWxpZGF0b3IgY2FuZGlkYXRlcyBpbiB0aGUgc3lzdGVtLiBHb3Zlcm5hbmNlIG5lZWRzIHRvIGFkanVzdCB0aGXZNXN0YWtpbmcgc2V0dGluZ3MgdG8ga2VlcCB0aGluZ3Mgc2FmZSBmb3IgdGhlIHJ1bnRpbWUu3gAEpG5hbWWwQ29tbWlzc2lvblRvb0xvd6ZmaWVsZHOQpWluZGV4F6Rkb2Nzkdk4Q29tbWlzc2lvbiBpcyB0b28gbG93LiBNdXN0IGJlIGF0IGxlYXN0IGBNaW5Db21taXNzaW9uYC7eAASkbmFtZatCb3VuZE5vdE1ldKZmaWVsZHOQpWluZGV4GKRkb2NzkbZTb21lIGJvdW5kIGlzIG5vdCBtZXQupGRvY3OR2W0KCQkJQ3VzdG9tIFtkaXNwYXRjaCBlcnJvcnNdKGh0dHBzOi8vZG9jcy5zdWJzdHJhdGUuaW8vbWFpbi1kb2NzL2J1aWxkL2V2ZW50cy1lcnJvcnMvKQoJCQlvZiB0aGlzIHBhbGxldC4KCQkJ3gAComlkzQEFpHR5cGXeAASkcGF0aJOqc3Bfc3Rha2luZ6dvZmZlbmNlrk9mZmVuY2VEZXRhaWxzpnBhcmFtc5LeAAKkbmFtZahSZXBvcnRlcqR0eXBlAN4AAqRuYW1lqE9mZmVuZGVypHR5cGUzo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lqG9mZmVuZGVypHR5cGUzqHR5cGVOYW1lqE9mZmVuZGVypGRvY3OQ3gAEpG5hbWWpcmVwb3J0ZXJzpHR5cGXM5Kh0eXBlTmFtZa1WZWM8UmVwb3J0ZXI+pGRvY3OQpGRvY3OQ3gAComlkzQEGpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSKAykZG9jc5DeAAKiaWTNAQekdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQEIpGRvY3OQ3gAComlkzQEIpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSAM0BCaRkb2NzkN4AAqJpZM0BCaR0eXBl3gAEpHBhdGiSr3dlc3RlbmRfcnVudGltZatTZXNzaW9uS2V5c6ZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzlt4ABKRuYW1lp2dyYW5kcGGkdHlwZS2odHlwZU5hbWXZNDxHcmFuZHBhIGFzICRjcmF0ZTo6Qm91bmRUb1J1bnRpbWVBcHBQdWJsaWM+OjpQdWJsaWOkZG9jc5DeAASkbmFtZaRiYWJlpHR5cGXMvKh0eXBlTmFtZdkxPEJhYmUgYXMgJGNyYXRlOjpCb3VuZFRvUnVudGltZUFwcFB1YmxpYz46OlB1YmxpY6Rkb2NzkN4ABKRuYW1lqWltX29ubGluZaR0eXBlMKh0eXBlTmFtZdk1PEltT25saW5lIGFzICRjcmF0ZTo6Qm91bmRUb1J1bnRpbWVBcHBQdWJsaWM+OjpQdWJsaWOkZG9jc5DeAASkbmFtZa5wYXJhX3ZhbGlkYXRvcqR0eXBlzQEKqHR5cGVOYW1l2Tg8SW5pdGlhbGl6ZXIgYXMgJGNyYXRlOjpCb3VuZFRvUnVudGltZUFwcFB1YmxpYz46OlB1YmxpY6Rkb2NzkN4ABKRuYW1lr3BhcmFfYXNzaWdubWVudKR0eXBlzQELqHR5cGVOYW1l2Tw8UGFyYVNlc3Npb25JbmZvIGFzICRjcmF0ZTo6Qm91bmRUb1J1bnRpbWVBcHBQdWJsaWM+OjpQdWJsaWOkZG9jc5DeAASkbmFtZbNhdXRob3JpdHlfZGlzY292ZXJ5pHR5cGXNAQyodHlwZU5hbWXZPzxBdXRob3JpdHlEaXNjb3ZlcnkgYXMgJGNyYXRlOjpCb3VuZFRvUnVudGltZUFwcFB1YmxpYz46OlB1YmxpY6Rkb2NzkKRkb2NzkN4AAqJpZM0BCqR0eXBl3gAEpHBhdGiUs3BvbGthZG90X3ByaW1pdGl2ZXOidjKtdmFsaWRhdG9yX2FwcKZQdWJsaWOmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZTGodHlwZU5hbWWvc3IyNTUxOTo6UHVibGljpGRvY3OQpGRvY3OQ3gAComlkzQELpHR5cGXeAASkcGF0aJSzcG9sa2Fkb3RfcHJpbWl0aXZlc6J2Mq5hc3NpZ25tZW50X2FwcKZQdWJsaWOmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZTGodHlwZU5hbWWvc3IyNTUxOTo6UHVibGljpGRvY3OQpGRvY3OQ3gAComlkzQEMpHR5cGXeAASkcGF0aJO2c3BfYXV0aG9yaXR5X2Rpc2NvdmVyeaNhcHCmUHVibGljpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGUxqHR5cGVOYW1lr3NyMjU1MTk6OlB1YmxpY6Rkb2NzkKRkb2NzkN4AAqJpZM0BDaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpXR1cGxlks0BDgykZG9jc5DeAAKiaWTNAQ6kdHlwZd4ABKRwYXRok6dzcF9jb3JlpmNyeXB0b6lLZXlUeXBlSWSmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZRCodHlwZU5hbWWnW3U4OyA0XaRkb2NzkKRkb2NzkN4AAqJpZM0BD6R0eXBl3gAEpHBhdGiTrnBhbGxldF9zZXNzaW9upnBhbGxldKRDYWxspnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lqHNldF9rZXlzpmZpZWxkc5LeAASkbmFtZaRrZXlzpHR5cGXNAQmodHlwZU5hbWWnVDo6S2V5c6Rkb2NzkN4ABKRuYW1lpXByb29mpHR5cGUMqHR5cGVOYW1lp1ZlYzx1OD6kZG9jc5ClaW5kZXgApGRvY3OZ2TlTZXRzIHRoZSBzZXNzaW9uIGtleShzKSBvZiB0aGUgZnVuY3Rpb24gY2FsbGVyIHRvIGBrZXlzYC7ZR0FsbG93cyBhbiBhY2NvdW50IHRvIHNldCBpdHMgc2Vzc2lvbiBrZXkgcHJpb3IgdG8gYmVjb21pbmcgYSB2YWxpZGF0b3Iu2TBUaGlzIGRvZXNuJ3QgdGFrZSBlZmZlY3QgdW50aWwgdGhlIG5leHQgc2Vzc2lvbi6g2TRUaGUgZGlzcGF0Y2ggb3JpZ2luIG9mIHRoaXMgZnVuY3Rpb24gbXVzdCBiZSBzaWduZWQuoK0jIyBDb21wbGV4aXR52VYtIGBPKDEpYC4gQWN0dWFsIGNvc3QgZGVwZW5kcyBvbiB0aGUgbnVtYmVyIG9mIGxlbmd0aCBvZiBgVDo6S2V5czo6a2V5X2lkcygpYCB3aGljaCBpc6ggIGZpeGVkLt4ABKRuYW1lqnB1cmdlX2tleXOmZmllbGRzkKVpbmRleAGkZG9jc5zZMlJlbW92ZXMgYW55IHNlc3Npb24ga2V5KHMpIG9mIHRoZSBmdW5jdGlvbiBjYWxsZXIuoNkwVGhpcyBkb2Vzbid0IHRha2UgZWZmZWN0IHVudGlsIHRoZSBuZXh0IHNlc3Npb24uoNlVVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGZ1bmN0aW9uIG11c3QgYmUgU2lnbmVkIGFuZCB0aGUgYWNjb3VudCBtdXN0IGJlIGVpdGhlciBiZdlXY29udmVydGlibGUgdG8gYSB2YWxpZGF0b3IgSUQgdXNpbmcgdGhlIGNoYWluJ3MgdHlwaWNhbCBhZGRyZXNzaW5nIHN5c3RlbSAodGhpcyB1c3VhbGx52VRtZWFucyBiZWluZyBhIGNvbnRyb2xsZXIgYWNjb3VudCkgb3IgZGlyZWN0bHkgY29udmVydGlibGUgaW50byBhIHZhbGlkYXRvciBJRCAod2hpY2jZJXVzdWFsbHkgbWVhbnMgYmVpbmcgYSBzdGFzaCBhY2NvdW50KS6grSMjIENvbXBsZXhpdHnZTy0gYE8oMSlgIGluIG51bWJlciBvZiBrZXkgdHlwZXMuIEFjdHVhbCBjb3N0IGRlcGVuZHMgb24gdGhlIG51bWJlciBvZiBsZW5ndGggb2bZJiAgYFQ6OktleXM6OmtleV9pZHMoKWAgd2hpY2ggaXMgZml4ZWQupGRvY3OR2UlDb250YWlucyBvbmUgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIHRoYXQgY2FuIGJlIGNhbGxlZCBieSBhbiBleHRyaW5zaWMu3gAComlkzQEQpHR5cGXeAASkcGF0aJOucGFsbGV0X3Nlc3Npb26mcGFsbGV0pUVycm9ypnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzld4ABKRuYW1lrEludmFsaWRQcm9vZqZmaWVsZHOQpWluZGV4AKRkb2NzkbhJbnZhbGlkIG93bmVyc2hpcCBwcm9vZi7eAASkbmFtZbdOb0Fzc29jaWF0ZWRWYWxpZGF0b3JJZKZmaWVsZHOQpWluZGV4AaRkb2NzkdknTm8gYXNzb2NpYXRlZCB2YWxpZGF0b3IgSUQgZm9yIGFjY291bnQu3gAEpG5hbWWtRHVwbGljYXRlZEtleaZmaWVsZHOQpWluZGV4AqRkb2NzkblSZWdpc3RlcmVkIGR1cGxpY2F0ZSBrZXku3gAEpG5hbWWmTm9LZXlzpmZpZWxkc5ClaW5kZXgDpGRvY3OR2SlObyBrZXlzIGFyZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBhY2NvdW50Lt4ABKRuYW1lqU5vQWNjb3VudKZmaWVsZHOQpWluZGV4BKRkb2NzkdlGS2V5IHNldHRpbmcgYWNjb3VudCBpcyBub3QgbGl2ZSwgc28gaXQncyBpbXBvc3NpYmxlIHRvIGFzc29jaWF0ZSBrZXlzLqRkb2Nzkb1FcnJvciBmb3IgdGhlIHNlc3Npb24gcGFsbGV0Lt4AAqJpZM0BEaR0eXBl3gAEpHBhdGiSrnBhbGxldF9ncmFuZHBhq1N0b3JlZFN0YXRlpnBhcmFtc5HeAAKkbmFtZaFOpHR5cGUEo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzlN4ABKRuYW1lpExpdmWmZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZaxQZW5kaW5nUGF1c2WmZmllbGRzkt4ABKRuYW1lrHNjaGVkdWxlZF9hdKR0eXBlBKh0eXBlTmFtZaFOpGRvY3OQ3gAEpG5hbWWlZGVsYXmkdHlwZQSodHlwZU5hbWWhTqRkb2NzkKVpbmRleAGkZG9jc5DeAASkbmFtZaZQYXVzZWSmZmllbGRzkKVpbmRleAKkZG9jc5DeAASkbmFtZa1QZW5kaW5nUmVzdW1lpmZpZWxkc5LeAASkbmFtZaxzY2hlZHVsZWRfYXSkdHlwZQSodHlwZU5hbWWhTqRkb2NzkN4ABKRuYW1lpWRlbGF5pHR5cGUEqHR5cGVOYW1loU6kZG9jc5ClaW5kZXgDpGRvY3OQpGRvY3OQ3gAComlkzQESpHR5cGXeAASkcGF0aJKucGFsbGV0X2dyYW5kcGGzU3RvcmVkUGVuZGluZ0NoYW5nZaZwYXJhbXOS3gACpG5hbWWhTqR0eXBlBN4AAqRuYW1lpUxpbWl0pHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzlN4ABKRuYW1lrHNjaGVkdWxlZF9hdKR0eXBlBKh0eXBlTmFtZaFOpGRvY3OQ3gAEpG5hbWWlZGVsYXmkdHlwZQSodHlwZU5hbWWhTqRkb2NzkN4ABKRuYW1lsG5leHRfYXV0aG9yaXRpZXOkdHlwZc0BE6h0eXBlTmFtZbtCb3VuZGVkQXV0aG9yaXR5TGlzdDxMaW1pdD6kZG9jc5DeAASkbmFtZaZmb3JjZWSkdHlwZc0BFKh0eXBlTmFtZalPcHRpb248Tj6kZG9jc5CkZG9jc5DeAAKiaWTNAROkdHlwZd4ABKRwYXRok7Nib3VuZGVkX2NvbGxlY3Rpb25zsHdlYWtfYm91bmRlZF92ZWOuV2Vha0JvdW5kZWRWZWOmcGFyYW1zkt4AAqRuYW1loVSkdHlwZSzeAAKkbmFtZaFTpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlK6h0eXBlTmFtZaZWZWM8VD6kZG9jc5CkZG9jc5DeAAKiaWTNARSkdHlwZd4ABKRwYXRokaZPcHRpb26mcGFyYW1zkd4AAqRuYW1loVSkdHlwZQSjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWkTm9uZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lpFNvbWWmZmllbGRzkd4ABKRuYW1lwKR0eXBlBKh0eXBlTmFtZcCkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzQEVpHR5cGXeAASkcGF0aJOucGFsbGV0X2dyYW5kcGGmcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWWzcmVwb3J0X2VxdWl2b2NhdGlvbqZmaWVsZHOS3gAEpG5hbWWyZXF1aXZvY2F0aW9uX3Byb29mpHR5cGXNARaodHlwZU5hbWXZL0JveDxFcXVpdm9jYXRpb25Qcm9vZjxUOjpIYXNoLCBUOjpCbG9ja051bWJlcj4+pGRvY3OQ3gAEpG5hbWWva2V5X293bmVyX3Byb29mpHR5cGXM0ah0eXBlTmFtZbBUOjpLZXlPd25lclByb29mpGRvY3OQpWluZGV4AKRkb2NzlNlCUmVwb3J0IHZvdGVyIGVxdWl2b2NhdGlvbi9taXNiZWhhdmlvci4gVGhpcyBtZXRob2Qgd2lsbCB2ZXJpZnkgdGhl2T1lcXVpdm9jYXRpb24gcHJvb2YgYW5kIHZhbGlkYXRlIHRoZSBnaXZlbiBrZXkgb3duZXJzaGlwIHByb29m2T5hZ2FpbnN0IHRoZSBleHRyYWN0ZWQgb2ZmZW5kZXIuIElmIGJvdGggYXJlIHZhbGlkLCB0aGUgb2ZmZW5jZbF3aWxsIGJlIHJlcG9ydGVkLt4ABKRuYW1lvHJlcG9ydF9lcXVpdm9jYXRpb25fdW5zaWduZWSmZmllbGRzkt4ABKRuYW1lsmVxdWl2b2NhdGlvbl9wcm9vZqR0eXBlzQEWqHR5cGVOYW1l2S9Cb3g8RXF1aXZvY2F0aW9uUHJvb2Y8VDo6SGFzaCwgVDo6QmxvY2tOdW1iZXI+PqRkb2NzkN4ABKRuYW1lr2tleV9vd25lcl9wcm9vZqR0eXBlzNGodHlwZU5hbWWwVDo6S2V5T3duZXJQcm9vZqRkb2NzkKVpbmRleAGkZG9jc5nZQlJlcG9ydCB2b3RlciBlcXVpdm9jYXRpb24vbWlzYmVoYXZpb3IuIFRoaXMgbWV0aG9kIHdpbGwgdmVyaWZ5IHRoZdk9ZXF1aXZvY2F0aW9uIHByb29mIGFuZCB2YWxpZGF0ZSB0aGUgZ2l2ZW4ga2V5IG93bmVyc2hpcCBwcm9vZtk+YWdhaW5zdCB0aGUgZXh0cmFjdGVkIG9mZmVuZGVyLiBJZiBib3RoIGFyZSB2YWxpZCwgdGhlIG9mZmVuY2Wxd2lsbCBiZSByZXBvcnRlZC6g2UNUaGlzIGV4dHJpbnNpYyBtdXN0IGJlIGNhbGxlZCB1bnNpZ25lZCBhbmQgaXQgaXMgZXhwZWN0ZWQgdGhhdCBvbmx52UVibG9jayBhdXRob3JzIHdpbGwgY2FsbCBpdCAodmFsaWRhdGVkIGluIGBWYWxpZGF0ZVVuc2lnbmVkYCksIGFzIHN1Y2jZRWlmIHRoZSBibG9jayBhdXRob3IgaXMgZGVmaW5lZCBpdCB3aWxsIGJlIGRlZmluZWQgYXMgdGhlIGVxdWl2b2NhdGlvbqlyZXBvcnRlci7eAASkbmFtZaxub3RlX3N0YWxsZWSmZmllbGRzkt4ABKRuYW1lpWRlbGF5pHR5cGUEqHR5cGVOYW1lrlQ6OkJsb2NrTnVtYmVypGRvY3OQ3gAEpG5hbWW7YmVzdF9maW5hbGl6ZWRfYmxvY2tfbnVtYmVypHR5cGUEqHR5cGVOYW1lrlQ6OkJsb2NrTnVtYmVypGRvY3OQpWluZGV4AqRkb2NznNlPTm90ZSB0aGF0IHRoZSBjdXJyZW50IGF1dGhvcml0eSBzZXQgb2YgdGhlIEdSQU5EUEEgZmluYWxpdHkgZ2FkZ2V0IGhhcyBzdGFsbGVkLqDZWFRoaXMgd2lsbCB0cmlnZ2VyIGEgZm9yY2VkIGF1dGhvcml0eSBzZXQgY2hhbmdlIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIG5leHQgc2Vzc2lvbiwgdG/ZWGJlIGVuYWN0ZWQgYGRlbGF5YCBibG9ja3MgYWZ0ZXIgdGhhdC4gVGhlIGBkZWxheWAgc2hvdWxkIGJlIGhpZ2ggZW5vdWdoIHRvIHNhZmVseSBhc3N1bWXZUnRoYXQgdGhlIGJsb2NrIHNpZ25hbGxpbmcgdGhlIGZvcmNlZCBjaGFuZ2Ugd2lsbCBub3QgYmUgcmUtb3JnZWQgZS5nLiAxMDAwIGJsb2Nrcy7ZV1RoZSBibG9jayBwcm9kdWN0aW9uIHJhdGUgKHdoaWNoIG1heSBiZSBzbG93ZWQgZG93biBiZWNhdXNlIG9mIGZpbmFsaXR5IGxhZ2dpbmcpIHNob3VsZNlUYmUgdGFrZW4gaW50byBhY2NvdW50IHdoZW4gY2hvb3NpbmcgdGhlIGBkZWxheWAuIFRoZSBHUkFORFBBIHZvdGVycyBiYXNlZCBvbiB0aGUgbmV32VVhdXRob3JpdHkgd2lsbCBzdGFydCB2b3Rpbmcgb24gdG9wIG9mIGBiZXN0X2ZpbmFsaXplZF9ibG9ja19udW1iZXJgIGZvciBuZXcgZmluYWxpemVk2VNibG9ja3MuIGBiZXN0X2ZpbmFsaXplZF9ibG9ja19udW1iZXJgIHNob3VsZCBiZSB0aGUgaGlnaGVzdCBvZiB0aGUgbGF0ZXN0IGZpbmFsaXplZNkxYmxvY2sgb2YgYWxsIHZhbGlkYXRvcnMgb2YgdGhlIG5ldyBhdXRob3JpdHkgc2V0LqC2T25seSBjYWxsYWJsZSBieSByb290LqRkb2NzkdlJQ29udGFpbnMgb25lIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSB0aGF0IGNhbiBiZSBjYWxsZWQgYnkgYW4gZXh0cmluc2ljLt4AAqJpZM0BFqR0eXBl3gAEpHBhdGiStHNwX2NvbnNlbnN1c19ncmFuZHBhsUVxdWl2b2NhdGlvblByb29mpnBhcmFtc5LeAAKkbmFtZaFIpHR5cGUL3gACpG5hbWWhTqR0eXBlBKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5LeAASkbmFtZaZzZXRfaWSkdHlwZQqodHlwZU5hbWWlU2V0SWSkZG9jc5DeAASkbmFtZaxlcXVpdm9jYXRpb26kdHlwZc0BF6h0eXBlTmFtZbJFcXVpdm9jYXRpb248SCwgTj6kZG9jc5CkZG9jc5DeAAKiaWTNARekdHlwZd4ABKRwYXRokrRzcF9jb25zZW5zdXNfZ3JhbmRwYaxFcXVpdm9jYXRpb26mcGFyYW1zkt4AAqRuYW1loUikdHlwZQveAAKkbmFtZaFOpHR5cGUEo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lp1ByZXZvdGWmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQEYqHR5cGVOYW1l2U5ncmFuZHBhOjpFcXVpdm9jYXRpb248QXV0aG9yaXR5SWQsIGdyYW5kcGE6OlByZXZvdGU8SCwgTj4sCkF1dGhvcml0eVNpZ25hdHVyZT6kZG9jc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWpUHJlY29tbWl0pmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BHah0eXBlTmFtZdlQZ3JhbmRwYTo6RXF1aXZvY2F0aW9uPEF1dGhvcml0eUlkLCBncmFuZHBhOjpQcmVjb21taXQ8SCwgTj4sCkF1dGhvcml0eVNpZ25hdHVyZT6kZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzQEYpHR5cGXeAASkcGF0aJKwZmluYWxpdHlfZ3JhbmRwYaxFcXVpdm9jYXRpb26mcGFyYW1zk94AAqRuYW1loklkpHR5cGUt3gACpG5hbWWhVqR0eXBlzQEZ3gACpG5hbWWhU6R0eXBlzQEao2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzlN4ABKRuYW1lrHJvdW5kX251bWJlcqR0eXBlCqh0eXBlTmFtZaN1NjSkZG9jc5DeAASkbmFtZahpZGVudGl0eaR0eXBlLah0eXBlTmFtZaJJZKRkb2NzkN4ABKRuYW1lpWZpcnN0pHR5cGXNARyodHlwZU5hbWWmKFYsIFMppGRvY3OQ3gAEpG5hbWWmc2Vjb25kpHR5cGXNARyodHlwZU5hbWWmKFYsIFMppGRvY3OQpGRvY3OQ3gAComlkzQEZpHR5cGXeAASkcGF0aJKwZmluYWxpdHlfZ3JhbmRwYadQcmV2b3RlpnBhcmFtc5LeAAKkbmFtZaFIpHR5cGUL3gACpG5hbWWhTqR0eXBlBKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5LeAASkbmFtZat0YXJnZXRfaGFzaKR0eXBlC6h0eXBlTmFtZaFIpGRvY3OQ3gAEpG5hbWWtdGFyZ2V0X251bWJlcqR0eXBlBKh0eXBlTmFtZaFOpGRvY3OQpGRvY3OQ3gAComlkzQEapHR5cGXeAASkcGF0aJO0c3BfY29uc2Vuc3VzX2dyYW5kcGGjYXBwqVNpZ25hdHVyZaZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQEbqHR5cGVOYW1lsmVkMjU1MTk6OlNpZ25hdHVyZaRkb2NzkKRkb2NzkN4AAqJpZM0BG6R0eXBl3gAEpHBhdGiTp3NwX2NvcmWnZWQyNTUxOalTaWduYXR1cmWmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZcxdqHR5cGVOYW1lqFt1ODsgNjRdpGRvY3OQpGRvY3OQ3gAComlkzQEcpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSzQEZzQEapGRvY3OQ3gAComlkzQEdpHR5cGXeAASkcGF0aJKwZmluYWxpdHlfZ3JhbmRwYaxFcXVpdm9jYXRpb26mcGFyYW1zk94AAqRuYW1loklkpHR5cGUt3gACpG5hbWWhVqR0eXBlzQEe3gACpG5hbWWhU6R0eXBlzQEao2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzlN4ABKRuYW1lrHJvdW5kX251bWJlcqR0eXBlCqh0eXBlTmFtZaN1NjSkZG9jc5DeAASkbmFtZahpZGVudGl0eaR0eXBlLah0eXBlTmFtZaJJZKRkb2NzkN4ABKRuYW1lpWZpcnN0pHR5cGXNAR+odHlwZU5hbWWmKFYsIFMppGRvY3OQ3gAEpG5hbWWmc2Vjb25kpHR5cGXNAR+odHlwZU5hbWWmKFYsIFMppGRvY3OQpGRvY3OQ3gAComlkzQEepHR5cGXeAASkcGF0aJKwZmluYWxpdHlfZ3JhbmRwYalQcmVjb21taXSmcGFyYW1zkt4AAqRuYW1loUikdHlwZQveAAKkbmFtZaFOpHR5cGUEo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lq3RhcmdldF9oYXNopHR5cGULqHR5cGVOYW1loUikZG9jc5DeAASkbmFtZa10YXJnZXRfbnVtYmVypHR5cGUEqHR5cGVOYW1loU6kZG9jc5CkZG9jc5DeAAKiaWTNAR+kdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZLNAR7NARqkZG9jc5DeAAKiaWTNASCkdHlwZd4ABKRwYXRok65wYWxsZXRfZ3JhbmRwYaZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOX3gAEpG5hbWWrUGF1c2VGYWlsZWSmZmllbGRzkKVpbmRleACkZG9jc5LZQUF0dGVtcHQgdG8gc2lnbmFsIEdSQU5EUEEgcGF1c2Ugd2hlbiB0aGUgYXV0aG9yaXR5IHNldCBpc24ndCBsaXZl2SkoZWl0aGVyIHBhdXNlZCBvciBhbHJlYWR5IHBlbmRpbmcgcGF1c2UpLt4ABKRuYW1lrFJlc3VtZUZhaWxlZKZmaWVsZHOQpWluZGV4AaRkb2NzktlEQXR0ZW1wdCB0byBzaWduYWwgR1JBTkRQQSByZXN1bWUgd2hlbiB0aGUgYXV0aG9yaXR5IHNldCBpc24ndCBwYXVzZWTZKChlaXRoZXIgbGl2ZSBvciBhbHJlYWR5IHBlbmRpbmcgcmVzdW1lKS7eAASkbmFtZa1DaGFuZ2VQZW5kaW5npmZpZWxkc5ClaW5kZXgCpGRvY3OR2TpBdHRlbXB0IHRvIHNpZ25hbCBHUkFORFBBIGNoYW5nZSB3aXRoIG9uZSBhbHJlYWR5IHBlbmRpbmcu3gAEpG5hbWWnVG9vU29vbqZmaWVsZHOQpWluZGV4A6Rkb2NzkdkvQ2Fubm90IHNpZ25hbCBmb3JjZWQgY2hhbmdlIHNvIHNvb24gYWZ0ZXIgbGFzdC7eAASkbmFtZbhJbnZhbGlkS2V5T3duZXJzaGlwUHJvb2amZmllbGRzkKVpbmRleASkZG9jc5HZTEEga2V5IG93bmVyc2hpcCBwcm9vZiBwcm92aWRlZCBhcyBwYXJ0IG9mIGFuIGVxdWl2b2NhdGlvbiByZXBvcnQgaXMgaW52YWxpZC7eAASkbmFtZbhJbnZhbGlkRXF1aXZvY2F0aW9uUHJvb2amZmllbGRzkKVpbmRleAWkZG9jc5HZTEFuIGVxdWl2b2NhdGlvbiBwcm9vZiBwcm92aWRlZCBhcyBwYXJ0IG9mIGFuIGVxdWl2b2NhdGlvbiByZXBvcnQgaXMgaW52YWxpZC7eAASkbmFtZbZEdXBsaWNhdGVPZmZlbmNlUmVwb3J0pmZpZWxkc5ClaW5kZXgGpGRvY3OR2UVBIGdpdmVuIGVxdWl2b2NhdGlvbiByZXBvcnQgaXMgdmFsaWQgYnV0IGFscmVhZHkgcHJldmlvdXNseSByZXBvcnRlZC6kZG9jc5HZbQoJCQlDdXN0b20gW2Rpc3BhdGNoIGVycm9yc10oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pCgkJCW9mIHRoaXMgcGFsbGV0LgoJCQneAAKiaWTNASGkdHlwZd4ABKRwYXRok7Nib3VuZGVkX2NvbGxlY3Rpb25zsHdlYWtfYm91bmRlZF92ZWOuV2Vha0JvdW5kZWRWZWOmcGFyYW1zkt4AAqRuYW1loVSkdHlwZTDeAAKkbmFtZaFTpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQEiqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZM0BIqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGUwpGRvY3OQ3gAComlkzQEjpHR5cGXeAASkcGF0aJStZnJhbWVfc3VwcG9ydKZ0cmFpdHOkbWlzY61XcmFwcGVyT3BhcXVlpnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXNASSjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOS3gAEpG5hbWXApHR5cGXMdah0eXBlTmFtZcCkZG9jc5DeAASkbmFtZcCkdHlwZc0BJKh0eXBlTmFtZaFUpGRvY3OQpGRvY3OQ3gAComlkzQEkpHR5cGXeAASkcGF0aJKwcGFsbGV0X2ltX29ubGluZblCb3VuZGVkT3BhcXVlTmV0d29ya1N0YXRlpnBhcmFtc5PeAAKkbmFtZbNQZWVySWRFbmNvZGluZ0xpbWl0pHR5cGXA3gACpG5hbWW2TXVsdGlBZGRyRW5jb2RpbmdMaW1pdKR0eXBlwN4AAqRuYW1lrkFkZHJlc3Nlc0xpbWl0pHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lp3BlZXJfaWSkdHlwZc0BJah0eXBlTmFtZdknV2Vha0JvdW5kZWRWZWM8dTgsIFBlZXJJZEVuY29kaW5nTGltaXQ+pGRvY3OQ3gAEpG5hbWWyZXh0ZXJuYWxfYWRkcmVzc2VzpHR5cGXNASaodHlwZU5hbWXZS1dlYWtCb3VuZGVkVmVjPFdlYWtCb3VuZGVkVmVjPHU4LCBNdWx0aUFkZHJFbmNvZGluZ0xpbWl0PiwgQWRkcmVzc2VzTGltaXQKPqRkb2NzkKRkb2NzkN4AAqJpZM0BJaR0eXBl3gAEpHBhdGiTs2JvdW5kZWRfY29sbGVjdGlvbnOwd2Vha19ib3VuZGVkX3ZlY65XZWFrQm91bmRlZFZlY6ZwYXJhbXOS3gACpG5hbWWhVKR0eXBlAt4AAqRuYW1loVOkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGUMqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZM0BJqR0eXBl3gAEpHBhdGiTs2JvdW5kZWRfY29sbGVjdGlvbnOwd2Vha19ib3VuZGVkX3ZlY65XZWFrQm91bmRlZFZlY6ZwYXJhbXOS3gACpG5hbWWhVKR0eXBlzQEl3gACpG5hbWWhU6R0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BJ6h0eXBlTmFtZaZWZWM8VD6kZG9jc5CkZG9jc5DeAAKiaWTNASekdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQElpGRvY3OQ3gAComlkzQEopHR5cGXeAASkcGF0aJOwcGFsbGV0X2ltX29ubGluZaZwYWxsZXSkQ2FsbKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5HeAASkbmFtZaloZWFydGJlYXSmZmllbGRzkt4ABKRuYW1lqWhlYXJ0YmVhdKR0eXBlzQEpqHR5cGVOYW1luUhlYXJ0YmVhdDxUOjpCbG9ja051bWJlcj6kZG9jc5DeAASkbmFtZalzaWduYXR1cmWkdHlwZc0BLqh0eXBlTmFtZdkvPFQ6OkF1dGhvcml0eUlkIGFzIFJ1bnRpbWVBcHBQdWJsaWM+OjpTaWduYXR1cmWkZG9jc5ClaW5kZXgApGRvY3OVriMjIENvbXBsZXhpdHk62VYtIGBPKEsgKyBFKWAgd2hlcmUgSyBpcyBsZW5ndGggb2YgYEtleXNgIChoZWFydGJlYXQudmFsaWRhdG9yc19sZW4pIGFuZCBFIGlzIGxlbmd0aCBvZtksICBgaGVhcnRiZWF0Lm5ldHdvcmtfc3RhdGUuZXh0ZXJuYWxfYWRkcmVzc2DZIiAgLSBgTyhLKWA6IGRlY29kaW5nIG9mIGxlbmd0aCBgS2DZKyAgLSBgTyhFKWA6IGRlY29kaW5nL2VuY29kaW5nIG9mIGxlbmd0aCBgRWCkZG9jc5HZSUNvbnRhaW5zIG9uZSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgdGhhdCBjYW4gYmUgY2FsbGVkIGJ5IGFuIGV4dHJpbnNpYy7eAAKiaWTNASmkdHlwZd4ABKRwYXRokrBwYWxsZXRfaW1fb25saW5lqUhlYXJ0YmVhdKZwYXJhbXOR3gACpG5hbWWrQmxvY2tOdW1iZXKkdHlwZQSjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOV3gAEpG5hbWWsYmxvY2tfbnVtYmVypHR5cGUEqHR5cGVOYW1lq0Jsb2NrTnVtYmVypGRvY3OQ3gAEpG5hbWWtbmV0d29ya19zdGF0ZaR0eXBlzQEqqHR5cGVOYW1lsk9wYXF1ZU5ldHdvcmtTdGF0ZaRkb2NzkN4ABKRuYW1lrXNlc3Npb25faW5kZXikdHlwZQSodHlwZU5hbWWsU2Vzc2lvbkluZGV4pGRvY3OQ3gAEpG5hbWWvYXV0aG9yaXR5X2luZGV4pHR5cGUEqHR5cGVOYW1lqUF1dGhJbmRleKRkb2NzkN4ABKRuYW1lrnZhbGlkYXRvcnNfbGVupHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKRkb2NzkN4AAqJpZM0BKqR0eXBl3gAEpHBhdGiTp3NwX2NvcmWob2ZmY2hhaW6yT3BhcXVlTmV0d29ya1N0YXRlpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOS3gAEpG5hbWWncGVlcl9pZKR0eXBlzQErqHR5cGVOYW1lrE9wYXF1ZVBlZXJJZKRkb2NzkN4ABKRuYW1lsmV4dGVybmFsX2FkZHJlc3Nlc6R0eXBlzQEsqHR5cGVOYW1ltFZlYzxPcGFxdWVNdWx0aWFkZHI+pGRvY3OQpGRvY3OQ3gAComlkzQErpHR5cGXeAASkcGF0aJKnc3BfY29yZaxPcGFxdWVQZWVySWSmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZQyodHlwZU5hbWWnVmVjPHU4PqRkb2NzkKRkb2NzkN4AAqJpZM0BLKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAS2kZG9jc5DeAAKiaWTNAS2kdHlwZd4ABKRwYXRok6dzcF9jb3JlqG9mZmNoYWlur09wYXF1ZU11bHRpYWRkcqZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlDKh0eXBlTmFtZadWZWM8dTg+pGRvY3OQpGRvY3OQ3gAComlkzQEupHR5cGXeAASkcGF0aJSwcGFsbGV0X2ltX29ubGluZadzcjI1NTE5q2FwcF9zcjI1NTE5qVNpZ25hdHVyZaZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzFyodHlwZU5hbWWyc3IyNTUxOTo6U2lnbmF0dXJlpGRvY3OQpGRvY3OQ3gAComlkzQEvpHR5cGXeAASkcGF0aJOwcGFsbGV0X2ltX29ubGluZaZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWqSW52YWxpZEtleaZmaWVsZHOQpWluZGV4AKRkb2NzkbhOb24gZXhpc3RlbnQgcHVibGljIGtleS7eAASkbmFtZbNEdXBsaWNhdGVkSGVhcnRiZWF0pmZpZWxkc5ClaW5kZXgBpGRvY3ORtUR1cGxpY2F0ZWQgaGVhcnRiZWF0LqRkb2NzkdltCgkJCUN1c3RvbSBbZGlzcGF0Y2ggZXJyb3JzXShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykKCQkJb2YgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZM0BMKR0eXBl3gAEpHBhdGiTrnBhbGxldF91dGlsaXR5pnBhbGxldKRDYWxspnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzlt4ABKRuYW1lpWJhdGNopmZpZWxkc5HeAASkbmFtZaVjYWxsc6R0eXBlzQExqHR5cGVOYW1lv1ZlYzw8VCBhcyBDb25maWc+OjpSdW50aW1lQ2FsbD6kZG9jc5ClaW5kZXgApGRvY3PcABK/U2VuZCBhIGJhdGNoIG9mIGRpc3BhdGNoIGNhbGxzLqDZLE1heSBiZSBjYWxsZWQgZnJvbSBhbnkgb3JpZ2luIGV4Y2VwdCBgTm9uZWAuoNlXLSBgY2FsbHNgOiBUaGUgY2FsbHMgdG8gYmUgZGlzcGF0Y2hlZCBmcm9tIHRoZSBzYW1lIG9yaWdpbi4gVGhlIG51bWJlciBvZiBjYWxsIG11c3Qgbm902U4gIGV4Y2VlZCB0aGUgY29uc3RhbnQ6IGBiYXRjaGVkX2NhbGxzX2xpbWl0YCAoYXZhaWxhYmxlIGluIGNvbnN0YW50IG1ldGFkYXRhKS6g2VVJZiBvcmlnaW4gaXMgcm9vdCB0aGVuIHRoZSBjYWxscyBhcmUgZGlzcGF0Y2hlZCB3aXRob3V0IGNoZWNraW5nIG9yaWdpbiBmaWx0ZXIuIChUaGlz2TtpbmNsdWRlcyBieXBhc3NpbmcgYGZyYW1lX3N5c3RlbTo6Q29uZmlnOjpCYXNlQ2FsbEZpbHRlcmApLqCtIyMgQ29tcGxleGl0edk0LSBPKEMpIHdoZXJlIEMgaXMgdGhlIG51bWJlciBvZiBjYWxscyB0byBiZSBiYXRjaGVkLqDZVVRoaXMgd2lsbCByZXR1cm4gYE9rYCBpbiBhbGwgY2lyY3Vtc3RhbmNlcy4gVG8gZGV0ZXJtaW5lIHRoZSBzdWNjZXNzIG9mIHRoZSBiYXRjaCwgYW7ZTGV2ZW50IGlzIGRlcG9zaXRlZC4gSWYgYSBjYWxsIGZhaWxlZCBhbmQgdGhlIGJhdGNoIHdhcyBpbnRlcnJ1cHRlZCwgdGhlbiB0aGXZVWBCYXRjaEludGVycnVwdGVkYCBldmVudCBpcyBkZXBvc2l0ZWQsIGFsb25nIHdpdGggdGhlIG51bWJlciBvZiBzdWNjZXNzZnVsIGNhbGxzIG1hZGXZU2FuZCB0aGUgZXJyb3Igb2YgdGhlIGZhaWxlZCBjYWxsLiBJZiBhbGwgd2VyZSBzdWNjZXNzZnVsLCB0aGVuIHRoZSBgQmF0Y2hDb21wbGV0ZWRgs2V2ZW50IGlzIGRlcG9zaXRlZC7eAASkbmFtZa1hc19kZXJpdmF0aXZlpmZpZWxkc5LeAASkbmFtZaVpbmRleKR0eXBlzEaodHlwZU5hbWWjdTE2pGRvY3OQ3gAEpG5hbWWkY2FsbKR0eXBlzQEyqHR5cGVOYW1lv0JveDw8VCBhcyBDb25maWc+OjpSdW50aW1lQ2FsbD6kZG9jc5ClaW5kZXgBpGRvY3Od2TdTZW5kIGEgY2FsbCB0aHJvdWdoIGFuIGluZGV4ZWQgcHNldWRvbnltIG9mIHRoZSBzZW5kZXIuoNlVRmlsdGVyIGZyb20gb3JpZ2luIGFyZSBwYXNzZWQgYWxvbmcuIFRoZSBjYWxsIHdpbGwgYmUgZGlzcGF0Y2hlZCB3aXRoIGFuIG9yaWdpbiB3aGljaNkvdXNlIHRoZSBzYW1lIGZpbHRlciBhcyB0aGUgb3JpZ2luIG9mIHRoaXMgY2FsbC6g2VFOT1RFOiBJZiB5b3UgbmVlZCB0byBlbnN1cmUgdGhhdCBhbnkgYWNjb3VudC1iYXNlZCBmaWx0ZXJpbmcgaXMgbm90IGhvbm9yZWQgKGkuZS7ZWGJlY2F1c2UgeW91IGV4cGVjdCBgcHJveHlgIHRvIGhhdmUgYmVlbiB1c2VkIHByaW9yIGluIHRoZSBjYWxsIHN0YWNrIGFuZCB5b3UgZG8gbm90IHdhbnTZVHRoZSBjYWxsIHJlc3RyaWN0aW9ucyB0byBhcHBseSB0byBhbnkgc3ViLWFjY291bnRzKSwgdGhlbiB1c2UgYGFzX211bHRpX3RocmVzaG9sZF8xYL9pbiB0aGUgTXVsdGlzaWcgcGFsbGV0IGluc3RlYWQuoNk9Tk9URTogUHJpb3IgdG8gdmVyc2lvbiAqMTIsIHRoaXMgd2FzIGNhbGxlZCBgYXNfbGltaXRlZF9zdWJgLqDZM1RoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLt4ABKRuYW1lqWJhdGNoX2FsbKZmaWVsZHOR3gAEpG5hbWWlY2FsbHOkdHlwZc0BMah0eXBlTmFtZb9WZWM8PFQgYXMgQ29uZmlnPjo6UnVudGltZUNhbGw+pGRvY3OQpWluZGV4AqRkb2Nzndk7U2VuZCBhIGJhdGNoIG9mIGRpc3BhdGNoIGNhbGxzIGFuZCBhdG9taWNhbGx5IGV4ZWN1dGUgdGhlbS7ZSFRoZSB3aG9sZSB0cmFuc2FjdGlvbiB3aWxsIHJvbGxiYWNrIGFuZCBmYWlsIGlmIGFueSBvZiB0aGUgY2FsbHMgZmFpbGVkLqDZLE1heSBiZSBjYWxsZWQgZnJvbSBhbnkgb3JpZ2luIGV4Y2VwdCBgTm9uZWAuoNlXLSBgY2FsbHNgOiBUaGUgY2FsbHMgdG8gYmUgZGlzcGF0Y2hlZCBmcm9tIHRoZSBzYW1lIG9yaWdpbi4gVGhlIG51bWJlciBvZiBjYWxsIG11c3Qgbm902U4gIGV4Y2VlZCB0aGUgY29uc3RhbnQ6IGBiYXRjaGVkX2NhbGxzX2xpbWl0YCAoYXZhaWxhYmxlIGluIGNvbnN0YW50IG1ldGFkYXRhKS6g2VVJZiBvcmlnaW4gaXMgcm9vdCB0aGVuIHRoZSBjYWxscyBhcmUgZGlzcGF0Y2hlZCB3aXRob3V0IGNoZWNraW5nIG9yaWdpbiBmaWx0ZXIuIChUaGlz2TtpbmNsdWRlcyBieXBhc3NpbmcgYGZyYW1lX3N5c3RlbTo6Q29uZmlnOjpCYXNlQ2FsbEZpbHRlcmApLqCtIyMgQ29tcGxleGl0edk0LSBPKEMpIHdoZXJlIEMgaXMgdGhlIG51bWJlciBvZiBjYWxscyB0byBiZSBiYXRjaGVkLt4ABKRuYW1lq2Rpc3BhdGNoX2FzpmZpZWxkc5LeAASkbmFtZalhc19vcmlnaW6kdHlwZc0B+ah0eXBlTmFtZbVCb3g8VDo6UGFsbGV0c09yaWdpbj6kZG9jc5DeAASkbmFtZaRjYWxspHR5cGXNATKodHlwZU5hbWW/Qm94PDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPqRkb2NzkKVpbmRleAOkZG9jc5bZMkRpc3BhdGNoZXMgYSBmdW5jdGlvbiBjYWxsIHdpdGggYSBwcm92aWRlZCBvcmlnaW4uoNkxVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1Jvb3RfLqCtIyMgQ29tcGxleGl0eactIE8oMSku3gAEpG5hbWWrZm9yY2VfYmF0Y2imZmllbGRzkd4ABKRuYW1lpWNhbGxzpHR5cGXNATGodHlwZU5hbWW/VmVjPDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPqRkb2NzkKVpbmRleASkZG9jc52/U2VuZCBhIGJhdGNoIG9mIGRpc3BhdGNoIGNhbGxzLtk1VW5saWtlIGBiYXRjaGAsIGl0IGFsbG93cyBlcnJvcnMgYW5kIHdvbid0IGludGVycnVwdC6g2SxNYXkgYmUgY2FsbGVkIGZyb20gYW55IG9yaWdpbiBleGNlcHQgYE5vbmVgLqDZVy0gYGNhbGxzYDogVGhlIGNhbGxzIHRvIGJlIGRpc3BhdGNoZWQgZnJvbSB0aGUgc2FtZSBvcmlnaW4uIFRoZSBudW1iZXIgb2YgY2FsbCBtdXN0IG5vdNlOICBleGNlZWQgdGhlIGNvbnN0YW50OiBgYmF0Y2hlZF9jYWxsc19saW1pdGAgKGF2YWlsYWJsZSBpbiBjb25zdGFudCBtZXRhZGF0YSkuoNlTSWYgb3JpZ2luIGlzIHJvb3QgdGhlbiB0aGUgY2FsbHMgYXJlIGRpc3BhdGNoIHdpdGhvdXQgY2hlY2tpbmcgb3JpZ2luIGZpbHRlci4gKFRoaXPZO2luY2x1ZGVzIGJ5cGFzc2luZyBgZnJhbWVfc3lzdGVtOjpDb25maWc6OkJhc2VDYWxsRmlsdGVyYCkuoK0jIyBDb21wbGV4aXR52TQtIE8oQykgd2hlcmUgQyBpcyB0aGUgbnVtYmVyIG9mIGNhbGxzIHRvIGJlIGJhdGNoZWQu3gAEpG5hbWWrd2l0aF93ZWlnaHSmZmllbGRzkt4ABKRuYW1lpGNhbGykdHlwZc0BMqh0eXBlTmFtZb9Cb3g8PFQgYXMgQ29uZmlnPjo6UnVudGltZUNhbGw+pGRvY3OQ3gAEpG5hbWWmd2VpZ2h0pHR5cGUIqHR5cGVOYW1lpldlaWdodKRkb2NzkKVpbmRleAWkZG9jc5bZMURpc3BhdGNoIGEgZnVuY3Rpb24gY2FsbCB3aXRoIGEgc3BlY2lmaWVkIHdlaWdodC6g2UtUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IGNoZWNrIHRoZSB3ZWlnaHQgb2YgdGhlIGNhbGwsIGFuZCBpbnN0ZWFkIGFsbG93cyB0aGXZLlJvb3Qgb3JpZ2luIHRvIHNwZWNpZnkgdGhlIHdlaWdodCBvZiB0aGUgY2FsbC6g2TFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfUm9vdF8upGRvY3OR2UlDb250YWlucyBvbmUgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIHRoYXQgY2FuIGJlIGNhbGxlZCBieSBhbiBleHRyaW5zaWMu3gAComlkzQExpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZc0BMqRkb2NzkN4AAqJpZM0BMqR0eXBl3gAEpHBhdGiSr3dlc3RlbmRfcnVudGltZatSdW50aW1lQ2FsbKZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRz3AAo3gAEpG5hbWWmU3lzdGVtpmZpZWxkc5HeAASkbmFtZcCkdHlwZcyqqHR5cGVOYW1l2WtzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8U3lzdGVtLCBSdW50aW1lPqRkb2NzkKVpbmRleACkZG9jc5DeAASkbmFtZaRCYWJlpmZpZWxkc5HeAASkbmFtZcCkdHlwZczNqHR5cGVOYW1l2WlzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8QmFiZSwgUnVudGltZT6kZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWpVGltZXN0YW1wpmZpZWxkc5HeAASkbmFtZcCkdHlwZczTqHR5cGVOYW1l2W5zZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8VGltZXN0YW1wLCBSdW50aW1lPqRkb2NzkKVpbmRleAKkZG9jc5DeAASkbmFtZadJbmRpY2VzpmZpZWxkc5HeAASkbmFtZcCkdHlwZczVqHR5cGVOYW1l2WxzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8SW5kaWNlcywgUnVudGltZT6kZG9jc5ClaW5kZXgDpGRvY3OQ3gAEpG5hbWWoQmFsYW5jZXOmZmllbGRzkd4ABKRuYW1lwKR0eXBlzOCodHlwZU5hbWXZbXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxCYWxhbmNlcywgUnVudGltZT6kZG9jc5ClaW5kZXgEpGRvY3OQ3gAEpG5hbWWnU3Rha2luZ6ZmaWVsZHOR3gAEpG5hbWXApHR5cGXM/qh0eXBlTmFtZdlsc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFN0YWtpbmcsIFJ1bnRpbWU+pGRvY3OQpWluZGV4BqRkb2NzkN4ABKRuYW1lp1Nlc3Npb26mZmllbGRzkd4ABKRuYW1lwKR0eXBlzQEPqHR5cGVOYW1l2WxzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8U2Vzc2lvbiwgUnVudGltZT6kZG9jc5ClaW5kZXgIpGRvY3OQ3gAEpG5hbWWnR3JhbmRwYaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNARWodHlwZU5hbWXZbHNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxHcmFuZHBhLCBSdW50aW1lPqRkb2NzkKVpbmRleAqkZG9jc5DeAASkbmFtZahJbU9ubGluZaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNASiodHlwZU5hbWXZbXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxJbU9ubGluZSwgUnVudGltZT6kZG9jc5ClaW5kZXgLpGRvY3OQ3gAEpG5hbWWnVXRpbGl0eaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNATCodHlwZU5hbWXZbHNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxVdGlsaXR5LCBSdW50aW1lPqRkb2NzkKVpbmRleBCkZG9jc5DeAASkbmFtZahJZGVudGl0eaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNATOodHlwZU5hbWXZbXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxJZGVudGl0eSwgUnVudGltZT6kZG9jc5ClaW5kZXgRpGRvY3OQ3gAEpG5hbWWoUmVjb3ZlcnmmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQFbqHR5cGVOYW1l2W1zZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8UmVjb3ZlcnksIFJ1bnRpbWU+pGRvY3OQpWluZGV4EqRkb2NzkN4ABKRuYW1lp1Zlc3RpbmemZmllbGRzkd4ABKRuYW1lwKR0eXBlzQFcqHR5cGVOYW1l2WxzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8VmVzdGluZywgUnVudGltZT6kZG9jc5ClaW5kZXgTpGRvY3OQ3gAEpG5hbWWpU2NoZWR1bGVypmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BXqh0eXBlTmFtZdluc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFNjaGVkdWxlciwgUnVudGltZT6kZG9jc5ClaW5kZXgUpGRvY3OQ3gAEpG5hbWWoUHJlaW1hZ2WmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQFgqHR5cGVOYW1l2W1zZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8UHJlaW1hZ2UsIFJ1bnRpbWU+pGRvY3OQpWluZGV4HKRkb2NzkN4ABKRuYW1lpFN1ZG+mZmllbGRzkd4ABKRuYW1lwKR0eXBlzQFhqHR5cGVOYW1l2WlzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8U3VkbywgUnVudGltZT6kZG9jc5ClaW5kZXgVpGRvY3OQ3gAEpG5hbWWlUHJveHmmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQFiqHR5cGVOYW1l2WpzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8UHJveHksIFJ1bnRpbWU+pGRvY3OQpWluZGV4FqRkb2NzkN4ABKRuYW1lqE11bHRpc2lnpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BZKh0eXBlTmFtZdltc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPE11bHRpc2lnLCBSdW50aW1lPqRkb2NzkKVpbmRleBekZG9jc5DeAASkbmFtZbpFbGVjdGlvblByb3ZpZGVyTXVsdGlQaGFzZaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAWaodHlwZU5hbWXZf3NlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxFbGVjdGlvblByb3ZpZGVyTXVsdGlQaGFzZSwgUnVudGltZT6kZG9jc5ClaW5kZXgYpGRvY3OQ3gAEpG5hbWWpVm90ZXJMaXN0pmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BoKh0eXBlTmFtZdluc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFZvdGVyTGlzdCwgUnVudGltZT6kZG9jc5ClaW5kZXgZpGRvY3OQ3gAEpG5hbWWvTm9taW5hdGlvblBvb2xzpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0Boah0eXBlTmFtZdl0c2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPE5vbWluYXRpb25Qb29scywgUnVudGltZT6kZG9jc5ClaW5kZXgdpGRvY3OQ3gAEpG5hbWWrRmFzdFVuc3Rha2WmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQGoqHR5cGVOYW1l2XBzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8RmFzdFVuc3Rha2UsIFJ1bnRpbWU+pGRvY3OQpWluZGV4HqRkb2NzkN4ABKRuYW1lrUNvbmZpZ3VyYXRpb26mZmllbGRzkd4ABKRuYW1lwKR0eXBlzQGpqHR5cGVOYW1l2XJzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8Q29uZmlndXJhdGlvbiwgUnVudGltZT6kZG9jc5ClaW5kZXgqpGRvY3OQ3gAEpG5hbWWrUGFyYXNTaGFyZWSmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQGqqHR5cGVOYW1l2XBzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8UGFyYXNTaGFyZWQsIFJ1bnRpbWU+pGRvY3OQpWluZGV4K6Rkb2NzkN4ABKRuYW1lrVBhcmFJbmNsdXNpb26mZmllbGRzkd4ABKRuYW1lwKR0eXBlzQGrqHR5cGVOYW1l2XJzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8UGFyYUluY2x1c2lvbiwgUnVudGltZT6kZG9jc5ClaW5kZXgspGRvY3OQ3gAEpG5hbWWsUGFyYUluaGVyZW50pmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BrKh0eXBlTmFtZdlxc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPFBhcmFJbmhlcmVudCwgUnVudGltZT6kZG9jc5ClaW5kZXgtpGRvY3OQ3gAEpG5hbWWlUGFyYXOmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQHIqHR5cGVOYW1l2WpzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8UGFyYXMsIFJ1bnRpbWU+pGRvY3OQpWluZGV4L6Rkb2NzkN4ABKRuYW1lq0luaXRpYWxpemVypmZpZWxkc5HeAASkbmFtZcCkdHlwZc0Byqh0eXBlTmFtZdlwc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPEluaXRpYWxpemVyLCBSdW50aW1lPqRkb2NzkKVpbmRleDCkZG9jc5DeAASkbmFtZaNEbXCmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQHLqHR5cGVOYW1l2WhzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8RG1wLCBSdW50aW1lPqRkb2NzkKVpbmRleDGkZG9jc5DeAASkbmFtZaNVbXCmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQHMqHR5cGVOYW1l2WhzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8VW1wLCBSdW50aW1lPqRkb2NzkKVpbmRleDKkZG9jc5DeAASkbmFtZaRIcm1wpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0Bzah0eXBlTmFtZdlpc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPEhybXAsIFJ1bnRpbWU+pGRvY3OQpWluZGV4M6Rkb2NzkN4ABKRuYW1lrVBhcmFzRGlzcHV0ZXOmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQHOqHR5cGVOYW1l2XJzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8UGFyYXNEaXNwdXRlcywgUnVudGltZT6kZG9jc5ClaW5kZXg1pGRvY3OQ3gAEpG5hbWWtUGFyYXNTbGFzaGluZ6ZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAc+odHlwZU5hbWXZcnNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxQYXJhc1NsYXNoaW5nLCBSdW50aW1lPqRkb2NzkKVpbmRleDakZG9jc5DeAASkbmFtZalSZWdpc3RyYXKmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQHTqHR5cGVOYW1l2W5zZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8UmVnaXN0cmFyLCBSdW50aW1lPqRkb2NzkKVpbmRleDykZG9jc5DeAASkbmFtZaVTbG90c6ZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAdSodHlwZU5hbWXZanNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxTbG90cywgUnVudGltZT6kZG9jc5ClaW5kZXg9pGRvY3OQ3gAEpG5hbWWwUGFyYXNTdWRvV3JhcHBlcqZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAdWodHlwZU5hbWXZdXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxQYXJhc1N1ZG9XcmFwcGVyLCBSdW50aW1lPqRkb2NzkKVpbmRleD6kZG9jc5DeAASkbmFtZahBdWN0aW9uc6ZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAeOodHlwZU5hbWXZbXNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxBdWN0aW9ucywgUnVudGltZT6kZG9jc5ClaW5kZXg/pGRvY3OQ3gAEpG5hbWWpQ3Jvd2Rsb2FupmZpZWxkc5HeAASkbmFtZcCkdHlwZc0B5ah0eXBlTmFtZdluc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OmRpc3BhdGNoCjo6Q2FsbGFibGVDYWxsRm9yPENyb3dkbG9hbiwgUnVudGltZT6kZG9jc5ClaW5kZXjMQKRkb2NzkN4ABKRuYW1lrUFzc2lnbmVkU2xvdHOmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQHuqHR5cGVOYW1l2XJzZWxmOjpzcF9hcGlfaGlkZGVuX2luY2x1ZGVzX2NvbnN0cnVjdF9ydW50aW1lOjpoaWRkZW5faW5jbHVkZTo6ZGlzcGF0Y2gKOjpDYWxsYWJsZUNhbGxGb3I8QXNzaWduZWRTbG90cywgUnVudGltZT6kZG9jc5ClaW5kZXjMQaRkb2NzkN4ABKRuYW1lqVhjbVBhbGxldKZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAfCodHlwZU5hbWXZbnNlbGY6OnNwX2FwaV9oaWRkZW5faW5jbHVkZXNfY29uc3RydWN0X3J1bnRpbWU6OmhpZGRlbl9pbmNsdWRlOjpkaXNwYXRjaAo6OkNhbGxhYmxlQ2FsbEZvcjxYY21QYWxsZXQsIFJ1bnRpbWU+pGRvY3OQpWluZGV4zGOkZG9jc5CkZG9jc5DeAAKiaWTNATOkdHlwZd4ABKRwYXRok69wYWxsZXRfaWRlbnRpdHmmcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOf3gAEpG5hbWWtYWRkX3JlZ2lzdHJhcqZmaWVsZHOR3gAEpG5hbWWnYWNjb3VudKR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5ClaW5kZXgApGRvY3OavkFkZCBhIHJlZ2lzdHJhciB0byB0aGUgc3lzdGVtLqDZP1RoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIGBUOjpSZWdpc3RyYXJPcmlnaW5gLqDZKi0gYGFjY291bnRgOiB0aGUgYWNjb3VudCBvZiB0aGUgcmVnaXN0cmFyLqDZJUVtaXRzIGBSZWdpc3RyYXJBZGRlZGAgaWYgc3VjY2Vzc2Z1bC6grSMjIENvbXBsZXhpdHnZSS0gYE8oUilgIHdoZXJlIGBSYCByZWdpc3RyYXItY291bnQgKGdvdmVybmFuY2UtYm91bmRlZCBhbmQgY29kZS1ib3VuZGVkKS7eAASkbmFtZaxzZXRfaWRlbnRpdHmmZmllbGRzkd4ABKRuYW1lpGluZm+kdHlwZc0BNKh0eXBlTmFtZdkpQm94PElkZW50aXR5SW5mbzxUOjpNYXhBZGRpdGlvbmFsRmllbGRzPj6kZG9jc5ClaW5kZXgBpGRvY3Of2UpTZXQgYW4gYWNjb3VudCdzIGlkZW50aXR5IGluZm9ybWF0aW9uIGFuZCByZXNlcnZlIHRoZSBhcHByb3ByaWF0ZSBkZXBvc2l0LqDZVUlmIHRoZSBhY2NvdW50IGFscmVhZHkgaGFzIGlkZW50aXR5IGluZm9ybWF0aW9uLCB0aGUgZGVwb3NpdCBpcyB0YWtlbiBhcyBwYXJ0IHBheW1lbnS0Zm9yIHRoZSBuZXcgZGVwb3NpdC6g2TNUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy6g2SMtIGBpbmZvYDogVGhlIGlkZW50aXR5IGluZm9ybWF0aW9uLqDZIkVtaXRzIGBJZGVudGl0eVNldGAgaWYgc3VjY2Vzc2Z1bC6grSMjIENvbXBsZXhpdHmxLSBgTyhYICsgWCcgKyBSKWDZRyAgLSB3aGVyZSBgWGAgYWRkaXRpb25hbC1maWVsZC1jb3VudCAoZGVwb3NpdC1ib3VuZGVkIGFuZCBjb2RlLWJvdW5kZWQp2TggIC0gd2hlcmUgYFJgIGp1ZGdlbWVudHMtY291bnQgKHJlZ2lzdHJhci1jb3VudC1ib3VuZGVkKd4ABKRuYW1lqHNldF9zdWJzpmZpZWxkc5HeAASkbmFtZaRzdWJzpHR5cGXNAVaodHlwZU5hbWW5VmVjPChUOjpBY2NvdW50SWQsIERhdGEpPqRkb2NzkKVpbmRleAKkZG9jc57ZI1NldCB0aGUgc3ViLWFjY291bnRzIG9mIHRoZSBzZW5kZXIuoNlVUGF5bWVudDogQW55IGFnZ3JlZ2F0ZSBiYWxhbmNlIHJlc2VydmVkIGJ5IHByZXZpb3VzIGBzZXRfc3Vic2AgY2FsbHMgd2lsbCBiZSByZXR1cm5lZNlLYW5kIGFuIGFtb3VudCBgU3ViQWNjb3VudERlcG9zaXRgIHdpbGwgYmUgcmVzZXJ2ZWQgZm9yIGVhY2ggaXRlbSBpbiBgc3Vic2AuoNlYVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYW5kIHRoZSBzZW5kZXIgbXVzdCBoYXZlIGEgcmVnaXN0ZXJlZKlpZGVudGl0eS6g2SwtIGBzdWJzYDogVGhlIGlkZW50aXR5J3MgKG5ldykgc3ViLWFjY291bnRzLqCtIyMgQ29tcGxleGl0eawtIGBPKFAgKyBTKWDZOSAgLSB3aGVyZSBgUGAgb2xkLXN1YnMtY291bnQgKGhhcmQtIGFuZCBkZXBvc2l0LWJvdW5kZWQpLtk1ICAtIHdoZXJlIGBTYCBzdWJzLWNvdW50IChoYXJkLSBhbmQgZGVwb3NpdC1ib3VuZGVkKS7eAASkbmFtZa5jbGVhcl9pZGVudGl0eaZmaWVsZHOQpWluZGV4A6Rkb2NzntlOQ2xlYXIgYW4gYWNjb3VudCdzIGlkZW50aXR5IGluZm8gYW5kIGFsbCBzdWItYWNjb3VudHMgYW5kIHJldHVybiBhbGwgZGVwb3NpdHMuoNk7UGF5bWVudDogQWxsIHJlc2VydmVkIGJhbGFuY2VzIG9uIHRoZSBhY2NvdW50IGFyZSByZXR1cm5lZC6g2VhUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgdGhlIHNlbmRlciBtdXN0IGhhdmUgYSByZWdpc3RlcmVkqWlkZW50aXR5LqDZJkVtaXRzIGBJZGVudGl0eUNsZWFyZWRgIGlmIHN1Y2Nlc3NmdWwuoK0jIyBDb21wbGV4aXR5sC0gYE8oUiArIFMgKyBYKWDZMyAgLSB3aGVyZSBgUmAgcmVnaXN0cmFyLWNvdW50IChnb3Zlcm5hbmNlLWJvdW5kZWQpLtk1ICAtIHdoZXJlIGBTYCBzdWJzLWNvdW50IChoYXJkLSBhbmQgZGVwb3NpdC1ib3VuZGVkKS7ZSCAgLSB3aGVyZSBgWGAgYWRkaXRpb25hbC1maWVsZC1jb3VudCAoZGVwb3NpdC1ib3VuZGVkIGFuZCBjb2RlLWJvdW5kZWQpLt4ABKRuYW1lsXJlcXVlc3RfanVkZ2VtZW50pmZpZWxkc5LeAASkbmFtZalyZWdfaW5kZXikdHlwZcx1qHR5cGVOYW1lrlJlZ2lzdHJhckluZGV4pGRvY3OQ3gAEpG5hbWWnbWF4X2ZlZaR0eXBlNah0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5ClaW5kZXgEpGRvY3PcABXZJVJlcXVlc3QgYSBqdWRnZW1lbnQgZnJvbSBhIHJlZ2lzdHJhci6g2VVQYXltZW50OiBBdCBtb3N0IGBtYXhfZmVlYCB3aWxsIGJlIHJlc2VydmVkIGZvciBwYXltZW50IHRvIHRoZSByZWdpc3RyYXIgaWYganVkZ2VtZW50pmdpdmVuLqDZTVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGFuZCB0aGUgc2VuZGVyIG11c3QgaGF2ZSBhtHJlZ2lzdGVyZWQgaWRlbnRpdHkuoNlHLSBgcmVnX2luZGV4YDogVGhlIGluZGV4IG9mIHRoZSByZWdpc3RyYXIgd2hvc2UganVkZ2VtZW50IGlzIHJlcXVlc3RlZC7ZVS0gYG1heF9mZWVgOiBUaGUgbWF4aW11bSBmZWUgdGhhdCBtYXkgYmUgcGFpZC4gVGhpcyBzaG91bGQganVzdCBiZSBhdXRvLXBvcHVsYXRlZCBhczqgrGBgYG5vY29tcGlsZdkuU2VsZjo6cmVnaXN0cmFycygpLmdldChyZWdfaW5kZXgpLnVud3JhcCgpLmZlZaNgYGCg2SlFbWl0cyBgSnVkZ2VtZW50UmVxdWVzdGVkYCBpZiBzdWNjZXNzZnVsLqCtIyMgQ29tcGxleGl0ea0tIGBPKFIgKyBYKWAu2TMgIC0gd2hlcmUgYFJgIHJlZ2lzdHJhci1jb3VudCAoZ292ZXJuYW5jZS1ib3VuZGVkKS7ZSCAgLSB3aGVyZSBgWGAgYWRkaXRpb25hbC1maWVsZC1jb3VudCAoZGVwb3NpdC1ib3VuZGVkIGFuZCBjb2RlLWJvdW5kZWQpLt4ABKRuYW1lrmNhbmNlbF9yZXF1ZXN0pmZpZWxkc5HeAASkbmFtZalyZWdfaW5kZXikdHlwZQSodHlwZU5hbWWuUmVnaXN0cmFySW5kZXikZG9jc5ClaW5kZXgFpGRvY3OfukNhbmNlbCBhIHByZXZpb3VzIHJlcXVlc3QuoNk+UGF5bWVudDogQSBwcmV2aW91c2x5IHJlc2VydmVkIGRlcG9zaXQgaXMgcmV0dXJuZWQgb24gc3VjY2Vzcy6g2U1UaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgdGhlIHNlbmRlciBtdXN0IGhhdmUgYbRyZWdpc3RlcmVkIGlkZW50aXR5LqDZUS0gYHJlZ19pbmRleGA6IFRoZSBpbmRleCBvZiB0aGUgcmVnaXN0cmFyIHdob3NlIGp1ZGdlbWVudCBpcyBubyBsb25nZXIgcmVxdWVzdGVkLqDZK0VtaXRzIGBKdWRnZW1lbnRVbnJlcXVlc3RlZGAgaWYgc3VjY2Vzc2Z1bC6grSMjIENvbXBsZXhpdHmtLSBgTyhSICsgWClgLtkzICAtIHdoZXJlIGBSYCByZWdpc3RyYXItY291bnQgKGdvdmVybmFuY2UtYm91bmRlZCku2UggIC0gd2hlcmUgYFhgIGFkZGl0aW9uYWwtZmllbGQtY291bnQgKGRlcG9zaXQtYm91bmRlZCBhbmQgY29kZS1ib3VuZGVkKS7eAASkbmFtZadzZXRfZmVlpmZpZWxkc5LeAASkbmFtZaVpbmRleKR0eXBlzHWodHlwZU5hbWWuUmVnaXN0cmFySW5kZXikZG9jc5DeAASkbmFtZaNmZWWkdHlwZTWodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQpWluZGV4BqRkb2Nzm9lGU2V0IHRoZSBmZWUgcmVxdWlyZWQgZm9yIGEganVkZ2VtZW50IHRvIGJlIHJlcXVlc3RlZCBmcm9tIGEgcmVnaXN0cmFyLqDZVVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGFuZCB0aGUgc2VuZGVyIG11c3QgYmUgdGhlIGFjY291bnTZKG9mIHRoZSByZWdpc3RyYXIgd2hvc2UgaW5kZXggaXMgYGluZGV4YC6g2T0tIGBpbmRleGA6IHRoZSBpbmRleCBvZiB0aGUgcmVnaXN0cmFyIHdob3NlIGZlZSBpcyB0byBiZSBzZXQutS0gYGZlZWA6IHRoZSBuZXcgZmVlLqCtIyMgQ29tcGxleGl0eaktIGBPKFIpYC7ZMyAgLSB3aGVyZSBgUmAgcmVnaXN0cmFyLWNvdW50IChnb3Zlcm5hbmNlLWJvdW5kZWQpLt4ABKRuYW1lrnNldF9hY2NvdW50X2lkpmZpZWxkc5LeAASkbmFtZaVpbmRleKR0eXBlzHWodHlwZU5hbWWuUmVnaXN0cmFySW5kZXikZG9jc5DeAASkbmFtZaNuZXekdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQpWluZGV4B6Rkb2Nzm9kvQ2hhbmdlIHRoZSBhY2NvdW50IGFzc29jaWF0ZWQgd2l0aCBhIHJlZ2lzdHJhci6g2VVUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgdGhlIHNlbmRlciBtdXN0IGJlIHRoZSBhY2NvdW502ShvZiB0aGUgcmVnaXN0cmFyIHdob3NlIGluZGV4IGlzIGBpbmRleGAuoNk9LSBgaW5kZXhgOiB0aGUgaW5kZXggb2YgdGhlIHJlZ2lzdHJhciB3aG9zZSBmZWUgaXMgdG8gYmUgc2V0LrwtIGBuZXdgOiB0aGUgbmV3IGFjY291bnQgSUQuoK0jIyBDb21wbGV4aXR5qS0gYE8oUilgLtkzICAtIHdoZXJlIGBSYCByZWdpc3RyYXItY291bnQgKGdvdmVybmFuY2UtYm91bmRlZCku3gAEpG5hbWWqc2V0X2ZpZWxkc6ZmaWVsZHOS3gAEpG5hbWWlaW5kZXikdHlwZcx1qHR5cGVOYW1lrlJlZ2lzdHJhckluZGV4pGRvY3OQ3gAEpG5hbWWmZmllbGRzpHR5cGXNAViodHlwZU5hbWWuSWRlbnRpdHlGaWVsZHOkZG9jc5ClaW5kZXgIpGRvY3Ob2SpTZXQgdGhlIGZpZWxkIGluZm9ybWF0aW9uIGZvciBhIHJlZ2lzdHJhci6g2VVUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgdGhlIHNlbmRlciBtdXN0IGJlIHRoZSBhY2NvdW502ShvZiB0aGUgcmVnaXN0cmFyIHdob3NlIGluZGV4IGlzIGBpbmRleGAuoNk9LSBgaW5kZXhgOiB0aGUgaW5kZXggb2YgdGhlIHJlZ2lzdHJhciB3aG9zZSBmZWUgaXMgdG8gYmUgc2V0LtlDLSBgZmllbGRzYDogdGhlIGZpZWxkcyB0aGF0IHRoZSByZWdpc3RyYXIgY29uY2VybnMgdGhlbXNlbHZlcyB3aXRoLqCtIyMgQ29tcGxleGl0eaktIGBPKFIpYC7ZMyAgLSB3aGVyZSBgUmAgcmVnaXN0cmFyLWNvdW50IChnb3Zlcm5hbmNlLWJvdW5kZWQpLt4ABKRuYW1lsXByb3ZpZGVfanVkZ2VtZW50pmZpZWxkc5TeAASkbmFtZalyZWdfaW5kZXikdHlwZcx1qHR5cGVOYW1lrlJlZ2lzdHJhckluZGV4pGRvY3OQ3gAEpG5hbWWmdGFyZ2V0pHR5cGXM1qh0eXBlTmFtZbRBY2NvdW50SWRMb29rdXBPZjxUPqRkb2NzkN4ABKRuYW1lqWp1ZGdlbWVudKR0eXBlzQFaqHR5cGVOYW1lt0p1ZGdlbWVudDxCYWxhbmNlT2Y8VD4+pGRvY3OQ3gAEpG5hbWWoaWRlbnRpdHmkdHlwZQuodHlwZU5hbWWnVDo6SGFzaKRkb2NzkKVpbmRleAmkZG9jc9wAEdkuUHJvdmlkZSBhIGp1ZGdlbWVudCBmb3IgYW4gYWNjb3VudCdzIGlkZW50aXR5LqDZVVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGFuZCB0aGUgc2VuZGVyIG11c3QgYmUgdGhlIGFjY291bnTZLG9mIHRoZSByZWdpc3RyYXIgd2hvc2UgaW5kZXggaXMgYHJlZ19pbmRleGAuoNlILSBgcmVnX2luZGV4YDogdGhlIGluZGV4IG9mIHRoZSByZWdpc3RyYXIgd2hvc2UganVkZ2VtZW50IGlzIGJlaW5nIG1hZGUu2VUtIGB0YXJnZXRgOiB0aGUgYWNjb3VudCB3aG9zZSBpZGVudGl0eSB0aGUganVkZ2VtZW50IGlzIHVwb24uIFRoaXMgbXVzdCBiZSBhbiBhY2NvdW50vSAgd2l0aCBhIHJlZ2lzdGVyZWQgaWRlbnRpdHku2VItIGBqdWRnZW1lbnRgOiB0aGUganVkZ2VtZW50IG9mIHRoZSByZWdpc3RyYXIgb2YgaW5kZXggYHJlZ19pbmRleGAgYWJvdXQgYHRhcmdldGAu2VItIGBpZGVudGl0eWA6IFRoZSBoYXNoIG9mIHRoZSBbYElkZW50aXR5SW5mb2BdIGZvciB0aGF0IHRoZSBqdWRnZW1lbnQgaXMgcHJvdmlkZWQuoNklRW1pdHMgYEp1ZGdlbWVudEdpdmVuYCBpZiBzdWNjZXNzZnVsLqCtIyMgQ29tcGxleGl0ea0tIGBPKFIgKyBYKWAu2TMgIC0gd2hlcmUgYFJgIHJlZ2lzdHJhci1jb3VudCAoZ292ZXJuYW5jZS1ib3VuZGVkKS7ZSCAgLSB3aGVyZSBgWGAgYWRkaXRpb25hbC1maWVsZC1jb3VudCAoZGVwb3NpdC1ib3VuZGVkIGFuZCBjb2RlLWJvdW5kZWQpLt4ABKRuYW1lrWtpbGxfaWRlbnRpdHmmZmllbGRzkd4ABKRuYW1lpnRhcmdldKR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5ClaW5kZXgKpGRvY3PcABLZUFJlbW92ZSBhbiBhY2NvdW50J3MgaWRlbnRpdHkgYW5kIHN1Yi1hY2NvdW50IGluZm9ybWF0aW9uIGFuZCBzbGFzaCB0aGUgZGVwb3NpdHMuoNlYUGF5bWVudDogUmVzZXJ2ZWQgYmFsYW5jZXMgZnJvbSBgc2V0X3N1YnNgIGFuZCBgc2V0X2lkZW50aXR5YCBhcmUgc2xhc2hlZCBhbmQgaGFuZGxlZCBiedlRYFNsYXNoYC4gVmVyaWZpY2F0aW9uIHJlcXVlc3QgZGVwb3NpdHMgYXJlIG5vdCByZXR1cm5lZDsgdGhleSBzaG91bGQgYmUgY2FuY2VsbGVk2SBtYW51YWxseSB1c2luZyBgY2FuY2VsX3JlcXVlc3RgLqDZPlRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IG1hdGNoIGBUOjpGb3JjZU9yaWdpbmAuoNlVLSBgdGFyZ2V0YDogdGhlIGFjY291bnQgd2hvc2UgaWRlbnRpdHkgdGhlIGp1ZGdlbWVudCBpcyB1cG9uLiBUaGlzIG11c3QgYmUgYW4gYWNjb3VudL0gIHdpdGggYSByZWdpc3RlcmVkIGlkZW50aXR5LqDZJUVtaXRzIGBJZGVudGl0eUtpbGxlZGAgaWYgc3VjY2Vzc2Z1bC6grSMjIENvbXBsZXhpdHmwLSBgTyhSICsgUyArIFgpYNkzICAtIHdoZXJlIGBSYCByZWdpc3RyYXItY291bnQgKGdvdmVybmFuY2UtYm91bmRlZCku2TUgIC0gd2hlcmUgYFNgIHN1YnMtY291bnQgKGhhcmQtIGFuZCBkZXBvc2l0LWJvdW5kZWQpLtlIICAtIHdoZXJlIGBYYCBhZGRpdGlvbmFsLWZpZWxkLWNvdW50IChkZXBvc2l0LWJvdW5kZWQgYW5kIGNvZGUtYm91bmRlZCku3gAEpG5hbWWnYWRkX3N1YqZmaWVsZHOS3gAEpG5hbWWjc3VipHR5cGXM1qh0eXBlTmFtZbRBY2NvdW50SWRMb29rdXBPZjxUPqRkb2NzkN4ABKRuYW1lpGRhdGGkdHlwZc0BN6h0eXBlTmFtZaREYXRhpGRvY3OQpWluZGV4C6Rkb2Nzl9krQWRkIHRoZSBnaXZlbiBhY2NvdW50IHRvIHRoZSBzZW5kZXIncyBzdWJzLqDZV1BheW1lbnQ6IEJhbGFuY2UgcmVzZXJ2ZWQgYnkgYSBwcmV2aW91cyBgc2V0X3N1YnNgIGNhbGwgZm9yIG9uZSBzdWIgd2lsbCBiZSByZXBhdHJpYXRlZK50byB0aGUgc2VuZGVyLqDZWFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGFuZCB0aGUgc2VuZGVyIG11c3QgaGF2ZSBhIHJlZ2lzdGVyZWS2c3ViIGlkZW50aXR5IG9mIGBzdWJgLt4ABKRuYW1lqnJlbmFtZV9zdWKmZmllbGRzkt4ABKRuYW1lo3N1YqR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5DeAASkbmFtZaRkYXRhpHR5cGXNATeodHlwZU5hbWWkRGF0YaRkb2NzkKVpbmRleAykZG9jc5TZM0FsdGVyIHRoZSBhc3NvY2lhdGVkIG5hbWUgb2YgdGhlIGdpdmVuIHN1Yi1hY2NvdW50LqDZWFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGFuZCB0aGUgc2VuZGVyIG11c3QgaGF2ZSBhIHJlZ2lzdGVyZWS2c3ViIGlkZW50aXR5IG9mIGBzdWJgLt4ABKRuYW1lqnJlbW92ZV9zdWKmZmllbGRzkd4ABKRuYW1lo3N1YqR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5ClaW5kZXgNpGRvY3OX2TBSZW1vdmUgdGhlIGdpdmVuIGFjY291bnQgZnJvbSB0aGUgc2VuZGVyJ3Mgc3Vicy6g2VdQYXltZW50OiBCYWxhbmNlIHJlc2VydmVkIGJ5IGEgcHJldmlvdXMgYHNldF9zdWJzYCBjYWxsIGZvciBvbmUgc3ViIHdpbGwgYmUgcmVwYXRyaWF0ZWSudG8gdGhlIHNlbmRlci6g2VhUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgdGhlIHNlbmRlciBtdXN0IGhhdmUgYSByZWdpc3RlcmVktnN1YiBpZGVudGl0eSBvZiBgc3ViYC7eAASkbmFtZahxdWl0X3N1YqZmaWVsZHOQpWluZGV4DqRkb2NzmtkjUmVtb3ZlIHRoZSBzZW5kZXIgYXMgYSBzdWItYWNjb3VudC6g2VdQYXltZW50OiBCYWxhbmNlIHJlc2VydmVkIGJ5IGEgcHJldmlvdXMgYHNldF9zdWJzYCBjYWxsIGZvciBvbmUgc3ViIHdpbGwgYmUgcmVwYXRyaWF0ZWTZLXRvIHRoZSBzZW5kZXIgKCpub3QqIHRoZSBvcmlnaW5hbCBkZXBvc2l0b3IpLqDZWFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGFuZCB0aGUgc2VuZGVyIG11c3QgaGF2ZSBhIHJlZ2lzdGVyZWSvc3VwZXItaWRlbnRpdHkuoNlRTk9URTogVGhpcyBzaG91bGQgbm90IG5vcm1hbGx5IGJlIHVzZWQsIGJ1dCBpcyBwcm92aWRlZCBpbiB0aGUgY2FzZSB0aGF0IHRoZSBub24t2URjb250cm9sbGVyIG9mIGFuIGFjY291bnQgaXMgbWFsaWNpb3VzbHkgcmVnaXN0ZXJlZCBhcyBhIHN1Yi1hY2NvdW50LqRkb2NzkbxJZGVudGl0eSBwYWxsZXQgZGVjbGFyYXRpb24u3gAComlkzQE0pHR5cGXeAASkcGF0aJOvcGFsbGV0X2lkZW50aXR5pXR5cGVzrElkZW50aXR5SW5mb6ZwYXJhbXOR3gACpG5hbWWqRmllbGRMaW1pdKR0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5neAASkbmFtZaphZGRpdGlvbmFspHR5cGXNATWodHlwZU5hbWXZJEJvdW5kZWRWZWM8KERhdGEsIERhdGEpLCBGaWVsZExpbWl0PqRkb2NzkN4ABKRuYW1lp2Rpc3BsYXmkdHlwZc0BN6h0eXBlTmFtZaREYXRhpGRvY3OQ3gAEpG5hbWWlbGVnYWykdHlwZc0BN6h0eXBlTmFtZaREYXRhpGRvY3OQ3gAEpG5hbWWjd2VipHR5cGXNATeodHlwZU5hbWWkRGF0YaRkb2NzkN4ABKRuYW1lpHJpb3SkdHlwZc0BN6h0eXBlTmFtZaREYXRhpGRvY3OQ3gAEpG5hbWWlZW1haWykdHlwZc0BN6h0eXBlTmFtZaREYXRhpGRvY3OQ3gAEpG5hbWWvcGdwX2ZpbmdlcnByaW50pHR5cGXNAVWodHlwZU5hbWWwT3B0aW9uPFt1ODsgMjBdPqRkb2NzkN4ABKRuYW1lpWltYWdlpHR5cGXNATeodHlwZU5hbWWkRGF0YaRkb2NzkN4ABKRuYW1lp3R3aXR0ZXKkdHlwZc0BN6h0eXBlTmFtZaREYXRhpGRvY3OQpGRvY3OQ3gAComlkzQE1pHR5cGXeAASkcGF0aJOzYm91bmRlZF9jb2xsZWN0aW9uc6tib3VuZGVkX3ZlY6pCb3VuZGVkVmVjpnBhcmFtc5LeAAKkbmFtZaFUpHR5cGXNATbeAAKkbmFtZaFTpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQFUqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZM0BNqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpXR1cGxlks0BN80BN6Rkb2NzkN4AAqJpZM0BN6R0eXBl3gAEpHBhdGiTr3BhbGxldF9pZGVudGl0eaV0eXBlc6REYXRhpnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHPcACbeAASkbmFtZaROb25lpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWkUmF3MKZmaWVsZHOR3gAEpG5hbWXApHR5cGXNATiodHlwZU5hbWXApGRvY3OQpWluZGV4AaRkb2NzkN4ABKRuYW1lpFJhdzGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQE5qHR5cGVOYW1lwKRkb2NzkKVpbmRleAKkZG9jc5DeAASkbmFtZaRSYXcypmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BOqh0eXBlTmFtZcCkZG9jc5ClaW5kZXgDpGRvY3OQ3gAEpG5hbWWkUmF3M6ZmaWVsZHOR3gAEpG5hbWXApHR5cGXNATuodHlwZU5hbWXApGRvY3OQpWluZGV4BKRkb2NzkN4ABKRuYW1lpFJhdzSmZmllbGRzkd4ABKRuYW1lwKR0eXBlEKh0eXBlTmFtZcCkZG9jc5ClaW5kZXgFpGRvY3OQ3gAEpG5hbWWkUmF3NaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNATyodHlwZU5hbWXApGRvY3OQpWluZGV4BqRkb2NzkN4ABKRuYW1lpFJhdzamZmllbGRzkd4ABKRuYW1lwKR0eXBlzQE9qHR5cGVOYW1lwKRkb2NzkKVpbmRleAekZG9jc5DeAASkbmFtZaRSYXc3pmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BPqh0eXBlTmFtZcCkZG9jc5ClaW5kZXgIpGRvY3OQ3gAEpG5hbWWkUmF3OKZmaWVsZHOR3gAEpG5hbWXApHR5cGXMhKh0eXBlTmFtZcCkZG9jc5ClaW5kZXgJpGRvY3OQ3gAEpG5hbWWkUmF3OaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAT+odHlwZU5hbWXApGRvY3OQpWluZGV4CqRkb2NzkN4ABKRuYW1lpVJhdzEwpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BQKh0eXBlTmFtZcCkZG9jc5ClaW5kZXgLpGRvY3OQ3gAEpG5hbWWlUmF3MTGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQFBqHR5cGVOYW1lwKRkb2NzkKVpbmRleAykZG9jc5DeAASkbmFtZaVSYXcxMqZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAUKodHlwZU5hbWXApGRvY3OQpWluZGV4DaRkb2NzkN4ABKRuYW1lpVJhdzEzpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BQ6h0eXBlTmFtZcCkZG9jc5ClaW5kZXgOpGRvY3OQ3gAEpG5hbWWlUmF3MTSmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQFEqHR5cGVOYW1lwKRkb2NzkKVpbmRleA+kZG9jc5DeAASkbmFtZaVSYXcxNaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAUWodHlwZU5hbWXApGRvY3OQpWluZGV4EKRkb2NzkN4ABKRuYW1lpVJhdzE2pmZpZWxkc5HeAASkbmFtZcCkdHlwZSiodHlwZU5hbWXApGRvY3OQpWluZGV4EaRkb2NzkN4ABKRuYW1lpVJhdzE3pmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BRqh0eXBlTmFtZcCkZG9jc5ClaW5kZXgSpGRvY3OQ3gAEpG5hbWWlUmF3MTimZmllbGRzkd4ABKRuYW1lwKR0eXBlzQFHqHR5cGVOYW1lwKRkb2NzkKVpbmRleBOkZG9jc5DeAASkbmFtZaVSYXcxOaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAUiodHlwZU5hbWXApGRvY3OQpWluZGV4FKRkb2NzkN4ABKRuYW1lpVJhdzIwpmZpZWxkc5HeAASkbmFtZcCkdHlwZcx4qHR5cGVOYW1lwKRkb2NzkKVpbmRleBWkZG9jc5DeAASkbmFtZaVSYXcyMaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAUmodHlwZU5hbWXApGRvY3OQpWluZGV4FqRkb2NzkN4ABKRuYW1lpVJhdzIypmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BSqh0eXBlTmFtZcCkZG9jc5ClaW5kZXgXpGRvY3OQ3gAEpG5hbWWlUmF3MjOmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQFLqHR5cGVOYW1lwKRkb2NzkKVpbmRleBikZG9jc5DeAASkbmFtZaVSYXcyNKZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAUyodHlwZU5hbWXApGRvY3OQpWluZGV4GaRkb2NzkN4ABKRuYW1lpVJhdzI1pmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BTah0eXBlTmFtZcCkZG9jc5ClaW5kZXgapGRvY3OQ3gAEpG5hbWWlUmF3MjamZmllbGRzkd4ABKRuYW1lwKR0eXBlzQFOqHR5cGVOYW1lwKRkb2NzkKVpbmRleBukZG9jc5DeAASkbmFtZaVSYXcyN6ZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAU+odHlwZU5hbWXApGRvY3OQpWluZGV4HKRkb2NzkN4ABKRuYW1lpVJhdzI4pmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BUKh0eXBlTmFtZcCkZG9jc5ClaW5kZXgdpGRvY3OQ3gAEpG5hbWWlUmF3MjmmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQFRqHR5cGVOYW1lwKRkb2NzkKVpbmRleB6kZG9jc5DeAASkbmFtZaVSYXczMKZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAVKodHlwZU5hbWXApGRvY3OQpWluZGV4H6Rkb2NzkN4ABKRuYW1lpVJhdzMxpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BU6h0eXBlTmFtZcCkZG9jc5ClaW5kZXggpGRvY3OQ3gAEpG5hbWWlUmF3MzKmZmllbGRzkd4ABKRuYW1lwKR0eXBlAah0eXBlTmFtZcCkZG9jc5ClaW5kZXghpGRvY3OQ3gAEpG5hbWWrQmxha2VUd28yNTamZmllbGRzkd4ABKRuYW1lwKR0eXBlAah0eXBlTmFtZcCkZG9jc5ClaW5kZXgipGRvY3OQ3gAEpG5hbWWmU2hhMjU2pmZpZWxkc5HeAASkbmFtZcCkdHlwZQGodHlwZU5hbWXApGRvY3OQpWluZGV4I6Rkb2NzkN4ABKRuYW1lqUtlY2NhazI1NqZmaWVsZHOR3gAEpG5hbWXApHR5cGUBqHR5cGVOYW1lwKRkb2NzkKVpbmRleCSkZG9jc5DeAASkbmFtZatTaGFUaHJlZTI1NqZmaWVsZHOR3gAEpG5hbWXApHR5cGUBqHR5cGVOYW1lwKRkb2NzkKVpbmRleCWkZG9jc5CkZG9jc5DeAAKiaWTNATikdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaVhcnJhed4AAqNsZW4ApHR5cGUCpGRvY3OQ3gAComlkzQE5pHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGlYXJyYXneAAKjbGVuAaR0eXBlAqRkb2NzkN4AAqJpZM0BOqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbgKkdHlwZQKkZG9jc5DeAAKiaWTNATukdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaVhcnJhed4AAqNsZW4DpHR5cGUCpGRvY3OQ3gAComlkzQE8pHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGlYXJyYXneAAKjbGVuBaR0eXBlAqRkb2NzkN4AAqJpZM0BPaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbgakdHlwZQKkZG9jc5DeAAKiaWTNAT6kdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaVhcnJhed4AAqNsZW4HpHR5cGUCpGRvY3OQ3gAComlkzQE/pHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGlYXJyYXneAAKjbGVuCaR0eXBlAqRkb2NzkN4AAqJpZM0BQKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbgqkdHlwZQKkZG9jc5DeAAKiaWTNAUGkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaVhcnJhed4AAqNsZW4LpHR5cGUCpGRvY3OQ3gAComlkzQFCpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGlYXJyYXneAAKjbGVuDKR0eXBlAqRkb2NzkN4AAqJpZM0BQ6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbg2kdHlwZQKkZG9jc5DeAAKiaWTNAUSkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaVhcnJhed4AAqNsZW4OpHR5cGUCpGRvY3OQ3gAComlkzQFFpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGlYXJyYXneAAKjbGVuD6R0eXBlAqRkb2NzkN4AAqJpZM0BRqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbhGkdHlwZQKkZG9jc5DeAAKiaWTNAUekdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaVhcnJhed4AAqNsZW4SpHR5cGUCpGRvY3OQ3gAComlkzQFIpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGlYXJyYXneAAKjbGVuE6R0eXBlAqRkb2NzkN4AAqJpZM0BSaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbhWkdHlwZQKkZG9jc5DeAAKiaWTNAUqkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaVhcnJhed4AAqNsZW4WpHR5cGUCpGRvY3OQ3gAComlkzQFLpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGlYXJyYXneAAKjbGVuF6R0eXBlAqRkb2NzkN4AAqJpZM0BTKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbhikdHlwZQKkZG9jc5DeAAKiaWTNAU2kdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaVhcnJhed4AAqNsZW4ZpHR5cGUCpGRvY3OQ3gAComlkzQFOpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGlYXJyYXneAAKjbGVuGqR0eXBlAqRkb2NzkN4AAqJpZM0BT6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbhukdHlwZQKkZG9jc5DeAAKiaWTNAVCkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaVhcnJhed4AAqNsZW4cpHR5cGUCpGRvY3OQ3gAComlkzQFRpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGlYXJyYXneAAKjbGVuHaR0eXBlAqRkb2NzkN4AAqJpZM0BUqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbh6kdHlwZQKkZG9jc5DeAAKiaWTNAVOkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaVhcnJhed4AAqNsZW4fpHR5cGUCpGRvY3OQ3gAComlkzQFUpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZc0BNqRkb2NzkN4AAqJpZM0BVaR0eXBl3gAEpHBhdGiRpk9wdGlvbqZwYXJhbXOR3gACpG5hbWWhVKR0eXBlzHijZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWkTm9uZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lpFNvbWWmZmllbGRzkd4ABKRuYW1lwKR0eXBlzHiodHlwZU5hbWXApGRvY3OQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZM0BVqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAVekZG9jc5DeAAKiaWTNAVekdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZIAzQE3pGRvY3OQ3gAComlkzQFYpHR5cGXeAASkcGF0aJOvcGFsbGV0X2lkZW50aXR5pXR5cGVzqEJpdEZsYWdzpnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXNAVmjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGUKqHR5cGVOYW1lrUlkZW50aXR5RmllbGSkZG9jc5CkZG9jc5DeAAKiaWTNAVmkdHlwZd4ABKRwYXRok69wYWxsZXRfaWRlbnRpdHmldHlwZXOtSWRlbnRpdHlGaWVsZKZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzmN4ABKRuYW1lp0Rpc3BsYXmmZmllbGRzkKVpbmRleAGkZG9jc5DeAASkbmFtZaVMZWdhbKZmaWVsZHOQpWluZGV4AqRkb2NzkN4ABKRuYW1lo1dlYqZmaWVsZHOQpWluZGV4BKRkb2NzkN4ABKRuYW1lpFJpb3SmZmllbGRzkKVpbmRleAikZG9jc5DeAASkbmFtZaVFbWFpbKZmaWVsZHOQpWluZGV4EKRkb2NzkN4ABKRuYW1lrlBncEZpbmdlcnByaW50pmZpZWxkc5ClaW5kZXggpGRvY3OQ3gAEpG5hbWWlSW1hZ2WmZmllbGRzkKVpbmRleMxApGRvY3OQ3gAEpG5hbWWnVHdpdHRlcqZmaWVsZHOQpWluZGV4zICkZG9jc5CkZG9jc5DeAAKiaWTNAVqkdHlwZd4ABKRwYXRok69wYWxsZXRfaWRlbnRpdHmldHlwZXOpSnVkZ2VtZW50pnBhcmFtc5HeAAKkbmFtZadCYWxhbmNlpHR5cGUGo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzl94ABKRuYW1lp1Vua25vd26mZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZadGZWVQYWlkpmZpZWxkc5HeAASkbmFtZcCkdHlwZQaodHlwZU5hbWWnQmFsYW5jZaRkb2NzkKVpbmRleAGkZG9jc5DeAASkbmFtZapSZWFzb25hYmxlpmZpZWxkc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWpS25vd25Hb29kpmZpZWxkc5ClaW5kZXgDpGRvY3OQ3gAEpG5hbWWpT3V0T2ZEYXRlpmZpZWxkc5ClaW5kZXgEpGRvY3OQ3gAEpG5hbWWqTG93UXVhbGl0eaZmaWVsZHOQpWluZGV4BaRkb2NzkN4ABKRuYW1lqUVycm9uZW91c6ZmaWVsZHOQpWluZGV4BqRkb2NzkKRkb2NzkN4AAqJpZM0BW6R0eXBl3gAEpHBhdGiTr3BhbGxldF9yZWNvdmVyeaZwYWxsZXSkQ2FsbKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5neAASkbmFtZaxhc19yZWNvdmVyZWSmZmllbGRzkt4ABKRuYW1lp2FjY291bnSkdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQ3gAEpG5hbWWkY2FsbKR0eXBlzQEyqHR5cGVOYW1lv0JveDw8VCBhcyBDb25maWc+OjpSdW50aW1lQ2FsbD6kZG9jc5ClaW5kZXgApGRvY3OY2ShTZW5kIGEgY2FsbCB0aHJvdWdoIGEgcmVjb3ZlcmVkIGFjY291bnQuoNlEVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYW5kIHJlZ2lzdGVyZWQgdG/ZOWJlIGFibGUgdG8gbWFrZSBjYWxscyBvbiBiZWhhbGYgb2YgdGhlIHJlY292ZXJlZCBhY2NvdW50LqCrUGFyYW1ldGVyczrZSC0gYGFjY291bnRgOiBUaGUgcmVjb3ZlcmVkIGFjY291bnQgeW91IHdhbnQgdG8gbWFrZSBhIGNhbGwgb24tYmVoYWxmLW9mLtk/LSBgY2FsbGA6IFRoZSBjYWxsIHlvdSB3YW50IHRvIG1ha2Ugd2l0aCB0aGUgcmVjb3ZlcmVkIGFjY291bnQu3gAEpG5hbWWtc2V0X3JlY292ZXJlZKZmaWVsZHOS3gAEpG5hbWWkbG9zdKR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5DeAASkbmFtZadyZXNjdWVypHR5cGXM1qh0eXBlTmFtZbRBY2NvdW50SWRMb29rdXBPZjxUPqRkb2NzkKVpbmRleAGkZG9jc5jZRkFsbG93IFJPT1QgdG8gYnlwYXNzIHRoZSByZWNvdmVyeSBwcm9jZXNzIGFuZCBzZXQgYW4gYSByZXNjdWVyIGFjY291bnS8Zm9yIGEgbG9zdCBhY2NvdW50IGRpcmVjdGx5LqDZMVRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9ST09UXy6gq1BhcmFtZXRlcnM62S0tIGBsb3N0YDogVGhlICJsb3N0IGFjY291bnQiIHRvIGJlIHJlY292ZXJlZC7ZRi0gYHJlc2N1ZXJgOiBUaGUgInJlc2N1ZXIgYWNjb3VudCIgd2hpY2ggY2FuIGNhbGwgYXMgdGhlIGxvc3QgYWNjb3VudC7eAASkbmFtZa9jcmVhdGVfcmVjb3ZlcnmmZmllbGRzk94ABKRuYW1lp2ZyaWVuZHOkdHlwZczkqHR5cGVOYW1lsVZlYzxUOjpBY2NvdW50SWQ+pGRvY3OQ3gAEpG5hbWWpdGhyZXNob2xkpHR5cGXMRqh0eXBlTmFtZaN1MTakZG9jc5DeAASkbmFtZaxkZWxheV9wZXJpb2SkdHlwZQSodHlwZU5hbWWuVDo6QmxvY2tOdW1iZXKkZG9jc5ClaW5kZXgCpGRvY3PcABDZVkNyZWF0ZSBhIHJlY292ZXJ5IGNvbmZpZ3VyYXRpb24gZm9yIHlvdXIgYWNjb3VudC4gVGhpcyBtYWtlcyB5b3VyIGFjY291bnQgcmVjb3ZlcmFibGUuoNlLUGF5bWVudDogYENvbmZpZ0RlcG9zaXRCYXNlYCArIGBGcmllbmREZXBvc2l0RmFjdG9yYCAqICNfb2ZfZnJpZW5kcyBiYWxhbmNl2VF3aWxsIGJlIHJlc2VydmVkIGZvciBzdG9yaW5nIHRoZSByZWNvdmVyeSBjb25maWd1cmF0aW9uLiBUaGlzIGRlcG9zaXQgaXMgcmV0dXJuZWTZLmluIGZ1bGwgd2hlbiB0aGUgdXNlciBjYWxscyBgcmVtb3ZlX3JlY292ZXJ5YC6g2TNUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy6gq1BhcmFtZXRlcnM62VItIGBmcmllbmRzYDogQSBsaXN0IG9mIGZyaWVuZHMgeW91IHRydXN0IHRvIHZvdWNoIGZvciByZWNvdmVyeSBhdHRlbXB0cy4gU2hvdWxkIGJl2SogIG9yZGVyZWQgYW5kIGNvbnRhaW4gbm8gZHVwbGljYXRlIHZhbHVlcy7ZVi0gYHRocmVzaG9sZGA6IFRoZSBudW1iZXIgb2YgZnJpZW5kcyB0aGF0IG11c3Qgdm91Y2ggZm9yIGEgcmVjb3ZlcnkgYXR0ZW1wdCBiZWZvcmUgdGhl2VUgIGFjY291bnQgY2FuIGJlIHJlY292ZXJlZC4gU2hvdWxkIGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgbGVuZ3RoIG9mIHRoZSBsaXN0IG9mqiAgZnJpZW5kcy7ZUy0gYGRlbGF5X3BlcmlvZGA6IFRoZSBudW1iZXIgb2YgYmxvY2tzIGFmdGVyIGEgcmVjb3ZlcnkgYXR0ZW1wdCBpcyBpbml0aWFsaXplZCB0aGF02TQgIG5lZWRzIHRvIHBhc3MgYmVmb3JlIHRoZSBhY2NvdW50IGNhbiBiZSByZWNvdmVyZWQu3gAEpG5hbWWxaW5pdGlhdGVfcmVjb3ZlcnmmZmllbGRzkd4ABKRuYW1lp2FjY291bnSkdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQpWluZGV4A6Rkb2Nzm9k6SW5pdGlhdGUgdGhlIHByb2Nlc3MgZm9yIHJlY292ZXJpbmcgYSByZWNvdmVyYWJsZSBhY2NvdW50LqDZRlBheW1lbnQ6IGBSZWNvdmVyeURlcG9zaXRgIGJhbGFuY2Ugd2lsbCBiZSByZXNlcnZlZCBmb3IgaW5pdGlhdGluZyB0aGXZSHJlY292ZXJ5IHByb2Nlc3MuIFRoaXMgZGVwb3NpdCB3aWxsIGFsd2F5cyBiZSByZXBhdHJpYXRlZCB0byB0aGUgYWNjb3VudNktdHJ5aW5nIHRvIGJlIHJlY292ZXJlZC4gU2VlIGBjbG9zZV9yZWNvdmVyeWAuoNkzVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uoKtQYXJhbWV0ZXJzOtlQLSBgYWNjb3VudGA6IFRoZSBsb3N0IGFjY291bnQgdGhhdCB5b3Ugd2FudCB0byByZWNvdmVyLiBUaGlzIGFjY291bnQgbmVlZHMgdG8gYmXZMyAgcmVjb3ZlcmFibGUgKGkuZS4gaGF2ZSBhIHJlY292ZXJ5IGNvbmZpZ3VyYXRpb24pLt4ABKRuYW1lrnZvdWNoX3JlY292ZXJ5pmZpZWxkc5LeAASkbmFtZaRsb3N0pHR5cGXM1qh0eXBlTmFtZbRBY2NvdW50SWRMb29rdXBPZjxUPqRkb2NzkN4ABKRuYW1lp3Jlc2N1ZXKkdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQpWluZGV4BKRkb2NznNlJQWxsb3cgYSAiZnJpZW5kIiBvZiBhIHJlY292ZXJhYmxlIGFjY291bnQgdG8gdm91Y2ggZm9yIGFuIGFjdGl2ZSByZWNvdmVyeblwcm9jZXNzIGZvciB0aGF0IGFjY291bnQuoNlJVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYW5kIG11c3QgYmUgYSAiZnJpZW5kIrxmb3IgdGhlIHJlY292ZXJhYmxlIGFjY291bnQuoKtQYXJhbWV0ZXJzOtk0LSBgbG9zdGA6IFRoZSBsb3N0IGFjY291bnQgdGhhdCB5b3Ugd2FudCB0byByZWNvdmVyLtlWLSBgcmVzY3VlcmA6IFRoZSBhY2NvdW50IHRyeWluZyB0byByZXNjdWUgdGhlIGxvc3QgYWNjb3VudCB0aGF0IHlvdSB3YW50IHRvIHZvdWNoIGZvci6g2UhUaGUgY29tYmluYXRpb24gb2YgdGhlc2UgdHdvIHBhcmFtZXRlcnMgbXVzdCBwb2ludCB0byBhbiBhY3RpdmUgcmVjb3ZlcnmocHJvY2Vzcy7eAASkbmFtZa5jbGFpbV9yZWNvdmVyeaZmaWVsZHOR3gAEpG5hbWWnYWNjb3VudKR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5ClaW5kZXgFpGRvY3OZ2TxBbGxvdyBhIHN1Y2Nlc3NmdWwgcmVzY3VlciB0byBjbGFpbSB0aGVpciByZWNvdmVyZWQgYWNjb3VudC6g2UpUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgbXVzdCBiZSBhICJyZXNjdWVyItlGd2hvIGhhcyBzdWNjZXNzZnVsbHkgY29tcGxldGVkIHRoZSBhY2NvdW50IHJlY292ZXJ5IHByb2Nlc3M6IGNvbGxlY3RlZNlLYHRocmVzaG9sZGAgb3IgbW9yZSB2b3VjaGVzLCB3YWl0ZWQgYGRlbGF5X3BlcmlvZGAgYmxvY2tzIHNpbmNlIGluaXRpYXRpb24uoKtQYXJhbWV0ZXJzOtlXLSBgYWNjb3VudGA6IFRoZSBsb3N0IGFjY291bnQgdGhhdCB5b3Ugd2FudCB0byBjbGFpbSBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgcmVjb3ZlcmVkIGJ5piAgeW91Lt4ABKRuYW1lrmNsb3NlX3JlY292ZXJ5pmZpZWxkc5HeAASkbmFtZadyZXNjdWVypHR5cGXM1qh0eXBlTmFtZbRBY2NvdW50SWRMb29rdXBPZjxUPqRkb2NzkKVpbmRleAakZG9jc5vZREFzIHRoZSBjb250cm9sbGVyIG9mIGEgcmVjb3ZlcmFibGUgYWNjb3VudCwgY2xvc2UgYW4gYWN0aXZlIHJlY292ZXJ5uXByb2Nlc3MgZm9yIHlvdXIgYWNjb3VudC6g2UdQYXltZW50OiBCeSBjYWxsaW5nIHRoaXMgZnVuY3Rpb24sIHRoZSByZWNvdmVyYWJsZSBhY2NvdW50IHdpbGwgcmVjZWl2Zdk9dGhlIHJlY292ZXJ5IGRlcG9zaXQgYFJlY292ZXJ5RGVwb3NpdGAgcGxhY2VkIGJ5IHRoZSByZXNjdWVyLqDZQFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGFuZCBtdXN0IGJlIGHZO3JlY292ZXJhYmxlIGFjY291bnQgd2l0aCBhbiBhY3RpdmUgcmVjb3ZlcnkgcHJvY2VzcyBmb3IgaXQuoKtQYXJhbWV0ZXJzOtlDLSBgcmVzY3VlcmA6IFRoZSBhY2NvdW50IHRyeWluZyB0byByZXNjdWUgdGhpcyByZWNvdmVyYWJsZSBhY2NvdW50Lt4ABKRuYW1lr3JlbW92ZV9yZWNvdmVyeaZmaWVsZHOQpWluZGV4B6Rkb2Nzm9lWUmVtb3ZlIHRoZSByZWNvdmVyeSBwcm9jZXNzIGZvciB5b3VyIGFjY291bnQuIFJlY292ZXJlZCBhY2NvdW50cyBhcmUgc3RpbGwgYWNjZXNzaWJsZS6g2UROT1RFOiBUaGUgdXNlciBtdXN0IG1ha2Ugc3VyZSB0byBjYWxsIGBjbG9zZV9yZWNvdmVyeWAgb24gYWxsIGFjdGl2ZdlBcmVjb3ZlcnkgYXR0ZW1wdHMgYmVmb3JlIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiBlbHNlIGl0IHdpbGwgZmFpbC6g2UhQYXltZW50OiBCeSBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gdGhlIHJlY292ZXJhYmxlIGFjY291bnQgd2lsbCB1bnJlc2VydmXZJXRoZWlyIHJlY292ZXJ5IGNvbmZpZ3VyYXRpb24gZGVwb3NpdC7ZPChgQ29uZmlnRGVwb3NpdEJhc2VgICsgYEZyaWVuZERlcG9zaXRGYWN0b3JgICogI19vZl9mcmllbmRzKaDZQFRoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfIGFuZCBtdXN0IGJlIGHZOHJlY292ZXJhYmxlIGFjY291bnQgKGkuZS4gaGFzIGEgcmVjb3ZlcnkgY29uZmlndXJhdGlvbiku3gAEpG5hbWWwY2FuY2VsX3JlY292ZXJlZKZmaWVsZHOR3gAEpG5hbWWnYWNjb3VudKR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5ClaW5kZXgIpGRvY3OX2TdDYW5jZWwgdGhlIGFiaWxpdHkgdG8gdXNlIGBhc19yZWNvdmVyZWRgIGZvciBgYWNjb3VudGAuoNlEVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYW5kIHJlZ2lzdGVyZWQgdG/ZOWJlIGFibGUgdG8gbWFrZSBjYWxscyBvbiBiZWhhbGYgb2YgdGhlIHJlY292ZXJlZCBhY2NvdW50LqCrUGFyYW1ldGVyczrZRS0gYGFjY291bnRgOiBUaGUgcmVjb3ZlcmVkIGFjY291bnQgeW91IGFyZSBhYmxlIHRvIGNhbGwgb24tYmVoYWxmLW9mLqRkb2NzkdlJQ29udGFpbnMgb25lIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSB0aGF0IGNhbiBiZSBjYWxsZWQgYnkgYW4gZXh0cmluc2ljLt4AAqJpZM0BXKR0eXBl3gAEpHBhdGiTrnBhbGxldF92ZXN0aW5npnBhbGxldKRDYWxspnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzld4ABKRuYW1lpHZlc3SmZmllbGRzkKVpbmRleACkZG9jc5nZLlVubG9jayBhbnkgdmVzdGVkIGZ1bmRzIG9mIHRoZSBzZW5kZXIgYWNjb3VudC6g2VdUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXyBhbmQgdGhlIHNlbmRlciBtdXN0IGhhdmUgZnVuZHMgc3RpbGy5bG9ja2VkIHVuZGVyIHRoaXMgcGFsbGV0LqDZNEVtaXRzIGVpdGhlciBgVmVzdGluZ0NvbXBsZXRlZGAgb3IgYFZlc3RpbmdVcGRhdGVkYC6grSMjIENvbXBsZXhpdHmpLSBgTygxKWAu3gAEpG5hbWWqdmVzdF9vdGhlcqZmaWVsZHOR3gAEpG5hbWWmdGFyZ2V0pHR5cGXM1qh0eXBlTmFtZbRBY2NvdW50SWRMb29rdXBPZjxUPqRkb2NzkKVpbmRleAGkZG9jc5vZLlVubG9jayBhbnkgdmVzdGVkIGZ1bmRzIG9mIGEgYHRhcmdldGAgYWNjb3VudC6g2TNUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy6g2VQtIGB0YXJnZXRgOiBUaGUgYWNjb3VudCB3aG9zZSB2ZXN0ZWQgZnVuZHMgc2hvdWxkIGJlIHVubG9ja2VkLiBNdXN0IGhhdmUgZnVuZHMgc3RpbGy5bG9ja2VkIHVuZGVyIHRoaXMgcGFsbGV0LqDZNEVtaXRzIGVpdGhlciBgVmVzdGluZ0NvbXBsZXRlZGAgb3IgYFZlc3RpbmdVcGRhdGVkYC6grSMjIENvbXBsZXhpdHmpLSBgTygxKWAu3gAEpG5hbWWvdmVzdGVkX3RyYW5zZmVypmZpZWxkc5LeAASkbmFtZaZ0YXJnZXSkdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQ3gAEpG5hbWWoc2NoZWR1bGWkdHlwZc0BXah0eXBlTmFtZdkpVmVzdGluZ0luZm88QmFsYW5jZU9mPFQ+LCBUOjpCbG9ja051bWJlcj6kZG9jc5ClaW5kZXgCpGRvY3OduUNyZWF0ZSBhIHZlc3RlZCB0cmFuc2Zlci6g2TNUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy6g2TMtIGB0YXJnZXRgOiBUaGUgYWNjb3VudCByZWNlaXZpbmcgdGhlIHZlc3RlZCBmdW5kcy7ZPC0gYHNjaGVkdWxlYDogVGhlIHZlc3Rpbmcgc2NoZWR1bGUgYXR0YWNoZWQgdG8gdGhlIHRyYW5zZmVyLqC3RW1pdHMgYFZlc3RpbmdDcmVhdGVkYC6g2T9OT1RFOiBUaGlzIHdpbGwgdW5sb2NrIGFsbCBzY2hlZHVsZXMgdGhyb3VnaCB0aGUgY3VycmVudCBibG9jay6grSMjIENvbXBsZXhpdHmpLSBgTygxKWAu3gAEpG5hbWW1Zm9yY2VfdmVzdGVkX3RyYW5zZmVypmZpZWxkc5PeAASkbmFtZaZzb3VyY2WkdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQ3gAEpG5hbWWmdGFyZ2V0pHR5cGXM1qh0eXBlTmFtZbRBY2NvdW50SWRMb29rdXBPZjxUPqRkb2NzkN4ABKRuYW1lqHNjaGVkdWxlpHR5cGXNAV2odHlwZU5hbWXZKVZlc3RpbmdJbmZvPEJhbGFuY2VPZjxUPiwgVDo6QmxvY2tOdW1iZXI+pGRvY3OQpWluZGV4A6Rkb2NznrhGb3JjZSBhIHZlc3RlZCB0cmFuc2Zlci6g2TFUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfUm9vdF8uoNk6LSBgc291cmNlYDogVGhlIGFjY291bnQgd2hvc2UgZnVuZHMgc2hvdWxkIGJlIHRyYW5zZmVycmVkLtlELSBgdGFyZ2V0YDogVGhlIGFjY291bnQgdGhhdCBzaG91bGQgYmUgdHJhbnNmZXJyZWQgdGhlIHZlc3RlZCBmdW5kcy7ZPC0gYHNjaGVkdWxlYDogVGhlIHZlc3Rpbmcgc2NoZWR1bGUgYXR0YWNoZWQgdG8gdGhlIHRyYW5zZmVyLqC3RW1pdHMgYFZlc3RpbmdDcmVhdGVkYC6g2T9OT1RFOiBUaGlzIHdpbGwgdW5sb2NrIGFsbCBzY2hlZHVsZXMgdGhyb3VnaCB0aGUgY3VycmVudCBibG9jay6grSMjIENvbXBsZXhpdHmpLSBgTygxKWAu3gAEpG5hbWWvbWVyZ2Vfc2NoZWR1bGVzpmZpZWxkc5LeAASkbmFtZa9zY2hlZHVsZTFfaW5kZXikdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWWvc2NoZWR1bGUyX2luZGV4pHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleASkZG9jc9wAFdlXTWVyZ2UgdHdvIHZlc3Rpbmcgc2NoZWR1bGVzIHRvZ2V0aGVyLCBjcmVhdGluZyBhIG5ldyB2ZXN0aW5nIHNjaGVkdWxlIHRoYXQgdW5sb2NrcyBvdmVy2VV0aGUgaGlnaGVzdCBwb3NzaWJsZSBzdGFydCBhbmQgZW5kIGJsb2Nrcy4gSWYgYm90aCBzY2hlZHVsZXMgaGF2ZSBhbHJlYWR5IHN0YXJ0ZWQgdGhl2VZjdXJyZW50IGJsb2NrIHdpbGwgYmUgdXNlZCBhcyB0aGUgc2NoZWR1bGUgc3RhcnQ7IHdpdGggdGhlIGNhdmVhdCB0aGF0IGlmIG9uZSBzY2hlZHVsZdlXaXMgZmluaXNoZWQgYnkgdGhlIGN1cnJlbnQgYmxvY2ssIHRoZSBvdGhlciB3aWxsIGJlIHRyZWF0ZWQgYXMgdGhlIG5ldyBtZXJnZWQgc2NoZWR1bGUsq3VubW9kaWZpZWQuoNk+Tk9URTogSWYgYHNjaGVkdWxlMV9pbmRleCA9PSBzY2hlZHVsZTJfaW5kZXhgIHRoaXMgaXMgYSBuby1vcC7ZUE5PVEU6IFRoaXMgd2lsbCB1bmxvY2sgYWxsIHNjaGVkdWxlcyB0aHJvdWdoIHRoZSBjdXJyZW50IGJsb2NrIHByaW9yIHRvIG1lcmdpbmcu2VhOT1RFOiBJZiBib3RoIHNjaGVkdWxlcyBoYXZlIGVuZGVkIGJ5IHRoZSBjdXJyZW50IGJsb2NrLCBubyBuZXcgc2NoZWR1bGUgd2lsbCBiZSBjcmVhdGVkuWFuZCBib3RoIHdpbGwgYmUgcmVtb3ZlZC6gu01lcmdlZCBzY2hlZHVsZSBhdHRyaWJ1dGVzOtlNLSBgc3RhcnRpbmdfYmxvY2tgOiBgTUFYKHNjaGVkdWxlMS5zdGFydGluZ19ibG9jaywgc2NoZWR1bGVkMi5zdGFydGluZ19ibG9jayyyICBjdXJyZW50X2Jsb2NrKWAu2UgtIGBlbmRpbmdfYmxvY2tgOiBgTUFYKHNjaGVkdWxlMS5lbmRpbmdfYmxvY2ssIHNjaGVkdWxlMi5lbmRpbmdfYmxvY2spYC7ZVi0gYGxvY2tlZGA6IGBzY2hlZHVsZTEubG9ja2VkX2F0KGN1cnJlbnRfYmxvY2spICsgc2NoZWR1bGUyLmxvY2tlZF9hdChjdXJyZW50X2Jsb2NrKWAuoNkzVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uoNk6LSBgc2NoZWR1bGUxX2luZGV4YDogaW5kZXggb2YgdGhlIGZpcnN0IHNjaGVkdWxlIHRvIG1lcmdlLtk7LSBgc2NoZWR1bGUyX2luZGV4YDogaW5kZXggb2YgdGhlIHNlY29uZCBzY2hlZHVsZSB0byBtZXJnZS6kZG9jc5HZSUNvbnRhaW5zIG9uZSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgdGhhdCBjYW4gYmUgY2FsbGVkIGJ5IGFuIGV4dHJpbnNpYy7eAAKiaWTNAV2kdHlwZd4ABKRwYXRok65wYWxsZXRfdmVzdGluZ6x2ZXN0aW5nX2luZm+rVmVzdGluZ0luZm+mcGFyYW1zkt4AAqRuYW1lp0JhbGFuY2WkdHlwZQbeAAKkbmFtZatCbG9ja051bWJlcqR0eXBlBKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5PeAASkbmFtZaZsb2NrZWSkdHlwZQaodHlwZU5hbWWnQmFsYW5jZaRkb2NzkN4ABKRuYW1lqXBlcl9ibG9ja6R0eXBlBqh0eXBlTmFtZadCYWxhbmNlpGRvY3OQ3gAEpG5hbWWuc3RhcnRpbmdfYmxvY2ukdHlwZQSodHlwZU5hbWWrQmxvY2tOdW1iZXKkZG9jc5CkZG9jc5DeAAKiaWTNAV6kdHlwZd4ABKRwYXRok7BwYWxsZXRfc2NoZWR1bGVypnBhbGxldKRDYWxspnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzlt4ABKRuYW1lqHNjaGVkdWxlpmZpZWxkc5TeAASkbmFtZaR3aGVupHR5cGUEqHR5cGVOYW1lrlQ6OkJsb2NrTnVtYmVypGRvY3OQ3gAEpG5hbWWubWF5YmVfcGVyaW9kaWOkdHlwZc0BX6h0eXBlTmFtZdkoT3B0aW9uPHNjaGVkdWxlOjpQZXJpb2Q8VDo6QmxvY2tOdW1iZXI+PqRkb2NzkN4ABKRuYW1lqHByaW9yaXR5pHR5cGUCqHR5cGVOYW1lsnNjaGVkdWxlOjpQcmlvcml0eaRkb2NzkN4ABKRuYW1lpGNhbGykdHlwZc0BMqh0eXBlTmFtZb9Cb3g8PFQgYXMgQ29uZmlnPjo6UnVudGltZUNhbGw+pGRvY3OQpWluZGV4AKRkb2NzkbxBbm9ueW1vdXNseSBzY2hlZHVsZSBhIHRhc2su3gAEpG5hbWWmY2FuY2VspmZpZWxkc5LeAASkbmFtZaR3aGVupHR5cGUEqHR5cGVOYW1lrlQ6OkJsb2NrTnVtYmVypGRvY3OQ3gAEpG5hbWWlaW5kZXikdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4AaRkb2NzkdklQ2FuY2VsIGFuIGFub255bW91c2x5IHNjaGVkdWxlZCB0YXNrLt4ABKRuYW1lrnNjaGVkdWxlX25hbWVkpmZpZWxkc5XeAASkbmFtZaJpZKR0eXBlAah0eXBlTmFtZahUYXNrTmFtZaRkb2NzkN4ABKRuYW1lpHdoZW6kdHlwZQSodHlwZU5hbWWuVDo6QmxvY2tOdW1iZXKkZG9jc5DeAASkbmFtZa5tYXliZV9wZXJpb2RpY6R0eXBlzQFfqHR5cGVOYW1l2ShPcHRpb248c2NoZWR1bGU6OlBlcmlvZDxUOjpCbG9ja051bWJlcj4+pGRvY3OQ3gAEpG5hbWWocHJpb3JpdHmkdHlwZQKodHlwZU5hbWWyc2NoZWR1bGU6OlByaW9yaXR5pGRvY3OQ3gAEpG5hbWWkY2FsbKR0eXBlzQEyqHR5cGVOYW1lv0JveDw8VCBhcyBDb25maWc+OjpSdW50aW1lQ2FsbD6kZG9jc5ClaW5kZXgCpGRvY3ORtlNjaGVkdWxlIGEgbmFtZWQgdGFzay7eAASkbmFtZaxjYW5jZWxfbmFtZWSmZmllbGRzkd4ABKRuYW1lomlkpHR5cGUBqHR5cGVOYW1lqFRhc2tOYW1lpGRvY3OQpWluZGV4A6Rkb2Nzkb5DYW5jZWwgYSBuYW1lZCBzY2hlZHVsZWQgdGFzay7eAASkbmFtZa5zY2hlZHVsZV9hZnRlcqZmaWVsZHOU3gAEpG5hbWWlYWZ0ZXKkdHlwZQSodHlwZU5hbWWuVDo6QmxvY2tOdW1iZXKkZG9jc5DeAASkbmFtZa5tYXliZV9wZXJpb2RpY6R0eXBlzQFfqHR5cGVOYW1l2ShPcHRpb248c2NoZWR1bGU6OlBlcmlvZDxUOjpCbG9ja051bWJlcj4+pGRvY3OQ3gAEpG5hbWWocHJpb3JpdHmkdHlwZQKodHlwZU5hbWWyc2NoZWR1bGU6OlByaW9yaXR5pGRvY3OQ3gAEpG5hbWWkY2FsbKR0eXBlzQEyqHR5cGVOYW1lv0JveDw8VCBhcyBDb25maWc+OjpSdW50aW1lQ2FsbD6kZG9jc5ClaW5kZXgEpGRvY3OR2SpBbm9ueW1vdXNseSBzY2hlZHVsZSBhIHRhc2sgYWZ0ZXIgYSBkZWxheS7eAASkbmFtZbRzY2hlZHVsZV9uYW1lZF9hZnRlcqZmaWVsZHOV3gAEpG5hbWWiaWSkdHlwZQGodHlwZU5hbWWoVGFza05hbWWkZG9jc5DeAASkbmFtZaVhZnRlcqR0eXBlBKh0eXBlTmFtZa5UOjpCbG9ja051bWJlcqRkb2NzkN4ABKRuYW1lrm1heWJlX3BlcmlvZGljpHR5cGXNAV+odHlwZU5hbWXZKE9wdGlvbjxzY2hlZHVsZTo6UGVyaW9kPFQ6OkJsb2NrTnVtYmVyPj6kZG9jc5DeAASkbmFtZahwcmlvcml0eaR0eXBlAqh0eXBlTmFtZbJzY2hlZHVsZTo6UHJpb3JpdHmkZG9jc5DeAASkbmFtZaRjYWxspHR5cGXNATKodHlwZU5hbWW/Qm94PDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPqRkb2NzkKVpbmRleAWkZG9jc5HZJFNjaGVkdWxlIGEgbmFtZWQgdGFzayBhZnRlciBhIGRlbGF5LqRkb2NzkdlJQ29udGFpbnMgb25lIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSB0aGF0IGNhbiBiZSBjYWxsZWQgYnkgYW4gZXh0cmluc2ljLt4AAqJpZM0BX6R0eXBl3gAEpHBhdGiRpk9wdGlvbqZwYXJhbXOR3gACpG5hbWWhVKR0eXBlP6NkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZaROb25lpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWkU29tZaZmaWVsZHOR3gAEpG5hbWXApHR5cGU/qHR5cGVOYW1lwKRkb2NzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTNAWCkdHlwZd4ABKRwYXRok69wYWxsZXRfcHJlaW1hZ2WmcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOU3gAEpG5hbWWtbm90ZV9wcmVpbWFnZaZmaWVsZHOR3gAEpG5hbWWlYnl0ZXOkdHlwZQyodHlwZU5hbWWnVmVjPHU4PqRkb2NzkKVpbmRleACkZG9jc5S9UmVnaXN0ZXIgYSBwcmVpbWFnZSBvbi1jaGFpbi6g2VVJZiB0aGUgcHJlaW1hZ2Ugd2FzIHByZXZpb3VzbHkgcmVxdWVzdGVkLCBubyBmZWVzIG9yIGRlcG9zaXRzIGFyZSB0YWtlbiBmb3IgcHJvdmlkaW5n2VV0aGUgcHJlaW1hZ2UuIE90aGVyd2lzZSwgYSBkZXBvc2l0IGlzIHRha2VuIHByb3BvcnRpb25hbCB0byB0aGUgc2l6ZSBvZiB0aGUgcHJlaW1hZ2Uu3gAEpG5hbWWvdW5ub3RlX3ByZWltYWdlpmZpZWxkc5HeAASkbmFtZaRoYXNopHR5cGULqHR5cGVOYW1lp1Q6Okhhc2ikZG9jc5ClaW5kZXgBpGRvY3OW2TdDbGVhciBhbiB1bnJlcXVlc3RlZCBwcmVpbWFnZSBmcm9tIHRoZSBydW50aW1lIHN0b3JhZ2UuoNk/SWYgYGxlbmAgaXMgcHJvdmlkZWQsIHRoZW4gaXQgd2lsbCBiZSBhIG11Y2ggY2hlYXBlciBvcGVyYXRpb24uoNlALSBgaGFzaGA6IFRoZSBoYXNoIG9mIHRoZSBwcmVpbWFnZSB0byBiZSByZW1vdmVkIGZyb20gdGhlIHN0b3JlLtkuLSBgbGVuYDogVGhlIGxlbmd0aCBvZiB0aGUgcHJlaW1hZ2Ugb2YgYGhhc2hgLt4ABKRuYW1lsHJlcXVlc3RfcHJlaW1hZ2WmZmllbGRzkd4ABKRuYW1lpGhhc2ikdHlwZQuodHlwZU5hbWWnVDo6SGFzaKRkb2NzkKVpbmRleAKkZG9jc5TZUFJlcXVlc3QgYSBwcmVpbWFnZSBiZSB1cGxvYWRlZCB0byB0aGUgY2hhaW4gd2l0aG91dCBwYXlpbmcgYW55IGZlZXMgb3IgZGVwb3NpdHMuoNlVSWYgdGhlIHByZWltYWdlIHJlcXVlc3RzIGhhcyBhbHJlYWR5IGJlZW4gcHJvdmlkZWQgb24tY2hhaW4sIHdlIHVucmVzZXJ2ZSBhbnkgZGVwb3NpdNlOYSB1c2VyIG1heSBoYXZlIHBhaWQsIGFuZCB0YWtlIHRoZSBjb250cm9sIG9mIHRoZSBwcmVpbWFnZSBvdXQgb2YgdGhlaXIgaGFuZHMu3gAEpG5hbWWydW5yZXF1ZXN0X3ByZWltYWdlpmZpZWxkc5HeAASkbmFtZaRoYXNopHR5cGULqHR5cGVOYW1lp1Q6Okhhc2ikZG9jc5ClaW5kZXgDpGRvY3OT2S9DbGVhciBhIHByZXZpb3VzbHkgbWFkZSByZXF1ZXN0IGZvciBhIHByZWltYWdlLqDZS05PVEU6IFRISVMgTVVTVCBOT1QgQkUgQ0FMTEVEIE9OIGBoYXNoYCBNT1JFIFRJTUVTIFRIQU4gYHJlcXVlc3RfcHJlaW1hZ2VgLqRkb2NzkdlJQ29udGFpbnMgb25lIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSB0aGF0IGNhbiBiZSBjYWxsZWQgYnkgYW4gZXh0cmluc2ljLt4AAqJpZM0BYaR0eXBl3gAEpHBhdGiTq3BhbGxldF9zdWRvpnBhbGxldKRDYWxspnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzlN4ABKRuYW1lpHN1ZG+mZmllbGRzkd4ABKRuYW1lpGNhbGykdHlwZc0BMqh0eXBlTmFtZb9Cb3g8PFQgYXMgQ29uZmlnPjo6UnVudGltZUNhbGw+pGRvY3OQpWluZGV4AKRkb2NzltlNQXV0aGVudGljYXRlcyB0aGUgc3VkbyBrZXkgYW5kIGRpc3BhdGNoZXMgYSBmdW5jdGlvbiBjYWxsIHdpdGggYFJvb3RgIG9yaWdpbi6g2TNUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy6grSMjIENvbXBsZXhpdHmnLSBPKDEpLt4ABKRuYW1ltXN1ZG9fdW5jaGVja2VkX3dlaWdodKZmaWVsZHOS3gAEpG5hbWWkY2FsbKR0eXBlzQEyqHR5cGVOYW1lv0JveDw8VCBhcyBDb25maWc+OjpSdW50aW1lQ2FsbD6kZG9jc5DeAASkbmFtZaZ3ZWlnaHSkdHlwZQiodHlwZU5hbWWmV2VpZ2h0pGRvY3OQpWluZGV4AaRkb2NzmNlNQXV0aGVudGljYXRlcyB0aGUgc3VkbyBrZXkgYW5kIGRpc3BhdGNoZXMgYSBmdW5jdGlvbiBjYWxsIHdpdGggYFJvb3RgIG9yaWdpbi7ZS1RoaXMgZnVuY3Rpb24gZG9lcyBub3QgY2hlY2sgdGhlIHdlaWdodCBvZiB0aGUgY2FsbCwgYW5kIGluc3RlYWQgYWxsb3dzIHRoZdksU3VkbyB1c2VyIHRvIHNwZWNpZnkgdGhlIHdlaWdodCBvZiB0aGUgY2FsbC6g2TNUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy6grSMjIENvbXBsZXhpdHmnLSBPKDEpLt4ABKRuYW1lp3NldF9rZXmmZmllbGRzkd4ABKRuYW1lo25ld6R0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5ClaW5kZXgCpGRvY3OX2VdBdXRoZW50aWNhdGVzIHRoZSBjdXJyZW50IHN1ZG8ga2V5IGFuZCBzZXRzIHRoZSBnaXZlbiBBY2NvdW50SWQgKGBuZXdgKSBhcyB0aGUgbmV3IHN1ZG+ka2V5LqDZM1RoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLqCtIyMgQ29tcGxleGl0eactIE8oMSku3gAEpG5hbWWnc3Vkb19hc6ZmaWVsZHOS3gAEpG5hbWWjd2hvpHR5cGXM1qh0eXBlTmFtZbRBY2NvdW50SWRMb29rdXBPZjxUPqRkb2NzkN4ABKRuYW1lpGNhbGykdHlwZc0BMqh0eXBlTmFtZb9Cb3g8PFQgYXMgQ29uZmlnPjo6UnVudGltZUNhbGw+pGRvY3OQpWluZGV4A6Rkb2Nzl9lTQXV0aGVudGljYXRlcyB0aGUgc3VkbyBrZXkgYW5kIGRpc3BhdGNoZXMgYSBmdW5jdGlvbiBjYWxsIHdpdGggYFNpZ25lZGAgb3JpZ2luIGZyb22wYSBnaXZlbiBhY2NvdW50LqDZM1RoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLqCtIyMgQ29tcGxleGl0eactIE8oMSkupGRvY3OR2UlDb250YWlucyBvbmUgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIHRoYXQgY2FuIGJlIGNhbGxlZCBieSBhbiBleHRyaW5zaWMu3gAComlkzQFipHR5cGXeAASkcGF0aJOscGFsbGV0X3Byb3h5pnBhbGxldKRDYWxspnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzmt4ABKRuYW1lpXByb3h5pmZpZWxkc5PeAASkbmFtZaRyZWFspHR5cGXM1qh0eXBlTmFtZbRBY2NvdW50SWRMb29rdXBPZjxUPqRkb2NzkN4ABKRuYW1lsGZvcmNlX3Byb3h5X3R5cGWkdHlwZc0BY6h0eXBlTmFtZbRPcHRpb248VDo6UHJveHlUeXBlPqRkb2NzkN4ABKRuYW1lpGNhbGykdHlwZc0BMqh0eXBlTmFtZb9Cb3g8PFQgYXMgQ29uZmlnPjo6UnVudGltZUNhbGw+pGRvY3OQpWluZGV4AKRkb2NzmdlTRGlzcGF0Y2ggdGhlIGdpdmVuIGBjYWxsYCBmcm9tIGFuIGFjY291bnQgdGhhdCB0aGUgc2VuZGVyIGlzIGF1dGhvcmlzZWQgZm9yIHRocm91Z2isYGFkZF9wcm94eWAuoNkzVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uoKtQYXJhbWV0ZXJzOtlDLSBgcmVhbGA6IFRoZSBhY2NvdW50IHRoYXQgdGhlIHByb3h5IHdpbGwgbWFrZSBhIGNhbGwgb24gYmVoYWxmIG9mLtlYLSBgZm9yY2VfcHJveHlfdHlwZWA6IFNwZWNpZnkgdGhlIGV4YWN0IHByb3h5IHR5cGUgdG8gYmUgdXNlZCBhbmQgY2hlY2tlZCBmb3IgdGhpcyBjYWxsLtk0LSBgY2FsbGA6IFRoZSBjYWxsIHRvIGJlIG1hZGUgYnkgdGhlIGByZWFsYCBhY2NvdW50Lt4ABKRuYW1lqWFkZF9wcm94eaZmaWVsZHOT3gAEpG5hbWWoZGVsZWdhdGWkdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQ3gAEpG5hbWWqcHJveHlfdHlwZaR0eXBlzEWodHlwZU5hbWWsVDo6UHJveHlUeXBlpGRvY3OQ3gAEpG5hbWWlZGVsYXmkdHlwZQSodHlwZU5hbWWuVDo6QmxvY2tOdW1iZXKkZG9jc5ClaW5kZXgBpGRvY3OZ2VFSZWdpc3RlciBhIHByb3h5IGFjY291bnQgZm9yIHRoZSBzZW5kZXIgdGhhdCBpcyBhYmxlIHRvIG1ha2UgY2FsbHMgb24gaXRzIGJlaGFsZi6g2TNUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy6gq1BhcmFtZXRlcnM62UQtIGBwcm94eWA6IFRoZSBhY2NvdW50IHRoYXQgdGhlIGBjYWxsZXJgIHdvdWxkIGxpa2UgdG8gbWFrZSBhIHByb3h5Ltk/LSBgcHJveHlfdHlwZWA6IFRoZSBwZXJtaXNzaW9ucyBhbGxvd2VkIGZvciB0aGlzIHByb3h5IGFjY291bnQu2VMtIGBkZWxheWA6IFRoZSBhbm5vdW5jZW1lbnQgcGVyaW9kIHJlcXVpcmVkIG9mIHRoZSBpbml0aWFsIHByb3h5LiBXaWxsIGdlbmVyYWxseSBiZaV6ZXJvLt4ABKRuYW1lrHJlbW92ZV9wcm94eaZmaWVsZHOT3gAEpG5hbWWoZGVsZWdhdGWkdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQ3gAEpG5hbWWqcHJveHlfdHlwZaR0eXBlzEWodHlwZU5hbWWsVDo6UHJveHlUeXBlpGRvY3OQ3gAEpG5hbWWlZGVsYXmkdHlwZQSodHlwZU5hbWWuVDo6QmxvY2tOdW1iZXKkZG9jc5ClaW5kZXgCpGRvY3OX2SpVbnJlZ2lzdGVyIGEgcHJveHkgYWNjb3VudCBmb3IgdGhlIHNlbmRlci6g2TNUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy6gq1BhcmFtZXRlcnM62UktIGBwcm94eWA6IFRoZSBhY2NvdW50IHRoYXQgdGhlIGBjYWxsZXJgIHdvdWxkIGxpa2UgdG8gcmVtb3ZlIGFzIGEgcHJveHku2VAtIGBwcm94eV90eXBlYDogVGhlIHBlcm1pc3Npb25zIGN1cnJlbnRseSBlbmFibGVkIGZvciB0aGUgcmVtb3ZlZCBwcm94eSBhY2NvdW50Lt4ABKRuYW1lrnJlbW92ZV9wcm94aWVzpmZpZWxkc5ClaW5kZXgDpGRvY3OW2S1VbnJlZ2lzdGVyIGFsbCBwcm94eSBhY2NvdW50cyBmb3IgdGhlIHNlbmRlci6g2TNUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy6g2VBXQVJOSU5HOiBUaGlzIG1heSBiZSBjYWxsZWQgb24gYWNjb3VudHMgY3JlYXRlZCBieSBgcHVyZWAsIGhvd2V2ZXIgaWYgZG9uZSwgdGhlbtlWdGhlIHVucmVzZXJ2ZWQgZmVlcyB3aWxsIGJlIGluYWNjZXNzaWJsZS4gKipBbGwgYWNjZXNzIHRvIHRoaXMgYWNjb3VudCB3aWxsIGJlIGxvc3QuKireAASkbmFtZatjcmVhdGVfcHVyZaZmaWVsZHOT3gAEpG5hbWWqcHJveHlfdHlwZaR0eXBlzEWodHlwZU5hbWWsVDo6UHJveHlUeXBlpGRvY3OQ3gAEpG5hbWWlZGVsYXmkdHlwZQSodHlwZU5hbWWuVDo6QmxvY2tOdW1iZXKkZG9jc5DeAASkbmFtZaVpbmRleKR0eXBlzEaodHlwZU5hbWWjdTE2pGRvY3OQpWluZGV4BKRkb2Nz3AAS2U5TcGF3biBhIGZyZXNoIG5ldyBhY2NvdW50IHRoYXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvdGhlcndpc2UgaW5hY2Nlc3NpYmxlLCBhbmTZP2luaXRpYWxpemUgaXQgd2l0aCBhIHByb3h5IG9mIGBwcm94eV90eXBlYCBmb3IgYG9yaWdpbmAgc2VuZGVyLqC7UmVxdWlyZXMgYSBgU2lnbmVkYCBvcmlnaW4uoNlULSBgcHJveHlfdHlwZWA6IFRoZSB0eXBlIG9mIHRoZSBwcm94eSB0aGF0IHRoZSBzZW5kZXIgd2lsbCBiZSByZWdpc3RlcmVkIGFzIG92ZXIgdGhl2VNuZXcgYWNjb3VudC4gVGhpcyB3aWxsIGFsbW9zdCBhbHdheXMgYmUgdGhlIG1vc3QgcGVybWlzc2l2ZSBgUHJveHlUeXBlYCBwb3NzaWJsZSB0b75hbGxvdyBmb3IgbWF4aW11bSBmbGV4aWJpbGl0eS7ZVC0gYGluZGV4YDogQSBkaXNhbWJpZ3VhdGlvbiBpbmRleCwgaW4gY2FzZSB0aGlzIGlzIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyBpbiB0aGUgc2FtZdlXdHJhbnNhY3Rpb24gKGUuZy4gd2l0aCBgdXRpbGl0eTo6YmF0Y2hgKS4gVW5sZXNzIHlvdSdyZSB1c2luZyBgYmF0Y2hgIHlvdSBwcm9iYWJseSBqdXN0sHdhbnQgdG8gdXNlIGAwYC7ZUy0gYGRlbGF5YDogVGhlIGFubm91bmNlbWVudCBwZXJpb2QgcmVxdWlyZWQgb2YgdGhlIGluaXRpYWwgcHJveHkuIFdpbGwgZ2VuZXJhbGx5IGJlpXplcm8uoNlURmFpbHMgd2l0aCBgRHVwbGljYXRlYCBpZiB0aGlzIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkIGluIHRoaXMgdHJhbnNhY3Rpb24sIGZyb20gdGhl2SZzYW1lIHNlbmRlciwgd2l0aCB0aGUgc2FtZSBwYXJhbWV0ZXJzLqDZOUZhaWxzIGlmIHRoZXJlIGFyZSBpbnN1ZmZpY2llbnQgZnVuZHMgdG8gcGF5IGZvciBkZXBvc2l0Lt4ABKRuYW1lqWtpbGxfcHVyZaZmaWVsZHOV3gAEpG5hbWWnc3Bhd25lcqR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5DeAASkbmFtZapwcm94eV90eXBlpHR5cGXMRah0eXBlTmFtZaxUOjpQcm94eVR5cGWkZG9jc5DeAASkbmFtZaVpbmRleKR0eXBlzEaodHlwZU5hbWWjdTE2pGRvY3OQ3gAEpG5hbWWmaGVpZ2h0pHR5cGXMdah0eXBlTmFtZa5UOjpCbG9ja051bWJlcqRkb2NzkN4ABKRuYW1lqWV4dF9pbmRleKR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4BaRkb2Nz3AAQ2ShSZW1vdmVzIGEgcHJldmlvdXNseSBzcGF3bmVkIHB1cmUgcHJveHkuoNlSV0FSTklORzogKipBbGwgYWNjZXNzIHRvIHRoaXMgYWNjb3VudCB3aWxsIGJlIGxvc3QuKiogQW55IGZ1bmRzIGhlbGQgaW4gaXQgd2lsbCBiZa1pbmFjY2Vzc2libGUuoNlWUmVxdWlyZXMgYSBgU2lnbmVkYCBvcmlnaW4sIGFuZCB0aGUgc2VuZGVyIGFjY291bnQgbXVzdCBoYXZlIGJlZW4gY3JlYXRlZCBieSBhIGNhbGwgdG/ZJWBwdXJlYCB3aXRoIGNvcnJlc3BvbmRpbmcgcGFyYW1ldGVycy6g2U4tIGBzcGF3bmVyYDogVGhlIGFjY291bnQgdGhhdCBvcmlnaW5hbGx5IGNhbGxlZCBgcHVyZWAgdG8gY3JlYXRlIHRoaXMgYWNjb3VudC7ZTi0gYGluZGV4YDogVGhlIGRpc2FtYmlndWF0aW9uIGluZGV4IG9yaWdpbmFsbHkgcGFzc2VkIHRvIGBwdXJlYC4gUHJvYmFibHkgYDBgLtk7LSBgcHJveHlfdHlwZWA6IFRoZSBwcm94eSB0eXBlIG9yaWdpbmFsbHkgcGFzc2VkIHRvIGBwdXJlYC7ZSi0gYGhlaWdodGA6IFRoZSBoZWlnaHQgb2YgdGhlIGNoYWluIHdoZW4gdGhlIGNhbGwgdG8gYHB1cmVgIHdhcyBwcm9jZXNzZWQu2U0tIGBleHRfaW5kZXhgOiBUaGUgZXh0cmluc2ljIGluZGV4IGluIHdoaWNoIHRoZSBjYWxsIHRvIGBwdXJlYCB3YXMgcHJvY2Vzc2VkLqDZTUZhaWxzIHdpdGggYE5vUGVybWlzc2lvbmAgaW4gY2FzZSB0aGUgY2FsbGVyIGlzIG5vdCBhIHByZXZpb3VzbHkgY3JlYXRlZCBwdXJl2TdhY2NvdW50IHdob3NlIGBwdXJlYCBjYWxsIGhhcyBjb3JyZXNwb25kaW5nIHBhcmFtZXRlcnMu3gAEpG5hbWWoYW5ub3VuY2WmZmllbGRzkt4ABKRuYW1lpHJlYWykdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQ3gAEpG5hbWWpY2FsbF9oYXNopHR5cGULqHR5cGVOYW1lrUNhbGxIYXNoT2Y8VD6kZG9jc5ClaW5kZXgGpGRvY3Of2UFQdWJsaXNoIHRoZSBoYXNoIG9mIGEgcHJveHktY2FsbCB0aGF0IHdpbGwgYmUgbWFkZSBpbiB0aGUgZnV0dXJlLqDZV1RoaXMgbXVzdCBiZSBjYWxsZWQgc29tZSBudW1iZXIgb2YgYmxvY2tzIGJlZm9yZSB0aGUgY29ycmVzcG9uZGluZyBgcHJveHlgIGlzIGF0dGVtcHRlZNlJaWYgdGhlIGRlbGF5IGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJveHkgcmVsYXRpb25zaGlwIGlzIGdyZWF0ZXIgdGhhbiB6ZXJvLqDZRE5vIG1vcmUgdGhhbiBgTWF4UGVuZGluZ2AgYW5ub3VuY2VtZW50cyBtYXkgYmUgbWFkZSBhdCBhbnkgb25lIHRpbWUuoNlCVGhpcyB3aWxsIHRha2UgYSBkZXBvc2l0IG9mIGBBbm5vdW5jZW1lbnREZXBvc2l0RmFjdG9yYCBhcyB3ZWxsIGFz2UZgQW5ub3VuY2VtZW50RGVwb3NpdEJhc2VgIGlmIHRoZXJlIGFyZSBubyBvdGhlciBwZW5kaW5nIGFubm91bmNlbWVudHMuoNlJVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYW5kIGEgcHJveHkgb2YgYHJlYWxgLqCrUGFyYW1ldGVyczrZQy0gYHJlYWxgOiBUaGUgYWNjb3VudCB0aGF0IHRoZSBwcm94eSB3aWxsIG1ha2UgYSBjYWxsIG9uIGJlaGFsZiBvZi7ZRS0gYGNhbGxfaGFzaGA6IFRoZSBoYXNoIG9mIHRoZSBjYWxsIHRvIGJlIG1hZGUgYnkgdGhlIGByZWFsYCBhY2NvdW50Lt4ABKRuYW1ls3JlbW92ZV9hbm5vdW5jZW1lbnSmZmllbGRzkt4ABKRuYW1lpHJlYWykdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQ3gAEpG5hbWWpY2FsbF9oYXNopHR5cGULqHR5cGVOYW1lrUNhbGxIYXNoT2Y8VD6kZG9jc5ClaW5kZXgHpGRvY3OavFJlbW92ZSBhIGdpdmVuIGFubm91bmNlbWVudC6g2VZNYXkgYmUgY2FsbGVkIGJ5IGEgcHJveHkgYWNjb3VudCB0byByZW1vdmUgYSBjYWxsIHRoZXkgcHJldmlvdXNseSBhbm5vdW5jZWQgYW5kIHJldHVybqx0aGUgZGVwb3NpdC6g2TNUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy6gq1BhcmFtZXRlcnM62UMtIGByZWFsYDogVGhlIGFjY291bnQgdGhhdCB0aGUgcHJveHkgd2lsbCBtYWtlIGEgY2FsbCBvbiBiZWhhbGYgb2Yu2UUtIGBjYWxsX2hhc2hgOiBUaGUgaGFzaCBvZiB0aGUgY2FsbCB0byBiZSBtYWRlIGJ5IHRoZSBgcmVhbGAgYWNjb3VudC7eAASkbmFtZbNyZWplY3RfYW5ub3VuY2VtZW50pmZpZWxkc5LeAASkbmFtZahkZWxlZ2F0ZaR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5DeAASkbmFtZaljYWxsX2hhc2ikdHlwZQuodHlwZU5hbWWtQ2FsbEhhc2hPZjxUPqRkb2NzkKVpbmRleAikZG9jc5rZLFJlbW92ZSB0aGUgZ2l2ZW4gYW5ub3VuY2VtZW50IG9mIGEgZGVsZWdhdGUuoNlYTWF5IGJlIGNhbGxlZCBieSBhIHRhcmdldCAocHJveGllZCkgYWNjb3VudCB0byByZW1vdmUgYSBjYWxsIHRoYXQgb25lIG9mIHRoZWlyIGRlbGVnYXRlc9lJKGBkZWxlZ2F0ZWApIGhhcyBhbm5vdW5jZWQgdGhleSB3YW50IHRvIGV4ZWN1dGUuIFRoZSBkZXBvc2l0IGlzIHJldHVybmVkLqDZM1RoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLqCrUGFyYW1ldGVyczrZPS0gYGRlbGVnYXRlYDogVGhlIGFjY291bnQgdGhhdCBwcmV2aW91c2x5IGFubm91bmNlZCB0aGUgY2FsbC7ZLy0gYGNhbGxfaGFzaGA6IFRoZSBoYXNoIG9mIHRoZSBjYWxsIHRvIGJlIG1hZGUu3gAEpG5hbWWvcHJveHlfYW5ub3VuY2VkpmZpZWxkc5TeAASkbmFtZahkZWxlZ2F0ZaR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5DeAASkbmFtZaRyZWFspHR5cGXM1qh0eXBlTmFtZbRBY2NvdW50SWRMb29rdXBPZjxUPqRkb2NzkN4ABKRuYW1lsGZvcmNlX3Byb3h5X3R5cGWkdHlwZc0BY6h0eXBlTmFtZbRPcHRpb248VDo6UHJveHlUeXBlPqRkb2NzkN4ABKRuYW1lpGNhbGykdHlwZc0BMqh0eXBlTmFtZb9Cb3g8PFQgYXMgQ29uZmlnPjo6UnVudGltZUNhbGw+pGRvY3OQpWluZGV4CaRkb2Nzm9lTRGlzcGF0Y2ggdGhlIGdpdmVuIGBjYWxsYCBmcm9tIGFuIGFjY291bnQgdGhhdCB0aGUgc2VuZGVyIGlzIGF1dGhvcml6ZWQgZm9yIHRocm91Z2isYGFkZF9wcm94eWAuoNkqUmVtb3ZlcyBhbnkgY29ycmVzcG9uZGluZyBhbm5vdW5jZW1lbnQocykuoNkzVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uoKtQYXJhbWV0ZXJzOtlDLSBgcmVhbGA6IFRoZSBhY2NvdW50IHRoYXQgdGhlIHByb3h5IHdpbGwgbWFrZSBhIGNhbGwgb24gYmVoYWxmIG9mLtlYLSBgZm9yY2VfcHJveHlfdHlwZWA6IFNwZWNpZnkgdGhlIGV4YWN0IHByb3h5IHR5cGUgdG8gYmUgdXNlZCBhbmQgY2hlY2tlZCBmb3IgdGhpcyBjYWxsLtk0LSBgY2FsbGA6IFRoZSBjYWxsIHRvIGJlIG1hZGUgYnkgdGhlIGByZWFsYCBhY2NvdW50LqRkb2NzkdlJQ29udGFpbnMgb25lIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSB0aGF0IGNhbiBiZSBjYWxsZWQgYnkgYW4gZXh0cmluc2ljLt4AAqJpZM0BY6R0eXBl3gAEpHBhdGiRpk9wdGlvbqZwYXJhbXOR3gACpG5hbWWhVKR0eXBlzEWjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWkTm9uZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lpFNvbWWmZmllbGRzkd4ABKRuYW1lwKR0eXBlzEWodHlwZU5hbWXApGRvY3OQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZM0BZKR0eXBl3gAEpHBhdGiTr3BhbGxldF9tdWx0aXNpZ6ZwYWxsZXSkQ2FsbKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5TeAASkbmFtZbRhc19tdWx0aV90aHJlc2hvbGRfMaZmaWVsZHOS3gAEpG5hbWWxb3RoZXJfc2lnbmF0b3JpZXOkdHlwZczkqHR5cGVOYW1lsVZlYzxUOjpBY2NvdW50SWQ+pGRvY3OQ3gAEpG5hbWWkY2FsbKR0eXBlzQEyqHR5cGVOYW1lv0JveDw8VCBhcyBDb25maWc+OjpSdW50aW1lQ2FsbD6kZG9jc5ClaW5kZXgApGRvY3Oc2VRJbW1lZGlhdGVseSBkaXNwYXRjaCBhIG11bHRpLXNpZ25hdHVyZSBjYWxsIHVzaW5nIGEgc2luZ2xlIGFwcHJvdmFsIGZyb20gdGhlIGNhbGxlci6g2TNUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy6g2U8tIGBvdGhlcl9zaWduYXRvcmllc2A6IFRoZSBhY2NvdW50cyAob3RoZXIgdGhhbiB0aGUgc2VuZGVyKSB3aG8gYXJlIHBhcnQgb2YgdGhl2UBtdWx0aS1zaWduYXR1cmUsIGJ1dCBkbyBub3QgcGFydGljaXBhdGUgaW4gdGhlIGFwcHJvdmFsIHByb2Nlc3Mu2SItIGBjYWxsYDogVGhlIGNhbGwgdG8gYmUgZXhlY3V0ZWQuoNkuUmVzdWx0IGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRpc3BhdGNoZWQgcmVzdWx0LqCtIyMgQ29tcGxleGl0edlGTyhaICsgQykgd2hlcmUgWiBpcyB0aGUgbGVuZ3RoIG9mIHRoZSBjYWxsIGFuZCBDIGl0cyBleGVjdXRpb24gd2VpZ2h0Lt4ABKRuYW1lqGFzX211bHRppmZpZWxkc5XeAASkbmFtZal0aHJlc2hvbGSkdHlwZcxGqHR5cGVOYW1lo3UxNqRkb2NzkN4ABKRuYW1lsW90aGVyX3NpZ25hdG9yaWVzpHR5cGXM5Kh0eXBlTmFtZbFWZWM8VDo6QWNjb3VudElkPqRkb2NzkN4ABKRuYW1lr21heWJlX3RpbWVwb2ludKR0eXBlzQFlqHR5cGVOYW1l2SFPcHRpb248VGltZXBvaW50PFQ6OkJsb2NrTnVtYmVyPj6kZG9jc5DeAASkbmFtZaRjYWxspHR5cGXNATKodHlwZU5hbWW/Qm94PDxUIGFzIENvbmZpZz46OlJ1bnRpbWVDYWxsPqRkb2NzkN4ABKRuYW1lqm1heF93ZWlnaHSkdHlwZQiodHlwZU5hbWWmV2VpZ2h0pGRvY3OQpWluZGV4AaRkb2Nz3AAn2VVSZWdpc3RlciBhcHByb3ZhbCBmb3IgYSBkaXNwYXRjaCB0byBiZSBtYWRlIGZyb20gYSBkZXRlcm1pbmlzdGljIGNvbXBvc2l0ZSBhY2NvdW50IGlm2T5hcHByb3ZlZCBieSBhIHRvdGFsIG9mIGB0aHJlc2hvbGQgLSAxYCBvZiBgb3RoZXJfc2lnbmF0b3JpZXNgLqDZLElmIHRoZXJlIGFyZSBlbm91Z2gsIHRoZW4gZGlzcGF0Y2ggdGhlIGNhbGwuoNlLUGF5bWVudDogYERlcG9zaXRCYXNlYCB3aWxsIGJlIHJlc2VydmVkIGlmIHRoaXMgaXMgdGhlIGZpcnN0IGFwcHJvdmFsLCBwbHVz2U9gdGhyZXNob2xkYCB0aW1lcyBgRGVwb3NpdEZhY3RvcmAuIEl0IGlzIHJldHVybmVkIG9uY2UgdGhpcyBkaXNwYXRjaCBoYXBwZW5zIG9yrWlzIGNhbmNlbGxlZC6g2TNUaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBiZSBfU2lnbmVkXy6g2VUtIGB0aHJlc2hvbGRgOiBUaGUgdG90YWwgbnVtYmVyIG9mIGFwcHJvdmFscyBmb3IgdGhpcyBkaXNwYXRjaCBiZWZvcmUgaXQgaXMgZXhlY3V0ZWQu2VAtIGBvdGhlcl9zaWduYXRvcmllc2A6IFRoZSBhY2NvdW50cyAob3RoZXIgdGhhbiB0aGUgc2VuZGVyKSB3aG8gY2FuIGFwcHJvdmUgdGhpc7tkaXNwYXRjaC4gTWF5IG5vdCBiZSBlbXB0eS7ZVi0gYG1heWJlX3RpbWVwb2ludGA6IElmIHRoaXMgaXMgdGhlIGZpcnN0IGFwcHJvdmFsLCB0aGVuIHRoaXMgbXVzdCBiZSBgTm9uZWAuIElmIGl0IGlz2VRub3QgdGhlIGZpcnN0IGFwcHJvdmFsLCB0aGVuIGl0IG11c3QgYmUgYFNvbWVgLCB3aXRoIHRoZSB0aW1lcG9pbnQgKGJsb2NrIG51bWJlciBhbmTZNXRyYW5zYWN0aW9uIGluZGV4KSBvZiB0aGUgZmlyc3QgYXBwcm92YWwgdHJhbnNhY3Rpb24u2SItIGBjYWxsYDogVGhlIGNhbGwgdG8gYmUgZXhlY3V0ZWQuoNlHTk9URTogVW5sZXNzIHRoaXMgaXMgdGhlIGZpbmFsIGFwcHJvdmFsLCB5b3Ugd2lsbCBnZW5lcmFsbHkgd2FudCB0byB1c2XZRmBhcHByb3ZlX2FzX211bHRpYCBpbnN0ZWFkLCBzaW5jZSBpdCBvbmx5IHJlcXVpcmVzIGEgaGFzaCBvZiB0aGUgY2FsbC6g2VZSZXN1bHQgaXMgZXF1aXZhbGVudCB0byB0aGUgZGlzcGF0Y2hlZCByZXN1bHQgaWYgYHRocmVzaG9sZGAgaXMgZXhhY3RseSBgMWAuIE90aGVyd2lzZdlVb24gc3VjY2VzcywgcmVzdWx0IGlzIGBPa2AgYW5kIHRoZSByZXN1bHQgZnJvbSB0aGUgaW50ZXJpb3IgY2FsbCwgaWYgaXQgd2FzIGV4ZWN1dGVkLNk3bWF5IGJlIGZvdW5kIGluIHRoZSBkZXBvc2l0ZWQgYE11bHRpc2lnRXhlY3V0ZWRgIGV2ZW50LqCtIyMgQ29tcGxleGl0ebQtIGBPKFMgKyBaICsgQ2FsbClgLtkzLSBVcCB0byBvbmUgYmFsYW5jZS1yZXNlcnZlIG9yIHVucmVzZXJ2ZSBvcGVyYXRpb24u2U8tIE9uZSBwYXNzdGhyb3VnaCBvcGVyYXRpb24sIG9uZSBpbnNlcnQsIGJvdGggYE8oUylgIHdoZXJlIGBTYCBpcyB0aGUgbnVtYmVyIG9m2VEgIHNpZ25hdG9yaWVzLiBgU2AgaXMgY2FwcGVkIGJ5IGBNYXhTaWduYXRvcmllc2AsIHdpdGggd2VpZ2h0IGJlaW5nIHByb3BvcnRpb25hbC7ZSC0gT25lIGNhbGwgZW5jb2RlICYgaGFzaCwgYm90aCBvZiBjb21wbGV4aXR5IGBPKFopYCB3aGVyZSBgWmAgaXMgdHgtbGVuLtkvLSBPbmUgZW5jb2RlICYgaGFzaCwgYm90aCBvZiBjb21wbGV4aXR5IGBPKFMpYC7ZNS0gVXAgdG8gb25lIGJpbmFyeSBzZWFyY2ggYW5kIGluc2VydCAoYE8obG9nUyArIFMpYCku2T4tIEkvTzogMSByZWFkIGBPKFMpYCwgdXAgdG8gMSBtdXRhdGUgYE8oUylgLiBVcCB0byBvbmUgcmVtb3ZlLqwtIE9uZSBldmVudC67LSBUaGUgd2VpZ2h0IG9mIHRoZSBgY2FsbGAu2VMtIFN0b3JhZ2U6IGluc2VydHMgb25lIGl0ZW0sIHZhbHVlIHNpemUgYm91bmRlZCBieSBgTWF4U2lnbmF0b3JpZXNgLCB3aXRoIGEgZGVwb3NpdNlGICB0YWtlbiBmb3IgaXRzIGxpZmV0aW1lIG9mIGBEZXBvc2l0QmFzZSArIHRocmVzaG9sZCAqIERlcG9zaXRGYWN0b3JgLt4ABKRuYW1lsGFwcHJvdmVfYXNfbXVsdGmmZmllbGRzld4ABKRuYW1lqXRocmVzaG9sZKR0eXBlzEaodHlwZU5hbWWjdTE2pGRvY3OQ3gAEpG5hbWWxb3RoZXJfc2lnbmF0b3JpZXOkdHlwZczkqHR5cGVOYW1lsVZlYzxUOjpBY2NvdW50SWQ+pGRvY3OQ3gAEpG5hbWWvbWF5YmVfdGltZXBvaW50pHR5cGXNAWWodHlwZU5hbWXZIU9wdGlvbjxUaW1lcG9pbnQ8VDo6QmxvY2tOdW1iZXI+PqRkb2NzkN4ABKRuYW1lqWNhbGxfaGFzaKR0eXBlAah0eXBlTmFtZahbdTg7IDMyXaRkb2NzkN4ABKRuYW1lqm1heF93ZWlnaHSkdHlwZQiodHlwZU5hbWWmV2VpZ2h0pGRvY3OQpWluZGV4AqRkb2Nz3AAe2VVSZWdpc3RlciBhcHByb3ZhbCBmb3IgYSBkaXNwYXRjaCB0byBiZSBtYWRlIGZyb20gYSBkZXRlcm1pbmlzdGljIGNvbXBvc2l0ZSBhY2NvdW50IGlm2T5hcHByb3ZlZCBieSBhIHRvdGFsIG9mIGB0aHJlc2hvbGQgLSAxYCBvZiBgb3RoZXJfc2lnbmF0b3JpZXNgLqDZS1BheW1lbnQ6IGBEZXBvc2l0QmFzZWAgd2lsbCBiZSByZXNlcnZlZCBpZiB0aGlzIGlzIHRoZSBmaXJzdCBhcHByb3ZhbCwgcGx1c9lPYHRocmVzaG9sZGAgdGltZXMgYERlcG9zaXRGYWN0b3JgLiBJdCBpcyByZXR1cm5lZCBvbmNlIHRoaXMgZGlzcGF0Y2ggaGFwcGVucyBvcq1pcyBjYW5jZWxsZWQuoNkzVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8uoNlVLSBgdGhyZXNob2xkYDogVGhlIHRvdGFsIG51bWJlciBvZiBhcHByb3ZhbHMgZm9yIHRoaXMgZGlzcGF0Y2ggYmVmb3JlIGl0IGlzIGV4ZWN1dGVkLtlQLSBgb3RoZXJfc2lnbmF0b3JpZXNgOiBUaGUgYWNjb3VudHMgKG90aGVyIHRoYW4gdGhlIHNlbmRlcikgd2hvIGNhbiBhcHByb3ZlIHRoaXO7ZGlzcGF0Y2guIE1heSBub3QgYmUgZW1wdHku2VYtIGBtYXliZV90aW1lcG9pbnRgOiBJZiB0aGlzIGlzIHRoZSBmaXJzdCBhcHByb3ZhbCwgdGhlbiB0aGlzIG11c3QgYmUgYE5vbmVgLiBJZiBpdCBpc9lUbm90IHRoZSBmaXJzdCBhcHByb3ZhbCwgdGhlbiBpdCBtdXN0IGJlIGBTb21lYCwgd2l0aCB0aGUgdGltZXBvaW50IChibG9jayBudW1iZXIgYW5k2TV0cmFuc2FjdGlvbiBpbmRleCkgb2YgdGhlIGZpcnN0IGFwcHJvdmFsIHRyYW5zYWN0aW9uLtkzLSBgY2FsbF9oYXNoYDogVGhlIGhhc2ggb2YgdGhlIGNhbGwgdG8gYmUgZXhlY3V0ZWQuoNlNTk9URTogSWYgdGhpcyBpcyB0aGUgZmluYWwgYXBwcm92YWwsIHlvdSB3aWxsIHdhbnQgdG8gdXNlIGBhc19tdWx0aWAgaW5zdGVhZC6grSMjIENvbXBsZXhpdHmpLSBgTyhTKWAu2TMtIFVwIHRvIG9uZSBiYWxhbmNlLXJlc2VydmUgb3IgdW5yZXNlcnZlIG9wZXJhdGlvbi7ZTy0gT25lIHBhc3N0aHJvdWdoIG9wZXJhdGlvbiwgb25lIGluc2VydCwgYm90aCBgTyhTKWAgd2hlcmUgYFNgIGlzIHRoZSBudW1iZXIgb2bZUSAgc2lnbmF0b3JpZXMuIGBTYCBpcyBjYXBwZWQgYnkgYE1heFNpZ25hdG9yaWVzYCwgd2l0aCB3ZWlnaHQgYmVpbmcgcHJvcG9ydGlvbmFsLtkvLSBPbmUgZW5jb2RlICYgaGFzaCwgYm90aCBvZiBjb21wbGV4aXR5IGBPKFMpYC7ZNS0gVXAgdG8gb25lIGJpbmFyeSBzZWFyY2ggYW5kIGluc2VydCAoYE8obG9nUyArIFMpYCku2T4tIEkvTzogMSByZWFkIGBPKFMpYCwgdXAgdG8gMSBtdXRhdGUgYE8oUylgLiBVcCB0byBvbmUgcmVtb3ZlLqwtIE9uZSBldmVudC7ZUy0gU3RvcmFnZTogaW5zZXJ0cyBvbmUgaXRlbSwgdmFsdWUgc2l6ZSBib3VuZGVkIGJ5IGBNYXhTaWduYXRvcmllc2AsIHdpdGggYSBkZXBvc2l02UYgIHRha2VuIGZvciBpdHMgbGlmZXRpbWUgb2YgYERlcG9zaXRCYXNlICsgdGhyZXNob2xkICogRGVwb3NpdEZhY3RvcmAu3gAEpG5hbWWvY2FuY2VsX2FzX211bHRppmZpZWxkc5TeAASkbmFtZal0aHJlc2hvbGSkdHlwZcxGqHR5cGVOYW1lo3UxNqRkb2NzkN4ABKRuYW1lsW90aGVyX3NpZ25hdG9yaWVzpHR5cGXM5Kh0eXBlTmFtZbFWZWM8VDo6QWNjb3VudElkPqRkb2NzkN4ABKRuYW1lqXRpbWVwb2ludKR0eXBlzEiodHlwZU5hbWW5VGltZXBvaW50PFQ6OkJsb2NrTnVtYmVyPqRkb2NzkN4ABKRuYW1lqWNhbGxfaGFzaKR0eXBlAah0eXBlTmFtZahbdTg7IDMyXaRkb2NzkKVpbmRleAOkZG9jc9wAFdlVQ2FuY2VsIGEgcHJlLWV4aXN0aW5nLCBvbi1nb2luZyBtdWx0aXNpZyB0cmFuc2FjdGlvbi4gQW55IGRlcG9zaXQgcmVzZXJ2ZWQgcHJldmlvdXNsedkxZm9yIHRoaXMgb3BlcmF0aW9uIHdpbGwgYmUgdW5yZXNlcnZlZCBvbiBzdWNjZXNzLqDZM1RoZSBkaXNwYXRjaCBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlIF9TaWduZWRfLqDZVS0gYHRocmVzaG9sZGA6IFRoZSB0b3RhbCBudW1iZXIgb2YgYXBwcm92YWxzIGZvciB0aGlzIGRpc3BhdGNoIGJlZm9yZSBpdCBpcyBleGVjdXRlZC7ZUC0gYG90aGVyX3NpZ25hdG9yaWVzYDogVGhlIGFjY291bnRzIChvdGhlciB0aGFuIHRoZSBzZW5kZXIpIHdobyBjYW4gYXBwcm92ZSB0aGlzu2Rpc3BhdGNoLiBNYXkgbm90IGJlIGVtcHR5LtlXLSBgdGltZXBvaW50YDogVGhlIHRpbWVwb2ludCAoYmxvY2sgbnVtYmVyIGFuZCB0cmFuc2FjdGlvbiBpbmRleCkgb2YgdGhlIGZpcnN0IGFwcHJvdmFsvnRyYW5zYWN0aW9uIGZvciB0aGlzIGRpc3BhdGNoLtkzLSBgY2FsbF9oYXNoYDogVGhlIGhhc2ggb2YgdGhlIGNhbGwgdG8gYmUgZXhlY3V0ZWQuoK0jIyBDb21wbGV4aXR5qS0gYE8oUylgLtkzLSBVcCB0byBvbmUgYmFsYW5jZS1yZXNlcnZlIG9yIHVucmVzZXJ2ZSBvcGVyYXRpb24u2U8tIE9uZSBwYXNzdGhyb3VnaCBvcGVyYXRpb24sIG9uZSBpbnNlcnQsIGJvdGggYE8oUylgIHdoZXJlIGBTYCBpcyB0aGUgbnVtYmVyIG9m2VEgIHNpZ25hdG9yaWVzLiBgU2AgaXMgY2FwcGVkIGJ5IGBNYXhTaWduYXRvcmllc2AsIHdpdGggd2VpZ2h0IGJlaW5nIHByb3BvcnRpb25hbC7ZLy0gT25lIGVuY29kZSAmIGhhc2gsIGJvdGggb2YgY29tcGxleGl0eSBgTyhTKWAurC0gT25lIGV2ZW50LtkhLSBJL086IDEgcmVhZCBgTyhTKWAsIG9uZSByZW1vdmUuvC0gU3RvcmFnZTogcmVtb3ZlcyBvbmUgaXRlbS6kZG9jc5HZSUNvbnRhaW5zIG9uZSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgdGhhdCBjYW4gYmUgY2FsbGVkIGJ5IGFuIGV4dHJpbnNpYy7eAAKiaWTNAWWkdHlwZd4ABKRwYXRokaZPcHRpb26mcGFyYW1zkd4AAqRuYW1loVSkdHlwZcxIo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lpE5vbmWmZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZaRTb21lpmZpZWxkc5HeAASkbmFtZcCkdHlwZcxIqHR5cGVOYW1lwKRkb2NzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTNAWakdHlwZd4ABKRwYXRok9kkcGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlpnBhbGxldKRDYWxspnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzld4ABKRuYW1lr3N1Ym1pdF91bnNpZ25lZKZmaWVsZHOS3gAEpG5hbWWscmF3X3NvbHV0aW9upHR5cGXNAWeodHlwZU5hbWXZLEJveDxSYXdTb2x1dGlvbjxTb2x1dGlvbk9mPFQ6Ok1pbmVyQ29uZmlnPj4+pGRvY3OQ3gAEpG5hbWWnd2l0bmVzc6R0eXBlzQGbqHR5cGVOYW1ltlNvbHV0aW9uT3JTbmFwc2hvdFNpemWkZG9jc5ClaW5kZXgApGRvY3Oe2SlTdWJtaXQgYSBzb2x1dGlvbiBmb3IgdGhlIHVuc2lnbmVkIHBoYXNlLqDZMlRoZSBkaXNwYXRjaCBvcmlnaW4gZm8gdGhpcyBjYWxsIG11c3QgYmUgX19ub25lX18uoNlPVGhpcyBzdWJtaXNzaW9uIGlzIGNoZWNrZWQgb24gdGhlIGZseS4gTW9yZW92ZXIsIHRoaXMgdW5zaWduZWQgc29sdXRpb24gaXMgb25sedlVdmFsaWRhdGVkIHdoZW4gc3VibWl0dGVkIHRvIHRoZSBwb29sIGZyb20gdGhlICoqbG9jYWwqKiBub2RlLiBFZmZlY3RpdmVseSwgdGhpcyBtZWFuc9lXdGhhdCBvbmx5IGFjdGl2ZSB2YWxpZGF0b3JzIGNhbiBzdWJtaXQgdGhpcyB0cmFuc2FjdGlvbiB3aGVuIGF1dGhvcmluZyBhIGJsb2NrIChzaW1pbGFysHRvIGFuIGluaGVyZW50KS6g2VZUbyBwcmV2ZW50IGFueSBpbmNvcnJlY3Qgc29sdXRpb24gKGFuZCB0aHVzIHdhc3RlZCB0aW1lL3dlaWdodCksIHRoaXMgdHJhbnNhY3Rpb24gd2lsbNlTcGFuaWMgaWYgdGhlIHNvbHV0aW9uIHN1Ym1pdHRlZCBieSB0aGUgdmFsaWRhdG9yIGlzIGludmFsaWQgaW4gYW55IHdheSwgZWZmZWN0aXZlbHnZJ3B1dHRpbmcgdGhlaXIgYXV0aG9yaW5nIHJld2FyZCBhdCByaXNrLqDZOE5vIGRlcG9zaXQgb3IgcmV3YXJkIGlzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHN1Ym1pc3Npb24u3gAEpG5hbWW7c2V0X21pbmltdW1fdW50cnVzdGVkX3Njb3JlpmZpZWxkc5HeAASkbmFtZbBtYXliZV9uZXh0X3Njb3JlpHR5cGXNAZyodHlwZU5hbWW1T3B0aW9uPEVsZWN0aW9uU2NvcmU+pGRvY3OQpWluZGV4AaRkb2NzldksU2V0IGEgbmV3IHZhbHVlIGZvciBgTWluaW11bVVudHJ1c3RlZFNjb3JlYC6g2TZEaXNwYXRjaCBvcmlnaW4gbXVzdCBiZSBhbGlnbmVkIHdpdGggYFQ6OkZvcmNlT3JpZ2luYC6g2TxUaGlzIGNoZWNrIGNhbiBiZSB0dXJuZWQgb2ZmIGJ5IHNldHRpbmcgdGhlIHZhbHVlIHRvIGBOb25lYC7eAASkbmFtZb1zZXRfZW1lcmdlbmN5X2VsZWN0aW9uX3Jlc3VsdKZmaWVsZHOR3gAEpG5hbWWoc3VwcG9ydHOkdHlwZc0Bnah0eXBlTmFtZbZTdXBwb3J0czxUOjpBY2NvdW50SWQ+pGRvY3OQpWluZGV4AqRkb2NzmNlWU2V0IGEgc29sdXRpb24gaW4gdGhlIHF1ZXVlLCB0byBiZSBoYW5kZWQgb3V0IHRvIHRoZSBjbGllbnQgb2YgdGhpcyBwYWxsZXQgaW4gdGhlIG5leHTZImNhbGwgdG8gYEVsZWN0aW9uUHJvdmlkZXI6OmVsZWN0YC6g2VFUaGlzIGNhbiBvbmx5IGJlIHNldCBieSBgVDo6Rm9yY2VPcmlnaW5gLCBhbmQgb25seSB3aGVuIHRoZSBwaGFzZSBpcyBgRW1lcmdlbmN5YC6g2VhUaGUgc29sdXRpb24gaXMgbm90IGNoZWNrZWQgZm9yIGFueSBmZWFzaWJpbGl0eSBhbmQgaXMgYXNzdW1lZCB0byBiZSB0cnVzdHdvcnRoeSwgYXMgYW552VRmZWFzaWJpbGl0eSBjaGVjayBpdHNlbGYgY2FuIGluIHByaW5jaXBsZSBjYXVzZSB0aGUgZWxlY3Rpb24gcHJvY2VzcyB0byBmYWlsIChkdWUgdG+6bWVtb3J5L3dlaWdodCBjb25zdHJhaW5zKS7eAASkbmFtZaZzdWJtaXSmZmllbGRzkd4ABKRuYW1lrHJhd19zb2x1dGlvbqR0eXBlzQFnqHR5cGVOYW1l2SxCb3g8UmF3U29sdXRpb248U29sdXRpb25PZjxUOjpNaW5lckNvbmZpZz4+PqRkb2NzkKVpbmRleAOkZG9jc5nZJ1N1Ym1pdCBhIHNvbHV0aW9uIGZvciB0aGUgc2lnbmVkIHBoYXNlLqDZNFRoZSBkaXNwYXRjaCBvcmlnaW4gZm8gdGhpcyBjYWxsIG11c3QgYmUgX19zaWduZWRfXy6g2VdUaGUgc29sdXRpb24gaXMgcG90ZW50aWFsbHkgcXVldWVkLCBiYXNlZCBvbiB0aGUgY2xhaW1lZCBzY29yZSBhbmQgcHJvY2Vzc2VkIGF0IHRoZSBlbmS0b2YgdGhlIHNpZ25lZCBwaGFzZS6g2VdBIGRlcG9zaXQgaXMgcmVzZXJ2ZWQgYW5kIHJlY29yZGVkIGZvciB0aGUgc29sdXRpb24uIEJhc2VkIG9uIHRoZSBvdXRjb21lLCB0aGUgc29sdXRpb27ZRW1pZ2h0IGJlIHJld2FyZGVkLCBzbGFzaGVkLCBvciBnZXQgYWxsIG9yIGEgcGFydCBvZiB0aGUgZGVwb3NpdCBiYWNrLt4ABKRuYW1ls2dvdmVybmFuY2VfZmFsbGJhY2umZmllbGRzkt4ABKRuYW1lsG1heWJlX21heF92b3RlcnOkdHlwZc0BFKh0eXBlTmFtZatPcHRpb248dTMyPqRkb2NzkN4ABKRuYW1lsW1heWJlX21heF90YXJnZXRzpHR5cGXNARSodHlwZU5hbWWrT3B0aW9uPHUzMj6kZG9jc5ClaW5kZXgEpGRvY3OU2SBUcmlnZ2VyIHRoZSBnb3Zlcm5hbmNlIGZhbGxiYWNrLqDZUlRoaXMgY2FuIG9ubHkgYmUgY2FsbGVkIHdoZW4gW2BQaGFzZTo6RW1lcmdlbmN5YF0gaXMgZW5hYmxlZCwgYXMgYW4gYWx0ZXJuYXRpdmUgdG/ZMGNhbGxpbmcgW2BDYWxsOjpzZXRfZW1lcmdlbmN5X2VsZWN0aW9uX3Jlc3VsdGBdLqRkb2NzkdlJQ29udGFpbnMgb25lIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSB0aGF0IGNhbiBiZSBjYWxsZWQgYnkgYW4gZXh0cmluc2ljLt4AAqJpZM0BZ6R0eXBl3gAEpHBhdGiS2SRwYWxsZXRfZWxlY3Rpb25fcHJvdmlkZXJfbXVsdGlfcGhhc2WrUmF3U29sdXRpb26mcGFyYW1zkd4AAqRuYW1loVOkdHlwZc0BaKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5PeAASkbmFtZahzb2x1dGlvbqR0eXBlzQFoqHR5cGVOYW1loVOkZG9jc5DeAASkbmFtZaVzY29yZaR0eXBlzEuodHlwZU5hbWWtRWxlY3Rpb25TY29yZaRkb2NzkN4ABKRuYW1lpXJvdW5kpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKRkb2NzkN4AAqJpZM0BaKR0eXBl3gAEpHBhdGiSr3dlc3RlbmRfcnVudGltZbVOcG9zQ29tcGFjdFNvbHV0aW9uMTamcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc9wAEN4ABKRuYW1lpnZvdGVzMaR0eXBlzQFpqHR5cGVOYW1lwKRkb2NzkN4ABKRuYW1lpnZvdGVzMqR0eXBlzQFsqHR5cGVOYW1lwKRkb2NzkN4ABKRuYW1lpnZvdGVzM6R0eXBlzQFxqHR5cGVOYW1lwKRkb2NzkN4ABKRuYW1lpnZvdGVzNKR0eXBlzQF0qHR5cGVOYW1lwKRkb2NzkN4ABKRuYW1lpnZvdGVzNaR0eXBlzQF3qHR5cGVOYW1lwKRkb2NzkN4ABKRuYW1lpnZvdGVzNqR0eXBlzQF6qHR5cGVOYW1lwKRkb2NzkN4ABKRuYW1lpnZvdGVzN6R0eXBlzQF9qHR5cGVOYW1lwKRkb2NzkN4ABKRuYW1lpnZvdGVzOKR0eXBlzQGAqHR5cGVOYW1lwKRkb2NzkN4ABKRuYW1lpnZvdGVzOaR0eXBlzQGDqHR5cGVOYW1lwKRkb2NzkN4ABKRuYW1lp3ZvdGVzMTCkdHlwZc0Bhqh0eXBlTmFtZcCkZG9jc5DeAASkbmFtZad2b3RlczExpHR5cGXNAYmodHlwZU5hbWXApGRvY3OQ3gAEpG5hbWWndm90ZXMxMqR0eXBlzQGMqHR5cGVOYW1lwKRkb2NzkN4ABKRuYW1lp3ZvdGVzMTOkdHlwZc0Bj6h0eXBlTmFtZcCkZG9jc5DeAASkbmFtZad2b3RlczE0pHR5cGXNAZKodHlwZU5hbWXApGRvY3OQ3gAEpG5hbWWndm90ZXMxNaR0eXBlzQGVqHR5cGVOYW1lwKRkb2NzkN4ABKRuYW1lp3ZvdGVzMTakdHlwZc0BmKh0eXBlTmFtZcCkZG9jc5CkZG9jc5DeAAKiaWTNAWmkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQFqpGRvY3OQ3gAComlkzQFqpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSzHXNAWukZG9jc5DeAAKiaWTNAWukdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAadjb21wYWN03gABpHR5cGXMRqRkb2NzkN4AAqJpZM0BbKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAW2kZG9jc5DeAAKiaWTNAW2kdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZPMdc0Bbs0Ba6Rkb2NzkN4AAqJpZM0BbqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpXR1cGxlks0Ba80Bb6Rkb2NzkN4AAqJpZM0Bb6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABp2NvbXBhY3TeAAGkdHlwZc0BcKRkb2NzkN4AAqJpZM0BcKR0eXBl3gAEpHBhdGiTrXNwX2FyaXRobWV0aWOqcGVyX3RoaW5nc6ZQZXJVMTamcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZcxGqHR5cGVOYW1lo3UxNqRkb2NzkKRkb2NzkN4AAqJpZM0BcaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAXKkZG9jc5DeAAKiaWTNAXKkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZPMdc0Bc80Ba6Rkb2NzkN4AAqJpZM0Bc6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbgKkdHlwZc0BbqRkb2NzkN4AAqJpZM0BdKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAXWkZG9jc5DeAAKiaWTNAXWkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZPMdc0Bds0Ba6Rkb2NzkN4AAqJpZM0BdqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbgOkdHlwZc0BbqRkb2NzkN4AAqJpZM0Bd6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAXikZG9jc5DeAAKiaWTNAXikdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZPMdc0Bec0Ba6Rkb2NzkN4AAqJpZM0BeaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbgSkdHlwZc0BbqRkb2NzkN4AAqJpZM0BeqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAXukZG9jc5DeAAKiaWTNAXukdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZPMdc0BfM0Ba6Rkb2NzkN4AAqJpZM0BfKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbgWkdHlwZc0BbqRkb2NzkN4AAqJpZM0BfaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAX6kZG9jc5DeAAKiaWTNAX6kdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZPMdc0Bf80Ba6Rkb2NzkN4AAqJpZM0Bf6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbgakdHlwZc0BbqRkb2NzkN4AAqJpZM0BgKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAYGkZG9jc5DeAAKiaWTNAYGkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZPMdc0Bgs0Ba6Rkb2NzkN4AAqJpZM0BgqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbgekdHlwZc0BbqRkb2NzkN4AAqJpZM0Bg6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAYSkZG9jc5DeAAKiaWTNAYSkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZPMdc0Bhc0Ba6Rkb2NzkN4AAqJpZM0BhaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbgikdHlwZc0BbqRkb2NzkN4AAqJpZM0BhqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAYekZG9jc5DeAAKiaWTNAYekdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZPMdc0BiM0Ba6Rkb2NzkN4AAqJpZM0BiKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbgmkdHlwZc0BbqRkb2NzkN4AAqJpZM0BiaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAYqkZG9jc5DeAAKiaWTNAYqkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZPMdc0Bi80Ba6Rkb2NzkN4AAqJpZM0Bi6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbgqkdHlwZc0BbqRkb2NzkN4AAqJpZM0BjKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAY2kZG9jc5DeAAKiaWTNAY2kdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZPMdc0Bjs0Ba6Rkb2NzkN4AAqJpZM0BjqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbgukdHlwZc0BbqRkb2NzkN4AAqJpZM0Bj6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAZCkZG9jc5DeAAKiaWTNAZCkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZPMdc0Bkc0Ba6Rkb2NzkN4AAqJpZM0BkaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbgykdHlwZc0BbqRkb2NzkN4AAqJpZM0BkqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAZOkZG9jc5DeAAKiaWTNAZOkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZPMdc0BlM0Ba6Rkb2NzkN4AAqJpZM0BlKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbg2kdHlwZc0BbqRkb2NzkN4AAqJpZM0BlaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAZakZG9jc5DeAAKiaWTNAZakdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZPMdc0Bl80Ba6Rkb2NzkN4AAqJpZM0Bl6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbg6kdHlwZc0BbqRkb2NzkN4AAqJpZM0BmKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAZmkZG9jc5DeAAKiaWTNAZmkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZPMdc0Bms0Ba6Rkb2NzkN4AAqJpZM0BmqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbg+kdHlwZc0BbqRkb2NzkN4AAqJpZM0Bm6R0eXBl3gAEpHBhdGiS2SRwYWxsZXRfZWxlY3Rpb25fcHJvdmlkZXJfbXVsdGlfcGhhc2W2U29sdXRpb25PclNuYXBzaG90U2l6ZaZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lpnZvdGVyc6R0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWWndGFyZ2V0c6R0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQpGRvY3OQ3gAComlkzQGcpHR5cGXeAASkcGF0aJGmT3B0aW9upnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXMS6NkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZaROb25lpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWkU29tZaZmaWVsZHOR3gAEpG5hbWXApHR5cGXMS6h0eXBlTmFtZcCkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzQGdpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZc0BnqRkb2NzkN4AAqJpZM0BnqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpXR1cGxlkgDNAZ+kZG9jc5DeAAKiaWTNAZ+kdHlwZd4ABKRwYXRokrFzcF9ucG9zX2VsZWN0aW9uc6dTdXBwb3J0pnBhcmFtc5HeAAKkbmFtZalBY2NvdW50SWSkdHlwZQCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOS3gAEpG5hbWWldG90YWykdHlwZQaodHlwZU5hbWWvRXh0ZW5kZWRCYWxhbmNlpGRvY3OQ3gAEpG5hbWWmdm90ZXJzpHR5cGXM9qh0eXBlTmFtZdkhVmVjPChBY2NvdW50SWQsIEV4dGVuZGVkQmFsYW5jZSk+pGRvY3OQpGRvY3OQ3gAComlkzQGgpHR5cGXeAASkcGF0aJOwcGFsbGV0X2JhZ3NfbGlzdKZwYWxsZXSkQ2FsbKZwYXJhbXOS3gACpG5hbWWhVKR0eXBlwN4AAqRuYW1loUmkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWlcmViYWemZmllbGRzkd4ABKRuYW1lqmRpc2xvY2F0ZWSkdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQpWluZGV4AKRkb2NzmtlWRGVjbGFyZSB0aGF0IHNvbWUgYGRpc2xvY2F0ZWRgIGFjY291bnQgaGFzLCB0aHJvdWdoIHJld2FyZHMgb3IgcGVuYWx0aWVzLCBzdWZmaWNpZW50bHnZVGNoYW5nZWQgaXRzIHNjb3JlIHRoYXQgaXQgc2hvdWxkIHByb3Blcmx5IGZhbGwgaW50byBhIGRpZmZlcmVudCBiYWcgdGhhbiBpdHMgY3VycmVudKRvbmUuoNlHQW55b25lIGNhbiBjYWxsIHRoaXMgZnVuY3Rpb24gYWJvdXQgYW55IHBvdGVudGlhbGx5IGRpc2xvY2F0ZWQgYWNjb3VudC6g2VJXaWxsIGFsd2F5cyB1cGRhdGUgdGhlIHN0b3JlZCBzY29yZSBvZiBgZGlzbG9jYXRlZGAgdG8gdGhlIGNvcnJlY3Qgc2NvcmUsIGJhc2VkIG9usGBTY29yZVByb3ZpZGVyYC6g2TVJZiBgZGlzbG9jYXRlZGAgZG9lcyBub3QgZXhpc3RzLCBpdCByZXR1cm5zIGFuIGVycm9yLt4ABKRuYW1lr3B1dF9pbl9mcm9udF9vZqZmaWVsZHOR3gAEpG5hbWWnbGlnaHRlcqR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5ClaW5kZXgBpGRvY3OY2TRNb3ZlIHRoZSBjYWxsZXIncyBJZCBkaXJlY3RseSBpbiBmcm9udCBvZiBgbGlnaHRlcmAuoNlWVGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgYmUgX1NpZ25lZF8gYW5kIGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgSWQgb2bZKHRoZSBhY2NvdW50IGdvaW5nIGluIGZyb250IG9mIGBsaWdodGVyYC6grU9ubHkgd29ya3MgaWbZJS0gYm90aCBub2RlcyBhcmUgd2l0aGluIHRoZSBzYW1lIGJhZyzZNC0gYW5kIGBvcmlnaW5gIGhhcyBhIGdyZWF0ZXIgYFNjb3JlYCB0aGFuIGBsaWdodGVyYC6kZG9jc5HZSUNvbnRhaW5zIG9uZSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgdGhhdCBjYW4gYmUgY2FsbGVkIGJ5IGFuIGV4dHJpbnNpYy7eAAKiaWTNAaGkdHlwZd4ABKRwYXRok7dwYWxsZXRfbm9taW5hdGlvbl9wb29sc6ZwYWxsZXSkQ2FsbKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c9wAFd4ABKRuYW1lpGpvaW6mZmllbGRzkt4ABKRuYW1lpmFtb3VudKR0eXBlNah0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5DeAASkbmFtZadwb29sX2lkpHR5cGUEqHR5cGVOYW1lplBvb2xJZKRkb2NzkKVpbmRleACkZG9jc5rZUVN0YWtlIGZ1bmRzIHdpdGggYSBwb29sLiBUaGUgYW1vdW50IHRvIGJvbmQgaXMgdHJhbnNmZXJyZWQgZnJvbSB0aGUgbWVtYmVyIHRvIHRoZdk3cG9vbHMgYWNjb3VudCBhbmQgaW1tZWRpYXRlbHkgaW5jcmVhc2VzIHRoZSBwb29scyBib25kLqCmIyBOb3RloNkzKiBBbiBhY2NvdW50IGNhbiBvbmx5IGJlIGEgbWVtYmVyIG9mIGEgc2luZ2xlIHBvb2wu2TYqIEFuIGFjY291bnQgY2Fubm90IGpvaW4gdGhlIHNhbWUgcG9vbCBtdWx0aXBsZSB0aW1lcy7ZUCogVGhpcyBjYWxsIHdpbGwgKm5vdCogZHVzdCB0aGUgbWVtYmVyIGFjY291bnQsIHNvIHRoZSBtZW1iZXIgbXVzdCBoYXZlIGF0IGxlYXN02TIgIGBleGlzdGVudGlhbCBkZXBvc2l0ICsgYW1vdW50YCBpbiB0aGVpciBhY2NvdW50Ltk0KiBPbmx5IGEgcG9vbCB3aXRoIFtgUG9vbFN0YXRlOjpPcGVuYF0gY2FuIGJlIGpvaW5lZN4ABKRuYW1lqmJvbmRfZXh0cmGmZmllbGRzkd4ABKRuYW1lpWV4dHJhpHR5cGXNAaKodHlwZU5hbWW3Qm9uZEV4dHJhPEJhbGFuY2VPZjxUPj6kZG9jc5ClaW5kZXgBpGRvY3OX2VFCb25kIGBleHRyYWAgbW9yZSBmdW5kcyBmcm9tIGBvcmlnaW5gIGludG8gdGhlIHBvb2wgdG8gd2hpY2ggdGhleSBhbHJlYWR5IGJlbG9uZy6g2VJBZGRpdGlvbmFsIGZ1bmRzIGNhbiBjb21lIGZyb20gZWl0aGVyIHRoZSBmcmVlIGJhbGFuY2Ugb2YgdGhlIGFjY291bnQsIG9mIGZyb20gdGhl2SdhY2N1bXVsYXRlZCByZXdhcmRzLCBzZWUgW2BCb25kRXh0cmFgXS6g2U9Cb25kaW5nIGV4dHJhIGZ1bmRzIGltcGxpZXMgYW4gYXV0b21hdGljIHBheW91dCBvZiBhbGwgcGVuZGluZyByZXdhcmRzIGFzIHdlbGwu2UJTZWUgYGJvbmRfZXh0cmFfb3RoZXJgIHRvIGJvbmQgcGVuZGluZyByZXdhcmRzIG9mIGBvdGhlcmAgbWVtYmVycy7eAASkbmFtZaxjbGFpbV9wYXlvdXSmZmllbGRzkKVpbmRleAKkZG9jc5jZVUEgYm9uZGVkIG1lbWJlciBjYW4gdXNlIHRoaXMgdG8gY2xhaW0gdGhlaXIgcGF5b3V0IGJhc2VkIG9uIHRoZSByZXdhcmRzIHRoYXQgdGhlIHBvb2zZWGhhcyBhY2N1bXVsYXRlZCBzaW5jZSB0aGVpciBsYXN0IGNsYWltZWQgcGF5b3V0IChPUiBzaW5jZSBqb2luaW5nIGlmIHRoaXMgaXMgdGhlaXIgZmlyc3TZT3RpbWUgY2xhaW1pbmcgcmV3YXJkcykuIFRoZSBwYXlvdXQgd2lsbCBiZSB0cmFuc2ZlcnJlZCB0byB0aGUgbWVtYmVyJ3MgYWNjb3VudC6g2VJUaGUgbWVtYmVyIHdpbGwgZWFybiByZXdhcmRzIHBybyByYXRhIGJhc2VkIG9uIHRoZSBtZW1iZXJzIHN0YWtlIHZzIHRoZSBzdW0gb2YgdGhl2TRtZW1iZXJzIGluIHRoZSBwb29scyBzdGFrZS4gUmV3YXJkcyBkbyBub3QgImV4cGlyZSIuoNlPU2VlIGBjbGFpbV9wYXlvdXRfb3RoZXJgIHRvIGNhaW0gcmV3YXJkcyBvbiBiYWhhbGYgb2Ygc29tZSBgb3RoZXJgIHBvb2wgbWVtYmVyLt4ABKRuYW1lpnVuYm9uZKZmaWVsZHOS3gAEpG5hbWWubWVtYmVyX2FjY291bnSkdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQ3gAEpG5hbWWwdW5ib25kaW5nX3BvaW50c6R0eXBlNah0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5ClaW5kZXgDpGRvY3PcAB/ZUVVuYm9uZCB1cCB0byBgdW5ib25kaW5nX3BvaW50c2Agb2YgdGhlIGBtZW1iZXJfYWNjb3VudGAncyBmdW5kcyBmcm9tIHRoZSBwb29sLiBJdNlRaW1wbGljaXRseSBjb2xsZWN0cyB0aGUgcmV3YXJkcyBvbmUgbGFzdCB0aW1lLCBzaW5jZSBub3QgZG9pbmcgc28gd291bGQgbWVhbiBzb21lu3Jld2FyZHMgd291bGQgYmUgZm9yZmVpdGVkLqDZU1VuZGVyIGNlcnRhaW4gY29uZGl0aW9ucywgdGhpcyBjYWxsIGNhbiBiZSBkaXNwYXRjaGVkIHBlcm1pc3Npb25sZXNzbHkgKGkuZS4gYnkgYW55qWFjY291bnQpLqDZKyMgQ29uZGl0aW9ucyBmb3IgYSBwZXJtaXNzaW9ubGVzcyBkaXNwYXRjaC6g2VcqIFRoZSBwb29sIGlzIGJsb2NrZWQgYW5kIHRoZSBjYWxsZXIgaXMgZWl0aGVyIHRoZSByb290IG9yIGJvdW5jZXIuIFRoaXMgaXMgcmVmZXJlZWQgdG+sICBhcyBhIGtpY2su2T0qIFRoZSBwb29sIGlzIGRlc3Ryb3lpbmcgYW5kIHRoZSBtZW1iZXIgaXMgbm90IHRoZSBkZXBvc2l0b3Iu2VUqIFRoZSBwb29sIGlzIGRlc3Ryb3lpbmcsIHRoZSBtZW1iZXIgaXMgdGhlIGRlcG9zaXRvciBhbmQgbm8gb3RoZXIgbWVtYmVycyBhcmUgaW4gdGhlpyAgcG9vbC6g2UQjIyBDb25kaXRpb25zIGZvciBwZXJtaXNzaW9uZWQgZGlzcGF0Y2ggKGkuZS4gdGhlIGNhbGxlciBpcyBhbHNvIHRoZbJgbWVtYmVyX2FjY291bnRgKTqg2SIqIFRoZSBjYWxsZXIgaXMgbm90IHRoZSBkZXBvc2l0b3Iu2VUqIFRoZSBjYWxsZXIgaXMgdGhlIGRlcG9zaXRvciwgdGhlIHBvb2wgaXMgZGVzdHJveWluZyBhbmQgbm8gb3RoZXIgbWVtYmVycyBhcmUgaW4gdGhlpyAgcG9vbC6gpiMgTm90ZaDZR0lmIHRoZXJlIGFyZSB0b28gbWFueSB1bmxvY2tpbmcgY2h1bmtzIHRvIHVuYm9uZCB3aXRoIHRoZSBwb29sIGFjY291bnQs2VRbYENhbGw6OnBvb2xfd2l0aGRyYXdfdW5ib25kZWRgXSBjYW4gYmUgY2FsbGVkIHRvIHRyeSBhbmQgbWluaW1pemUgdW5sb2NraW5nIGNodW5rcy7ZVlRoZSBbYFN0YWtpbmdJbnRlcmZhY2U6OnVuYm9uZGBdIHdpbGwgaW1wbGljaXRseSBjYWxsIFtgQ2FsbDo6cG9vbF93aXRoZHJhd191bmJvbmRlZGBd2VV0byB0cnkgdG8gZnJlZSBjaHVua3MgaWYgbmVjZXNzYXJ5IChpZS4gaWYgdW5ib3VuZCB3YXMgY2FsbGVkIGFuZCBubyB1bmxvY2tpbmcgY2h1bmtz2VhhcmUgYXZhaWxhYmxlKS4gSG93ZXZlciwgaXQgbWF5IG5vdCBiZSBwb3NzaWJsZSB0byByZWxlYXNlIHRoZSBjdXJyZW50IHVubG9ja2luZyBjaHVua3Ms2VdpbiB3aGljaCBjYXNlLCB0aGUgcmVzdWx0IG9mIHRoaXMgY2FsbCB3aWxsIGxpa2VseSBiZSB0aGUgYE5vTW9yZUNodW5rc2AgZXJyb3IgZnJvbSB0aGWvc3Rha2luZyBzeXN0ZW0u3gAEpG5hbWW2cG9vbF93aXRoZHJhd191bmJvbmRlZKZmaWVsZHOS3gAEpG5hbWWncG9vbF9pZKR0eXBlBKh0eXBlTmFtZaZQb29sSWSkZG9jc5DeAASkbmFtZbJudW1fc2xhc2hpbmdfc3BhbnOkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4BKRkb2NzltlVQ2FsbCBgd2l0aGRyYXdfdW5ib25kZWRgIGZvciB0aGUgcG9vbHMgYWNjb3VudC4gVGhpcyBjYWxsIGNhbiBiZSBtYWRlIGJ5IGFueSBhY2NvdW50LqDZUFRoaXMgaXMgdXNlZnVsIGlmIHRoZWlyIGFyZSB0b28gbWFueSB1bmxvY2tpbmcgY2h1bmtzIHRvIGNhbGwgYHVuYm9uZGAsIGFuZCBzb21l2VhjYW4gYmUgY2xlYXJlZCBieSB3aXRoZHJhd2luZy4gSW4gdGhlIGNhc2UgdGhlcmUgYXJlIHRvbyBtYW55IHVubG9ja2luZyBjaHVua3MsIHRoZSB1c2Vy2VR3b3VsZCBwcm9iYWJseSBzZWUgYW4gZXJyb3IgbGlrZSBgTm9Nb3JlQ2h1bmtzYCBlbWl0dGVkIGZyb20gdGhlIHN0YWtpbmcgc3lzdGVtIHdoZW63dGhleSBhdHRlbXB0IHRvIHVuYm9uZC7eAASkbmFtZbF3aXRoZHJhd191bmJvbmRlZKZmaWVsZHOS3gAEpG5hbWWubWVtYmVyX2FjY291bnSkdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQ3gAEpG5hbWWybnVtX3NsYXNoaW5nX3NwYW5zpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAWkZG9jc9wAE9lVV2l0aGRyYXcgdW5ib25kZWQgZnVuZHMgZnJvbSBgbWVtYmVyX2FjY291bnRgLiBJZiBubyBib25kZWQgZnVuZHMgY2FuIGJlIHVuYm9uZGVkLCBhbrJlcnJvciBpcyByZXR1cm5lZC6g2VNVbmRlciBjZXJ0YWluIGNvbmRpdGlvbnMsIHRoaXMgY2FsbCBjYW4gYmUgZGlzcGF0Y2hlZCBwZXJtaXNzaW9ubGVzc2x5IChpLmUuIGJ5IGFuealhY2NvdW50KS6g2SojIENvbmRpdGlvbnMgZm9yIGEgcGVybWlzc2lvbmxlc3MgZGlzcGF0Y2ig2UIqIFRoZSBwb29sIGlzIGluIGRlc3Ryb3kgbW9kZSBhbmQgdGhlIHRhcmdldCBpcyBub3QgdGhlIGRlcG9zaXRvci7ZTCogVGhlIHRhcmdldCBpcyB0aGUgZGVwb3NpdG9yIGFuZCB0aGV5IGFyZSB0aGUgb25seSBtZW1iZXIgaW4gdGhlIHN1YiBwb29scy7ZQyogVGhlIHBvb2wgaXMgYmxvY2tlZCBhbmQgdGhlIGNhbGxlciBpcyBlaXRoZXIgdGhlIHJvb3Qgb3IgYm91bmNlci6g2SYjIENvbmRpdGlvbnMgZm9yIHBlcm1pc3Npb25lZCBkaXNwYXRjaKDZOiogVGhlIGNhbGxlciBpcyB0aGUgdGFyZ2V0IGFuZCB0aGV5IGFyZSBub3QgdGhlIGRlcG9zaXRvci6gpiMgTm90ZaDZO0lmIHRoZSB0YXJnZXQgaXMgdGhlIGRlcG9zaXRvciwgdGhlIHBvb2wgd2lsbCBiZSBkZXN0cm95ZWQu3gAEpG5hbWWmY3JlYXRlpmZpZWxkc5TeAASkbmFtZaZhbW91bnSkdHlwZTWodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQ3gAEpG5hbWWkcm9vdKR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5DeAASkbmFtZalub21pbmF0b3KkdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQ3gAEpG5hbWWnYm91bmNlcqR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5ClaW5kZXgGpGRvY3PcABG9Q3JlYXRlIGEgbmV3IGRlbGVnYXRpb24gcG9vbC6gqyMgQXJndW1lbnRzoNlVKiBgYW1vdW50YCAtIFRoZSBhbW91bnQgb2YgZnVuZHMgdG8gZGVsZWdhdGUgdG8gdGhlIHBvb2wuIFRoaXMgYWxzbyBhY3RzIG9mIGEgc29ydCBvZtlTICBkZXBvc2l0IHNpbmNlIHRoZSBwb29scyBjcmVhdG9yIGNhbm5vdCBmdWxseSB1bmJvbmQgZnVuZHMgdW50aWwgdGhlIHBvb2wgaXMgYmVpbmesICBkZXN0cm95ZWQu2VQqIGBpbmRleGAgLSBBIGRpc2FtYmlndWF0aW9uIGluZGV4IGZvciBjcmVhdGluZyB0aGUgYWNjb3VudC4gTGlrZWx5IG9ubHkgdXNlZnVsIHdoZW7ZMCAgY3JlYXRpbmcgbXVsdGlwbGUgcG9vbHMgaW4gdGhlIHNhbWUgZXh0cmluc2ljLtk1KiBgcm9vdGAgLSBUaGUgYWNjb3VudCB0byBzZXQgYXMgW2BQb29sUm9sZXM6OnJvb3RgXS7ZQyogYG5vbWluYXRvcmAgLSBUaGUgYWNjb3VudCB0byBzZXQgYXMgdGhlIFtgUG9vbFJvbGVzOjpub21pbmF0b3JgXS7ZPyogYGJvdW5jZXJgIC0gVGhlIGFjY291bnQgdG8gc2V0IGFzIHRoZSBbYFBvb2xSb2xlczo6Ym91bmNlcmBdLqCmIyBOb3RloNlYSW4gYWRkaXRpb24gdG8gYGFtb3VudGAsIHRoZSBjYWxsZXIgd2lsbCB0cmFuc2ZlciB0aGUgZXhpc3RlbnRpYWwgZGVwb3NpdDsgc28gdGhlIGNhbGxlctlEbmVlZHMgYXQgaGF2ZSBhdCBsZWFzdCBgYW1vdW50ICsgZXhpc3RlbnRpYWxfZGVwb3NpdGAgdHJhbnNmZXJyYWJsZS7eAASkbmFtZbNjcmVhdGVfd2l0aF9wb29sX2lkpmZpZWxkc5XeAASkbmFtZaZhbW91bnSkdHlwZTWodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQ3gAEpG5hbWWkcm9vdKR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5DeAASkbmFtZalub21pbmF0b3KkdHlwZczWqHR5cGVOYW1ltEFjY291bnRJZExvb2t1cE9mPFQ+pGRvY3OQ3gAEpG5hbWWnYm91bmNlcqR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5DeAASkbmFtZadwb29sX2lkpHR5cGUEqHR5cGVOYW1lplBvb2xJZKRkb2NzkKVpbmRleAekZG9jc5bZO0NyZWF0ZSBhIG5ldyBkZWxlZ2F0aW9uIHBvb2wgd2l0aCBhIHByZXZpb3VzbHkgdXNlZCBwb29sIGlkoKsjIEFyZ3VtZW50c6DZJnNhbWUgYXMgYGNyZWF0ZWAgd2l0aCB0aGUgaW5jbHVzaW9uIG9mviogYHBvb2xfaWRgIC0gYEEgdmFsaWQgUG9vbElkLt4ABKRuYW1lqG5vbWluYXRlpmZpZWxkc5LeAASkbmFtZadwb29sX2lkpHR5cGUEqHR5cGVOYW1lplBvb2xJZKRkb2NzkN4ABKRuYW1lqnZhbGlkYXRvcnOkdHlwZczkqHR5cGVOYW1lsVZlYzxUOjpBY2NvdW50SWQ+pGRvY3OQpWluZGV4CKRkb2Nzl79Ob21pbmF0ZSBvbiBiZWhhbGYgb2YgdGhlIHBvb2wuoNlRVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSBzaWduZWQgYnkgdGhlIHBvb2wgbm9taW5hdG9yIG9yIHRoZSBwb29sqnJvb3Qgcm9sZS6g2VJUaGlzIGRpcmVjdGx5IGZvcndhcmQgdGhlIGNhbGwgdG8gdGhlIHN0YWtpbmcgcGFsbGV0LCBvbiBiZWhhbGYgb2YgdGhlIHBvb2wgYm9uZGVkqGFjY291bnQu3gAEpG5hbWWpc2V0X3N0YXRlpmZpZWxkc5LeAASkbmFtZadwb29sX2lkpHR5cGUEqHR5cGVOYW1lplBvb2xJZKRkb2NzkN4ABKRuYW1lpXN0YXRlpHR5cGXMUKh0eXBlTmFtZalQb29sU3RhdGWkZG9jc5ClaW5kZXgJpGRvY3OavVNldCBhIG5ldyBzdGF0ZSBmb3IgdGhlIHBvb2wuoNlVSWYgYSBwb29sIGlzIGFscmVhZHkgaW4gdGhlIGBEZXN0cm95aW5nYCBzdGF0ZSwgdGhlbiB1bmRlciBubyBjb25kaXRpb24gY2FuIGl0cyBzdGF0Za1jaGFuZ2UgYWdhaW4uoNkwVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSBlaXRoZXI6oNk3MS4gc2lnbmVkIGJ5IHRoZSBib3VuY2VyLCBvciB0aGUgcm9vdCByb2xlIG9mIHRoZSBwb29sLNlXMi4gaWYgdGhlIHBvb2wgY29uZGl0aW9ucyB0byBiZSBvcGVuIGFyZSBOT1QgbWV0IChhcyBkZXNjcmliZWQgYnkgYG9rX3RvX2JlX29wZW5gKSwgYW5k2U4gICB0aGVuIHRoZSBzdGF0ZSBvZiB0aGUgcG9vbCBjYW4gYmUgcGVybWlzc2lvbmxlc3NseSBjaGFuZ2VkIHRvIGBEZXN0cm95aW5nYC7eAASkbmFtZaxzZXRfbWV0YWRhdGGmZmllbGRzkt4ABKRuYW1lp3Bvb2xfaWSkdHlwZQSodHlwZU5hbWWmUG9vbElkpGRvY3OQ3gAEpG5hbWWobWV0YWRhdGGkdHlwZQyodHlwZU5hbWWnVmVjPHU4PqRkb2NzkKVpbmRleAqkZG9jc5TZIFNldCBhIG5ldyBtZXRhZGF0YSBmb3IgdGhlIHBvb2wuoNlXVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSBzaWduZWQgYnkgdGhlIGJvdW5jZXIsIG9yIHRoZSByb290IHJvbGUgb2YgdGhlpXBvb2wu3gAEpG5hbWWrc2V0X2NvbmZpZ3OmZmllbGRzlt4ABKRuYW1lrW1pbl9qb2luX2JvbmSkdHlwZc0Bo6h0eXBlTmFtZbZDb25maWdPcDxCYWxhbmNlT2Y8VD4+pGRvY3OQ3gAEpG5hbWWvbWluX2NyZWF0ZV9ib25kpHR5cGXNAaOodHlwZU5hbWW2Q29uZmlnT3A8QmFsYW5jZU9mPFQ+PqRkb2NzkN4ABKRuYW1lqW1heF9wb29sc6R0eXBlzQGkqHR5cGVOYW1lrUNvbmZpZ09wPHUzMj6kZG9jc5DeAASkbmFtZattYXhfbWVtYmVyc6R0eXBlzQGkqHR5cGVOYW1lrUNvbmZpZ09wPHUzMj6kZG9jc5DeAASkbmFtZbRtYXhfbWVtYmVyc19wZXJfcG9vbKR0eXBlzQGkqHR5cGVOYW1lrUNvbmZpZ09wPHUzMj6kZG9jc5DeAASkbmFtZbVnbG9iYWxfbWF4X2NvbW1pc3Npb26kdHlwZc0Bpah0eXBlTmFtZbFDb25maWdPcDxQZXJiaWxsPqRkb2NzkKVpbmRleAukZG9jc5vZUFVwZGF0ZSBjb25maWd1cmF0aW9ucyBmb3IgdGhlIG5vbWluYXRpb24gcG9vbHMuIFRoZSBvcmlnaW4gZm9yIHRoaXMgY2FsbCBtdXN0IGJlpVJvb3QuoKsjIEFyZ3VtZW50c6DZKCogYG1pbl9qb2luX2JvbmRgIC0gU2V0IFtgTWluSm9pbkJvbmRgXS7ZLCogYG1pbl9jcmVhdGVfYm9uZGAgLSBTZXQgW2BNaW5DcmVhdGVCb25kYF0u2SEqIGBtYXhfcG9vbHNgIC0gU2V0IFtgTWF4UG9vbHNgXS7ZKSogYG1heF9tZW1iZXJzYCAtIFNldCBbYE1heFBvb2xNZW1iZXJzYF0u2TkqIGBtYXhfbWVtYmVyc19wZXJfcG9vbGAgLSBTZXQgW2BNYXhQb29sTWVtYmVyc1BlclBvb2xgXS7ZOCogYGdsb2JhbF9tYXhfY29tbWlzc2lvbmAgLSBTZXQgW2BHbG9iYWxNYXhDb21taXNzaW9uYF0u3gAEpG5hbWWsdXBkYXRlX3JvbGVzpmZpZWxkc5TeAASkbmFtZadwb29sX2lkpHR5cGUEqHR5cGVOYW1lplBvb2xJZKRkb2NzkN4ABKRuYW1lqG5ld19yb290pHR5cGXNAaaodHlwZU5hbWW2Q29uZmlnT3A8VDo6QWNjb3VudElkPqRkb2NzkN4ABKRuYW1lrW5ld19ub21pbmF0b3KkdHlwZc0Bpqh0eXBlTmFtZbZDb25maWdPcDxUOjpBY2NvdW50SWQ+pGRvY3OQ3gAEpG5hbWWrbmV3X2JvdW5jZXKkdHlwZc0Bpqh0eXBlTmFtZbZDb25maWdPcDxUOjpBY2NvdW50SWQ+pGRvY3OQpWluZGV4DKRkb2Nzl71VcGRhdGUgdGhlIHJvbGVzIG9mIHRoZSBwb29sLqDZT1RoZSByb290IGlzIHRoZSBvbmx5IGVudGl0eSB0aGF0IGNhbiBjaGFuZ2UgYW55IG9mIHRoZSByb2xlcywgaW5jbHVkaW5nIGl0c2VsZizZLmV4Y2x1ZGluZyB0aGUgZGVwb3NpdG9yLCB3aG8gY2FuIG5ldmVyIGNoYW5nZS6g2VRJdCBlbWl0cyBhbiBldmVudCwgbm90aWZ5aW5nIFVJcyBvZiB0aGUgcm9sZSBjaGFuZ2UuIFRoaXMgZXZlbnQgaXMgcXVpdGUgcmVsZXZhbnQgdG/ZR21vc3QgcG9vbCBtZW1iZXJzIGFuZCB0aGV5IHNob3VsZCBiZSBpbmZvcm1lZCBvZiBjaGFuZ2VzIHRvIHBvb2wgcm9sZXMu3gAEpG5hbWWlY2hpbGymZmllbGRzkd4ABKRuYW1lp3Bvb2xfaWSkdHlwZQSodHlwZU5hbWWmUG9vbElkpGRvY3OQpWluZGV4DaRkb2Nzl7xDaGlsbCBvbiBiZWhhbGYgb2YgdGhlIHBvb2wuoNlRVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSBzaWduZWQgYnkgdGhlIHBvb2wgbm9taW5hdG9yIG9yIHRoZSBwb29s2Shyb290IHJvbGUsIHNhbWUgYXMgW2BQYWxsZXQ6Om5vbWluYXRlYF0uoNlSVGhpcyBkaXJlY3RseSBmb3J3YXJkIHRoZSBjYWxsIHRvIHRoZSBzdGFraW5nIHBhbGxldCwgb24gYmVoYWxmIG9mIHRoZSBwb29sIGJvbmRlZKhhY2NvdW50Lt4ABKRuYW1lsGJvbmRfZXh0cmFfb3RoZXKmZmllbGRzkt4ABKRuYW1lpm1lbWJlcqR0eXBlzNaodHlwZU5hbWW0QWNjb3VudElkTG9va3VwT2Y8VD6kZG9jc5DeAASkbmFtZaVleHRyYaR0eXBlzQGiqHR5cGVOYW1lt0JvbmRFeHRyYTxCYWxhbmNlT2Y8VD4+pGRvY3OQpWluZGV4DqRkb2NzmdlVYG9yaWdpbmAgYm9uZHMgZnVuZHMgZnJvbSBgZXh0cmFgIGZvciBzb21lIHBvb2wgbWVtYmVyIGBtZW1iZXJgIGludG8gdGhlaXIgcmVzcGVjdGl2ZaZwb29scy6g2VJgb3JpZ2luYCBjYW4gYm9uZCBleHRyYSBmdW5kcyBmcm9tIGZyZWUgYmFsYW5jZSBvciBwZW5kaW5nIHJld2FyZHMgd2hlbiBgb3JpZ2luID09p290aGVyYC6g2VFJbiB0aGUgY2FzZSBvZiBgb3JpZ2luICE9IG90aGVyYCwgYG9yaWdpbmAgY2FuIG9ubHkgYm9uZCBleHRyYSBwZW5kaW5nIHJld2FyZHMgb2bZRWBvdGhlcmAgbWVtYmVycyBhc3N1bWluZyBzZXRfY2xhaW1fcGVybWlzc2lvbiBmb3IgdGhlIGdpdmVuIG1lbWJlciBpc9kwYFBlcm1pc3Npb25sZXNzQWxsYCBvciBgUGVybWlzc2lvbmxlc3NDb21wb3VuZGAu3gAEpG5hbWW0c2V0X2NsYWltX3Blcm1pc3Npb26mZmllbGRzkd4ABKRuYW1lqnBlcm1pc3Npb26kdHlwZc0Bp6h0eXBlTmFtZa9DbGFpbVBlcm1pc3Npb26kZG9jc5ClaW5kZXgPpGRvY3Oc2VJBbGxvd3MgYSBwb29sIG1lbWJlciB0byBzZXQgYSBjbGFpbSBwZXJtaXNzaW9uIHRvIGFsbG93IG9yIGRpc2FsbG93IHBlcm1pc3Npb25sZXNzuGJvbmRpbmcgYW5kIHdpdGhkcmF3aW5nLqDZVUJ5IGRlZmF1bHQsIHRoaXMgaXMgYFBlcm1pc3Npb25lZGAsIHdoaWNoIGltcGxpZXMgb25seSB0aGUgcG9vbCBtZW1iZXIgdGhlbXNlbHZlcyBjYW7ZTWNsYWltIHRoZWlyIHBlbmRpbmcgcmV3YXJkcy4gSWYgYSBwb29sIG1lbWJlciB3aXNoZXMgc28sIHRoZXkgY2FuIHNldCB0aGlzIHRv2VVgUGVybWlzc2lvbmxlc3NBbGxgIHRvIGFsbG93IGFueSBhY2NvdW50IHRvIGNsYWltIHRoZWlyIHJld2FyZHMgYW5kIGJvbmQgZXh0cmEgdG8gdGhlpXBvb2wuoKsjIEFyZ3VtZW50c6C+KiBgb3JpZ2luYCAtIE1lbWJlciBvZiBhIHBvb2wu2TQqIGBhY3RvcmAgLSBBY2NvdW50IHRvIGNsYWltIHJld2FyZC4gLy8gaW1wcm92ZSB0aGlz3gAEpG5hbWWyY2xhaW1fcGF5b3V0X290aGVypmZpZWxkc5HeAASkbmFtZaVvdGhlcqR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5ClaW5kZXgQpGRvY3OU2UBgb3JpZ2luYCBjYW4gY2xhaW0gcGF5b3V0cyBvbiBzb21lIHBvb2wgbWVtYmVyIGBvdGhlcmAncyBiZWhhbGYuoNlYUG9vbCBtZW1iZXIgYG90aGVyYCBtdXN0IGhhdmUgYSBgUGVybWlzc2lvbmxlc3NBbGxgIG9yIGBQZXJtaXNzaW9ubGVzc1dpdGhkcmF3YCBpbiBvcmRlcr9mb3IgdGhpcyBjYWxsIHRvIGJlIHN1Y2Nlc3NmdWwu3gAEpG5hbWWuc2V0X2NvbW1pc3Npb26mZmllbGRzkt4ABKRuYW1lp3Bvb2xfaWSkdHlwZQSodHlwZU5hbWWmUG9vbElkpGRvY3OQ3gAEpG5hbWWubmV3X2NvbW1pc3Npb26kdHlwZcxRqHR5cGVOYW1lv09wdGlvbjwoUGVyYmlsbCwgVDo6QWNjb3VudElkKT6kZG9jc5ClaW5kZXgRpGRvY3OVvVNldCB0aGUgY29tbWlzc2lvbiBvZiBhIHBvb2wu2VVCb3RoIGEgY29tbWlzc2lvbiBwZXJjZW50YWdlIGFuZCBhIGNvbW1pc3Npb24gcGF5ZWUgbXVzdCBiZSBwcm92aWRlZCBpbiB0aGUgYGN1cnJlbnRg2Vd0dXBsZS4gV2hlcmUgYSBgY3VycmVudGAgb2YgYE5vbmVgIGlzIHByb3ZpZGVkLCBhbnkgY3VycmVudCBjb21taXNzaW9uIHdpbGwgYmUgcmVtb3ZlZC6g2VMtIElmIGEgYE5vbmVgIGlzIHN1cHBsaWVkIHRvIGBuZXdfY29tbWlzc2lvbmAsIGV4aXN0aW5nIGNvbW1pc3Npb24gd2lsbCBiZSByZW1vdmVkLt4ABKRuYW1lsnNldF9jb21taXNzaW9uX21heKZmaWVsZHOS3gAEpG5hbWWncG9vbF9pZKR0eXBlBKh0eXBlTmFtZaZQb29sSWSkZG9jc5DeAASkbmFtZa5tYXhfY29tbWlzc2lvbqR0eXBlIqh0eXBlTmFtZadQZXJiaWxspGRvY3OQpWluZGV4EqRkb2NzldklU2V0IHRoZSBtYXhpbXVtIGNvbW1pc3Npb24gb2YgYSBwb29sLqDZTi0gSW5pdGlhbCBtYXggY2FuIGJlIHNldCB0byBhbnkgYFBlcmJpbGxgLCBhbmQgb25seSBzbWFsbGVyIHZhbHVlcyB0aGVyZWFmdGVyLtlNLSBDdXJyZW50IGNvbW1pc3Npb24gd2lsbCBiZSBsb3dlcmVkIGluIHRoZSBldmVudCBpdCBpcyBoaWdoZXIgdGhhbiBhIG5ldyBtYXitICBjb21taXNzaW9uLt4ABKRuYW1lunNldF9jb21taXNzaW9uX2NoYW5nZV9yYXRlpmZpZWxkc5LeAASkbmFtZadwb29sX2lkpHR5cGUEqHR5cGVOYW1lplBvb2xJZKRkb2NzkN4ABKRuYW1lq2NoYW5nZV9yYXRlpHR5cGXMU6h0eXBlTmFtZdkkQ29tbWlzc2lvbkNoYW5nZVJhdGU8VDo6QmxvY2tOdW1iZXI+pGRvY3OQpWluZGV4E6Rkb2NzlNkqU2V0IHRoZSBjb21taXNzaW9uIGNoYW5nZSByYXRlIGZvciBhIHBvb2wuoNlPSW5pdGlhbCBjaGFuZ2UgcmF0ZSBpcyBub3QgYm91bmRlZCwgd2hlcmVhcyBzdWJzZXF1ZW50IHVwZGF0ZXMgY2FuIG9ubHkgYmUgbW9yZb1yZXN0cmljdGl2ZSB0aGFuIHRoZSBjdXJyZW50Lt4ABKRuYW1lsGNsYWltX2NvbW1pc3Npb26mZmllbGRzkd4ABKRuYW1lp3Bvb2xfaWSkdHlwZQSodHlwZU5hbWWmUG9vbElkpGRvY3OQpWluZGV4FKRkb2NzlblDbGFpbSBwZW5kaW5nIGNvbW1pc3Npb24uoNlXVGhlIGRpc3BhdGNoIG9yaWdpbiBvZiB0aGlzIGNhbGwgbXVzdCBiZSBzaWduZWQgYnkgdGhlIGByb290YCByb2xlIG9mIHRoZSBwb29sLiBQZW5kaW5n2Vdjb21taXNzaW9uIGlzIHBhaWQgb3V0IGFuZCBhZGRlZCB0byB0b3RhbCBjbGFpbWVkIGNvbW1pc3Npb25gLiBUb3RhbCBwZW5kaW5nIGNvbW1pc3Npb26+aXMgcmVzZXQgdG8gemVyby4gdGhlIGN1cnJlbnQupGRvY3OR2UlDb250YWlucyBvbmUgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIHRoYXQgY2FuIGJlIGNhbGxlZCBieSBhbiBleHRyaW5zaWMu3gAComlkzQGipHR5cGXeAASkcGF0aJK3cGFsbGV0X25vbWluYXRpb25fcG9vbHOpQm9uZEV4dHJhpnBhcmFtc5HeAAKkbmFtZadCYWxhbmNlpHR5cGUGo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lq0ZyZWVCYWxhbmNlpmZpZWxkc5HeAASkbmFtZcCkdHlwZQaodHlwZU5hbWWnQmFsYW5jZaRkb2NzkKVpbmRleACkZG9jc5DeAASkbmFtZadSZXdhcmRzpmZpZWxkc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzQGjpHR5cGXeAASkcGF0aJK3cGFsbGV0X25vbWluYXRpb25fcG9vbHOoQ29uZmlnT3CmcGFyYW1zkd4AAqRuYW1loVSkdHlwZQajZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWWkTm9vcKZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lo1NldKZmaWVsZHOR3gAEpG5hbWXApHR5cGUGqHR5cGVOYW1loVSkZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWmUmVtb3ZlpmZpZWxkc5ClaW5kZXgCpGRvY3OQpGRvY3OQ3gAComlkzQGkpHR5cGXeAASkcGF0aJK3cGFsbGV0X25vbWluYXRpb25fcG9vbHOoQ29uZmlnT3CmcGFyYW1zkd4AAqRuYW1loVSkdHlwZQSjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWWkTm9vcKZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lo1NldKZmaWVsZHOR3gAEpG5hbWXApHR5cGUEqHR5cGVOYW1loVSkZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWmUmVtb3ZlpmZpZWxkc5ClaW5kZXgCpGRvY3OQpGRvY3OQ3gAComlkzQGlpHR5cGXeAASkcGF0aJK3cGFsbGV0X25vbWluYXRpb25fcG9vbHOoQ29uZmlnT3CmcGFyYW1zkd4AAqRuYW1loVSkdHlwZSKjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWWkTm9vcKZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lo1NldKZmaWVsZHOR3gAEpG5hbWXApHR5cGUiqHR5cGVOYW1loVSkZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWmUmVtb3ZlpmZpZWxkc5ClaW5kZXgCpGRvY3OQpGRvY3OQ3gAComlkzQGmpHR5cGXeAASkcGF0aJK3cGFsbGV0X25vbWluYXRpb25fcG9vbHOoQ29uZmlnT3CmcGFyYW1zkd4AAqRuYW1loVSkdHlwZQCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWWkTm9vcKZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lo1NldKZmaWVsZHOR3gAEpG5hbWXApHR5cGUAqHR5cGVOYW1loVSkZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWmUmVtb3ZlpmZpZWxkc5ClaW5kZXgCpGRvY3OQpGRvY3OQ3gAComlkzQGnpHR5cGXeAASkcGF0aJK3cGFsbGV0X25vbWluYXRpb25fcG9vbHOvQ2xhaW1QZXJtaXNzaW9upnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOU3gAEpG5hbWWsUGVybWlzc2lvbmVkpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWW2UGVybWlzc2lvbmxlc3NDb21wb3VuZKZmaWVsZHOQpWluZGV4AaRkb2NzkN4ABKRuYW1ltlBlcm1pc3Npb25sZXNzV2l0aGRyYXemZmllbGRzkKVpbmRleAKkZG9jc5DeAASkbmFtZbFQZXJtaXNzaW9ubGVzc0FsbKZmaWVsZHOQpWluZGV4A6Rkb2NzkKRkb2NzkN4AAqJpZM0BqKR0eXBl3gAEpHBhdGiTs3BhbGxldF9mYXN0X3Vuc3Rha2WmcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWW1cmVnaXN0ZXJfZmFzdF91bnN0YWtlpmZpZWxkc5ClaW5kZXgApGRvY3PcABLZIlJlZ2lzdGVyIG9uZXNlbGYgZm9yIGZhc3QtdW5zdGFrZS6g2VVUaGUgZGlzcGF0Y2ggb3JpZ2luIG9mIHRoaXMgY2FsbCBtdXN0IGJlIHNpZ25lZCBieSB0aGUgY29udHJvbGxlciBhY2NvdW50LCBzaW1pbGFyIHRvsmBzdGFraW5nOjp1bmJvbmRgLqDZTlRoZSBzdGFzaCBhc3NvY2lhdGVkIHdpdGggdGhlIG9yaWdpbiBtdXN0IGhhdmUgbm8gb25nb2luZyB1bmxvY2tpbmcgY2h1bmtzLiBJZtlXc3VjY2Vzc2Z1bCwgdGhpcyB3aWxsIGZ1bGx5IHVuYm9uZCBhbmQgY2hpbGwgdGhlIHN0YXNoLiBUaGVuLCBpdCB3aWxsIGVucXVldWUgdGhlIHN0YXNo2SB0byBiZSBjaGVja2VkIGluIGZ1cnRoZXIgYmxvY2tzLqDZVElmIGJ5IHRoZSB0aW1lIHRoaXMgaXMgY2FsbGVkLCB0aGUgc3Rhc2ggaXMgYWN0dWFsbHkgZWxpZ2libGUgZm9yIGZhc3QtdW5zdGFrZSwgdGhlbtlRdGhleSBhcmUgZ3VhcmFudGVlZCB0byByZW1haW4gZWxpZ2libGUsIGJlY2F1c2UgdGhlIGNhbGwgd2lsbCBjaGlsbCB0aGVtIGFzIHdlbGwuoNlPSWYgdGhlIGNoZWNrIHdvcmtzLCB0aGUgZW50aXJlIHN0YWtpbmcgZGF0YSBpcyByZW1vdmVkLCBpLmUuIHRoZSBzdGFzaCBpcyBmdWxseal1bnN0YWtlZC6g2VdJZiB0aGUgY2hlY2sgZmFpbHMsIHRoZSBzdGFzaCByZW1haW5zIGNoaWxsZWQgYW5kIHdhaXRpbmcgZm9yIGJlaW5nIHVuYm9uZGVkIGFzIGluIHdpdGjZWHRoZSBub3JtYWwgc3Rha2luZyBzeXN0ZW0sIGJ1dCB0aGV5IGxvc2UgcGFydCBvZiB0aGVpciB1bmJvbmRpbmcgY2h1bmtzIGR1ZSB0byBjb25zdW1pbme2dGhlIGNoYWluJ3MgcmVzb3VyY2VzLt4ABKRuYW1lqmRlcmVnaXN0ZXKmZmllbGRzkKVpbmRleAGkZG9jc5fZKURlcmVnaXN0ZXIgb25lc2VsZiBmcm9tIHRoZSBmYXN0LXVuc3Rha2UuoNlYVGhpcyBpcyB1c2VmdWwgaWYgb25lIGlzIHJlZ2lzdGVyZWQsIHRoZXkgYXJlIHN0aWxsIHdhaXRpbmcsIGFuZCB0aGV5IGNoYW5nZSB0aGVpciBtaW5kLqDZVk5vdGUgdGhhdCB0aGUgYXNzb2NpYXRlZCBzdGFzaCBpcyBzdGlsbCBmdWxseSB1bmJvbmRlZCBhbmQgY2hpbGxlZCBhcyBhIGNvbnNlcXVlbmNlIG9m2U5jYWxsaW5nIGByZWdpc3Rlcl9mYXN0X3Vuc3Rha2VgLiBUaGlzIHNob3VsZCBwcm9iYWJseSBiZSBmb2xsb3dlZCBieSBhIGNhbGwgdG+yYFN0YWtpbmc6OnJlYm9uZGAu3gAEpG5hbWWnY29udHJvbKZmaWVsZHOR3gAEpG5hbWWtZXJhc190b19jaGVja6R0eXBlBKh0eXBlTmFtZahFcmFJbmRleKRkb2NzkKVpbmRleAKkZG9jc5PZJUNvbnRyb2wgdGhlIG9wZXJhdGlvbiBvZiB0aGlzIHBhbGxldC6g2UBEaXNwYXRjaCBvcmlnaW4gbXVzdCBiZSBzaWduZWQgYnkgdGhlIFtgQ29uZmlnOjpDb250cm9sT3JpZ2luYF0upGRvY3OR2UlDb250YWlucyBvbmUgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIHRoYXQgY2FuIGJlIGNhbGxlZCBieSBhbiBleHRyaW5zaWMu3gAComlkzQGppHR5cGXeAASkcGF0aJS7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zrWNvbmZpZ3VyYXRpb26mcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHPcACzeAASkbmFtZb9zZXRfdmFsaWRhdGlvbl91cGdyYWRlX2Nvb2xkb3dupmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWuVDo6QmxvY2tOdW1iZXKkZG9jc5ClaW5kZXgApGRvY3OR2SRTZXQgdGhlIHZhbGlkYXRpb24gdXBncmFkZSBjb29sZG93bi7eAASkbmFtZbxzZXRfdmFsaWRhdGlvbl91cGdyYWRlX2RlbGF5pmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWuVDo6QmxvY2tOdW1iZXKkZG9jc5ClaW5kZXgBpGRvY3OR2SFTZXQgdGhlIHZhbGlkYXRpb24gdXBncmFkZSBkZWxheS7eAASkbmFtZblzZXRfY29kZV9yZXRlbnRpb25fcGVyaW9kpmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWuVDo6QmxvY2tOdW1iZXKkZG9jc5ClaW5kZXgCpGRvY3OR2TRTZXQgdGhlIGFjY2VwdGFuY2UgcGVyaW9kIGZvciBhbiBpbmNsdWRlZCBjYW5kaWRhdGUu3gAEpG5hbWWxc2V0X21heF9jb2RlX3NpemWmZmllbGRzkd4ABKRuYW1lo25ld6R0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXgDpGRvY3OR2TdTZXQgdGhlIG1heCB2YWxpZGF0aW9uIGNvZGUgc2l6ZSBmb3IgaW5jb21pbmcgdXBncmFkZXMu3gAEpG5hbWWwc2V0X21heF9wb3Zfc2l6ZaZmaWVsZHOR3gAEpG5hbWWjbmV3pHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleASkZG9jc5HZMVNldCB0aGUgbWF4IFBPViBibG9jayBzaXplIGZvciBpbmNvbWluZyB1cGdyYWRlcy7eAASkbmFtZbZzZXRfbWF4X2hlYWRfZGF0YV9zaXplpmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4BaRkb2NzkdklU2V0IHRoZSBtYXggaGVhZCBkYXRhIHNpemUgZm9yIHBhcmFzLt4ABKRuYW1ltHNldF9wYXJhdGhyZWFkX2NvcmVzpmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4BqRkb2NzkdktU2V0IHRoZSBudW1iZXIgb2YgcGFyYXRocmVhZCBleGVjdXRpb24gY29yZXMu3gAEpG5hbWW2c2V0X3BhcmF0aHJlYWRfcmV0cmllc6ZmaWVsZHOR3gAEpG5hbWWjbmV3pHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAekZG9jc5HZNlNldCB0aGUgbnVtYmVyIG9mIHJldHJpZXMgZm9yIGEgcGFydGljdWxhciBwYXJhdGhyZWFkLt4ABKRuYW1lvHNldF9ncm91cF9yb3RhdGlvbl9mcmVxdWVuY3mmZmllbGRzkd4ABKRuYW1lo25ld6R0eXBlBKh0eXBlTmFtZa5UOjpCbG9ja051bWJlcqRkb2NzkKVpbmRleAikZG9jc5HZNFNldCB0aGUgcGFyYWNoYWluIHZhbGlkYXRvci1ncm91cCByb3RhdGlvbiBmcmVxdWVuY3neAASkbmFtZb1zZXRfY2hhaW5fYXZhaWxhYmlsaXR5X3BlcmlvZKZmaWVsZHOR3gAEpG5hbWWjbmV3pHR5cGUEqHR5cGVOYW1lrlQ6OkJsb2NrTnVtYmVypGRvY3OQpWluZGV4CaRkb2NzkdkrU2V0IHRoZSBhdmFpbGFiaWxpdHkgcGVyaW9kIGZvciBwYXJhY2hhaW5zLt4ABKRuYW1lvnNldF90aHJlYWRfYXZhaWxhYmlsaXR5X3BlcmlvZKZmaWVsZHOR3gAEpG5hbWWjbmV3pHR5cGUEqHR5cGVOYW1lrlQ6OkJsb2NrTnVtYmVypGRvY3OQpWluZGV4CqRkb2NzkdksU2V0IHRoZSBhdmFpbGFiaWxpdHkgcGVyaW9kIGZvciBwYXJhdGhyZWFkcy7eAASkbmFtZbhzZXRfc2NoZWR1bGluZ19sb29rYWhlYWSmZmllbGRzkd4ABKRuYW1lo25ld6R0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXgLpGRvY3OR2U5TZXQgdGhlIHNjaGVkdWxpbmcgbG9va2FoZWFkLCBpbiBleHBlY3RlZCBudW1iZXIgb2YgYmxvY2tzIGF0IHBlYWsgdGhyb3VnaHB1dC7eAASkbmFtZbtzZXRfbWF4X3ZhbGlkYXRvcnNfcGVyX2NvcmWmZmllbGRzkd4ABKRuYW1lo25ld6R0eXBlzQEUqHR5cGVOYW1lq09wdGlvbjx1MzI+pGRvY3OQpWluZGV4DKRkb2Nzkdk7U2V0IHRoZSBtYXhpbXVtIG51bWJlciBvZiB2YWxpZGF0b3JzIHRvIGFzc2lnbiB0byBhbnkgY29yZS7eAASkbmFtZbJzZXRfbWF4X3ZhbGlkYXRvcnOmZmllbGRzkd4ABKRuYW1lo25ld6R0eXBlzQEUqHR5cGVOYW1lq09wdGlvbjx1MzI+pGRvY3OQpWluZGV4DaRkb2NzkdlDU2V0IHRoZSBtYXhpbXVtIG51bWJlciBvZiB2YWxpZGF0b3JzIHRvIHVzZSBpbiBwYXJhY2hhaW4gY29uc2Vuc3VzLt4ABKRuYW1lsnNldF9kaXNwdXRlX3BlcmlvZKZmaWVsZHOR3gAEpG5hbWWjbmV3pHR5cGUEqHR5cGVOYW1lrFNlc3Npb25JbmRleKRkb2NzkKVpbmRleA6kZG9jc5HZQ1NldCB0aGUgZGlzcHV0ZSBwZXJpb2QsIGluIG51bWJlciBvZiBzZXNzaW9ucyB0byBrZWVwIGZvciBkaXNwdXRlcy7eAASkbmFtZdktc2V0X2Rpc3B1dGVfcG9zdF9jb25jbHVzaW9uX2FjY2VwdGFuY2VfcGVyaW9kpmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWuVDo6QmxvY2tOdW1iZXKkZG9jc5ClaW5kZXgPpGRvY3OR2TJTZXQgdGhlIGRpc3B1dGUgcG9zdCBjb25jbHVzaW9uIGFjY2VwdGFuY2UgcGVyaW9kLt4ABKRuYW1l2SlzZXRfZGlzcHV0ZV9jb25jbHVzaW9uX2J5X3RpbWVfb3V0X3BlcmlvZKZmaWVsZHOR3gAEpG5hbWWjbmV3pHR5cGUEqHR5cGVOYW1lrlQ6OkJsb2NrTnVtYmVypGRvY3OQpWluZGV4EaRkb2NzkdkuU2V0IHRoZSBkaXNwdXRlIGNvbmNsdXNpb24gYnkgdGltZSBvdXQgcGVyaW9kLt4ABKRuYW1lsXNldF9ub19zaG93X3Nsb3RzpmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4EqRkb2Nzktk+U2V0IHRoZSBubyBzaG93IHNsb3RzLCBpbiBudW1iZXIgb2YgbnVtYmVyIG9mIGNvbnNlbnN1cyBzbG90cy6zTXVzdCBiZSBhdCBsZWFzdCAxLt4ABKRuYW1ltHNldF9uX2RlbGF5X3RyYW5jaGVzpmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4E6Rkb2NzkdknU2V0IHRoZSB0b3RhbCBudW1iZXIgb2YgZGVsYXkgdHJhbmNoZXMu3gAEpG5hbWW+c2V0X3plcm90aF9kZWxheV90cmFuY2hlX3dpZHRopmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4FKRkb2NzkdkjU2V0IHRoZSB6ZXJvdGggZGVsYXkgdHJhbmNoZSB3aWR0aC7eAASkbmFtZbRzZXRfbmVlZGVkX2FwcHJvdmFsc6ZmaWVsZHOR3gAEpG5hbWWjbmV3pHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleBWkZG9jc5HZN1NldCB0aGUgbnVtYmVyIG9mIHZhbGlkYXRvcnMgbmVlZGVkIHRvIGFwcHJvdmUgYSBibG9jay7eAASkbmFtZbxzZXRfcmVsYXlfdnJmX21vZHVsb19zYW1wbGVzpmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4FqRkb2NzkdlWU2V0IHRoZSBudW1iZXIgb2Ygc2FtcGxlcyB0byBkbyBvZiB0aGUgYFJlbGF5VlJGTW9kdWxvYCBhcHByb3ZhbCBhc3NpZ25tZW50IGNyaXRlcmlvbi7eAASkbmFtZbpzZXRfbWF4X3Vwd2FyZF9xdWV1ZV9jb3VudKZmaWVsZHOR3gAEpG5hbWWjbmV3pHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleBekZG9jc5HZS1NldHMgdGhlIG1heGltdW0gaXRlbXMgdGhhdCBjYW4gcHJlc2VudCBpbiBhIHVwd2FyZCBkaXNwYXRjaCBxdWV1ZSBhdCBvbmNlLt4ABKRuYW1luXNldF9tYXhfdXB3YXJkX3F1ZXVlX3NpemWmZmllbGRzkd4ABKRuYW1lo25ld6R0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXgYpGRvY3OR2VlTZXRzIHRoZSBtYXhpbXVtIHRvdGFsIHNpemUgb2YgaXRlbXMgdGhhdCBjYW4gcHJlc2VudCBpbiBhIHVwd2FyZCBkaXNwYXRjaCBxdWV1ZSBhdCBvbmNlLt4ABKRuYW1lvXNldF9tYXhfZG93bndhcmRfbWVzc2FnZV9zaXplpmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4GaRkb2NzkdknU2V0IHRoZSBjcml0aWNhbCBkb3dud2FyZCBtZXNzYWdlIHNpemUu3gAEpG5hbWW8c2V0X3VtcF9zZXJ2aWNlX3RvdGFsX3dlaWdodKZmaWVsZHOR3gAEpG5hbWWjbmV3pHR5cGUIqHR5cGVOYW1lpldlaWdodKRkb2NzkKVpbmRleBqkZG9jc5HZTlNldHMgdGhlIHNvZnQgbGltaXQgZm9yIHRoZSBwaGFzZSBvZiBkaXNwYXRjaGluZyBkaXNwYXRjaGFibGUgdXB3YXJkIG1lc3NhZ2VzLt4ABKRuYW1lu3NldF9tYXhfdXB3YXJkX21lc3NhZ2Vfc2l6ZaZmaWVsZHOR3gAEpG5hbWWjbmV3pHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleBukZG9jc5HZS1NldHMgdGhlIG1heGltdW0gc2l6ZSBvZiBhbiB1cHdhcmQgbWVzc2FnZSB0aGF0IGNhbiBiZSBzZW50IGJ5IGEgY2FuZGlkYXRlLt4ABKRuYW1l2ShzZXRfbWF4X3Vwd2FyZF9tZXNzYWdlX251bV9wZXJfY2FuZGlkYXRlpmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4HKRkb2NzkdlBU2V0cyB0aGUgbWF4aW11bSBudW1iZXIgb2YgbWVzc2FnZXMgdGhhdCBhIGNhbmRpZGF0ZSBjYW4gY29udGFpbi7eAASkbmFtZblzZXRfaHJtcF9vcGVuX3JlcXVlc3RfdHRspmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4HaRkb2NzkdlNU2V0cyB0aGUgbnVtYmVyIG9mIHNlc3Npb25zIGFmdGVyIHdoaWNoIGFuIEhSTVAgb3BlbiBjaGFubmVsIHJlcXVlc3QgZXhwaXJlcy7eAASkbmFtZbdzZXRfaHJtcF9zZW5kZXJfZGVwb3NpdKZmaWVsZHOR3gAEpG5hbWWjbmV3pHR5cGUGqHR5cGVOYW1lp0JhbGFuY2WkZG9jc5ClaW5kZXgepGRvY3OR2VRTZXRzIHRoZSBhbW91bnQgb2YgZnVuZHMgdGhhdCB0aGUgc2VuZGVyIHNob3VsZCBwcm92aWRlIGZvciBvcGVuaW5nIGFuIEhSTVAgY2hhbm5lbC7eAASkbmFtZbpzZXRfaHJtcF9yZWNpcGllbnRfZGVwb3NpdKZmaWVsZHOR3gAEpG5hbWWjbmV3pHR5cGUGqHR5cGVOYW1lp0JhbGFuY2WkZG9jc5ClaW5kZXgfpGRvY3OS2VhTZXRzIHRoZSBhbW91bnQgb2YgZnVuZHMgdGhhdCB0aGUgcmVjaXBpZW50IHNob3VsZCBwcm92aWRlIGZvciBhY2NlcHRpbmcgb3BlbmluZyBhbiBIUk1QqGNoYW5uZWwu3gAEpG5hbWW9c2V0X2hybXBfY2hhbm5lbF9tYXhfY2FwYWNpdHmmZmllbGRzkd4ABKRuYW1lo25ld6R0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXggpGRvY3OR2UdTZXRzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBtZXNzYWdlcyBhbGxvd2VkIGluIGFuIEhSTVAgY2hhbm5lbCBhdCBvbmNlLt4ABKRuYW1lv3NldF9ocm1wX2NoYW5uZWxfbWF4X3RvdGFsX3NpemWmZmllbGRzkd4ABKRuYW1lo25ld6R0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXghpGRvY3OR2VRTZXRzIHRoZSBtYXhpbXVtIHRvdGFsIHNpemUgb2YgbWVzc2FnZXMgaW4gYnl0ZXMgYWxsb3dlZCBpbiBhbiBIUk1QIGNoYW5uZWwgYXQgb25jZS7eAASkbmFtZdknc2V0X2hybXBfbWF4X3BhcmFjaGFpbl9pbmJvdW5kX2NoYW5uZWxzpmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4IqRkb2NzkdlSU2V0cyB0aGUgbWF4aW11bSBudW1iZXIgb2YgaW5ib3VuZCBIUk1QIGNoYW5uZWxzIGEgcGFyYWNoYWluIGlzIGFsbG93ZWQgdG8gYWNjZXB0Lt4ABKRuYW1l2ShzZXRfaHJtcF9tYXhfcGFyYXRocmVhZF9pbmJvdW5kX2NoYW5uZWxzpmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4I6Rkb2NzkdlTU2V0cyB0aGUgbWF4aW11bSBudW1iZXIgb2YgaW5ib3VuZCBIUk1QIGNoYW5uZWxzIGEgcGFyYXRocmVhZCBpcyBhbGxvd2VkIHRvIGFjY2VwdC7eAASkbmFtZdkhc2V0X2hybXBfY2hhbm5lbF9tYXhfbWVzc2FnZV9zaXplpmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4JKRkb2NzkdlPU2V0cyB0aGUgbWF4aW11bSBzaXplIG9mIGEgbWVzc2FnZSB0aGF0IGNvdWxkIGV2ZXIgYmUgcHV0IGludG8gYW4gSFJNUCBjaGFubmVsLt4ABKRuYW1l2ShzZXRfaHJtcF9tYXhfcGFyYWNoYWluX291dGJvdW5kX2NoYW5uZWxzpmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4JaRkb2NzkdlRU2V0cyB0aGUgbWF4aW11bSBudW1iZXIgb2Ygb3V0Ym91bmQgSFJNUCBjaGFubmVscyBhIHBhcmFjaGFpbiBpcyBhbGxvd2VkIHRvIG9wZW4u3gAEpG5hbWXZKXNldF9ocm1wX21heF9wYXJhdGhyZWFkX291dGJvdW5kX2NoYW5uZWxzpmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4JqRkb2NzkdlSU2V0cyB0aGUgbWF4aW11bSBudW1iZXIgb2Ygb3V0Ym91bmQgSFJNUCBjaGFubmVscyBhIHBhcmF0aHJlYWQgaXMgYWxsb3dlZCB0byBvcGVuLt4ABKRuYW1l2SZzZXRfaHJtcF9tYXhfbWVzc2FnZV9udW1fcGVyX2NhbmRpZGF0ZaZmaWVsZHOR3gAEpG5hbWWjbmV3pHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleCekZG9jc5HZTVNldHMgdGhlIG1heGltdW0gbnVtYmVyIG9mIG91dGJvdW5kIEhSTVAgbWVzc2FnZXMgY2FuIGJlIHNlbnQgYnkgYSBjYW5kaWRhdGUu3gAEpG5hbWW9c2V0X3VtcF9tYXhfaW5kaXZpZHVhbF93ZWlnaHSmZmllbGRzkd4ABKRuYW1lo25ld6R0eXBlCKh0eXBlTmFtZaZXZWlnaHSkZG9jc5ClaW5kZXgopGRvY3OR2UxTZXRzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB3ZWlnaHQgYW55IGluZGl2aWR1YWwgdXB3YXJkIG1lc3NhZ2UgbWF5IGNvbnN1bWUu3gAEpG5hbWW4c2V0X3B2Zl9jaGVja2luZ19lbmFibGVkpmZpZWxkc5HeAASkbmFtZaNuZXekdHlwZSWodHlwZU5hbWWkYm9vbKRkb2NzkKVpbmRleCmkZG9jc5HZVEVuYWJsZSBvciBkaXNhYmxlIFBWRiBwcmUtY2hlY2tpbmcuIENvbnN1bHQgdGhlIGZpZWxkIGRvY3VtZW50YXRpb24gcHJpb3IgZXhlY3V0aW5nLt4ABKRuYW1lsnNldF9wdmZfdm90aW5nX3R0bKZmaWVsZHOR3gAEpG5hbWWjbmV3pHR5cGUEqHR5cGVOYW1lrFNlc3Npb25JbmRleKRkb2NzkKVpbmRleCqkZG9jc5HZVFNldCB0aGUgbnVtYmVyIG9mIHNlc3Npb24gY2hhbmdlcyBhZnRlciB3aGljaCBhIFBWRiBwcmUtY2hlY2tpbmcgdm90aW5nIGlzIHJlamVjdGVkLt4ABKRuYW1l2SRzZXRfbWluaW11bV92YWxpZGF0aW9uX3VwZ3JhZGVfZGVsYXmmZmllbGRzkd4ABKRuYW1lo25ld6R0eXBlBKh0eXBlTmFtZa5UOjpCbG9ja051bWJlcqRkb2NzkKVpbmRleCukZG9jc5TZVVNldHMgdGhlIG1pbmltdW0gZGVsYXkgYmV0d2VlbiBhbm5vdW5jaW5nIHRoZSB1cGdyYWRlIGJsb2NrIGZvciBhIHBhcmFjaGFpbiB1bnRpbCB0aGW1dXBncmFkZSB0YWtpbmcgcGxhY2UuoNlOU2VlIHRoZSBmaWVsZCBkb2N1bWVudGF0aW9uIGZvciBpbmZvcm1hdGlvbiBhbmQgY29uc3RyYWludHMgZm9yIHRoZSBuZXcgdmFsdWUu3gAEpG5hbWW8c2V0X2J5cGFzc19jb25zaXN0ZW5jeV9jaGVja6ZmaWVsZHOR3gAEpG5hbWWjbmV3pHR5cGUlqHR5cGVOYW1lpGJvb2ykZG9jc5ClaW5kZXgspGRvY3OS2VNTZXR0aW5nIHRoaXMgdG8gdHJ1ZSB3aWxsIGRpc2FibGUgY29uc2lzdGVuY3kgY2hlY2tzIGZvciB0aGUgY29uZmlndXJhdGlvbiBzZXR0ZXJzLrFVc2Ugd2l0aCBjYXV0aW9uLqRkb2NzkdlJQ29udGFpbnMgb25lIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSB0aGF0IGNhbiBiZSBjYWxsZWQgYnkgYW4gZXh0cmluc2ljLt4AAqJpZM0BqqR0eXBl3gAEpHBhdGiUu3BvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc6ZzaGFyZWSmcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOQpGRvY3OR2UlDb250YWlucyBvbmUgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIHRoYXQgY2FuIGJlIGNhbGxlZCBieSBhbiBleHRyaW5zaWMu3gAComlkzQGrpHR5cGXeAASkcGF0aJS7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zqWluY2x1c2lvbqZwYWxsZXSkQ2FsbKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5CkZG9jc5HZSUNvbnRhaW5zIG9uZSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgdGhhdCBjYW4gYmUgY2FsbGVkIGJ5IGFuIGV4dHJpbnNpYy7eAAKiaWTNAaykdHlwZd4ABKRwYXRolLtwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOucGFyYXNfaW5oZXJlbnSmcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOR3gAEpG5hbWWlZW50ZXKmZmllbGRzkd4ABKRuYW1lpGRhdGGkdHlwZc0Brah0eXBlTmFtZdkhUGFyYWNoYWluc0luaGVyZW50RGF0YTxUOjpIZWFkZXI+pGRvY3OQpWluZGV4AKRkb2NzkdlMRW50ZXIgdGhlIHBhcmFzIGluaGVyZW50LiBUaGlzIHdpbGwgcHJvY2VzcyBiaXRmaWVsZHMgYW5kIGJhY2tlZCBjYW5kaWRhdGVzLqRkb2NzkdlJQ29udGFpbnMgb25lIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSB0aGF0IGNhbiBiZSBjYWxsZWQgYnkgYW4gZXh0cmluc2ljLt4AAqJpZM0BraR0eXBl3gAEpHBhdGiTs3BvbGthZG90X3ByaW1pdGl2ZXOidjKsSW5oZXJlbnREYXRhpnBhcmFtc5HeAAKkbmFtZaNIRFKkdHlwZczPo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzlN4ABKRuYW1lqWJpdGZpZWxkc6R0eXBlzQGuqHR5cGVOYW1l2SRVbmNoZWNrZWRTaWduZWRBdmFpbGFiaWxpdHlCaXRmaWVsZHOkZG9jc5DeAASkbmFtZbFiYWNrZWRfY2FuZGlkYXRlc6R0eXBlzQG1qHR5cGVOYW1lv1ZlYzxCYWNrZWRDYW5kaWRhdGU8SERSOjpIYXNoPj6kZG9jc5DeAASkbmFtZahkaXNwdXRlc6R0eXBlzQHBqHR5cGVOYW1luE11bHRpRGlzcHV0ZVN0YXRlbWVudFNldKRkb2NzkN4ABKRuYW1lrXBhcmVudF9oZWFkZXKkdHlwZczPqHR5cGVOYW1lo0hEUqRkb2NzkKRkb2NzkN4AAqJpZM0BrqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAa+kZG9jc5DeAAKiaWTNAa+kdHlwZd4ABKRwYXRolLNwb2xrYWRvdF9wcmltaXRpdmVzonYypnNpZ25lZK9VbmNoZWNrZWRTaWduZWSmcGFyYW1zkt4AAqRuYW1lp1BheWxvYWSkdHlwZc0BsN4AAqRuYW1lq1JlYWxQYXlsb2FkpHR5cGXNAbCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOT3gAEpG5hbWWncGF5bG9hZKR0eXBlzQGwqHR5cGVOYW1lp1BheWxvYWSkZG9jc5DeAASkbmFtZa92YWxpZGF0b3JfaW5kZXikdHlwZc0Bs6h0eXBlTmFtZa5WYWxpZGF0b3JJbmRleKRkb2NzkN4ABKRuYW1lqXNpZ25hdHVyZaR0eXBlzQG0qHR5cGVOYW1lslZhbGlkYXRvclNpZ25hdHVyZaRkb2NzkKRkb2NzkN4AAqJpZM0BsKR0eXBl3gAEpHBhdGiTs3BvbGthZG90X3ByaW1pdGl2ZXOidjK0QXZhaWxhYmlsaXR5Qml0ZmllbGSmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0Bsah0eXBlTmFtZb9CaXRWZWM8dTgsIGJpdHZlYzo6b3JkZXI6OkxzYjA+pGRvY3OQpGRvY3OQ3gAComlkzQGxpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGrYml0U2VxdWVuY2XeAAKsYml0U3RvcmVUeXBlAqxiaXRPcmRlclR5cGXNAbKkZG9jc5DeAAKiaWTNAbKkdHlwZd4ABKRwYXRok6ZiaXR2ZWOlb3JkZXKkTHNiMKZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkKRkb2NzkN4AAqJpZM0Bs6R0eXBl3gAEpHBhdGiTs3BvbGthZG90X3ByaW1pdGl2ZXOidjKuVmFsaWRhdG9ySW5kZXimcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpGRvY3OQ3gAComlkzQG0pHR5cGXeAASkcGF0aJSzcG9sa2Fkb3RfcHJpbWl0aXZlc6J2Mq12YWxpZGF0b3JfYXBwqVNpZ25hdHVyZaZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzFyodHlwZU5hbWWyc3IyNTUxOTo6U2lnbmF0dXJlpGRvY3OQpGRvY3OQ3gAComlkzQG1pHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZc0BtqRkb2NzkN4AAqJpZM0BtqR0eXBl3gAEpHBhdGiTs3BvbGthZG90X3ByaW1pdGl2ZXOidjKvQmFja2VkQ2FuZGlkYXRlpnBhcmFtc5HeAAKkbmFtZaFIpHR5cGULo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzk94ABKRuYW1lqWNhbmRpZGF0ZaR0eXBlzQG3qHR5cGVOYW1lvENvbW1pdHRlZENhbmRpZGF0ZVJlY2VpcHQ8SD6kZG9jc5DeAASkbmFtZa52YWxpZGl0eV92b3Rlc6R0eXBlzQG/qHR5cGVOYW1luFZlYzxWYWxpZGl0eUF0dGVzdGF0aW9uPqRkb2NzkN4ABKRuYW1lsXZhbGlkYXRvcl9pbmRpY2VzpHR5cGXNAbGodHlwZU5hbWW/Qml0VmVjPHU4LCBiaXR2ZWM6Om9yZGVyOjpMc2IwPqRkb2NzkKRkb2NzkN4AAqJpZM0Bt6R0eXBl3gAEpHBhdGiTs3BvbGthZG90X3ByaW1pdGl2ZXOidjK5Q29tbWl0dGVkQ2FuZGlkYXRlUmVjZWlwdKZwYXJhbXOR3gACpG5hbWWhSKR0eXBlC6NkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5LeAASkbmFtZapkZXNjcmlwdG9ypHR5cGXMWKh0eXBlTmFtZbZDYW5kaWRhdGVEZXNjcmlwdG9yPEg+pGRvY3OQ3gAEpG5hbWWrY29tbWl0bWVudHOkdHlwZc0BuKh0eXBlTmFtZbRDYW5kaWRhdGVDb21taXRtZW50c6Rkb2NzkKRkb2NzkN4AAqJpZM0BuKR0eXBl3gAEpHBhdGiTs3BvbGthZG90X3ByaW1pdGl2ZXOidjK0Q2FuZGlkYXRlQ29tbWl0bWVudHOmcGFyYW1zkd4AAqRuYW1loU6kdHlwZQSjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOW3gAEpG5hbWWvdXB3YXJkX21lc3NhZ2VzpHR5cGXNAbmodHlwZU5hbWWuVXB3YXJkTWVzc2FnZXOkZG9jc5DeAASkbmFtZbNob3Jpem9udGFsX21lc3NhZ2VzpHR5cGXNAbqodHlwZU5hbWWySG9yaXpvbnRhbE1lc3NhZ2VzpGRvY3OQ3gAEpG5hbWWzbmV3X3ZhbGlkYXRpb25fY29kZaR0eXBlzQG9qHR5cGVOYW1ltk9wdGlvbjxWYWxpZGF0aW9uQ29kZT6kZG9jc5DeAASkbmFtZaloZWFkX2RhdGGkdHlwZcxfqHR5cGVOYW1lqEhlYWREYXRhpGRvY3OQ3gAEpG5hbWW7cHJvY2Vzc2VkX2Rvd253YXJkX21lc3NhZ2VzpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lrmhybXBfd2F0ZXJtYXJrpHR5cGUEqHR5cGVOYW1loU6kZG9jc5CkZG9jc5DeAAKiaWTNAbmkdHlwZd4ABKRwYXRok7Nib3VuZGVkX2NvbGxlY3Rpb25zq2JvdW5kZWRfdmVjqkJvdW5kZWRWZWOmcGFyYW1zkt4AAqRuYW1loVSkdHlwZQzeAAKkbmFtZaFTpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzK2odHlwZU5hbWWmVmVjPFQ+pGRvY3OQpGRvY3OQ3gAComlkzQG6pHR5cGXeAASkcGF0aJOzYm91bmRlZF9jb2xsZWN0aW9uc6tib3VuZGVkX3ZlY6pCb3VuZGVkVmVjpnBhcmFtc5LeAAKkbmFtZaFUpHR5cGXNAbveAAKkbmFtZaFTpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQG8qHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZM0Bu6R0eXBl3gAEpHBhdGiSuHBvbGthZG90X2NvcmVfcHJpbWl0aXZlc7NPdXRib3VuZEhybXBNZXNzYWdlpnBhcmFtc5HeAAKkbmFtZaJJZKR0eXBlzFmjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOS3gAEpG5hbWWpcmVjaXBpZW50pHR5cGXMWah0eXBlTmFtZaJJZKRkb2NzkN4ABKRuYW1lpGRhdGGkdHlwZQyodHlwZU5hbWW0c3Bfc3RkOjp2ZWM6OlZlYzx1OD6kZG9jc5CkZG9jc5DeAAKiaWTNAbykdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQG7pGRvY3OQ3gAComlkzQG9pHR5cGXeAASkcGF0aJGmT3B0aW9upnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXNAb6jZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWkTm9uZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lpFNvbWWmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQG+qHR5cGVOYW1lwKRkb2NzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTNAb6kdHlwZd4ABKRwYXRok7Jwb2xrYWRvdF9wYXJhY2hhaW6qcHJpbWl0aXZlc65WYWxpZGF0aW9uQ29kZaZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlDKh0eXBlTmFtZadWZWM8dTg+pGRvY3OQpGRvY3OQ3gAComlkzQG/pHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZc0BwKRkb2NzkN4AAqJpZM0BwKR0eXBl3gAEpHBhdGiTs3BvbGthZG90X3ByaW1pdGl2ZXOidjKzVmFsaWRpdHlBdHRlc3RhdGlvbqZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lqEltcGxpY2l0pmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BtKh0eXBlTmFtZbJWYWxpZGF0b3JTaWduYXR1cmWkZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWoRXhwbGljaXSmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQG0qHR5cGVOYW1lslZhbGlkYXRvclNpZ25hdHVyZaRkb2NzkKVpbmRleAKkZG9jc5CkZG9jc5DeAAKiaWTNAcGkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQHCpGRvY3OQ3gAComlkzQHCpHR5cGXeAASkcGF0aJOzcG9sa2Fkb3RfcHJpbWl0aXZlc6J2MrNEaXNwdXRlU3RhdGVtZW50U2V0pnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOT3gAEpG5hbWWuY2FuZGlkYXRlX2hhc2ikdHlwZcxpqHR5cGVOYW1lrUNhbmRpZGF0ZUhhc2ikZG9jc5DeAASkbmFtZadzZXNzaW9upHR5cGUEqHR5cGVOYW1lrFNlc3Npb25JbmRleKRkb2NzkN4ABKRuYW1lqnN0YXRlbWVudHOkdHlwZc0Bw6h0eXBlTmFtZdk7VmVjPChEaXNwdXRlU3RhdGVtZW50LCBWYWxpZGF0b3JJbmRleCwgVmFsaWRhdG9yU2lnbmF0dXJlKT6kZG9jc5CkZG9jc5DeAAKiaWTNAcOkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQHEpGRvY3OQ3gAComlkzQHEpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWTzQHFzQGzzQG0pGRvY3OQ3gAComlkzQHFpHR5cGXeAASkcGF0aJOzcG9sa2Fkb3RfcHJpbWl0aXZlc6J2MrBEaXNwdXRlU3RhdGVtZW50pnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWlVmFsaWSmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQHGqHR5cGVOYW1luVZhbGlkRGlzcHV0ZVN0YXRlbWVudEtpbmSkZG9jc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWnSW52YWxpZKZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAceodHlwZU5hbWW7SW52YWxpZERpc3B1dGVTdGF0ZW1lbnRLaW5kpGRvY3OQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZM0BxqR0eXBl3gAEpHBhdGiTs3BvbGthZG90X3ByaW1pdGl2ZXOidjK5VmFsaWREaXNwdXRlU3RhdGVtZW50S2luZKZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzlN4ABKRuYW1lqEV4cGxpY2l0pmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWvQmFja2luZ1NlY29uZGVkpmZpZWxkc5HeAASkbmFtZcCkdHlwZQuodHlwZU5hbWWkSGFzaKRkb2NzkKVpbmRleAGkZG9jc5DeAASkbmFtZaxCYWNraW5nVmFsaWSmZmllbGRzkd4ABKRuYW1lwKR0eXBlC6h0eXBlTmFtZaRIYXNopGRvY3OQpWluZGV4AqRkb2NzkN4ABKRuYW1lsEFwcHJvdmFsQ2hlY2tpbmemZmllbGRzkKVpbmRleAOkZG9jc5CkZG9jc5DeAAKiaWTNAcekdHlwZd4ABKRwYXRok7Nwb2xrYWRvdF9wcmltaXRpdmVzonYyu0ludmFsaWREaXNwdXRlU3RhdGVtZW50S2luZKZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkd4ABKRuYW1lqEV4cGxpY2l0pmZpZWxkc5ClaW5kZXgApGRvY3OQpGRvY3OQ3gAComlkzQHIpHR5cGXeAASkcGF0aJS7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zpXBhcmFzpnBhbGxldKRDYWxspnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzmN4ABKRuYW1ltmZvcmNlX3NldF9jdXJyZW50X2NvZGWmZmllbGRzkt4ABKRuYW1lpHBhcmGkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lqG5ld19jb2RlpHR5cGXNAb6odHlwZU5hbWWuVmFsaWRhdGlvbkNvZGWkZG9jc5ClaW5kZXgApGRvY3OR2T5TZXQgdGhlIHN0b3JhZ2UgZm9yIHRoZSBwYXJhY2hhaW4gdmFsaWRhdGlvbiBjb2RlIGltbWVkaWF0ZWx5Lt4ABKRuYW1ltmZvcmNlX3NldF9jdXJyZW50X2hlYWSmZmllbGRzkt4ABKRuYW1lpHBhcmGkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lqG5ld19oZWFkpHR5cGXMX6h0eXBlTmFtZahIZWFkRGF0YaRkb2NzkKVpbmRleAGkZG9jc5HZQFNldCB0aGUgc3RvcmFnZSBmb3IgdGhlIGN1cnJlbnQgcGFyYWNoYWluIGhlYWQgZGF0YSBpbW1lZGlhdGVseS7eAASkbmFtZbtmb3JjZV9zY2hlZHVsZV9jb2RlX3VwZ3JhZGWmZmllbGRzk94ABKRuYW1lpHBhcmGkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lqG5ld19jb2RlpHR5cGXNAb6odHlwZU5hbWWuVmFsaWRhdGlvbkNvZGWkZG9jc5DeAASkbmFtZbNyZWxheV9wYXJlbnRfbnVtYmVypHR5cGUEqHR5cGVOYW1lrlQ6OkJsb2NrTnVtYmVypGRvY3OQpWluZGV4AqRkb2NzkdlLU2NoZWR1bGUgYW4gdXBncmFkZSBhcyBpZiBpdCB3YXMgc2NoZWR1bGVkIGluIHRoZSBnaXZlbiByZWxheSBwYXJlbnQgYmxvY2su3gAEpG5hbWWzZm9yY2Vfbm90ZV9uZXdfaGVhZKZmaWVsZHOS3gAEpG5hbWWkcGFyYaR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQ3gAEpG5hbWWobmV3X2hlYWSkdHlwZcxfqHR5cGVOYW1lqEhlYWREYXRhpGRvY3OQpWluZGV4A6Rkb2NzkdlHTm90ZSBhIG5ldyBibG9jayBoZWFkIGZvciBwYXJhIHdpdGhpbiB0aGUgY29udGV4dCBvZiB0aGUgY3VycmVudCBibG9jay7eAASkbmFtZbJmb3JjZV9xdWV1ZV9hY3Rpb26mZmllbGRzkd4ABKRuYW1lpHBhcmGkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkKVpbmRleASkZG9jc5PZPlB1dCBhIHBhcmFjaGFpbiBkaXJlY3RseSBpbnRvIHRoZSBuZXh0IHNlc3Npb24ncyBhY3Rpb24gcXVldWUu2T1XZSBjYW4ndCBxdWV1ZSBpdCBhbnkgc29vbmVyIHRoYW4gdGhpcyB3aXRob3V0IGdvaW5nIGludG8gdGhlrmluaXRpYWxpemVyLi4u3gAEpG5hbWW7YWRkX3RydXN0ZWRfdmFsaWRhdGlvbl9jb2RlpmZpZWxkc5HeAASkbmFtZa92YWxpZGF0aW9uX2NvZGWkdHlwZc0Bvqh0eXBlTmFtZa5WYWxpZGF0aW9uQ29kZaRkb2NzkKVpbmRleAWkZG9jc53ZKEFkZHMgdGhlIHZhbGlkYXRpb24gY29kZSB0byB0aGUgc3RvcmFnZS6g2VZUaGUgY29kZSB3aWxsIG5vdCBiZSBhZGRlZCBpZiBpdCBpcyBhbHJlYWR5IHByZXNlbnQuIEFkZGl0aW9uYWxseSwgaWYgUFZGIHByZS1jaGVja2luZ9k4aXMgcnVubmluZyBmb3IgdGhhdCBjb2RlLCBpdCB3aWxsIGJlIGluc3RhbnRseSBhY2NlcHRlZC6g2VRPdGhlcndpc2UsIHRoZSBjb2RlIHdpbGwgYmUgYWRkZWQgaW50byB0aGUgc3RvcmFnZS4gTm90ZSB0aGF0IHRoZSBjb2RlIHdpbGwgYmUgYWRkZWTZWGludG8gc3RvcmFnZSB3aXRoIHJlZmVyZW5jZSBjb3VudCAwLiBUaGlzIGlzIHRvIGFjY291bnQgdGhlIGZhY3QgdGhhdCB0aGVyZSBhcmUgbm8gdXNlcnPZU2ZvciB0aGlzIGNvZGUgeWV0LiBUaGUgY2FsbGVyIHdpbGwgaGF2ZSB0byBtYWtlIHN1cmUgdGhhdCB0aGlzIGNvZGUgZXZlbnR1YWxseSBnZXRz2Vl1c2VkIGJ5IHNvbWUgcGFyYWNoYWluIG9yIHJlbW92ZWQgZnJvbSB0aGUgc3RvcmFnZSB0byBhdm9pZCBzdG9yYWdlIGxlYWtzLiBGb3IgdGhlIGxhdHRlctlZcHJlZmVyIHRvIHVzZSB0aGUgYHBva2VfdW51c2VkX3ZhbGlkYXRpb25fY29kZWAgZGlzcGF0Y2hhYmxlIHRvIHJhdyBzdG9yYWdlIG1hbmlwdWxhdGlvbi6g2VRUaGlzIGZ1bmN0aW9uIGlzIG1haW5seSBtZWFudCB0byBiZSB1c2VkIGZvciB1cGdyYWRpbmcgcGFyYWNoYWlucyB0aGF0IGRvIG5vdCBmb2xsb3fZQnRoZSBnby1haGVhZCBzaWduYWwgd2hpbGUgdGhlIFBWRiBwcmUtY2hlY2tpbmcgZmVhdHVyZSBpcyBlbmFibGVkLt4ABKRuYW1lu3Bva2VfdW51c2VkX3ZhbGlkYXRpb25fY29kZaZmaWVsZHOR3gAEpG5hbWW0dmFsaWRhdGlvbl9jb2RlX2hhc2ikdHlwZcxeqHR5cGVOYW1lslZhbGlkYXRpb25Db2RlSGFzaKRkb2NzkKVpbmRleAakZG9jc5XZSVJlbW92ZSB0aGUgdmFsaWRhdGlvbiBjb2RlIGZyb20gdGhlIHN0b3JhZ2UgaWZmIHRoZSByZWZlcmVuY2UgY291bnQgaXMgMC6g2VZUaGlzIGlzIGJldHRlciB0aGFuIHJlbW92aW5nIHRoZSBzdG9yYWdlIGRpcmVjdGx5LCBiZWNhdXNlIGl0IHdpbGwgbm90IHJlbW92ZSB0aGUgY29kZdlQdGhhdCB3YXMgc3VkZGVubHkgZ290IHVzZWQgYnkgc29tZSBwYXJhY2hhaW4gd2hpbGUgdGhpcyBkaXNwYXRjaGFibGUgd2FzIHBlbmRpbmesZGlzcGF0Y2hpbmcu3gAEpG5hbWW7aW5jbHVkZV9wdmZfY2hlY2tfc3RhdGVtZW50pmZpZWxkc5LeAASkbmFtZaRzdG10pHR5cGXNAcmodHlwZU5hbWWxUHZmQ2hlY2tTdGF0ZW1lbnSkZG9jc5DeAASkbmFtZalzaWduYXR1cmWkdHlwZc0BtKh0eXBlTmFtZbJWYWxpZGF0b3JTaWduYXR1cmWkZG9jc5ClaW5kZXgHpGRvY3OS2VVJbmNsdWRlcyBhIHN0YXRlbWVudCBmb3IgYSBQVkYgcHJlLWNoZWNraW5nIHZvdGUuIFBvdGVudGlhbGx5LCBmaW5hbGl6ZXMgdGhlIHZvdGUgYW5k2VBlbmFjdHMgdGhlIHJlc3VsdHMgaWYgdGhhdCB3YXMgdGhlIGxhc3Qgdm90ZSBiZWZvcmUgYWNoaWV2aW5nIHRoZSBzdXBlcm1ham9yaXR5LqRkb2NzkdlJQ29udGFpbnMgb25lIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSB0aGF0IGNhbiBiZSBjYWxsZWQgYnkgYW4gZXh0cmluc2ljLt4AAqJpZM0ByaR0eXBl3gAEpHBhdGiTs3BvbGthZG90X3ByaW1pdGl2ZXOidjKxUHZmQ2hlY2tTdGF0ZW1lbnSmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5TeAASkbmFtZaZhY2NlcHSkdHlwZSWodHlwZU5hbWWkYm9vbKRkb2NzkN4ABKRuYW1lp3N1YmplY3SkdHlwZcxeqHR5cGVOYW1lslZhbGlkYXRpb25Db2RlSGFzaKRkb2NzkN4ABKRuYW1lrXNlc3Npb25faW5kZXikdHlwZQSodHlwZU5hbWWsU2Vzc2lvbkluZGV4pGRvY3OQ3gAEpG5hbWWvdmFsaWRhdG9yX2luZGV4pHR5cGXNAbOodHlwZU5hbWWuVmFsaWRhdG9ySW5kZXikZG9jc5CkZG9jc5DeAAKiaWTNAcqkdHlwZd4ABKRwYXRolLtwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOraW5pdGlhbGl6ZXKmcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOR3gAEpG5hbWWtZm9yY2VfYXBwcm92ZaZmaWVsZHOR3gAEpG5hbWWldXBfdG+kdHlwZQSodHlwZU5hbWWrQmxvY2tOdW1iZXKkZG9jc5ClaW5kZXgApGRvY3OT2U5Jc3N1ZSBhIHNpZ25hbCB0byB0aGUgY29uc2Vuc3VzIGVuZ2luZSB0byBmb3JjaWJseSBhY3QgYXMgdGhvdWdoIGFsbCBwYXJhY2hhaW7ZVGJsb2NrcyBpbiBhbGwgcmVsYXkgY2hhaW4gYmxvY2tzIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIGdpdmVuIG51bWJlciBpbiB0aGUgY3VycmVudNkoY2hhaW4gYXJlIHZhbGlkIGFuZCBzaG91bGQgYmUgZmluYWxpemVkLqRkb2NzkdlJQ29udGFpbnMgb25lIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSB0aGF0IGNhbiBiZSBjYWxsZWQgYnkgYW4gZXh0cmluc2ljLt4AAqJpZM0By6R0eXBl3gAEpHBhdGiUu3BvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc6NkbXCmcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOQpGRvY3OR2UlDb250YWlucyBvbmUgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIHRoYXQgY2FuIGJlIGNhbGxlZCBieSBhbiBleHRyaW5zaWMu3gAComlkzQHMpHR5cGXeAASkcGF0aJS7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zo3VtcKZwYWxsZXSkQ2FsbKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5HeAASkbmFtZbJzZXJ2aWNlX292ZXJ3ZWlnaHSmZmllbGRzkt4ABKRuYW1lpWluZGV4pHR5cGUKqHR5cGVOYW1lr092ZXJ3ZWlnaHRJbmRleKRkb2NzkN4ABKRuYW1lrHdlaWdodF9saW1pdKR0eXBlCKh0eXBlTmFtZaZXZWlnaHSkZG9jc5ClaW5kZXgApGRvY3Oc2StTZXJ2aWNlIGEgc2luZ2xlIG92ZXJ3ZWlnaHQgdXB3YXJkIG1lc3NhZ2UuoNkwLSBgb3JpZ2luYDogTXVzdCBwYXNzIGBFeGVjdXRlT3ZlcndlaWdodE9yaWdpbmAu2TotIGBpbmRleGA6IFRoZSBpbmRleCBvZiB0aGUgb3ZlcndlaWdodCBtZXNzYWdlIHRvIHNlcnZpY2Uu2UctIGB3ZWlnaHRfbGltaXRgOiBUaGUgYW1vdW50IG9mIHdlaWdodCB0aGF0IG1lc3NhZ2UgZXhlY3V0aW9uIG1heSB0YWtlLqCnRXJyb3JzOtk3LSBgVW5rbm93bk1lc3NhZ2VJbmRleGA6IE1lc3NhZ2Ugb2YgYGluZGV4YCBpcyB1bmtub3duLtlLLSBgV2VpZ2h0T3ZlckxpbWl0YDogTWVzc2FnZSBleGVjdXRpb24gbWF5IHVzZSBncmVhdGVyIHRoYW4gYHdlaWdodF9saW1pdGAuoKdFdmVudHM62SMtIGBPdmVyd2VpZ2h0U2VydmljZWRgOiBPbiBzdWNjZXNzLqRkb2NzkdlJQ29udGFpbnMgb25lIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSB0aGF0IGNhbiBiZSBjYWxsZWQgYnkgYW4gZXh0cmluc2ljLt4AAqJpZM0BzaR0eXBl3gAEpHBhdGiUu3BvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc6Rocm1wpnBhbGxldKRDYWxspnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzmN4ABKRuYW1ltmhybXBfaW5pdF9vcGVuX2NoYW5uZWymZmllbGRzk94ABKRuYW1lqXJlY2lwaWVudKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQ3gAEpG5hbWW1cHJvcG9zZWRfbWF4X2NhcGFjaXR5pHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1luXByb3Bvc2VkX21heF9tZXNzYWdlX3NpemWkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4AKRkb2NzmtlTSW5pdGlhdGUgb3BlbmluZyBhIGNoYW5uZWwgZnJvbSBhIHBhcmFjaGFpbiB0byBhIGdpdmVuIHJlY2lwaWVudCB3aXRoIGdpdmVuIGNoYW5uZWyrcGFyYW1ldGVycy6g2VYtIGBwcm9wb3NlZF9tYXhfY2FwYWNpdHlgIC0gc3BlY2lmaWVzIGhvdyBtYW55IG1lc3NhZ2VzIGNhbiBiZSBpbiB0aGUgY2hhbm5lbCBhdCBvbmNlLtlLLSBgcHJvcG9zZWRfbWF4X21lc3NhZ2Vfc2l6ZWAgLSBzcGVjaWZpZXMgdGhlIG1heGltdW0gc2l6ZSBvZiB0aGUgbWVzc2FnZXMuoNlEVGhlc2UgbnVtYmVycyBhcmUgYSBzdWJqZWN0IHRvIHRoZSByZWxheS1jaGFpbiBjb25maWd1cmF0aW9uIGxpbWl0cy6g2VRUaGUgY2hhbm5lbCBjYW4gYmUgb3BlbmVkIG9ubHkgYWZ0ZXIgdGhlIHJlY2lwaWVudCBjb25maXJtcyBpdCBhbmQgb25seSBvbiBhIHNlc3Npb26nY2hhbmdlLt4ABKRuYW1luGhybXBfYWNjZXB0X29wZW5fY2hhbm5lbKZmaWVsZHOR3gAEpG5hbWWmc2VuZGVypHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5ClaW5kZXgBpGRvY3OT2TxBY2NlcHQgYSBwZW5kaW5nIG9wZW4gY2hhbm5lbCByZXF1ZXN0IGZyb20gdGhlIGdpdmVuIHNlbmRlci6g2T1UaGUgY2hhbm5lbCB3aWxsIGJlIG9wZW5lZCBvbmx5IG9uIHRoZSBuZXh0IHNlc3Npb24gYm91bmRhcnku3gAEpG5hbWWyaHJtcF9jbG9zZV9jaGFubmVspmZpZWxkc5HeAASkbmFtZapjaGFubmVsX2lkpHR5cGXMZ6h0eXBlTmFtZa1Icm1wQ2hhbm5lbElkpGRvY3OQpWluZGV4AqRkb2NzlNlVSW5pdGlhdGUgdW5pbGF0ZXJhbCBjbG9zaW5nIG9mIGEgY2hhbm5lbC4gVGhlIG9yaWdpbiBtdXN0IGJlIGVpdGhlciB0aGUgc2VuZGVyIG9yIHRoZdkmcmVjaXBpZW50IGluIHRoZSBjaGFubmVsIGJlaW5nIGNsb3NlZC6g2TBUaGUgY2xvc3VyZSBjYW4gb25seSBoYXBwZW4gb24gYSBzZXNzaW9uIGNoYW5nZS7eAASkbmFtZbBmb3JjZV9jbGVhbl9ocm1wpmZpZWxkc5PeAASkbmFtZaRwYXJhpHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5DeAASkbmFtZadpbmJvdW5kpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lqG91dGJvdW5kpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAOkZG9jc5fZRlRoaXMgZXh0cmluc2ljIHRyaWdnZXJzIHRoZSBjbGVhbnVwIG9mIGFsbCB0aGUgSFJNUCBzdG9yYWdlIGl0ZW1zIHRoYXTZSGEgcGFyYSBtYXkgaGF2ZS4gTm9ybWFsbHkgdGhpcyBoYXBwZW5zIG9uY2UgcGVyIHNlc3Npb24sIGJ1dCB0aGlzIGFsbG93c9lAeW91IHRvIHRyaWdnZXIgdGhlIGNsZWFudXAgaW1tZWRpYXRlbHkgZm9yIGEgc3BlY2lmaWMgcGFyYWNoYWluLqC0T3JpZ2luIG11c3QgYmUgUm9vdC6g2WBOdW1iZXIgb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmQgY2hhbm5lbHMgZm9yIGBwYXJhYCBtdXN0IGJlIHByb3ZpZGVkIGFzIHdpdG5lc3MgZGF0YSBvZiB3ZWlnaGluZy7eAASkbmFtZbdmb3JjZV9wcm9jZXNzX2hybXBfb3BlbqZmaWVsZHOR3gAEpG5hbWWoY2hhbm5lbHOkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4BKRkb2NzltkpRm9yY2UgcHJvY2VzcyBIUk1QIG9wZW4gY2hhbm5lbCByZXF1ZXN0cy6g2UFJZiB0aGVyZSBhcmUgcGVuZGluZyBIUk1QIG9wZW4gY2hhbm5lbCByZXF1ZXN0cywgeW91IGNhbiB1c2UgdGhpc9kzZnVuY3Rpb24gcHJvY2VzcyBhbGwgb2YgdGhvc2UgcmVxdWVzdHMgaW1tZWRpYXRlbHkuoNlOVG90YWwgbnVtYmVyIG9mIG9wZW5pbmcgY2hhbm5lbHMgbXVzdCBiZSBwcm92aWRlZCBhcyB3aXRuZXNzIGRhdGEgb2Ygd2VpZ2hpbmcu3gAEpG5hbWW4Zm9yY2VfcHJvY2Vzc19ocm1wX2Nsb3NlpmZpZWxkc5HeAASkbmFtZahjaGFubmVsc6R0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXgFpGRvY3OW2SpGb3JjZSBwcm9jZXNzIEhSTVAgY2xvc2UgY2hhbm5lbCByZXF1ZXN0cy6g2UJJZiB0aGVyZSBhcmUgcGVuZGluZyBIUk1QIGNsb3NlIGNoYW5uZWwgcmVxdWVzdHMsIHlvdSBjYW4gdXNlIHRoaXPZM2Z1bmN0aW9uIHByb2Nlc3MgYWxsIG9mIHRob3NlIHJlcXVlc3RzIGltbWVkaWF0ZWx5LqDZTlRvdGFsIG51bWJlciBvZiBjbG9zaW5nIGNoYW5uZWxzIG11c3QgYmUgcHJvdmlkZWQgYXMgd2l0bmVzcyBkYXRhIG9mIHdlaWdoaW5nLt4ABKRuYW1luGhybXBfY2FuY2VsX29wZW5fcmVxdWVzdKZmaWVsZHOS3gAEpG5hbWWqY2hhbm5lbF9pZKR0eXBlzGeodHlwZU5hbWWtSHJtcENoYW5uZWxJZKRkb2NzkN4ABKRuYW1lrW9wZW5fcmVxdWVzdHOkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4BqRkb2NzmNlXVGhpcyBjYW5jZWxzIGEgcGVuZGluZyBvcGVuIGNoYW5uZWwgcmVxdWVzdC4gSXQgY2FuIGJlIGNhbmNlbGVkIGJ5IGVpdGhlciBvZiB0aGUgc2VuZGVy2UZvciB0aGUgcmVjaXBpZW50IGZvciB0aGF0IHJlcXVlc3QuIFRoZSBvcmlnaW4gbXVzdCBiZSBlaXRoZXIgb2YgdGhvc2UuoNlXVGhlIGNhbmNlbGxhdGlvbiBoYXBwZW5zIGltbWVkaWF0ZWx5LiBJdCBpcyBub3QgcG9zc2libGUgdG8gY2FuY2VsIHRoZSByZXF1ZXN0IGlmIGl0IGlzsWFscmVhZHkgYWNjZXB0ZWQuoNlWVG90YWwgbnVtYmVyIG9mIG9wZW4gcmVxdWVzdHMgKGkuZS4gYEhybXBPcGVuQ2hhbm5lbFJlcXVlc3RzTGlzdGApIG11c3QgYmUgcHJvdmlkZWQgYXOtd2l0bmVzcyBkYXRhLt4ABKRuYW1lt2ZvcmNlX29wZW5faHJtcF9jaGFubmVspmZpZWxkc5TeAASkbmFtZaZzZW5kZXKkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lqXJlY2lwaWVudKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQ3gAEpG5hbWWsbWF4X2NhcGFjaXR5pHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lsG1heF9tZXNzYWdlX3NpemWkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4B6Rkb2NzltlYT3BlbiBhIGNoYW5uZWwgZnJvbSBhIGBzZW5kZXJgIHRvIGEgYHJlY2lwaWVudGAgYFBhcmFJZGAgdXNpbmcgdGhlIFJvb3Qgb3JpZ2luLiBBbHRob3VnaNlYb3BlbmVkIGJ5IFJvb3QsIHRoZSBgbWF4X2NhcGFjaXR5YCBhbmQgYG1heF9tZXNzYWdlX3NpemVgIGFyZSBzdGlsbCBzdWJqZWN0IHRvIHRoZSBSZWxhebpDaGFpbidzIGNvbmZpZ3VyZWQgbGltaXRzLqDZVEV4cGVjdGVkIHVzZSBpcyB3aGVuIG9uZSBvZiB0aGUgYFBhcmFJZGBzIGludm9sdmVkIGluIHRoZSBjaGFubmVsIGlzIGdvdmVybmVkIGJ5IHRoZdkqUmVsYXkgQ2hhaW4sIGUuZy4gYSBjb21tb24gZ29vZCBwYXJhY2hhaW4upGRvY3OR2UlDb250YWlucyBvbmUgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIHRoYXQgY2FuIGJlIGNhbGxlZCBieSBhbiBleHRyaW5zaWMu3gAComlkzQHOpHR5cGXeAASkcGF0aJS7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zqGRpc3B1dGVzpnBhbGxldKRDYWxspnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkd4ABKRuYW1lrmZvcmNlX3VuZnJlZXplpmZpZWxkc5ClaW5kZXgApGRvY3OQpGRvY3OR2UlDb250YWlucyBvbmUgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIHRoYXQgY2FuIGJlIGNhbGxlZCBieSBhbiBleHRyaW5zaWMu3gAComlkzQHPpHR5cGXeAASkcGF0aJW7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zqGRpc3B1dGVzqHNsYXNoaW5npnBhbGxldKRDYWxspnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkd4ABKRuYW1lvHJlcG9ydF9kaXNwdXRlX2xvc3RfdW5zaWduZWSmZmllbGRzkt4ABKRuYW1lrWRpc3B1dGVfcHJvb2akdHlwZc0B0Kh0eXBlTmFtZbFCb3g8RGlzcHV0ZVByb29mPqRkb2NzkN4ABKRuYW1lr2tleV9vd25lcl9wcm9vZqR0eXBlzNGodHlwZU5hbWWwVDo6S2V5T3duZXJQcm9vZqRkb2NzkKVpbmRleACkZG9jc5CkZG9jc5HZSUNvbnRhaW5zIG9uZSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgdGhhdCBjYW4gYmUgY2FsbGVkIGJ5IGFuIGV4dHJpbnNpYy7eAAKiaWTNAdCkdHlwZd4ABKRwYXRolLtwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOoZGlzcHV0ZXOoc2xhc2hpbmesRGlzcHV0ZVByb29mpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOU3gAEpG5hbWWpdGltZV9zbG90pHR5cGXNAdGodHlwZU5hbWWwRGlzcHV0ZXNUaW1lU2xvdKRkb2NzkN4ABKRuYW1lpGtpbmSkdHlwZc0B0qh0eXBlTmFtZbNTbGFzaGluZ09mZmVuY2VLaW5kpGRvY3OQ3gAEpG5hbWWvdmFsaWRhdG9yX2luZGV4pHR5cGXNAbOodHlwZU5hbWWuVmFsaWRhdG9ySW5kZXikZG9jc5DeAASkbmFtZax2YWxpZGF0b3JfaWSkdHlwZc0BCqh0eXBlTmFtZatWYWxpZGF0b3JJZKRkb2NzkKRkb2NzkN4AAqJpZM0B0aR0eXBl3gAEpHBhdGiUu3BvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc6hkaXNwdXRlc6hzbGFzaGluZ7BEaXNwdXRlc1RpbWVTbG90pnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOS3gAEpG5hbWWtc2Vzc2lvbl9pbmRleKR0eXBlBKh0eXBlTmFtZaxTZXNzaW9uSW5kZXikZG9jc5DeAASkbmFtZa5jYW5kaWRhdGVfaGFzaKR0eXBlzGmodHlwZU5hbWWtQ2FuZGlkYXRlSGFzaKRkb2NzkKRkb2NzkN4AAqJpZM0B0qR0eXBl3gAEpHBhdGiUu3BvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc6hkaXNwdXRlc6hzbGFzaGluZ7NTbGFzaGluZ09mZmVuY2VLaW5kpnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWqRm9ySW52YWxpZKZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lrEFnYWluc3RWYWxpZKZmaWVsZHOQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZM0B06R0eXBl3gAEpHBhdGiUt3BvbGthZG90X3J1bnRpbWVfY29tbW9ur3BhcmFzX3JlZ2lzdHJhcqZwYWxsZXSkQ2FsbKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5neAASkbmFtZahyZWdpc3RlcqZmaWVsZHOT3gAEpG5hbWWiaWSkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lrGdlbmVzaXNfaGVhZKR0eXBlzF+odHlwZU5hbWWoSGVhZERhdGGkZG9jc5DeAASkbmFtZa92YWxpZGF0aW9uX2NvZGWkdHlwZc0Bvqh0eXBlTmFtZa5WYWxpZGF0aW9uQ29kZaRkb2NzkKVpbmRleACkZG9jc57ZPlJlZ2lzdGVyIGhlYWQgZGF0YSBhbmQgdmFsaWRhdGlvbiBjb2RlIGZvciBhIHJlc2VydmVkIFBhcmEgSWQuoKwjIyBBcmd1bWVudHPZMC0gYG9yaWdpbmA6IE11c3QgYmUgY2FsbGVkIGJ5IGEgYFNpZ25lZGAgb3JpZ2luLtlLLSBgaWRgOiBUaGUgcGFyYSBJRC4gTXVzdCBiZSBvd25lZC9tYW5hZ2VkIGJ5IHRoZSBgb3JpZ2luYCBzaWduaW5nIGFjY291bnQu2UAtIGBnZW5lc2lzX2hlYWRgOiBUaGUgZ2VuZXNpcyBoZWFkIGRhdGEgb2YgdGhlIHBhcmFjaGFpbi90aHJlYWQu2UktIGB2YWxpZGF0aW9uX2NvZGVgOiBUaGUgaW5pdGlhbCB2YWxpZGF0aW9uIGNvZGUgb2YgdGhlIHBhcmFjaGFpbi90aHJlYWQuoLAjIyBEZXBvc2l0cy9GZWVz2WVUaGUgb3JpZ2luIHNpZ25lZCBhY2NvdW50IG11c3QgcmVzZXJ2ZSBhIGNvcnJlc3BvbmRpbmcgZGVwb3NpdCBmb3IgdGhlIHJlZ2lzdHJhdGlvbi4gQW55dGhpbmcgYWxyZWFkedk2cmVzZXJ2ZWQgcHJldmlvdXNseSBmb3IgdGhpcyBwYXJhIElEIGlzIGFjY291bnRlZCBmb3IuoKkjIyBFdmVudHPZNVRoZSBgUmVnaXN0ZXJlZGAgZXZlbnQgaXMgZW1pdHRlZCBpbiBjYXNlIG9mIHN1Y2Nlc3Mu3gAEpG5hbWWuZm9yY2VfcmVnaXN0ZXKmZmllbGRzld4ABKRuYW1lo3dob6R0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZadkZXBvc2l0pHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkN4ABKRuYW1lomlkpHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5DeAASkbmFtZaxnZW5lc2lzX2hlYWSkdHlwZcxfqHR5cGVOYW1lqEhlYWREYXRhpGRvY3OQ3gAEpG5hbWWvdmFsaWRhdGlvbl9jb2RlpHR5cGXNAb6odHlwZU5hbWWuVmFsaWRhdGlvbkNvZGWkZG9jc5ClaW5kZXgBpGRvY3OW2TdGb3JjZSB0aGUgcmVnaXN0cmF0aW9uIG9mIGEgUGFyYSBJZCBvbiB0aGUgcmVsYXkgY2hhaW4uoNkuVGhpcyBmdW5jdGlvbiBtdXN0IGJlIGNhbGxlZCBieSBhIFJvb3Qgb3JpZ2luLqDZRlRoZSBkZXBvc2l0IHRha2VuIGNhbiBiZSBzcGVjaWZpZWQgZm9yIHRoaXMgcmVnaXN0cmF0aW9uLiBBbnkgYFBhcmFJZGDZRmNhbiBiZSByZWdpc3RlcmVkLCBpbmNsdWRpbmcgc3ViLTEwMDAgSURzIHdoaWNoIGFyZSBTeXN0ZW0gUGFyYWNoYWlucy7eAASkbmFtZapkZXJlZ2lzdGVypmZpZWxkc5HeAASkbmFtZaJpZKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQpWluZGV4AqRkb2Nzk9lBRGVyZWdpc3RlciBhIFBhcmEgSWQsIGZyZWVpbmcgYWxsIGRhdGEgYW5kIHJldHVybmluZyBhbnkgZGVwb3NpdC6g2V9UaGUgY2FsbGVyIG11c3QgYmUgUm9vdCwgdGhlIGBwYXJhYCBvd25lciwgb3IgdGhlIGBwYXJhYCBpdHNlbGYuIFRoZSBwYXJhIG11c3QgYmUgYSBwYXJhdGhyZWFkLt4ABKRuYW1lpHN3YXCmZmllbGRzkt4ABKRuYW1lomlkpHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5DeAASkbmFtZaVvdGhlcqR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQpWluZGV4A6Rkb2Nzm9k2U3dhcCBhIHBhcmFjaGFpbiB3aXRoIGFub3RoZXIgcGFyYWNoYWluIG9yIHBhcmF0aHJlYWQuoNlAVGhlIG9yaWdpbiBtdXN0IGJlIFJvb3QsIHRoZSBgcGFyYWAgb3duZXIsIG9yIHRoZSBgcGFyYWAgaXRzZWxmLqDZWFRoZSBzd2FwIHdpbGwgaGFwcGVuIG9ubHkgaWYgdGhlcmUgaXMgYWxyZWFkeSBhbiBvcHBvc2l0ZSBzd2FwIHBlbmRpbmcuIElmIHRoZXJlIGlzIG5vdCzZVnRoZSBzd2FwIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBwZW5kaW5nIHN3YXBzIG1hcCwgcmVhZHkgZm9yIGEgbGF0ZXIgY29uZmlybWF0b3J5IHN3YXAuoNlXVGhlIGBQYXJhSWRgcyByZW1haW4gbWFwcGVkIHRvIHRoZSBzYW1lIGhlYWQgZGF0YSBhbmQgY29kZSBzbyBleHRlcm5hbCBjb2RlIGNhbiByZWx5IG9u2U9gUGFyYUlkYCB0byBiZSBhIGxvbmctdGVybSBpZGVudGlmaWVyIG9mIGEgbm90aW9uYWwgInBhcmFjaGFpbiIuIEhvd2V2ZXIsIHRoZWly2VVzY2hlZHVsaW5nIGluZm8gKGkuZS4gd2hldGhlciB0aGV5J3JlIGEgcGFyYXRocmVhZCBvciBwYXJhY2hhaW4pLCBhdWN0aW9uIGluZm9ybWF0aW9u2SVhbmQgdGhlIGF1Y3Rpb24gZGVwb3NpdCBhcmUgc3dpdGNoZWQu3gAEpG5hbWWrcmVtb3ZlX2xvY2umZmllbGRzkd4ABKRuYW1lpHBhcmGkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkKVpbmRleASkZG9jc5TZQ1JlbW92ZSBhIG1hbmFnZXIgbG9jayBmcm9tIGEgcGFyYS4gVGhpcyB3aWxsIGFsbG93IHRoZSBtYW5hZ2VyIG9mIGHZTXByZXZpb3VzbHkgbG9ja2VkIHBhcmEgdG8gZGVyZWdpc3RlciBvciBzd2FwIGEgcGFyYSB3aXRob3V0IHVzaW5nIGdvdmVybmFuY2UuoNk3Q2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBSb290IG9yaWdpbiBvciB0aGUgcGFyYWNoYWluLt4ABKRuYW1lp3Jlc2VydmWmZmllbGRzkKVpbmRleAWkZG9jc57ZJVJlc2VydmUgYSBQYXJhIElkIG9uIHRoZSByZWxheSBjaGFpbi6g2VNUaGlzIGZ1bmN0aW9uIHdpbGwgcmVzZXJ2ZSBhIG5ldyBQYXJhIElkIHRvIGJlIG93bmVkL21hbmFnZWQgYnkgdGhlIG9yaWdpbiBhY2NvdW50LtlfVGhlIG9yaWdpbiBhY2NvdW50IGlzIGFibGUgdG8gcmVnaXN0ZXIgaGVhZCBkYXRhIGFuZCB2YWxpZGF0aW9uIGNvZGUgdXNpbmcgYHJlZ2lzdGVyYCB0byBjcmVhdGXZYGEgcGFyYXRocmVhZC4gVXNpbmcgdGhlIFNsb3RzIHBhbGxldCwgYSBwYXJhdGhyZWFkIGNhbiB0aGVuIGJlIHVwZ3JhZGVkIHRvIGdldCBhIHBhcmFjaGFpbiBzbG90LqCsIyMgQXJndW1lbnRz2V4tIGBvcmlnaW5gOiBNdXN0IGJlIGNhbGxlZCBieSBhIGBTaWduZWRgIG9yaWdpbi4gQmVjb21lcyB0aGUgbWFuYWdlci9vd25lciBvZiB0aGUgbmV3IHBhcmEgSUQuoLAjIyBEZXBvc2l0cy9GZWVz2UhUaGUgb3JpZ2luIG11c3QgcmVzZXJ2ZSBhIGRlcG9zaXQgb2YgYFBhcmFEZXBvc2l0YCBmb3IgdGhlIHJlZ2lzdHJhdGlvbi6gqSMjIEV2ZW50c9lbVGhlIGBSZXNlcnZlZGAgZXZlbnQgaXMgZW1pdHRlZCBpbiBjYXNlIG9mIHN1Y2Nlc3MsIHdoaWNoIHByb3ZpZGVzIHRoZSBJRCByZXNlcnZlZCBmb3IgdXNlLt4ABKRuYW1lqGFkZF9sb2NrpmZpZWxkc5HeAASkbmFtZaRwYXJhpHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5ClaW5kZXgGpGRvY3OU2UJBZGQgYSBtYW5hZ2VyIGxvY2sgZnJvbSBhIHBhcmEuIFRoaXMgd2lsbCBwcmV2ZW50IHRoZSBtYW5hZ2VyIG9mIGHZInBhcmEgdG8gZGVyZWdpc3RlciBvciBzd2FwIGEgcGFyYS6g2VxDYW4gYmUgY2FsbGVkIGJ5IFJvb3QsIHRoZSBwYXJhY2hhaW4sIG9yIHRoZSBwYXJhY2hhaW4gbWFuYWdlciBpZiB0aGUgcGFyYWNoYWluIGlzIHVubG9ja2VkLt4ABKRuYW1ltXNjaGVkdWxlX2NvZGVfdXBncmFkZaZmaWVsZHOS3gAEpG5hbWWkcGFyYaR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQ3gAEpG5hbWWobmV3X2NvZGWkdHlwZc0Bvqh0eXBlTmFtZa5WYWxpZGF0aW9uQ29kZaRkb2NzkKVpbmRleAekZG9jc5O9U2NoZWR1bGUgYSBwYXJhY2hhaW4gdXBncmFkZS6g2VxDYW4gYmUgY2FsbGVkIGJ5IFJvb3QsIHRoZSBwYXJhY2hhaW4sIG9yIHRoZSBwYXJhY2hhaW4gbWFuYWdlciBpZiB0aGUgcGFyYWNoYWluIGlzIHVubG9ja2VkLt4ABKRuYW1lsHNldF9jdXJyZW50X2hlYWSmZmllbGRzkt4ABKRuYW1lpHBhcmGkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lqG5ld19oZWFkpHR5cGXMX6h0eXBlTmFtZahIZWFkRGF0YaRkb2NzkKVpbmRleAikZG9jc5PZIVNldCB0aGUgcGFyYWNoYWluJ3MgY3VycmVudCBoZWFkLqDZXENhbiBiZSBjYWxsZWQgYnkgUm9vdCwgdGhlIHBhcmFjaGFpbiwgb3IgdGhlIHBhcmFjaGFpbiBtYW5hZ2VyIGlmIHRoZSBwYXJhY2hhaW4gaXMgdW5sb2NrZWQupGRvY3OR2UlDb250YWlucyBvbmUgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIHRoYXQgY2FuIGJlIGNhbGxlZCBieSBhbiBleHRyaW5zaWMu3gAComlkzQHUpHR5cGXeAASkcGF0aJS3cG9sa2Fkb3RfcnVudGltZV9jb21tb26lc2xvdHOmcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWWrZm9yY2VfbGVhc2WmZmllbGRzld4ABKRuYW1lpHBhcmGkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lpmxlYXNlcqR0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaZhbW91bnSkdHlwZQaodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQ3gAEpG5hbWWscGVyaW9kX2JlZ2lupHR5cGUEqHR5cGVOYW1lsExlYXNlUGVyaW9kT2Y8VD6kZG9jc5DeAASkbmFtZaxwZXJpb2RfY291bnSkdHlwZQSodHlwZU5hbWWwTGVhc2VQZXJpb2RPZjxUPqRkb2NzkKVpbmRleACkZG9jc5TZWkp1c3QgYSBjb25uZWN0IGludG8gdGhlIGBsZWFzZV9vdXRgIGNhbGwsIGluIGNhc2UgUm9vdCB3YW50cyB0byBmb3JjZSBzb21lIGxlYXNlIHRvIGhhcHBlbtk4aW5kZXBlbmRlbnRseSBvZiBhbnkgb3RoZXIgb24tY2hhaW4gbWVjaGFuaXNtIHRvIHVzZSBpdC6g2T5UaGUgZGlzcGF0Y2ggb3JpZ2luIGZvciB0aGlzIGNhbGwgbXVzdCBtYXRjaCBgVDo6Rm9yY2VPcmlnaW5gLt4ABKRuYW1lsGNsZWFyX2FsbF9sZWFzZXOmZmllbGRzkd4ABKRuYW1lpHBhcmGkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkKVpbmRleAGkZG9jc5PZU0NsZWFyIGFsbCBsZWFzZXMgZm9yIGEgUGFyYSBJZCwgcmVmdW5kaW5nIGFueSBkZXBvc2l0cyBiYWNrIHRvIHRoZSBvcmlnaW5hbCBvd25lcnMuoNk+VGhlIGRpc3BhdGNoIG9yaWdpbiBmb3IgdGhpcyBjYWxsIG11c3QgbWF0Y2ggYFQ6OkZvcmNlT3JpZ2luYC7eAASkbmFtZa90cmlnZ2VyX29uYm9hcmSmZmllbGRzkd4ABKRuYW1lpHBhcmGkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkKVpbmRleAKkZG9jc5fZSVRyeSB0byBvbmJvYXJkIGEgcGFyYWNoYWluIHRoYXQgaGFzIGEgbGVhc2UgZm9yIHRoZSBjdXJyZW50IGxlYXNlIHBlcmlvZC6g2VFUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VmdWwgaWYgdGhlcmUgd2FzIHNvbWUgc3RhdGUgaXNzdWUgd2l0aCBhIHBhcmEgdGhhdCBzaG91bGTZTmhhdmUgb25ib2FyZGVkLCBidXQgd2FzIHVuYWJsZSB0by4gQXMgbG9uZyBhcyB0aGV5IGhhdmUgYSBsZWFzZSBwZXJpb2QsIHdlIGNhbrtsZXQgdGhlbSBvbmJvYXJkIGZyb20gaGVyZS6g2TNPcmlnaW4gbXVzdCBiZSBzaWduZWQsIGJ1dCBjYW4gYmUgY2FsbGVkIGJ5IGFueW9uZS6kZG9jc5HZSUNvbnRhaW5zIG9uZSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgdGhhdCBjYW4gYmUgY2FsbGVkIGJ5IGFuIGV4dHJpbnNpYy7eAAKiaWTNAdWkdHlwZd4ABKRwYXRolLdwb2xrYWRvdF9ydW50aW1lX2NvbW1vbrJwYXJhc19zdWRvX3dyYXBwZXKmcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOW3gAEpG5hbWW9c3Vkb19zY2hlZHVsZV9wYXJhX2luaXRpYWxpemWmZmllbGRzkt4ABKRuYW1lomlkpHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5DeAASkbmFtZadnZW5lc2lzpHR5cGXNAdaodHlwZU5hbWWvUGFyYUdlbmVzaXNBcmdzpGRvY3OQpWluZGV4AKRkb2NzkdlDU2NoZWR1bGUgYSBwYXJhIHRvIGJlIGluaXRpYWxpemVkIGF0IHRoZSBzdGFydCBvZiB0aGUgbmV4dCBzZXNzaW9uLt4ABKRuYW1lunN1ZG9fc2NoZWR1bGVfcGFyYV9jbGVhbnVwpmZpZWxkc5HeAASkbmFtZaJpZKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQpWluZGV4AaRkb2NzkdlCU2NoZWR1bGUgYSBwYXJhIHRvIGJlIGNsZWFuZWQgdXAgYXQgdGhlIHN0YXJ0IG9mIHRoZSBuZXh0IHNlc3Npb24u3gAEpG5hbWXZIHN1ZG9fc2NoZWR1bGVfcGFyYXRocmVhZF91cGdyYWRlpmZpZWxkc5HeAASkbmFtZaJpZKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQpWluZGV4AqRkb2NzkdkjVXBncmFkZSBhIHBhcmF0aHJlYWQgdG8gYSBwYXJhY2hhaW7eAASkbmFtZdkhc3Vkb19zY2hlZHVsZV9wYXJhY2hhaW5fZG93bmdyYWRlpmZpZWxkc5HeAASkbmFtZaJpZKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQpWluZGV4A6Rkb2NzkdklRG93bmdyYWRlIGEgcGFyYWNoYWluIHRvIGEgcGFyYXRocmVhZN4ABKRuYW1lt3N1ZG9fcXVldWVfZG93bndhcmRfeGNtpmZpZWxkc5LeAASkbmFtZaJpZKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQ3gAEpG5hbWWjeGNtpHR5cGXNAdeodHlwZU5hbWW+Qm94PHhjbTo6b3BhcXVlOjpWZXJzaW9uZWRYY20+pGRvY3OQpWluZGV4BKRkb2NzlNkmU2VuZCBhIGRvd253YXJkIFhDTSB0byB0aGUgZ2l2ZW4gcGFyYS6g2VlUaGUgZ2l2ZW4gcGFyYWNoYWluIHNob3VsZCBleGlzdCBhbmQgdGhlIHBheWxvYWQgc2hvdWxkIG5vdCBleGNlZWQgdGhlIHByZWNvbmZpZ3VyZWQgc2l6ZdkjYGNvbmZpZy5tYXhfZG93bndhcmRfbWVzc2FnZV9zaXplYC7eAASkbmFtZbtzdWRvX2VzdGFibGlzaF9ocm1wX2NoYW5uZWymZmllbGRzlN4ABKRuYW1lpnNlbmRlcqR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQ3gAEpG5hbWWpcmVjaXBpZW50pHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5DeAASkbmFtZaxtYXhfY2FwYWNpdHmkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWWwbWF4X21lc3NhZ2Vfc2l6ZaR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXgFpGRvY3OU2UBGb3JjZWZ1bGx5IGVzdGFibGlzaCBhIGNoYW5uZWwgZnJvbSB0aGUgc2VuZGVyIHRvIHRoZSByZWNpcGllbnQuoNlVVGhpcyBpcyBlcXVpdmFsZW50IHRvIHNlbmRpbmcgYW4gYEhybXA6OmhybXBfaW5pdF9vcGVuX2NoYW5uZWxgIGV4dHJpbnNpYyBmb2xsb3dlZCBiedkhYEhybXA6OmhybXBfYWNjZXB0X29wZW5fY2hhbm5lbGAupGRvY3OR2UlDb250YWlucyBvbmUgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIHRoYXQgY2FuIGJlIGNhbGxlZCBieSBhbiBleHRyaW5zaWMu3gAComlkzQHWpHR5cGXeAASkcGF0aJO7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zpXBhcmFzr1BhcmFHZW5lc2lzQXJnc6ZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzk94ABKRuYW1lrGdlbmVzaXNfaGVhZKR0eXBlzF+odHlwZU5hbWWoSGVhZERhdGGkZG9jc5DeAASkbmFtZa92YWxpZGF0aW9uX2NvZGWkdHlwZc0Bvqh0eXBlTmFtZa5WYWxpZGF0aW9uQ29kZaRkb2NzkN4ABKRuYW1lqXBhcmFfa2luZKR0eXBlJah0eXBlTmFtZahQYXJhS2luZKRkb2NzkKRkb2NzkN4AAqJpZM0B16R0eXBl3gAEpHBhdGiSo3hjbaxWZXJzaW9uZWRYY22mcGFyYW1zkd4AAqRuYW1lq1J1bnRpbWVDYWxspHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lolYypmZpZWxkc5HeAASkbmFtZcCkdHlwZc0B2Kh0eXBlTmFtZbR2Mjo6WGNtPFJ1bnRpbWVDYWxsPqRkb2NzkKVpbmRleAKkZG9jc5DeAASkbmFtZaJWM6ZmaWVsZHOR3gAEpG5hbWXApHR5cGXMe6h0eXBlTmFtZbR2Mzo6WGNtPFJ1bnRpbWVDYWxsPqRkb2NzkKVpbmRleAOkZG9jc5CkZG9jc5DeAAKiaWTNAdikdHlwZd4ABKRwYXRok6N4Y22idjKjWGNtpnBhcmFtc5HeAAKkbmFtZatSdW50aW1lQ2FsbKR0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0B2ah0eXBlTmFtZb1WZWM8SW5zdHJ1Y3Rpb248UnVudGltZUNhbGw+PqRkb2NzkKRkb2NzkN4AAqJpZM0B2aR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAdqkZG9jc5DeAAKiaWTNAdqkdHlwZd4ABKRwYXRok6N4Y22idjKrSW5zdHJ1Y3Rpb26mcGFyYW1zkd4AAqRuYW1lq1J1bnRpbWVDYWxspHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRz3AAc3gAEpG5hbWWtV2l0aGRyYXdBc3NldKZmaWVsZHOR3gAEpG5hbWXApHR5cGXMl6h0eXBlTmFtZatNdWx0aUFzc2V0c6Rkb2NzkKVpbmRleACkZG9jc5DeAASkbmFtZbVSZXNlcnZlQXNzZXREZXBvc2l0ZWSmZmllbGRzkd4ABKRuYW1lwKR0eXBlzJeodHlwZU5hbWWrTXVsdGlBc3NldHOkZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWW2UmVjZWl2ZVRlbGVwb3J0ZWRBc3NldKZmaWVsZHOR3gAEpG5hbWXApHR5cGXMl6h0eXBlTmFtZatNdWx0aUFzc2V0c6Rkb2NzkKVpbmRleAKkZG9jc5DeAASkbmFtZa1RdWVyeVJlc3BvbnNlpmZpZWxkc5PeAASkbmFtZahxdWVyeV9pZKR0eXBlCah0eXBlTmFtZadRdWVyeUlkpGRvY3OQ3gAEpG5hbWWocmVzcG9uc2WkdHlwZc0B26h0eXBlTmFtZahSZXNwb25zZaRkb2NzkN4ABKRuYW1lqm1heF93ZWlnaHSkdHlwZQmodHlwZU5hbWWjdTY0pGRvY3OQpWluZGV4A6Rkb2NzkN4ABKRuYW1lrVRyYW5zZmVyQXNzZXSmZmllbGRzkt4ABKRuYW1lpmFzc2V0c6R0eXBlzJeodHlwZU5hbWWrTXVsdGlBc3NldHOkZG9jc5DeAASkbmFtZatiZW5lZmljaWFyeaR0eXBlzJuodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkKVpbmRleASkZG9jc5DeAASkbmFtZbRUcmFuc2ZlclJlc2VydmVBc3NldKZmaWVsZHOT3gAEpG5hbWWmYXNzZXRzpHR5cGXMl6h0eXBlTmFtZatNdWx0aUFzc2V0c6Rkb2NzkN4ABKRuYW1lpGRlc3SkdHlwZcybqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZaN4Y22kdHlwZc0B2Kh0eXBlTmFtZadYY208KCk+pGRvY3OQpWluZGV4BaRkb2NzkN4ABKRuYW1lqFRyYW5zYWN0pmZpZWxkc5PeAASkbmFtZatvcmlnaW5fdHlwZaR0eXBlzI+odHlwZU5hbWWqT3JpZ2luS2luZKRkb2NzkN4ABKRuYW1ltnJlcXVpcmVfd2VpZ2h0X2F0X21vc3SkdHlwZQmodHlwZU5hbWWjdTY0pGRvY3OQ3gAEpG5hbWWkY2FsbKR0eXBlzJCodHlwZU5hbWW6RG91YmxlRW5jb2RlZDxSdW50aW1lQ2FsbD6kZG9jc5ClaW5kZXgGpGRvY3OQ3gAEpG5hbWW5SHJtcE5ld0NoYW5uZWxPcGVuUmVxdWVzdKZmaWVsZHOT3gAEpG5hbWWmc2VuZGVypHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZbBtYXhfbWVzc2FnZV9zaXplpHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZaxtYXhfY2FwYWNpdHmkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAekZG9jc5DeAASkbmFtZbNIcm1wQ2hhbm5lbEFjY2VwdGVkpmZpZWxkc5HeAASkbmFtZalyZWNpcGllbnSkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAikZG9jc5DeAASkbmFtZbJIcm1wQ2hhbm5lbENsb3NpbmemZmllbGRzk94ABKRuYW1lqWluaXRpYXRvcqR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWWmc2VuZGVypHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZalyZWNpcGllbnSkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAmkZG9jc5DeAASkbmFtZatDbGVhck9yaWdpbqZmaWVsZHOQpWluZGV4CqRkb2NzkN4ABKRuYW1lrURlc2NlbmRPcmlnaW6mZmllbGRzkd4ABKRuYW1lwKR0eXBlzJyodHlwZU5hbWW1SW50ZXJpb3JNdWx0aUxvY2F0aW9upGRvY3OQpWluZGV4C6Rkb2NzkN4ABKRuYW1lq1JlcG9ydEVycm9ypmZpZWxkc5PeAASkbmFtZahxdWVyeV9pZKR0eXBlCah0eXBlTmFtZadRdWVyeUlkpGRvY3OQ3gAEpG5hbWWkZGVzdKR0eXBlzJuodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkN4ABKRuYW1ls21heF9yZXNwb25zZV93ZWlnaHSkdHlwZQmodHlwZU5hbWWjdTY0pGRvY3OQpWluZGV4DKRkb2NzkN4ABKRuYW1lrERlcG9zaXRBc3NldKZmaWVsZHOT3gAEpG5hbWWmYXNzZXRzpHR5cGXNAd+odHlwZU5hbWWwTXVsdGlBc3NldEZpbHRlcqRkb2NzkN4ABKRuYW1lqm1heF9hc3NldHOkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lq2JlbmVmaWNpYXJ5pHR5cGXMm6h0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQpWluZGV4DaRkb2NzkN4ABKRuYW1ls0RlcG9zaXRSZXNlcnZlQXNzZXSmZmllbGRzlN4ABKRuYW1lpmFzc2V0c6R0eXBlzQHfqHR5cGVOYW1lsE11bHRpQXNzZXRGaWx0ZXKkZG9jc5DeAASkbmFtZaptYXhfYXNzZXRzpHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZaRkZXN0pHR5cGXMm6h0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQ3gAEpG5hbWWjeGNtpHR5cGXNAdiodHlwZU5hbWWnWGNtPCgpPqRkb2NzkKVpbmRleA6kZG9jc5DeAASkbmFtZa1FeGNoYW5nZUFzc2V0pmZpZWxkc5LeAASkbmFtZaRnaXZlpHR5cGXNAd+odHlwZU5hbWWwTXVsdGlBc3NldEZpbHRlcqRkb2NzkN4ABKRuYW1lp3JlY2VpdmWkdHlwZcyXqHR5cGVOYW1lq011bHRpQXNzZXRzpGRvY3OQpWluZGV4D6Rkb2NzkN4ABKRuYW1lt0luaXRpYXRlUmVzZXJ2ZVdpdGhkcmF3pmZpZWxkc5PeAASkbmFtZaZhc3NldHOkdHlwZc0B36h0eXBlTmFtZbBNdWx0aUFzc2V0RmlsdGVypGRvY3OQ3gAEpG5hbWWncmVzZXJ2ZaR0eXBlzJuodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkN4ABKRuYW1lo3hjbaR0eXBlzQHYqHR5cGVOYW1lp1hjbTwoKT6kZG9jc5ClaW5kZXgQpGRvY3OQ3gAEpG5hbWWwSW5pdGlhdGVUZWxlcG9ydKZmaWVsZHOT3gAEpG5hbWWmYXNzZXRzpHR5cGXNAd+odHlwZU5hbWWwTXVsdGlBc3NldEZpbHRlcqRkb2NzkN4ABKRuYW1lpGRlc3SkdHlwZcybqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZaN4Y22kdHlwZc0B2Kh0eXBlTmFtZadYY208KCk+pGRvY3OQpWluZGV4EaRkb2NzkN4ABKRuYW1lrFF1ZXJ5SG9sZGluZ6ZmaWVsZHOU3gAEpG5hbWWocXVlcnlfaWSkdHlwZQmodHlwZU5hbWWnUXVlcnlJZKRkb2NzkN4ABKRuYW1lpGRlc3SkdHlwZcybqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZaZhc3NldHOkdHlwZc0B36h0eXBlTmFtZbBNdWx0aUFzc2V0RmlsdGVypGRvY3OQ3gAEpG5hbWWzbWF4X3Jlc3BvbnNlX3dlaWdodKR0eXBlCah0eXBlTmFtZaN1NjSkZG9jc5ClaW5kZXgSpGRvY3OQ3gAEpG5hbWWsQnV5RXhlY3V0aW9upmZpZWxkc5LeAASkbmFtZaRmZWVzpHR5cGXMmah0eXBlTmFtZapNdWx0aUFzc2V0pGRvY3OQ3gAEpG5hbWWsd2VpZ2h0X2xpbWl0pHR5cGXNAeKodHlwZU5hbWWrV2VpZ2h0TGltaXSkZG9jc5ClaW5kZXgTpGRvY3OQ3gAEpG5hbWWtUmVmdW5kU3VycGx1c6ZmaWVsZHOQpWluZGV4FKRkb2NzkN4ABKRuYW1lr1NldEVycm9ySGFuZGxlcqZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAdiodHlwZU5hbWWwWGNtPFJ1bnRpbWVDYWxsPqRkb2NzkKVpbmRleBWkZG9jc5DeAASkbmFtZatTZXRBcHBlbmRpeKZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAdiodHlwZU5hbWWwWGNtPFJ1bnRpbWVDYWxsPqRkb2NzkKVpbmRleBakZG9jc5DeAASkbmFtZapDbGVhckVycm9ypmZpZWxkc5ClaW5kZXgXpGRvY3OQ3gAEpG5hbWWqQ2xhaW1Bc3NldKZmaWVsZHOS3gAEpG5hbWWmYXNzZXRzpHR5cGXMl6h0eXBlTmFtZatNdWx0aUFzc2V0c6Rkb2NzkN4ABKRuYW1lpnRpY2tldKR0eXBlzJuodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkKVpbmRleBikZG9jc5DeAASkbmFtZaRUcmFwpmZpZWxkc5HeAASkbmFtZcCkdHlwZQmodHlwZU5hbWWjdTY0pGRvY3OQpWluZGV4GaRkb2NzkN4ABKRuYW1lsFN1YnNjcmliZVZlcnNpb26mZmllbGRzkt4ABKRuYW1lqHF1ZXJ5X2lkpHR5cGUJqHR5cGVOYW1lp1F1ZXJ5SWSkZG9jc5DeAASkbmFtZbNtYXhfcmVzcG9uc2Vfd2VpZ2h0pHR5cGUJqHR5cGVOYW1lo3U2NKRkb2NzkKVpbmRleBqkZG9jc5DeAASkbmFtZbJVbnN1YnNjcmliZVZlcnNpb26mZmllbGRzkKVpbmRleBukZG9jc5CkZG9jc5DeAAKiaWTNAdukdHlwZd4ABKRwYXRok6N4Y22idjKoUmVzcG9uc2WmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5TeAASkbmFtZaROdWxspmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWmQXNzZXRzpmZpZWxkc5HeAASkbmFtZcCkdHlwZcyXqHR5cGVOYW1lq011bHRpQXNzZXRzpGRvY3OQpWluZGV4AaRkb2NzkN4ABKRuYW1lr0V4ZWN1dGlvblJlc3VsdKZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAdyodHlwZU5hbWW0T3B0aW9uPCh1MzIsIEVycm9yKT6kZG9jc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWnVmVyc2lvbqZmaWVsZHOR3gAEpG5hbWXApHR5cGUEqHR5cGVOYW1lrnN1cGVyOjpWZXJzaW9upGRvY3OQpWluZGV4A6Rkb2NzkKRkb2NzkN4AAqJpZM0B3KR0eXBl3gAEpHBhdGiRpk9wdGlvbqZwYXJhbXOR3gACpG5hbWWhVKR0eXBlzQHdo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lpE5vbmWmZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZaRTb21lpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0B3ah0eXBlTmFtZcCkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzQHdpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSBM0B3qRkb2NzkN4AAqJpZM0B3qR0eXBl3gAEpHBhdGiUo3hjbaJ2MqZ0cmFpdHOlRXJyb3KmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c9wAGt4ABKRuYW1lqE92ZXJmbG93pmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWtVW5pbXBsZW1lbnRlZKZmaWVsZHOQpWluZGV4AaRkb2NzkN4ABKRuYW1luFVudHJ1c3RlZFJlc2VydmVMb2NhdGlvbqZmaWVsZHOQpWluZGV4AqRkb2NzkN4ABKRuYW1luVVudHJ1c3RlZFRlbGVwb3J0TG9jYXRpb26mZmllbGRzkKVpbmRleAOkZG9jc5DeAASkbmFtZbFNdWx0aUxvY2F0aW9uRnVsbKZmaWVsZHOQpWluZGV4BKRkb2NzkN4ABKRuYW1luk11bHRpTG9jYXRpb25Ob3RJbnZlcnRpYmxlpmZpZWxkc5ClaW5kZXgFpGRvY3OQ3gAEpG5hbWWpQmFkT3JpZ2lupmZpZWxkc5ClaW5kZXgGpGRvY3OQ3gAEpG5hbWWvSW52YWxpZExvY2F0aW9upmZpZWxkc5ClaW5kZXgHpGRvY3OQ3gAEpG5hbWWtQXNzZXROb3RGb3VuZKZmaWVsZHOQpWluZGV4CKRkb2NzkN4ABKRuYW1ltUZhaWxlZFRvVHJhbnNhY3RBc3NldKZmaWVsZHOQpWluZGV4CaRkb2NzkN4ABKRuYW1lr05vdFdpdGhkcmF3YWJsZaZmaWVsZHOQpWluZGV4CqRkb2NzkN4ABKRuYW1lskxvY2F0aW9uQ2Fubm90SG9sZKZmaWVsZHOQpWluZGV4C6Rkb2NzkN4ABKRuYW1ltUV4Y2VlZHNNYXhNZXNzYWdlU2l6ZaZmaWVsZHOQpWluZGV4DKRkb2NzkN4ABKRuYW1ltkRlc3RpbmF0aW9uVW5zdXBwb3J0ZWSmZmllbGRzkKVpbmRleA2kZG9jc5DeAASkbmFtZalUcmFuc3BvcnSmZmllbGRzkKVpbmRleA6kZG9jc5DeAASkbmFtZapVbnJvdXRhYmxlpmZpZWxkc5ClaW5kZXgPpGRvY3OQ3gAEpG5hbWWsVW5rbm93bkNsYWltpmZpZWxkc5ClaW5kZXgQpGRvY3OQ3gAEpG5hbWWuRmFpbGVkVG9EZWNvZGWmZmllbGRzkKVpbmRleBGkZG9jc5DeAASkbmFtZbBNYXhXZWlnaHRJbnZhbGlkpmZpZWxkc5ClaW5kZXgSpGRvY3OQ3gAEpG5hbWWuTm90SG9sZGluZ0ZlZXOmZmllbGRzkKVpbmRleBOkZG9jc5DeAASkbmFtZaxUb29FeHBlbnNpdmWmZmllbGRzkKVpbmRleBSkZG9jc5DeAASkbmFtZaRUcmFwpmZpZWxkc5HeAASkbmFtZcCkdHlwZQqodHlwZU5hbWWjdTY0pGRvY3OQpWluZGV4FaRkb2NzkN4ABKRuYW1ls1VuaGFuZGxlZFhjbVZlcnNpb26mZmllbGRzkKVpbmRleBakZG9jc5DeAASkbmFtZbJXZWlnaHRMaW1pdFJlYWNoZWSmZmllbGRzkd4ABKRuYW1lwKR0eXBlCqh0eXBlTmFtZaZXZWlnaHSkZG9jc5ClaW5kZXgXpGRvY3OQ3gAEpG5hbWWnQmFycmllcqZmaWVsZHOQpWluZGV4GKRkb2NzkN4ABKRuYW1ls1dlaWdodE5vdENvbXB1dGFibGWmZmllbGRzkKVpbmRleBmkZG9jc5CkZG9jc5DeAAKiaWTNAd+kdHlwZd4ABKRwYXRolKN4Y22idjKqbXVsdGlhc3NldLBNdWx0aUFzc2V0RmlsdGVypnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWoRGVmaW5pdGWmZmllbGRzkd4ABKRuYW1lwKR0eXBlzJeodHlwZU5hbWWrTXVsdGlBc3NldHOkZG9jc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWkV2lsZKZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAeCodHlwZU5hbWWuV2lsZE11bHRpQXNzZXSkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzQHgpHR5cGXeAASkcGF0aJSjeGNtonYyqm11bHRpYXNzZXSuV2lsZE11bHRpQXNzZXSmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZaNBbGymZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZaVBbGxPZqZmaWVsZHOS3gAEpG5hbWWiaWSkdHlwZcyaqHR5cGVOYW1lp0Fzc2V0SWSkZG9jc5DeAASkbmFtZaNmdW6kdHlwZc0B4ah0eXBlTmFtZa9XaWxkRnVuZ2liaWxpdHmkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzQHhpHR5cGXeAASkcGF0aJSjeGNtonYyqm11bHRpYXNzZXSvV2lsZEZ1bmdpYmlsaXR5pnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWoRnVuZ2libGWmZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZatOb25GdW5naWJsZaZmaWVsZHOQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZM0B4qR0eXBl3gAEpHBhdGiTo3hjbaJ2MqtXZWlnaHRMaW1pdKZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lqVVubGltaXRlZKZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lp0xpbWl0ZWSmZmllbGRzkd4ABKRuYW1lwKR0eXBlCah0eXBlTmFtZaN1NjSkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzQHjpHR5cGXeAASkcGF0aJS3cG9sa2Fkb3RfcnVudGltZV9jb21tb26oYXVjdGlvbnOmcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWWrbmV3X2F1Y3Rpb26mZmllbGRzkt4ABKRuYW1lqGR1cmF0aW9upHR5cGXMdah0eXBlTmFtZa5UOjpCbG9ja051bWJlcqRkb2NzkN4ABKRuYW1lsmxlYXNlX3BlcmlvZF9pbmRleKR0eXBlzHWodHlwZU5hbWWwTGVhc2VQZXJpb2RPZjxUPqRkb2NzkKVpbmRleACkZG9jc5W1Q3JlYXRlIGEgbmV3IGF1Y3Rpb24uoNlUVGhpcyBjYW4gb25seSBoYXBwZW4gd2hlbiB0aGVyZSBpc24ndCBhbHJlYWR5IGFuIGF1Y3Rpb24gaW4gcHJvZ3Jlc3MgYW5kIG1heSBvbmx5IGJl2UljYWxsZWQgYnkgdGhlIHJvb3Qgb3JpZ2luLiBBY2NlcHRzIHRoZSBgZHVyYXRpb25gIG9mIHRoaXMgYXVjdGlvbiBhbmQgdGhl2VZgbGVhc2VfcGVyaW9kX2luZGV4YCBvZiB0aGUgaW5pdGlhbCBsZWFzZSBwZXJpb2Qgb2YgdGhlIGZvdXIgdGhhdCBhcmUgdG8gYmUgYXVjdGlvbmVkLt4ABKRuYW1lo2JpZKZmaWVsZHOV3gAEpG5hbWWkcGFyYaR0eXBlzQHkqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lrWF1Y3Rpb25faW5kZXikdHlwZcx1qHR5cGVOYW1lrEF1Y3Rpb25JbmRleKRkb2NzkN4ABKRuYW1lqmZpcnN0X3Nsb3SkdHlwZcx1qHR5cGVOYW1lsExlYXNlUGVyaW9kT2Y8VD6kZG9jc5DeAASkbmFtZalsYXN0X3Nsb3SkdHlwZcx1qHR5cGVOYW1lsExlYXNlUGVyaW9kT2Y8VD6kZG9jc5DeAASkbmFtZaZhbW91bnSkdHlwZTWodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQpWluZGV4AaRkb2Nz3AAQ2VJNYWtlIGEgbmV3IGJpZCBmcm9tIGFuIGFjY291bnQgKGluY2x1ZGluZyBhIHBhcmFjaGFpbiBhY2NvdW50KSBmb3IgZGVwbG95aW5nIGEgbmV3qnBhcmFjaGFpbi6g2VZNdWx0aXBsZSBzaW11bHRhbmVvdXMgYmlkcyBmcm9tIHRoZSBzYW1lIGJpZGRlciBhcmUgYWxsb3dlZCBvbmx5IGFzIGxvbmcgYXMgYWxsIGFjdGl2ZdlPYmlkcyBvdmVybGFwIGVhY2ggb3RoZXIgKGkuZS4gYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZSkuIEJpZHMgY2Fubm90IGJlIHJlZGFjdGVkLqDZVS0gYHN1YmAgaXMgdGhlIHN1Yi1iaWRkZXIgSUQsIGFsbG93aW5nIGZvciBtdWx0aXBsZSBjb21wZXRpbmcgYmlkcyB0byBiZSBtYWRlIGJ5IChhbmS8ZnVuZGVkIGJ5KSB0aGUgc2FtZSBhY2NvdW50LtlTLSBgYXVjdGlvbl9pbmRleGAgaXMgdGhlIGluZGV4IG9mIHRoZSBhdWN0aW9uIHRvIGJpZCBvbi4gU2hvdWxkIGp1c3QgYmUgdGhlIHByZXNlbnS6dmFsdWUgb2YgYEF1Y3Rpb25Db3VudGVyYC7ZUi0gYGZpcnN0X3Nsb3RgIGlzIHRoZSBmaXJzdCBsZWFzZSBwZXJpb2QgaW5kZXggb2YgdGhlIHJhbmdlIHRvIGJpZCBvbi4gVGhpcyBpcyB0aGXZQmFic29sdXRlIGxlYXNlIHBlcmlvZCBpbmRleCB2YWx1ZSwgbm90IGFuIGF1Y3Rpb24tc3BlY2lmaWMgb2Zmc2V0LtlQLSBgbGFzdF9zbG90YCBpcyB0aGUgbGFzdCBsZWFzZSBwZXJpb2QgaW5kZXggb2YgdGhlIHJhbmdlIHRvIGJpZCBvbi4gVGhpcyBpcyB0aGXZQmFic29sdXRlIGxlYXNlIHBlcmlvZCBpbmRleCB2YWx1ZSwgbm90IGFuIGF1Y3Rpb24tc3BlY2lmaWMgb2Zmc2V0LtlSLSBgYW1vdW50YCBpcyB0aGUgYW1vdW50IHRvIGJpZCB0byBiZSBoZWxkIGFzIGRlcG9zaXQgZm9yIHRoZSBwYXJhY2hhaW4gc2hvdWxkIHRoZdkyYmlkIHdpbi4gVGhpcyBhbW91bnQgaXMgaGVsZCB0aHJvdWdob3V0IHRoZSByYW5nZS7eAASkbmFtZa5jYW5jZWxfYXVjdGlvbqZmaWVsZHOQpWluZGV4AqRkb2Nzk75DYW5jZWwgYW4gaW4tcHJvZ3Jlc3MgYXVjdGlvbi6g2SJDYW4gb25seSBiZSBjYWxsZWQgYnkgUm9vdCBvcmlnaW4upGRvY3OR2UlDb250YWlucyBvbmUgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIHRoYXQgY2FuIGJlIGNhbGxlZCBieSBhbiBleHRyaW5zaWMu3gAComlkzQHkpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGnY29tcGFjdN4AAaR0eXBlzFmkZG9jc5DeAAKiaWTNAeWkdHlwZd4ABKRwYXRolLdwb2xrYWRvdF9ydW50aW1lX2NvbW1vbqljcm93ZGxvYW6mcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOZ3gAEpG5hbWWmY3JlYXRlpmZpZWxkc5beAASkbmFtZaVpbmRleKR0eXBlzQHkqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lo2NhcKR0eXBlNah0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5DeAASkbmFtZaxmaXJzdF9wZXJpb2SkdHlwZcx1qHR5cGVOYW1lsExlYXNlUGVyaW9kT2Y8VD6kZG9jc5DeAASkbmFtZatsYXN0X3BlcmlvZKR0eXBlzHWodHlwZU5hbWWwTGVhc2VQZXJpb2RPZjxUPqRkb2NzkN4ABKRuYW1lo2VuZKR0eXBlzHWodHlwZU5hbWWuVDo6QmxvY2tOdW1iZXKkZG9jc5DeAASkbmFtZah2ZXJpZmllcqR0eXBlzQHmqHR5cGVOYW1ls09wdGlvbjxNdWx0aVNpZ25lcj6kZG9jc5ClaW5kZXgApGRvY3OU2VpDcmVhdGUgYSBuZXcgY3Jvd2Rsb2FuaW5nIGNhbXBhaWduIGZvciBhIHBhcmFjaGFpbiBzbG90IHdpdGggdGhlIGdpdmVuIGxlYXNlIHBlcmlvZCByYW5nZS6g2VdUaGlzIGFwcGxpZXMgYSBsb2NrIHRvIHlvdXIgcGFyYWNoYWluIGNvbmZpZ3VyYXRpb24sIGVuc3VyaW5nIHRoYXQgaXQgY2Fubm90IGJlIGNoYW5nZWS5YnkgdGhlIHBhcmFjaGFpbiBtYW5hZ2VyLt4ABKRuYW1lqmNvbnRyaWJ1dGWmZmllbGRzk94ABKRuYW1lpWluZGV4pHR5cGXNAeSodHlwZU5hbWWmUGFyYUlkpGRvY3OQ3gAEpG5hbWWldmFsdWWkdHlwZTWodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQ3gAEpG5hbWWpc2lnbmF0dXJlpHR5cGXNAeqodHlwZU5hbWW2T3B0aW9uPE11bHRpU2lnbmF0dXJlPqRkb2NzkKVpbmRleAGkZG9jc5LZVENvbnRyaWJ1dGUgdG8gYSBjcm93ZCBzYWxlLiBUaGlzIHdpbGwgdHJhbnNmZXIgc29tZSBiYWxhbmNlIG92ZXIgdG8gZnVuZCBhIHBhcmFjaGFpbtlUc2xvdC4gSXQgd2lsbCBiZSB3aXRoZHJhd2FibGUgd2hlbiB0aGUgY3Jvd2Rsb2FuIGhhcyBlbmRlZCBhbmQgdGhlIGZ1bmRzIGFyZSB1bnVzZWQu3gAEpG5hbWWod2l0aGRyYXemZmllbGRzkt4ABKRuYW1lo3dob6R0eXBlAKh0eXBlTmFtZaxUOjpBY2NvdW50SWSkZG9jc5DeAASkbmFtZaVpbmRleKR0eXBlzQHkqHR5cGVOYW1lplBhcmFJZKRkb2NzkKVpbmRleAKkZG9jc9wAEdkwV2l0aGRyYXcgZnVsbCBiYWxhbmNlIG9mIGEgc3BlY2lmaWMgY29udHJpYnV0b3IuoNkwT3JpZ2luIG11c3QgYmUgc2lnbmVkLCBidXQgY2FuIGNvbWUgZnJvbSBhbnlvbmUuoNlrVGhlIGZ1bmQgbXVzdCBiZSBlaXRoZXIgaW4sIG9yIHJlYWR5IGZvciwgcmV0aXJlbWVudC4gRm9yIGEgZnVuZCB0byBiZSAqaW4qIHJldGlyZW1lbnQsIHRoZW4gdGhlIHJldGlyZW1lbnTZPmZsYWcgbXVzdCBiZSBzZXQuIEZvciBhIGZ1bmQgdG8gYmUgcmVhZHkgZm9yIHJldGlyZW1lbnQsIHRoZW462SctIGl0IG11c3Qgbm90IGFscmVhZHkgYmUgaW4gcmV0aXJlbWVudDvZUy0gdGhlIGFtb3VudCBvZiByYWlzZWQgZnVuZHMgbXVzdCBiZSBiaWdnZXIgdGhhbiB0aGUgX2ZyZWVfIGJhbGFuY2Ugb2YgdGhlIGFjY291bnQ7rS0gYW5kIGVpdGhlcjrZLyAgLSB0aGUgYmxvY2sgbnVtYmVyIG11c3QgYmUgYXQgbGVhc3QgYGVuZGA7IG9y2UsgIC0gdGhlIGN1cnJlbnQgbGVhc2UgcGVyaW9kIG11c3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBmdW5kJ3MgYGxhc3RfcGVyaW9kYC6g2VtJbiB0aGlzIGNhc2UsIHRoZSBmdW5kJ3MgcmV0aXJlbWVudCBmbGFnIGlzIHNldCBhbmQgaXRzIGBlbmRgIGlzIHJlc2V0IHRvIHRoZSBjdXJyZW50IGJsb2Nrp251bWJlci6g2TwtIGB3aG9gOiBUaGUgYWNjb3VudCB3aG9zZSBjb250cmlidXRpb24gc2hvdWxkIGJlIHdpdGhkcmF3bi7ZRi0gYGluZGV4YDogVGhlIHBhcmFjaGFpbiB0byB3aG9zZSBjcm93ZGxvYW4gdGhlIGNvbnRyaWJ1dGlvbiB3YXMgbWFkZS7eAASkbmFtZaZyZWZ1bmSmZmllbGRzkd4ABKRuYW1lpWluZGV4pHR5cGXNAeSodHlwZU5hbWWmUGFyYUlkpGRvY3OQpWluZGV4A6Rkb2Nzldk4QXV0b21hdGljYWxseSByZWZ1bmQgY29udHJpYnV0b3JzIG9mIGFuIGVuZGVkIGNyb3dkbG9hbi7ZSER1ZSB0byB3ZWlnaHQgcmVzdHJpY3Rpb25zLCB0aGlzIGZ1bmN0aW9uIG1heSBuZWVkIHRvIGJlIGNhbGxlZCBtdWx0aXBsZdlSdGltZXMgdG8gZnVsbHkgcmVmdW5kIGFsbCB1c2Vycy4gV2Ugd2lsbCByZWZ1bmQgYFJlbW92ZUtleXNMaW1pdGAgdXNlcnMgYXQgYSB0aW1lLqDZME9yaWdpbiBtdXN0IGJlIHNpZ25lZCwgYnV0IGNhbiBjb21lIGZyb20gYW55b25lLt4ABKRuYW1lqGRpc3NvbHZlpmZpZWxkc5HeAASkbmFtZaVpbmRleKR0eXBlzQHkqHR5cGVOYW1lplBhcmFJZKRkb2NzkKVpbmRleASkZG9jc5HZVVJlbW92ZSBhIGZ1bmQgYWZ0ZXIgdGhlIHJldGlyZW1lbnQgcGVyaW9kIGhhcyBlbmRlZCBhbmQgYWxsIGZ1bmRzIGhhdmUgYmVlbiByZXR1cm5lZC7eAASkbmFtZaRlZGl0pmZpZWxkc5beAASkbmFtZaVpbmRleKR0eXBlzQHkqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lo2NhcKR0eXBlNah0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5DeAASkbmFtZaxmaXJzdF9wZXJpb2SkdHlwZcx1qHR5cGVOYW1lsExlYXNlUGVyaW9kT2Y8VD6kZG9jc5DeAASkbmFtZatsYXN0X3BlcmlvZKR0eXBlzHWodHlwZU5hbWWwTGVhc2VQZXJpb2RPZjxUPqRkb2NzkN4ABKRuYW1lo2VuZKR0eXBlzHWodHlwZU5hbWWuVDo6QmxvY2tOdW1iZXKkZG9jc5DeAASkbmFtZah2ZXJpZmllcqR0eXBlzQHmqHR5cGVOYW1ls09wdGlvbjxNdWx0aVNpZ25lcj6kZG9jc5ClaW5kZXgFpGRvY3OT2TRFZGl0IHRoZSBjb25maWd1cmF0aW9uIGZvciBhbiBpbi1wcm9ncmVzcyBjcm93ZGxvYW4uoNkiQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IFJvb3Qgb3JpZ2luLt4ABKRuYW1lqGFkZF9tZW1vpmZpZWxkc5LeAASkbmFtZaVpbmRleKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQ3gAEpG5hbWWkbWVtb6R0eXBlDKh0eXBlTmFtZadWZWM8dTg+pGRvY3OQpWluZGV4BqRkb2Nzk9k7QWRkIGFuIG9wdGlvbmFsIG1lbW8gdG8gYW4gZXhpc3RpbmcgY3Jvd2Rsb2FuIGNvbnRyaWJ1dGlvbi6g2UtPcmlnaW4gbXVzdCBiZSBTaWduZWQsIGFuZCB0aGUgdXNlciBtdXN0IGhhdmUgY29udHJpYnV0ZWQgdG8gdGhlIGNyb3dkbG9hbi7eAASkbmFtZaRwb2tlpmZpZWxkc5HeAASkbmFtZaVpbmRleKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQpWluZGV4B6Rkb2Nzk71Qb2tlIHRoZSBmdW5kIGludG8gYE5ld1JhaXNlYKDZN09yaWdpbiBtdXN0IGJlIFNpZ25lZCwgYW5kIHRoZSBmdW5kIGhhcyBub24temVybyByYWlzZS7eAASkbmFtZa5jb250cmlidXRlX2FsbKZmaWVsZHOS3gAEpG5hbWWlaW5kZXikdHlwZc0B5Kh0eXBlTmFtZaZQYXJhSWSkZG9jc5DeAASkbmFtZalzaWduYXR1cmWkdHlwZc0B6qh0eXBlTmFtZbZPcHRpb248TXVsdGlTaWduYXR1cmU+pGRvY3OQpWluZGV4CKRkb2Nzktl4Q29udHJpYnV0ZSB5b3VyIGVudGlyZSBiYWxhbmNlIHRvIGEgY3Jvd2Qgc2FsZS4gVGhpcyB3aWxsIHRyYW5zZmVyIHRoZSBlbnRpcmUgYmFsYW5jZSBvZiBhIHVzZXIgb3ZlciB0byBmdW5kIGEgcGFyYWNoYWlu2VRzbG90LiBJdCB3aWxsIGJlIHdpdGhkcmF3YWJsZSB3aGVuIHRoZSBjcm93ZGxvYW4gaGFzIGVuZGVkIGFuZCB0aGUgZnVuZHMgYXJlIHVudXNlZC6kZG9jc5HZSUNvbnRhaW5zIG9uZSB2YXJpYW50IHBlciBkaXNwYXRjaGFibGUgdGhhdCBjYW4gYmUgY2FsbGVkIGJ5IGFuIGV4dHJpbnNpYy7eAAKiaWTNAeakdHlwZd4ABKRwYXRokaZPcHRpb26mcGFyYW1zkd4AAqRuYW1loVSkdHlwZc0B56NkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZaROb25lpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWkU29tZaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAeeodHlwZU5hbWXApGRvY3OQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZM0B56R0eXBl3gAEpHBhdGiSqnNwX3J1bnRpbWWrTXVsdGlTaWduZXKmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5PeAASkbmFtZadFZDI1NTE5pmZpZWxkc5HeAASkbmFtZcCkdHlwZS6odHlwZU5hbWWvZWQyNTUxOTo6UHVibGljpGRvY3OQpWluZGV4AKRkb2NzkN4ABKRuYW1lp1NyMjU1MTmmZmllbGRzkd4ABKRuYW1lwKR0eXBlMah0eXBlTmFtZa9zcjI1NTE5OjpQdWJsaWOkZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWlRWNkc2GmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQHoqHR5cGVOYW1lrWVjZHNhOjpQdWJsaWOkZG9jc5ClaW5kZXgCpGRvY3OQpGRvY3OQ3gAComlkzQHopHR5cGXeAASkcGF0aJOnc3BfY29yZaVlY2RzYaZQdWJsaWOmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0B6ah0eXBlTmFtZahbdTg7IDMzXaRkb2NzkKRkb2NzkN4AAqJpZM0B6aR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbiGkdHlwZQKkZG9jc5DeAAKiaWTNAeqkdHlwZd4ABKRwYXRokaZPcHRpb26mcGFyYW1zkd4AAqRuYW1loVSkdHlwZc0B66NkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZaROb25lpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWkU29tZaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAeuodHlwZU5hbWXApGRvY3OQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZM0B66R0eXBl3gAEpHBhdGiSqnNwX3J1bnRpbWWuTXVsdGlTaWduYXR1cmWmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5PeAASkbmFtZadFZDI1NTE5pmZpZWxkc5HeAASkbmFtZcCkdHlwZc0BG6h0eXBlTmFtZbJlZDI1NTE5OjpTaWduYXR1cmWkZG9jc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWnU3IyNTUxOaZmaWVsZHOR3gAEpG5hbWXApHR5cGXMXKh0eXBlTmFtZbJzcjI1NTE5OjpTaWduYXR1cmWkZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWlRWNkc2GmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQHsqHR5cGVOYW1lsGVjZHNhOjpTaWduYXR1cmWkZG9jc5ClaW5kZXgCpGRvY3OQpGRvY3OQ3gAComlkzQHspHR5cGXeAASkcGF0aJOnc3BfY29yZaVlY2RzYalTaWduYXR1cmWmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0B7ah0eXBlTmFtZahbdTg7IDY1XaRkb2NzkKRkb2NzkN4AAqJpZM0B7aR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpWFycmF53gACo2xlbsxBpHR5cGUCpGRvY3OQ3gAComlkzQHupHR5cGXeAASkcGF0aJS3cG9sa2Fkb3RfcnVudGltZV9jb21tb26uYXNzaWduZWRfc2xvdHOmcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWW6YXNzaWduX3Blcm1fcGFyYWNoYWluX3Nsb3SmZmllbGRzkd4ABKRuYW1lomlkpHR5cGXMWah0eXBlTmFtZaZQYXJhSWSkZG9jc5ClaW5kZXgApGRvY3OR2UhBc3NpZ24gYSBwZXJtYW5lbnQgcGFyYWNoYWluIHNsb3QgYW5kIGltbWVkaWF0ZWx5IGNyZWF0ZSBhIGxlYXNlIGZvciBpdC7eAASkbmFtZbphc3NpZ25fdGVtcF9wYXJhY2hhaW5fc2xvdKZmaWVsZHOS3gAEpG5hbWWiaWSkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lsmxlYXNlX3BlcmlvZF9zdGFydKR0eXBlzQHvqHR5cGVOYW1ltFNsb3RMZWFzZVBlcmlvZFN0YXJ0pGRvY3OQpWluZGV4AaRkb2Nzk9lOQXNzaWduIGEgdGVtcG9yYXJ5IHBhcmFjaGFpbiBzbG90LiBUaGUgZnVuY3Rpb24gdHJpZXMgdG8gY3JlYXRlIGEgbGVhc2UgZm9yIGl02U5pbW1lZGlhdGVseSBpZiBgU2xvdExlYXNlUGVyaW9kU3RhcnQ6OkN1cnJlbnRgIGlzIHNwZWNpZmllZCwgYW5kIGlmIHRoZSBudW1iZXLZTm9mIGN1cnJlbnRseSBhY3RpdmUgdGVtcG9yYXJ5IHNsb3RzIGlzIGJlbG93IGBNYXhUZW1wb3JhcnlTbG90UGVyTGVhc2VQZXJpb2RgLt4ABKRuYW1lt3VuYXNzaWduX3BhcmFjaGFpbl9zbG90pmZpZWxkc5HeAASkbmFtZaJpZKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQpWluZGV4AqRkb2NzkdkwVW5hc3NpZ24gYSBwZXJtYW5lbnQgb3IgdGVtcG9yYXJ5IHBhcmFjaGFpbiBzbG90pGRvY3OR2UlDb250YWlucyBvbmUgdmFyaWFudCBwZXIgZGlzcGF0Y2hhYmxlIHRoYXQgY2FuIGJlIGNhbGxlZCBieSBhbiBleHRyaW5zaWMu3gAComlkzQHvpHR5cGXeAASkcGF0aJO3cG9sa2Fkb3RfcnVudGltZV9jb21tb26uYXNzaWduZWRfc2xvdHO0U2xvdExlYXNlUGVyaW9kU3RhcnSmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZadDdXJyZW50pmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWkTmV4dKZmaWVsZHOQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZM0B8KR0eXBl3gAEpHBhdGiTqnBhbGxldF94Y22mcGFsbGV0pENhbGymcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOa3gAEpG5hbWWkc2VuZKZmaWVsZHOS3gAEpG5hbWWkZGVzdKR0eXBlzKSodHlwZU5hbWW7Qm94PFZlcnNpb25lZE11bHRpTG9jYXRpb24+pGRvY3OQ3gAEpG5hbWWnbWVzc2FnZaR0eXBlzQHXqHR5cGVOYW1ltUJveDxWZXJzaW9uZWRYY208KCk+PqRkb2NzkKVpbmRleACkZG9jc5DeAASkbmFtZa90ZWxlcG9ydF9hc3NldHOmZmllbGRzlN4ABKRuYW1lpGRlc3SkdHlwZcykqHR5cGVOYW1lu0JveDxWZXJzaW9uZWRNdWx0aUxvY2F0aW9uPqRkb2NzkN4ABKRuYW1lq2JlbmVmaWNpYXJ5pHR5cGXMpKh0eXBlTmFtZbtCb3g8VmVyc2lvbmVkTXVsdGlMb2NhdGlvbj6kZG9jc5DeAASkbmFtZaZhc3NldHOkdHlwZcyWqHR5cGVOYW1luUJveDxWZXJzaW9uZWRNdWx0aUFzc2V0cz6kZG9jc5DeAASkbmFtZa5mZWVfYXNzZXRfaXRlbaR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXgBpGRvY3Of2URUZWxlcG9ydCBzb21lIGFzc2V0cyBmcm9tIHRoZSBsb2NhbCBjaGFpbiB0byBzb21lIGRlc3RpbmF0aW9uIGNoYWluLqDZVEZlZSBwYXltZW50IG9uIHRoZSBkZXN0aW5hdGlvbiBzaWRlIGlzIG1hZGUgZnJvbSB0aGUgYXNzZXQgaW4gdGhlIGBhc3NldHNgIHZlY3RvciBvZtlYaW5kZXggYGZlZV9hc3NldF9pdGVtYC4gVGhlIHdlaWdodCBsaW1pdCBmb3IgZmVlcyBpcyBub3QgcHJvdmlkZWQgYW5kIHRodXMgaXMgdW5saW1pdGVkLNktd2l0aCBhbGwgZmVlcyB0YWtlbiBhcyBuZWVkZWQgZnJvbSB0aGUgYXNzZXQuoNlKLSBgb3JpZ2luYDogTXVzdCBiZSBjYXBhYmxlIG9mIHdpdGhkcmF3aW5nIHRoZSBgYXNzZXRzYCBhbmQgZXhlY3V0aW5nIFhDTS7ZYy0gYGRlc3RgOiBEZXN0aW5hdGlvbiBjb250ZXh0IGZvciB0aGUgYXNzZXRzLiBXaWxsIHR5cGljYWxseSBiZSBgWDIoUGFyZW50LCBQYXJhY2hhaW4oLi4pKWAgdG8gc2VuZNlWICBmcm9tIHBhcmFjaGFpbiB0byBwYXJhY2hhaW4sIG9yIGBYMShQYXJhY2hhaW4oLi4pKWAgdG8gc2VuZCBmcm9tIHJlbGF5IHRvIHBhcmFjaGFpbi7ZYi0gYGJlbmVmaWNpYXJ5YDogQSBiZW5lZmljaWFyeSBsb2NhdGlvbiBmb3IgdGhlIGFzc2V0cyBpbiB0aGUgY29udGV4dCBvZiBgZGVzdGAuIFdpbGwgZ2VuZXJhbGx5IGJluSAgYW4gYEFjY291bnRJZDMyYCB2YWx1ZS7Zay0gYGFzc2V0c2A6IFRoZSBhc3NldHMgdG8gYmUgd2l0aGRyYXduLiBUaGUgZmlyc3QgaXRlbSBzaG91bGQgYmUgdGhlIGN1cnJlbmN5IHVzZWQgdG8gdG8gcGF5IHRoZSBmZWUgb24gdGhl2SAgIGBkZXN0YCBzaWRlLiBNYXkgbm90IGJlIGVtcHR5LtlTLSBgZmVlX2Fzc2V0X2l0ZW1gOiBUaGUgaW5kZXggaW50byBgYXNzZXRzYCBvZiB0aGUgaXRlbSB3aGljaCBzaG91bGQgYmUgdXNlZCB0byBwYXmnICBmZWVzLt4ABKRuYW1lt3Jlc2VydmVfdHJhbnNmZXJfYXNzZXRzpmZpZWxkc5TeAASkbmFtZaRkZXN0pHR5cGXMpKh0eXBlTmFtZbtCb3g8VmVyc2lvbmVkTXVsdGlMb2NhdGlvbj6kZG9jc5DeAASkbmFtZatiZW5lZmljaWFyeaR0eXBlzKSodHlwZU5hbWW7Qm94PFZlcnNpb25lZE11bHRpTG9jYXRpb24+pGRvY3OQ3gAEpG5hbWWmYXNzZXRzpHR5cGXMlqh0eXBlTmFtZblCb3g8VmVyc2lvbmVkTXVsdGlBc3NldHM+pGRvY3OQ3gAEpG5hbWWuZmVlX2Fzc2V0X2l0ZW2kdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4AqRkb2Nz3AAQ2VNUcmFuc2ZlciBzb21lIGFzc2V0cyBmcm9tIHRoZSBsb2NhbCBjaGFpbiB0byB0aGUgc292ZXJlaWduIGFjY291bnQgb2YgYSBkZXN0aW5hdGlvbtklY2hhaW4gYW5kIGZvcndhcmQgYSBub3RpZmljYXRpb24gWENNLqDZVEZlZSBwYXltZW50IG9uIHRoZSBkZXN0aW5hdGlvbiBzaWRlIGlzIG1hZGUgZnJvbSB0aGUgYXNzZXQgaW4gdGhlIGBhc3NldHNgIHZlY3RvciBvZtlYaW5kZXggYGZlZV9hc3NldF9pdGVtYC4gVGhlIHdlaWdodCBsaW1pdCBmb3IgZmVlcyBpcyBub3QgcHJvdmlkZWQgYW5kIHRodXMgaXMgdW5saW1pdGVkLNktd2l0aCBhbGwgZmVlcyB0YWtlbiBhcyBuZWVkZWQgZnJvbSB0aGUgYXNzZXQuoNlKLSBgb3JpZ2luYDogTXVzdCBiZSBjYXBhYmxlIG9mIHdpdGhkcmF3aW5nIHRoZSBgYXNzZXRzYCBhbmQgZXhlY3V0aW5nIFhDTS7ZYy0gYGRlc3RgOiBEZXN0aW5hdGlvbiBjb250ZXh0IGZvciB0aGUgYXNzZXRzLiBXaWxsIHR5cGljYWxseSBiZSBgWDIoUGFyZW50LCBQYXJhY2hhaW4oLi4pKWAgdG8gc2VuZNlWICBmcm9tIHBhcmFjaGFpbiB0byBwYXJhY2hhaW4sIG9yIGBYMShQYXJhY2hhaW4oLi4pKWAgdG8gc2VuZCBmcm9tIHJlbGF5IHRvIHBhcmFjaGFpbi7ZYi0gYGJlbmVmaWNpYXJ5YDogQSBiZW5lZmljaWFyeSBsb2NhdGlvbiBmb3IgdGhlIGFzc2V0cyBpbiB0aGUgY29udGV4dCBvZiBgZGVzdGAuIFdpbGwgZ2VuZXJhbGx5IGJluSAgYW4gYEFjY291bnRJZDMyYCB2YWx1ZS7ZYS0gYGFzc2V0c2A6IFRoZSBhc3NldHMgdG8gYmUgd2l0aGRyYXduLiBUaGlzIHNob3VsZCBpbmNsdWRlIHRoZSBhc3NldHMgdXNlZCB0byBwYXkgdGhlIGZlZSBvbiB0aGWuICBgZGVzdGAgc2lkZS7ZUy0gYGZlZV9hc3NldF9pdGVtYDogVGhlIGluZGV4IGludG8gYGFzc2V0c2Agb2YgdGhlIGl0ZW0gd2hpY2ggc2hvdWxkIGJlIHVzZWQgdG8gcGF5pyAgZmVlcy7eAASkbmFtZadleGVjdXRlpmZpZWxkc5LeAASkbmFtZadtZXNzYWdlpHR5cGXNAfGodHlwZU5hbWXZMEJveDxWZXJzaW9uZWRYY208PFQgYXMgU3lzQ29uZmlnPjo6UnVudGltZUNhbGw+PqRkb2NzkN4ABKRuYW1lqm1heF93ZWlnaHSkdHlwZQiodHlwZU5hbWWmV2VpZ2h0pGRvY3OQpWluZGV4A6Rkb2Nzm9k0RXhlY3V0ZSBhbiBYQ00gbWVzc2FnZSBmcm9tIGEgbG9jYWwsIHNpZ25lZCwgb3JpZ2luLqDZU0FuIGV2ZW50IGlzIGRlcG9zaXRlZCBpbmRpY2F0aW5nIHdoZXRoZXIgYG1zZ2AgY291bGQgYmUgZXhlY3V0ZWQgY29tcGxldGVseSBvciBvbmx5qnBhcnRpYWxseS6g2VtObyBtb3JlIHRoYW4gYG1heF93ZWlnaHRgIHdpbGwgYmUgdXNlZCBpbiBpdHMgYXR0ZW1wdGVkIGV4ZWN1dGlvbi4gSWYgdGhpcyBpcyBsZXNzIHRoYW4gdGhl2VZtYXhpbXVtIGFtb3VudCBvZiB3ZWlnaHQgdGhhdCB0aGUgbWVzc2FnZSBjb3VsZCB0YWtlIHRvIGJlIGV4ZWN1dGVkLCB0aGVuIG5vIGV4ZWN1dGlvbrVhdHRlbXB0IHdpbGwgYmUgbWFkZS6g2VtOT1RFOiBBIHN1Y2Nlc3NmdWwgcmV0dXJuIHRvIHRoaXMgZG9lcyAqbm90KiBpbXBseSB0aGF0IHRoZSBgbXNnYCB3YXMgZXhlY3V0ZWQgc3VjY2Vzc2Z1bGx52TN0byBjb21wbGV0aW9uOyBvbmx5IHRoYXQgKnNvbWUqIG9mIGl0IHdhcyBleGVjdXRlZC7eAASkbmFtZbFmb3JjZV94Y21fdmVyc2lvbqZmaWVsZHOS3gAEpG5hbWWobG9jYXRpb26kdHlwZcxyqHR5cGVOYW1lskJveDxNdWx0aUxvY2F0aW9uPqRkb2NzkN4ABKRuYW1lq3hjbV92ZXJzaW9upHR5cGUEqHR5cGVOYW1lqlhjbVZlcnNpb26kZG9jc5ClaW5kZXgEpGRvY3OW2VJFeHRvbGwgdGhhdCBhIHBhcnRpY3VsYXIgZGVzdGluYXRpb24gY2FuIGJlIGNvbW11bmljYXRlZCB3aXRoIHRocm91Z2ggYSBwYXJ0aWN1bGFyr3ZlcnNpb24gb2YgWENNLqC5LSBgb3JpZ2luYDogTXVzdCBiZSBSb290Ltk2LSBgbG9jYXRpb25gOiBUaGUgZGVzdGluYXRpb24gdGhhdCBpcyBiZWluZyBkZXNjcmliZWQu2UQtIGB4Y21fdmVyc2lvbmA6IFRoZSBsYXRlc3QgdmVyc2lvbiBvZiBYQ00gdGhhdCBgbG9jYXRpb25gIHN1cHBvcnRzLt4ABKRuYW1luWZvcmNlX2RlZmF1bHRfeGNtX3ZlcnNpb26mZmllbGRzkd4ABKRuYW1lsW1heWJlX3hjbV92ZXJzaW9upHR5cGXNARSodHlwZU5hbWWyT3B0aW9uPFhjbVZlcnNpb24+pGRvY3OQpWluZGV4BaRkb2NzldlWU2V0IGEgc2FmZSBYQ00gdmVyc2lvbiAodGhlIHZlcnNpb24gdGhhdCBYQ00gc2hvdWxkIGJlIGVuY29kZWQgd2l0aCBpZiB0aGUgbW9zdCByZWNlbnTZLXZlcnNpb24gYSBkZXN0aW5hdGlvbiBjYW4gYWNjZXB0IGlzIHVua25vd24pLqC5LSBgb3JpZ2luYDogTXVzdCBiZSBSb290LtlOLSBgbWF5YmVfeGNtX3ZlcnNpb25gOiBUaGUgZGVmYXVsdCBYQ00gZW5jb2RpbmcgdmVyc2lvbiwgb3IgYE5vbmVgIHRvIGRpc2FibGUu3gAEpG5hbWW+Zm9yY2Vfc3Vic2NyaWJlX3ZlcnNpb25fbm90aWZ5pmZpZWxkc5HeAASkbmFtZahsb2NhdGlvbqR0eXBlzKSodHlwZU5hbWW7Qm94PFZlcnNpb25lZE11bHRpTG9jYXRpb24+pGRvY3OQpWluZGV4BqRkb2NzlNlOQXNrIGEgbG9jYXRpb24gdG8gbm90aWZ5IHVzIHJlZ2FyZGluZyB0aGVpciBYQ00gdmVyc2lvbiBhbmQgYW55IGNoYW5nZXMgdG8gaXQuoLktIGBvcmlnaW5gOiBNdXN0IGJlIFJvb3Qu2VYtIGBsb2NhdGlvbmA6IFRoZSBsb2NhdGlvbiB0byB3aGljaCB3ZSBzaG91bGQgc3Vic2NyaWJlIGZvciBYQ00gdmVyc2lvbiBub3RpZmljYXRpb25zLt4ABKRuYW1l2SBmb3JjZV91bnN1YnNjcmliZV92ZXJzaW9uX25vdGlmeaZmaWVsZHOR3gAEpG5hbWWobG9jYXRpb26kdHlwZcykqHR5cGVOYW1lu0JveDxWZXJzaW9uZWRNdWx0aUxvY2F0aW9uPqRkb2NzkKVpbmRleAekZG9jc5bZUlJlcXVpcmUgdGhhdCBhIHBhcnRpY3VsYXIgZGVzdGluYXRpb24gc2hvdWxkIG5vIGxvbmdlciBub3RpZnkgdXMgcmVnYXJkaW5nIGFueSBYQ02wdmVyc2lvbiBjaGFuZ2VzLqC5LSBgb3JpZ2luYDogTXVzdCBiZSBSb290LtlPLSBgbG9jYXRpb25gOiBUaGUgbG9jYXRpb24gdG8gd2hpY2ggd2UgYXJlIGN1cnJlbnRseSBzdWJzY3JpYmVkIGZvciBYQ00gdmVyc2lvbtkqICBub3RpZmljYXRpb25zIHdoaWNoIHdlIG5vIGxvbmdlciBkZXNpcmUu3gAEpG5hbWW/bGltaXRlZF9yZXNlcnZlX3RyYW5zZmVyX2Fzc2V0c6ZmaWVsZHOV3gAEpG5hbWWkZGVzdKR0eXBlzKSodHlwZU5hbWW7Qm94PFZlcnNpb25lZE11bHRpTG9jYXRpb24+pGRvY3OQ3gAEpG5hbWWrYmVuZWZpY2lhcnmkdHlwZcykqHR5cGVOYW1lu0JveDxWZXJzaW9uZWRNdWx0aUxvY2F0aW9uPqRkb2NzkN4ABKRuYW1lpmFzc2V0c6R0eXBlzJaodHlwZU5hbWW5Qm94PFZlcnNpb25lZE11bHRpQXNzZXRzPqRkb2NzkN4ABKRuYW1lrmZlZV9hc3NldF9pdGVtpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lrHdlaWdodF9saW1pdKR0eXBlzJWodHlwZU5hbWWrV2VpZ2h0TGltaXSkZG9jc5ClaW5kZXgIpGRvY3PcABLZU1RyYW5zZmVyIHNvbWUgYXNzZXRzIGZyb20gdGhlIGxvY2FsIGNoYWluIHRvIHRoZSBzb3ZlcmVpZ24gYWNjb3VudCBvZiBhIGRlc3RpbmF0aW9u2SVjaGFpbiBhbmQgZm9yd2FyZCBhIG5vdGlmaWNhdGlvbiBYQ00uoNlURmVlIHBheW1lbnQgb24gdGhlIGRlc3RpbmF0aW9uIHNpZGUgaXMgbWFkZSBmcm9tIHRoZSBhc3NldCBpbiB0aGUgYGFzc2V0c2AgdmVjdG9yIG9m2VhpbmRleCBgZmVlX2Fzc2V0X2l0ZW1gLCB1cCB0byBlbm91Z2ggdG8gcGF5IGZvciBgd2VpZ2h0X2xpbWl0YCBvZiB3ZWlnaHQuIElmIG1vcmUgd2VpZ2h02VZpcyBuZWVkZWQgdGhhbiBgd2VpZ2h0X2xpbWl0YCwgdGhlbiB0aGUgb3BlcmF0aW9uIHdpbGwgZmFpbCBhbmQgdGhlIGFzc2V0cyBzZW5kIG1heSBiZahhdCByaXNrLqDZSi0gYG9yaWdpbmA6IE11c3QgYmUgY2FwYWJsZSBvZiB3aXRoZHJhd2luZyB0aGUgYGFzc2V0c2AgYW5kIGV4ZWN1dGluZyBYQ00u2WMtIGBkZXN0YDogRGVzdGluYXRpb24gY29udGV4dCBmb3IgdGhlIGFzc2V0cy4gV2lsbCB0eXBpY2FsbHkgYmUgYFgyKFBhcmVudCwgUGFyYWNoYWluKC4uKSlgIHRvIHNlbmTZViAgZnJvbSBwYXJhY2hhaW4gdG8gcGFyYWNoYWluLCBvciBgWDEoUGFyYWNoYWluKC4uKSlgIHRvIHNlbmQgZnJvbSByZWxheSB0byBwYXJhY2hhaW4u2WItIGBiZW5lZmljaWFyeWA6IEEgYmVuZWZpY2lhcnkgbG9jYXRpb24gZm9yIHRoZSBhc3NldHMgaW4gdGhlIGNvbnRleHQgb2YgYGRlc3RgLiBXaWxsIGdlbmVyYWxseSBiZbkgIGFuIGBBY2NvdW50SWQzMmAgdmFsdWUu2WEtIGBhc3NldHNgOiBUaGUgYXNzZXRzIHRvIGJlIHdpdGhkcmF3bi4gVGhpcyBzaG91bGQgaW5jbHVkZSB0aGUgYXNzZXRzIHVzZWQgdG8gcGF5IHRoZSBmZWUgb24gdGhlriAgYGRlc3RgIHNpZGUu2VMtIGBmZWVfYXNzZXRfaXRlbWA6IFRoZSBpbmRleCBpbnRvIGBhc3NldHNgIG9mIHRoZSBpdGVtIHdoaWNoIHNob3VsZCBiZSB1c2VkIHRvIHBheacgIGZlZXMu2VEtIGB3ZWlnaHRfbGltaXRgOiBUaGUgcmVtb3RlLXNpZGUgd2VpZ2h0IGxpbWl0LCBpZiBhbnksIGZvciB0aGUgWENNIGZlZSBwdXJjaGFzZS7eAASkbmFtZbdsaW1pdGVkX3RlbGVwb3J0X2Fzc2V0c6ZmaWVsZHOV3gAEpG5hbWWkZGVzdKR0eXBlzKSodHlwZU5hbWW7Qm94PFZlcnNpb25lZE11bHRpTG9jYXRpb24+pGRvY3OQ3gAEpG5hbWWrYmVuZWZpY2lhcnmkdHlwZcykqHR5cGVOYW1lu0JveDxWZXJzaW9uZWRNdWx0aUxvY2F0aW9uPqRkb2NzkN4ABKRuYW1lpmFzc2V0c6R0eXBlzJaodHlwZU5hbWW5Qm94PFZlcnNpb25lZE11bHRpQXNzZXRzPqRkb2NzkN4ABKRuYW1lrmZlZV9hc3NldF9pdGVtpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lrHdlaWdodF9saW1pdKR0eXBlzJWodHlwZU5hbWWrV2VpZ2h0TGltaXSkZG9jc5ClaW5kZXgJpGRvY3PcABHZRFRlbGVwb3J0IHNvbWUgYXNzZXRzIGZyb20gdGhlIGxvY2FsIGNoYWluIHRvIHNvbWUgZGVzdGluYXRpb24gY2hhaW4uoNlURmVlIHBheW1lbnQgb24gdGhlIGRlc3RpbmF0aW9uIHNpZGUgaXMgbWFkZSBmcm9tIHRoZSBhc3NldCBpbiB0aGUgYGFzc2V0c2AgdmVjdG9yIG9m2VhpbmRleCBgZmVlX2Fzc2V0X2l0ZW1gLCB1cCB0byBlbm91Z2ggdG8gcGF5IGZvciBgd2VpZ2h0X2xpbWl0YCBvZiB3ZWlnaHQuIElmIG1vcmUgd2VpZ2h02VZpcyBuZWVkZWQgdGhhbiBgd2VpZ2h0X2xpbWl0YCwgdGhlbiB0aGUgb3BlcmF0aW9uIHdpbGwgZmFpbCBhbmQgdGhlIGFzc2V0cyBzZW5kIG1heSBiZahhdCByaXNrLqDZSi0gYG9yaWdpbmA6IE11c3QgYmUgY2FwYWJsZSBvZiB3aXRoZHJhd2luZyB0aGUgYGFzc2V0c2AgYW5kIGV4ZWN1dGluZyBYQ00u2WMtIGBkZXN0YDogRGVzdGluYXRpb24gY29udGV4dCBmb3IgdGhlIGFzc2V0cy4gV2lsbCB0eXBpY2FsbHkgYmUgYFgyKFBhcmVudCwgUGFyYWNoYWluKC4uKSlgIHRvIHNlbmTZViAgZnJvbSBwYXJhY2hhaW4gdG8gcGFyYWNoYWluLCBvciBgWDEoUGFyYWNoYWluKC4uKSlgIHRvIHNlbmQgZnJvbSByZWxheSB0byBwYXJhY2hhaW4u2WItIGBiZW5lZmljaWFyeWA6IEEgYmVuZWZpY2lhcnkgbG9jYXRpb24gZm9yIHRoZSBhc3NldHMgaW4gdGhlIGNvbnRleHQgb2YgYGRlc3RgLiBXaWxsIGdlbmVyYWxseSBiZbkgIGFuIGBBY2NvdW50SWQzMmAgdmFsdWUu2WstIGBhc3NldHNgOiBUaGUgYXNzZXRzIHRvIGJlIHdpdGhkcmF3bi4gVGhlIGZpcnN0IGl0ZW0gc2hvdWxkIGJlIHRoZSBjdXJyZW5jeSB1c2VkIHRvIHRvIHBheSB0aGUgZmVlIG9uIHRoZdkgICBgZGVzdGAgc2lkZS4gTWF5IG5vdCBiZSBlbXB0eS7ZUy0gYGZlZV9hc3NldF9pdGVtYDogVGhlIGluZGV4IGludG8gYGFzc2V0c2Agb2YgdGhlIGl0ZW0gd2hpY2ggc2hvdWxkIGJlIHVzZWQgdG8gcGF5pyAgZmVlcy7ZUS0gYHdlaWdodF9saW1pdGA6IFRoZSByZW1vdGUtc2lkZSB3ZWlnaHQgbGltaXQsIGlmIGFueSwgZm9yIHRoZSBYQ00gZmVlIHB1cmNoYXNlLqRkb2NzkdlJQ29udGFpbnMgb25lIHZhcmlhbnQgcGVyIGRpc3BhdGNoYWJsZSB0aGF0IGNhbiBiZSBjYWxsZWQgYnkgYW4gZXh0cmluc2ljLt4AAqJpZM0B8aR0eXBl3gAEpHBhdGiSo3hjbaxWZXJzaW9uZWRYY22mcGFyYW1zkd4AAqRuYW1lq1J1bnRpbWVDYWxspHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lolYypmZpZWxkc5HeAASkbmFtZcCkdHlwZc0B8qh0eXBlTmFtZbR2Mjo6WGNtPFJ1bnRpbWVDYWxsPqRkb2NzkKVpbmRleAKkZG9jc5DeAASkbmFtZaJWM6ZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAfaodHlwZU5hbWW0djM6OlhjbTxSdW50aW1lQ2FsbD6kZG9jc5ClaW5kZXgDpGRvY3OQpGRvY3OQ3gAComlkzQHypHR5cGXeAASkcGF0aJOjeGNtonYyo1hjbaZwYXJhbXOR3gACpG5hbWWrUnVudGltZUNhbGykdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAfOodHlwZU5hbWW9VmVjPEluc3RydWN0aW9uPFJ1bnRpbWVDYWxsPj6kZG9jc5CkZG9jc5DeAAKiaWTNAfOkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQH0pGRvY3OQ3gAComlkzQH0pHR5cGXeAASkcGF0aJOjeGNtonYyq0luc3RydWN0aW9upnBhcmFtc5HeAAKkbmFtZatSdW50aW1lQ2FsbKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c9wAHN4ABKRuYW1lrVdpdGhkcmF3QXNzZXSmZmllbGRzkd4ABKRuYW1lwKR0eXBlzJeodHlwZU5hbWWrTXVsdGlBc3NldHOkZG9jc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWW1UmVzZXJ2ZUFzc2V0RGVwb3NpdGVkpmZpZWxkc5HeAASkbmFtZcCkdHlwZcyXqHR5cGVOYW1lq011bHRpQXNzZXRzpGRvY3OQpWluZGV4AaRkb2NzkN4ABKRuYW1ltlJlY2VpdmVUZWxlcG9ydGVkQXNzZXSmZmllbGRzkd4ABKRuYW1lwKR0eXBlzJeodHlwZU5hbWWrTXVsdGlBc3NldHOkZG9jc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWtUXVlcnlSZXNwb25zZaZmaWVsZHOT3gAEpG5hbWWocXVlcnlfaWSkdHlwZQmodHlwZU5hbWWnUXVlcnlJZKRkb2NzkN4ABKRuYW1lqHJlc3BvbnNlpHR5cGXNAduodHlwZU5hbWWoUmVzcG9uc2WkZG9jc5DeAASkbmFtZaptYXhfd2VpZ2h0pHR5cGUJqHR5cGVOYW1lo3U2NKRkb2NzkKVpbmRleAOkZG9jc5DeAASkbmFtZa1UcmFuc2ZlckFzc2V0pmZpZWxkc5LeAASkbmFtZaZhc3NldHOkdHlwZcyXqHR5cGVOYW1lq011bHRpQXNzZXRzpGRvY3OQ3gAEpG5hbWWrYmVuZWZpY2lhcnmkdHlwZcybqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5ClaW5kZXgEpGRvY3OQ3gAEpG5hbWW0VHJhbnNmZXJSZXNlcnZlQXNzZXSmZmllbGRzk94ABKRuYW1lpmFzc2V0c6R0eXBlzJeodHlwZU5hbWWrTXVsdGlBc3NldHOkZG9jc5DeAASkbmFtZaRkZXN0pHR5cGXMm6h0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQ3gAEpG5hbWWjeGNtpHR5cGXNAdiodHlwZU5hbWWnWGNtPCgpPqRkb2NzkKVpbmRleAWkZG9jc5DeAASkbmFtZahUcmFuc2FjdKZmaWVsZHOT3gAEpG5hbWWrb3JpZ2luX3R5cGWkdHlwZcyPqHR5cGVOYW1lqk9yaWdpbktpbmSkZG9jc5DeAASkbmFtZbZyZXF1aXJlX3dlaWdodF9hdF9tb3N0pHR5cGUJqHR5cGVOYW1lo3U2NKRkb2NzkN4ABKRuYW1lpGNhbGykdHlwZc0B9ah0eXBlTmFtZbpEb3VibGVFbmNvZGVkPFJ1bnRpbWVDYWxsPqRkb2NzkKVpbmRleAakZG9jc5DeAASkbmFtZblIcm1wTmV3Q2hhbm5lbE9wZW5SZXF1ZXN0pmZpZWxkc5PeAASkbmFtZaZzZW5kZXKkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lsG1heF9tZXNzYWdlX3NpemWkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lrG1heF9jYXBhY2l0eaR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4B6Rkb2NzkN4ABKRuYW1ls0hybXBDaGFubmVsQWNjZXB0ZWSmZmllbGRzkd4ABKRuYW1lqXJlY2lwaWVudKR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4CKRkb2NzkN4ABKRuYW1lskhybXBDaGFubmVsQ2xvc2luZ6ZmaWVsZHOT3gAEpG5hbWWpaW5pdGlhdG9ypHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZaZzZW5kZXKkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lqXJlY2lwaWVudKR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4CaRkb2NzkN4ABKRuYW1lq0NsZWFyT3JpZ2lupmZpZWxkc5ClaW5kZXgKpGRvY3OQ3gAEpG5hbWWtRGVzY2VuZE9yaWdpbqZmaWVsZHOR3gAEpG5hbWXApHR5cGXMnKh0eXBlTmFtZbVJbnRlcmlvck11bHRpTG9jYXRpb26kZG9jc5ClaW5kZXgLpGRvY3OQ3gAEpG5hbWWrUmVwb3J0RXJyb3KmZmllbGRzk94ABKRuYW1lqHF1ZXJ5X2lkpHR5cGUJqHR5cGVOYW1lp1F1ZXJ5SWSkZG9jc5DeAASkbmFtZaRkZXN0pHR5cGXMm6h0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQ3gAEpG5hbWWzbWF4X3Jlc3BvbnNlX3dlaWdodKR0eXBlCah0eXBlTmFtZaN1NjSkZG9jc5ClaW5kZXgMpGRvY3OQ3gAEpG5hbWWsRGVwb3NpdEFzc2V0pmZpZWxkc5PeAASkbmFtZaZhc3NldHOkdHlwZc0B36h0eXBlTmFtZbBNdWx0aUFzc2V0RmlsdGVypGRvY3OQ3gAEpG5hbWWqbWF4X2Fzc2V0c6R0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWWrYmVuZWZpY2lhcnmkdHlwZcybqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5ClaW5kZXgNpGRvY3OQ3gAEpG5hbWWzRGVwb3NpdFJlc2VydmVBc3NldKZmaWVsZHOU3gAEpG5hbWWmYXNzZXRzpHR5cGXNAd+odHlwZU5hbWWwTXVsdGlBc3NldEZpbHRlcqRkb2NzkN4ABKRuYW1lqm1heF9hc3NldHOkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lpGRlc3SkdHlwZcybqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZaN4Y22kdHlwZc0B2Kh0eXBlTmFtZadYY208KCk+pGRvY3OQpWluZGV4DqRkb2NzkN4ABKRuYW1lrUV4Y2hhbmdlQXNzZXSmZmllbGRzkt4ABKRuYW1lpGdpdmWkdHlwZc0B36h0eXBlTmFtZbBNdWx0aUFzc2V0RmlsdGVypGRvY3OQ3gAEpG5hbWWncmVjZWl2ZaR0eXBlzJeodHlwZU5hbWWrTXVsdGlBc3NldHOkZG9jc5ClaW5kZXgPpGRvY3OQ3gAEpG5hbWW3SW5pdGlhdGVSZXNlcnZlV2l0aGRyYXemZmllbGRzk94ABKRuYW1lpmFzc2V0c6R0eXBlzQHfqHR5cGVOYW1lsE11bHRpQXNzZXRGaWx0ZXKkZG9jc5DeAASkbmFtZadyZXNlcnZlpHR5cGXMm6h0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQ3gAEpG5hbWWjeGNtpHR5cGXNAdiodHlwZU5hbWWnWGNtPCgpPqRkb2NzkKVpbmRleBCkZG9jc5DeAASkbmFtZbBJbml0aWF0ZVRlbGVwb3J0pmZpZWxkc5PeAASkbmFtZaZhc3NldHOkdHlwZc0B36h0eXBlTmFtZbBNdWx0aUFzc2V0RmlsdGVypGRvY3OQ3gAEpG5hbWWkZGVzdKR0eXBlzJuodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkN4ABKRuYW1lo3hjbaR0eXBlzQHYqHR5cGVOYW1lp1hjbTwoKT6kZG9jc5ClaW5kZXgRpGRvY3OQ3gAEpG5hbWWsUXVlcnlIb2xkaW5npmZpZWxkc5TeAASkbmFtZahxdWVyeV9pZKR0eXBlCah0eXBlTmFtZadRdWVyeUlkpGRvY3OQ3gAEpG5hbWWkZGVzdKR0eXBlzJuodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkN4ABKRuYW1lpmFzc2V0c6R0eXBlzQHfqHR5cGVOYW1lsE11bHRpQXNzZXRGaWx0ZXKkZG9jc5DeAASkbmFtZbNtYXhfcmVzcG9uc2Vfd2VpZ2h0pHR5cGUJqHR5cGVOYW1lo3U2NKRkb2NzkKVpbmRleBKkZG9jc5DeAASkbmFtZaxCdXlFeGVjdXRpb26mZmllbGRzkt4ABKRuYW1lpGZlZXOkdHlwZcyZqHR5cGVOYW1lqk11bHRpQXNzZXSkZG9jc5DeAASkbmFtZax3ZWlnaHRfbGltaXSkdHlwZc0B4qh0eXBlTmFtZatXZWlnaHRMaW1pdKRkb2NzkKVpbmRleBOkZG9jc5DeAASkbmFtZa1SZWZ1bmRTdXJwbHVzpmZpZWxkc5ClaW5kZXgUpGRvY3OQ3gAEpG5hbWWvU2V0RXJyb3JIYW5kbGVypmZpZWxkc5HeAASkbmFtZcCkdHlwZc0B8qh0eXBlTmFtZbBYY208UnVudGltZUNhbGw+pGRvY3OQpWluZGV4FaRkb2NzkN4ABKRuYW1lq1NldEFwcGVuZGl4pmZpZWxkc5HeAASkbmFtZcCkdHlwZc0B8qh0eXBlTmFtZbBYY208UnVudGltZUNhbGw+pGRvY3OQpWluZGV4FqRkb2NzkN4ABKRuYW1lqkNsZWFyRXJyb3KmZmllbGRzkKVpbmRleBekZG9jc5DeAASkbmFtZapDbGFpbUFzc2V0pmZpZWxkc5LeAASkbmFtZaZhc3NldHOkdHlwZcyXqHR5cGVOYW1lq011bHRpQXNzZXRzpGRvY3OQ3gAEpG5hbWWmdGlja2V0pHR5cGXMm6h0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQpWluZGV4GKRkb2NzkN4ABKRuYW1lpFRyYXCmZmllbGRzkd4ABKRuYW1lwKR0eXBlCah0eXBlTmFtZaN1NjSkZG9jc5ClaW5kZXgZpGRvY3OQ3gAEpG5hbWWwU3Vic2NyaWJlVmVyc2lvbqZmaWVsZHOS3gAEpG5hbWWocXVlcnlfaWSkdHlwZQmodHlwZU5hbWWnUXVlcnlJZKRkb2NzkN4ABKRuYW1ls21heF9yZXNwb25zZV93ZWlnaHSkdHlwZQmodHlwZU5hbWWjdTY0pGRvY3OQpWluZGV4GqRkb2NzkN4ABKRuYW1lslVuc3Vic2NyaWJlVmVyc2lvbqZmaWVsZHOQpWluZGV4G6Rkb2NzkKRkb2NzkN4AAqJpZM0B9aR0eXBl3gAEpHBhdGiTo3hjba5kb3VibGVfZW5jb2RlZK1Eb3VibGVFbmNvZGVkpnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lp2VuY29kZWSkdHlwZQyodHlwZU5hbWWnVmVjPHU4PqRkb2NzkKRkb2NzkN4AAqJpZM0B9qR0eXBl3gAEpHBhdGiTo3hjbaJ2M6NYY22mcGFyYW1zkd4AAqRuYW1lpENhbGykdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAfeodHlwZU5hbWW2VmVjPEluc3RydWN0aW9uPENhbGw+PqRkb2NzkKRkb2NzkN4AAqJpZM0B96R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAfikZG9jc5DeAAKiaWTNAfikdHlwZd4ABKRwYXRok6N4Y22idjOrSW5zdHJ1Y3Rpb26mcGFyYW1zkd4AAqRuYW1lpENhbGykdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHPcADDeAASkbmFtZa1XaXRoZHJhd0Fzc2V0pmZpZWxkc5HeAASkbmFtZcCkdHlwZcx+qHR5cGVOYW1lq011bHRpQXNzZXRzpGRvY3OQpWluZGV4AKRkb2NzkN4ABKRuYW1ltVJlc2VydmVBc3NldERlcG9zaXRlZKZmaWVsZHOR3gAEpG5hbWXApHR5cGXMfqh0eXBlTmFtZatNdWx0aUFzc2V0c6Rkb2NzkKVpbmRleAGkZG9jc5DeAASkbmFtZbZSZWNlaXZlVGVsZXBvcnRlZEFzc2V0pmZpZWxkc5HeAASkbmFtZcCkdHlwZcx+qHR5cGVOYW1lq011bHRpQXNzZXRzpGRvY3OQpWluZGV4AqRkb2NzkN4ABKRuYW1lrVF1ZXJ5UmVzcG9uc2WmZmllbGRzlN4ABKRuYW1lqHF1ZXJ5X2lkpHR5cGUJqHR5cGVOYW1lp1F1ZXJ5SWSkZG9jc5DeAASkbmFtZahyZXNwb25zZaR0eXBlzIWodHlwZU5hbWWoUmVzcG9uc2WkZG9jc5DeAASkbmFtZaptYXhfd2VpZ2h0pHR5cGUIqHR5cGVOYW1lpldlaWdodKRkb2NzkN4ABKRuYW1lp3F1ZXJpZXKkdHlwZcyOqHR5cGVOYW1ltU9wdGlvbjxNdWx0aUxvY2F0aW9uPqRkb2NzkKVpbmRleAOkZG9jc5DeAASkbmFtZa1UcmFuc2ZlckFzc2V0pmZpZWxkc5LeAASkbmFtZaZhc3NldHOkdHlwZcx+qHR5cGVOYW1lq011bHRpQXNzZXRzpGRvY3OQ3gAEpG5hbWWrYmVuZWZpY2lhcnmkdHlwZcxyqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5ClaW5kZXgEpGRvY3OQ3gAEpG5hbWW0VHJhbnNmZXJSZXNlcnZlQXNzZXSmZmllbGRzk94ABKRuYW1lpmFzc2V0c6R0eXBlzH6odHlwZU5hbWWrTXVsdGlBc3NldHOkZG9jc5DeAASkbmFtZaRkZXN0pHR5cGXMcqh0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQ3gAEpG5hbWWjeGNtpHR5cGXMe6h0eXBlTmFtZadYY208KCk+pGRvY3OQpWluZGV4BaRkb2NzkN4ABKRuYW1lqFRyYW5zYWN0pmZpZWxkc5PeAASkbmFtZatvcmlnaW5fa2luZKR0eXBlzI+odHlwZU5hbWWqT3JpZ2luS2luZKRkb2NzkN4ABKRuYW1ltnJlcXVpcmVfd2VpZ2h0X2F0X21vc3SkdHlwZQiodHlwZU5hbWWmV2VpZ2h0pGRvY3OQ3gAEpG5hbWWkY2FsbKR0eXBlzQH1qHR5cGVOYW1ls0RvdWJsZUVuY29kZWQ8Q2FsbD6kZG9jc5ClaW5kZXgGpGRvY3OQ3gAEpG5hbWW5SHJtcE5ld0NoYW5uZWxPcGVuUmVxdWVzdKZmaWVsZHOT3gAEpG5hbWWmc2VuZGVypHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZbBtYXhfbWVzc2FnZV9zaXplpHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZaxtYXhfY2FwYWNpdHmkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAekZG9jc5DeAASkbmFtZbNIcm1wQ2hhbm5lbEFjY2VwdGVkpmZpZWxkc5HeAASkbmFtZalyZWNpcGllbnSkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAikZG9jc5DeAASkbmFtZbJIcm1wQ2hhbm5lbENsb3NpbmemZmllbGRzk94ABKRuYW1lqWluaXRpYXRvcqR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWWmc2VuZGVypHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZalyZWNpcGllbnSkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAmkZG9jc5DeAASkbmFtZatDbGVhck9yaWdpbqZmaWVsZHOQpWluZGV4CqRkb2NzkN4ABKRuYW1lrURlc2NlbmRPcmlnaW6mZmllbGRzkd4ABKRuYW1lwKR0eXBlzHOodHlwZU5hbWW1SW50ZXJpb3JNdWx0aUxvY2F0aW9upGRvY3OQpWluZGV4C6Rkb2NzkN4ABKRuYW1lq1JlcG9ydEVycm9ypmZpZWxkc5HeAASkbmFtZcCkdHlwZcyRqHR5cGVOYW1lsVF1ZXJ5UmVzcG9uc2VJbmZvpGRvY3OQpWluZGV4DKRkb2NzkN4ABKRuYW1lrERlcG9zaXRBc3NldKZmaWVsZHOS3gAEpG5hbWWmYXNzZXRzpHR5cGXMkqh0eXBlTmFtZbBNdWx0aUFzc2V0RmlsdGVypGRvY3OQ3gAEpG5hbWWrYmVuZWZpY2lhcnmkdHlwZcxyqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5ClaW5kZXgNpGRvY3OQ3gAEpG5hbWWzRGVwb3NpdFJlc2VydmVBc3NldKZmaWVsZHOT3gAEpG5hbWWmYXNzZXRzpHR5cGXMkqh0eXBlTmFtZbBNdWx0aUFzc2V0RmlsdGVypGRvY3OQ3gAEpG5hbWWkZGVzdKR0eXBlzHKodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkN4ABKRuYW1lo3hjbaR0eXBlzHuodHlwZU5hbWWnWGNtPCgpPqRkb2NzkKVpbmRleA6kZG9jc5DeAASkbmFtZa1FeGNoYW5nZUFzc2V0pmZpZWxkc5PeAASkbmFtZaRnaXZlpHR5cGXMkqh0eXBlTmFtZbBNdWx0aUFzc2V0RmlsdGVypGRvY3OQ3gAEpG5hbWWkd2FudKR0eXBlzH6odHlwZU5hbWWrTXVsdGlBc3NldHOkZG9jc5DeAASkbmFtZadtYXhpbWFspHR5cGUlqHR5cGVOYW1lpGJvb2ykZG9jc5ClaW5kZXgPpGRvY3OQ3gAEpG5hbWW3SW5pdGlhdGVSZXNlcnZlV2l0aGRyYXemZmllbGRzk94ABKRuYW1lpmFzc2V0c6R0eXBlzJKodHlwZU5hbWWwTXVsdGlBc3NldEZpbHRlcqRkb2NzkN4ABKRuYW1lp3Jlc2VydmWkdHlwZcxyqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZaN4Y22kdHlwZcx7qHR5cGVOYW1lp1hjbTwoKT6kZG9jc5ClaW5kZXgQpGRvY3OQ3gAEpG5hbWWwSW5pdGlhdGVUZWxlcG9ydKZmaWVsZHOT3gAEpG5hbWWmYXNzZXRzpHR5cGXMkqh0eXBlTmFtZbBNdWx0aUFzc2V0RmlsdGVypGRvY3OQ3gAEpG5hbWWkZGVzdKR0eXBlzHKodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkN4ABKRuYW1lo3hjbaR0eXBlzHuodHlwZU5hbWWnWGNtPCgpPqRkb2NzkKVpbmRleBGkZG9jc5DeAASkbmFtZa1SZXBvcnRIb2xkaW5npmZpZWxkc5LeAASkbmFtZa1yZXNwb25zZV9pbmZvpHR5cGXMkah0eXBlTmFtZbFRdWVyeVJlc3BvbnNlSW5mb6Rkb2NzkN4ABKRuYW1lpmFzc2V0c6R0eXBlzJKodHlwZU5hbWWwTXVsdGlBc3NldEZpbHRlcqRkb2NzkKVpbmRleBKkZG9jc5DeAASkbmFtZaxCdXlFeGVjdXRpb26mZmllbGRzkt4ABKRuYW1lpGZlZXOkdHlwZcyAqHR5cGVOYW1lqk11bHRpQXNzZXSkZG9jc5DeAASkbmFtZax3ZWlnaHRfbGltaXSkdHlwZcyVqHR5cGVOYW1lq1dlaWdodExpbWl0pGRvY3OQpWluZGV4E6Rkb2NzkN4ABKRuYW1lrVJlZnVuZFN1cnBsdXOmZmllbGRzkKVpbmRleBSkZG9jc5DeAASkbmFtZa9TZXRFcnJvckhhbmRsZXKmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQH2qHR5cGVOYW1lqVhjbTxDYWxsPqRkb2NzkKVpbmRleBWkZG9jc5DeAASkbmFtZatTZXRBcHBlbmRpeKZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAfaodHlwZU5hbWWpWGNtPENhbGw+pGRvY3OQpWluZGV4FqRkb2NzkN4ABKRuYW1lqkNsZWFyRXJyb3KmZmllbGRzkKVpbmRleBekZG9jc5DeAASkbmFtZapDbGFpbUFzc2V0pmZpZWxkc5LeAASkbmFtZaZhc3NldHOkdHlwZcx+qHR5cGVOYW1lq011bHRpQXNzZXRzpGRvY3OQ3gAEpG5hbWWmdGlja2V0pHR5cGXMcqh0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQpWluZGV4GKRkb2NzkN4ABKRuYW1lpFRyYXCmZmllbGRzkd4ABKRuYW1lwKR0eXBlCah0eXBlTmFtZaN1NjSkZG9jc5ClaW5kZXgZpGRvY3OQ3gAEpG5hbWWwU3Vic2NyaWJlVmVyc2lvbqZmaWVsZHOS3gAEpG5hbWWocXVlcnlfaWSkdHlwZQmodHlwZU5hbWWnUXVlcnlJZKRkb2NzkN4ABKRuYW1ls21heF9yZXNwb25zZV93ZWlnaHSkdHlwZQiodHlwZU5hbWWmV2VpZ2h0pGRvY3OQpWluZGV4GqRkb2NzkN4ABKRuYW1lslVuc3Vic2NyaWJlVmVyc2lvbqZmaWVsZHOQpWluZGV4G6Rkb2NzkN4ABKRuYW1lqUJ1cm5Bc3NldKZmaWVsZHOR3gAEpG5hbWXApHR5cGXMfqh0eXBlTmFtZatNdWx0aUFzc2V0c6Rkb2NzkKVpbmRleBykZG9jc5DeAASkbmFtZatFeHBlY3RBc3NldKZmaWVsZHOR3gAEpG5hbWXApHR5cGXMfqh0eXBlTmFtZatNdWx0aUFzc2V0c6Rkb2NzkKVpbmRleB2kZG9jc5DeAASkbmFtZaxFeHBlY3RPcmlnaW6mZmllbGRzkd4ABKRuYW1lwKR0eXBlzI6odHlwZU5hbWW1T3B0aW9uPE11bHRpTG9jYXRpb24+pGRvY3OQpWluZGV4HqRkb2NzkN4ABKRuYW1lq0V4cGVjdEVycm9ypmZpZWxkc5HeAASkbmFtZcCkdHlwZcyGqHR5cGVOYW1ltE9wdGlvbjwodTMyLCBFcnJvcik+pGRvY3OQpWluZGV4H6Rkb2NzkN4ABKRuYW1ltEV4cGVjdFRyYW5zYWN0U3RhdHVzpmZpZWxkc5HeAASkbmFtZcCkdHlwZcyMqHR5cGVOYW1lrk1heWJlRXJyb3JDb2RlpGRvY3OQpWluZGV4IKRkb2NzkN4ABKRuYW1lq1F1ZXJ5UGFsbGV0pmZpZWxkc5LeAASkbmFtZattb2R1bGVfbmFtZaR0eXBlDKh0eXBlTmFtZadWZWM8dTg+pGRvY3OQ3gAEpG5hbWWtcmVzcG9uc2VfaW5mb6R0eXBlzJGodHlwZU5hbWWxUXVlcnlSZXNwb25zZUluZm+kZG9jc5ClaW5kZXghpGRvY3OQ3gAEpG5hbWWsRXhwZWN0UGFsbGV0pmZpZWxkc5XeAASkbmFtZaVpbmRleKR0eXBlzHWodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWWkbmFtZaR0eXBlDKh0eXBlTmFtZadWZWM8dTg+pGRvY3OQ3gAEpG5hbWWrbW9kdWxlX25hbWWkdHlwZQyodHlwZU5hbWWnVmVjPHU4PqRkb2NzkN4ABKRuYW1lq2NyYXRlX21ham9ypHR5cGXMdah0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZa9taW5fY3JhdGVfbWlub3KkdHlwZcx1qHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleCKkZG9jc5DeAASkbmFtZbRSZXBvcnRUcmFuc2FjdFN0YXR1c6ZmaWVsZHOR3gAEpG5hbWXApHR5cGXMkah0eXBlTmFtZbFRdWVyeVJlc3BvbnNlSW5mb6Rkb2NzkKVpbmRleCOkZG9jc5DeAASkbmFtZbNDbGVhclRyYW5zYWN0U3RhdHVzpmZpZWxkc5ClaW5kZXgkpGRvY3OQ3gAEpG5hbWWvVW5pdmVyc2FsT3JpZ2lupmZpZWxkc5HeAASkbmFtZcCkdHlwZcx0qHR5cGVOYW1lqEp1bmN0aW9upGRvY3OQpWluZGV4JaRkb2NzkN4ABKRuYW1lrUV4cG9ydE1lc3NhZ2WmZmllbGRzk94ABKRuYW1lp25ldHdvcmukdHlwZcx3qHR5cGVOYW1lqU5ldHdvcmtJZKRkb2NzkN4ABKRuYW1lq2Rlc3RpbmF0aW9upHR5cGXMc6h0eXBlTmFtZbVJbnRlcmlvck11bHRpTG9jYXRpb26kZG9jc5DeAASkbmFtZaN4Y22kdHlwZcx7qHR5cGVOYW1lp1hjbTwoKT6kZG9jc5ClaW5kZXgmpGRvY3OQ3gAEpG5hbWWpTG9ja0Fzc2V0pmZpZWxkc5LeAASkbmFtZaVhc3NldKR0eXBlzICodHlwZU5hbWWqTXVsdGlBc3NldKRkb2NzkN4ABKRuYW1lqHVubG9ja2VypHR5cGXMcqh0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQpWluZGV4J6Rkb2NzkN4ABKRuYW1lq1VubG9ja0Fzc2V0pmZpZWxkc5LeAASkbmFtZaVhc3NldKR0eXBlzICodHlwZU5hbWWqTXVsdGlBc3NldKRkb2NzkN4ABKRuYW1lpnRhcmdldKR0eXBlzHKodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkKVpbmRleCikZG9jc5DeAASkbmFtZa5Ob3RlVW5sb2NrYWJsZaZmaWVsZHOS3gAEpG5hbWWlYXNzZXSkdHlwZcyAqHR5cGVOYW1lqk11bHRpQXNzZXSkZG9jc5DeAASkbmFtZaVvd25lcqR0eXBlzHKodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkKVpbmRleCmkZG9jc5DeAASkbmFtZa1SZXF1ZXN0VW5sb2NrpmZpZWxkc5LeAASkbmFtZaVhc3NldKR0eXBlzICodHlwZU5hbWWqTXVsdGlBc3NldKRkb2NzkN4ABKRuYW1lpmxvY2tlcqR0eXBlzHKodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkKVpbmRleCqkZG9jc5DeAASkbmFtZatTZXRGZWVzTW9kZaZmaWVsZHOR3gAEpG5hbWWsaml0X3dpdGhkcmF3pHR5cGUlqHR5cGVOYW1lpGJvb2ykZG9jc5ClaW5kZXgrpGRvY3OQ3gAEpG5hbWWoU2V0VG9waWOmZmllbGRzkd4ABKRuYW1lwKR0eXBlAah0eXBlTmFtZahbdTg7IDMyXaRkb2NzkKVpbmRleCykZG9jc5DeAASkbmFtZapDbGVhclRvcGljpmZpZWxkc5ClaW5kZXgtpGRvY3OQ3gAEpG5hbWWrQWxpYXNPcmlnaW6mZmllbGRzkd4ABKRuYW1lwKR0eXBlzHKodHlwZU5hbWWtTXVsdGlMb2NhdGlvbqRkb2NzkKVpbmRleC6kZG9jc5DeAASkbmFtZa9VbnBhaWRFeGVjdXRpb26mZmllbGRzkt4ABKRuYW1lrHdlaWdodF9saW1pdKR0eXBlzJWodHlwZU5hbWWrV2VpZ2h0TGltaXSkZG9jc5DeAASkbmFtZaxjaGVja19vcmlnaW6kdHlwZcyOqHR5cGVOYW1ltU9wdGlvbjxNdWx0aUxvY2F0aW9uPqRkb2NzkKVpbmRleC+kZG9jc5CkZG9jc5DeAAKiaWTNAfmkdHlwZd4ABKRwYXRokq93ZXN0ZW5kX3J1bnRpbWWsT3JpZ2luQ2FsbGVypnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOU3gAEpG5hbWWmc3lzdGVtpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0B+qh0eXBlTmFtZb1mcmFtZV9zeXN0ZW06Ok9yaWdpbjxSdW50aW1lPqRkb2NzkKVpbmRleACkZG9jc5DeAASkbmFtZbBQYXJhY2hhaW5zT3JpZ2lupmZpZWxkc5HeAASkbmFtZcCkdHlwZc0B+6h0eXBlTmFtZblwYXJhY2hhaW5zX29yaWdpbjo6T3JpZ2lupGRvY3OQpWluZGV4KaRkb2NzkN4ABKRuYW1lqVhjbVBhbGxldKZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAfyodHlwZU5hbWWycGFsbGV0X3hjbTo6T3JpZ2lupGRvY3OQpWluZGV4zGOkZG9jc5DeAASkbmFtZaRWb2lkpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0B/ah0eXBlTmFtZdlEc2VsZjo6c3BfYXBpX2hpZGRlbl9pbmNsdWRlc19jb25zdHJ1Y3RfcnVudGltZTo6aGlkZGVuX2luY2x1ZGU6OlZvaWSkZG9jc5ClaW5kZXgDpGRvY3OQpGRvY3OQ3gAComlkzQH6pHR5cGXeAASkcGF0aJOtZnJhbWVfc3VwcG9ydKhkaXNwYXRjaKlSYXdPcmlnaW6mcGFyYW1zkd4AAqRuYW1lqUFjY291bnRJZKR0eXBlAKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5PeAASkbmFtZaRSb290pmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWmU2lnbmVkpmZpZWxkc5HeAASkbmFtZcCkdHlwZQCodHlwZU5hbWWpQWNjb3VudElkpGRvY3OQpWluZGV4AaRkb2NzkN4ABKRuYW1lpE5vbmWmZmllbGRzkKVpbmRleAKkZG9jc5CkZG9jc5DeAAKiaWTNAfukdHlwZd4ABKRwYXRolLtwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOmb3JpZ2lupnBhbGxldKZPcmlnaW6mcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5HeAASkbmFtZalQYXJhY2hhaW6mZmllbGRzkd4ABKRuYW1lwKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQpWluZGV4AKRkb2NzkKRkb2NzkN4AAqJpZM0B/KR0eXBl3gAEpHBhdGiTqnBhbGxldF94Y22mcGFsbGV0pk9yaWdpbqZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lo1hjbaZmaWVsZHOR3gAEpG5hbWXApHR5cGXMcqh0eXBlTmFtZa1NdWx0aUxvY2F0aW9upGRvY3OQpWluZGV4AKRkb2NzkN4ABKRuYW1lqFJlc3BvbnNlpmZpZWxkc5HeAASkbmFtZcCkdHlwZcxyqHR5cGVOYW1lrU11bHRpTG9jYXRpb26kZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzQH9pHR5cGXeAASkcGF0aJKnc3BfY29yZaRWb2lkpnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOQpGRvY3OQ3gAComlkzQH+pHR5cGXeAASkcGF0aJOucGFsbGV0X3V0aWxpdHmmcGFsbGV0pUVycm9ypnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkd4ABKRuYW1lrFRvb01hbnlDYWxsc6ZmaWVsZHOQpWluZGV4AKRkb2NzkbdUb28gbWFueSBjYWxscyBiYXRjaGVkLqRkb2NzkdltCgkJCUN1c3RvbSBbZGlzcGF0Y2ggZXJyb3JzXShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykKCQkJb2YgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZM0B/6R0eXBl3gAEpHBhdGiTr3BhbGxldF9pZGVudGl0eaV0eXBlc6xSZWdpc3RyYXRpb26mcGFyYW1zk94AAqRuYW1lp0JhbGFuY2WkdHlwZQbeAAKkbmFtZa1NYXhKdWRnZW1lbnRzpHR5cGXA3gACpG5hbWWzTWF4QWRkaXRpb25hbEZpZWxkc6R0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5PeAASkbmFtZapqdWRnZW1lbnRzpHR5cGXNAgCodHlwZU5hbWXZP0JvdW5kZWRWZWM8KFJlZ2lzdHJhckluZGV4LCBKdWRnZW1lbnQ8QmFsYW5jZT4pLCBNYXhKdWRnZW1lbnRzPqRkb2NzkN4ABKRuYW1lp2RlcG9zaXSkdHlwZQaodHlwZU5hbWWnQmFsYW5jZaRkb2NzkN4ABKRuYW1lpGluZm+kdHlwZc0BNKh0eXBlTmFtZdkhSWRlbnRpdHlJbmZvPE1heEFkZGl0aW9uYWxGaWVsZHM+pGRvY3OQpGRvY3OQ3gAComlkzQIApHR5cGXeAASkcGF0aJOzYm91bmRlZF9jb2xsZWN0aW9uc6tib3VuZGVkX3ZlY6pCb3VuZGVkVmVjpnBhcmFtc5LeAAKkbmFtZaFUpHR5cGXNAgHeAAKkbmFtZaFTpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQICqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZM0CAaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpXR1cGxlkgTNAVqkZG9jc5DeAAKiaWTNAgKkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQIBpGRvY3OQ3gAComlkzQIDpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSBs0CBKRkb2NzkN4AAqJpZM0CBKR0eXBl3gAEpHBhdGiTs2JvdW5kZWRfY29sbGVjdGlvbnOrYm91bmRlZF92ZWOqQm91bmRlZFZlY6ZwYXJhbXOS3gACpG5hbWWhVKR0eXBlAN4AAqRuYW1loVOkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGXM5Kh0eXBlTmFtZaZWZWM8VD6kZG9jc5CkZG9jc5DeAAKiaWTNAgWkdHlwZd4ABKRwYXRok7Nib3VuZGVkX2NvbGxlY3Rpb25zq2JvdW5kZWRfdmVjqkJvdW5kZWRWZWOmcGFyYW1zkt4AAqRuYW1loVSkdHlwZc0CBt4AAqRuYW1loVOkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAgiodHlwZU5hbWWmVmVjPFQ+pGRvY3OQpGRvY3OQ3gAComlkzQIGpHR5cGXeAASkcGF0aJGmT3B0aW9upnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXNAgejZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWkTm9uZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lpFNvbWWmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQIHqHR5cGVOYW1lwKRkb2NzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTNAgekdHlwZd4ABKRwYXRok69wYWxsZXRfaWRlbnRpdHmldHlwZXOtUmVnaXN0cmFySW5mb6ZwYXJhbXOS3gACpG5hbWWnQmFsYW5jZaR0eXBlBt4AAqRuYW1lqUFjY291bnRJZKR0eXBlAKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5PeAASkbmFtZadhY2NvdW50pHR5cGUAqHR5cGVOYW1lqUFjY291bnRJZKRkb2NzkN4ABKRuYW1lo2ZlZaR0eXBlBqh0eXBlTmFtZadCYWxhbmNlpGRvY3OQ3gAEpG5hbWWmZmllbGRzpHR5cGXNAViodHlwZU5hbWWuSWRlbnRpdHlGaWVsZHOkZG9jc5CkZG9jc5DeAAKiaWTNAgikdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQIGpGRvY3OQ3gAComlkzQIJpHR5cGXeAASkcGF0aJOvcGFsbGV0X2lkZW50aXR5pnBhbGxldKVFcnJvcqZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c9wAEt4ABKRuYW1lslRvb01hbnlTdWJBY2NvdW50c6ZmaWVsZHOQpWluZGV4AKRkb2NzkbdUb28gbWFueSBzdWJzLWFjY291bnRzLt4ABKRuYW1lqE5vdEZvdW5kpmZpZWxkc5ClaW5kZXgBpGRvY3ORtEFjY291bnQgaXNuJ3QgZm91bmQu3gAEpG5hbWWoTm90TmFtZWSmZmllbGRzkKVpbmRleAKkZG9jc5G0QWNjb3VudCBpc24ndCBuYW1lZC7eAASkbmFtZapFbXB0eUluZGV4pmZpZWxkc5ClaW5kZXgDpGRvY3ORrEVtcHR5IGluZGV4Lt4ABKRuYW1lqkZlZUNoYW5nZWSmZmllbGRzkKVpbmRleASkZG9jc5GvRmVlIGlzIGNoYW5nZWQu3gAEpG5hbWWqTm9JZGVudGl0eaZmaWVsZHOQpWluZGV4BaRkb2NzkbJObyBpZGVudGl0eSBmb3VuZC7eAASkbmFtZa9TdGlja3lKdWRnZW1lbnSmZmllbGRzkKVpbmRleAakZG9jc5GxU3RpY2t5IGp1ZGdlbWVudC7eAASkbmFtZa5KdWRnZW1lbnRHaXZlbqZmaWVsZHOQpWluZGV4B6Rkb2NzkbBKdWRnZW1lbnQgZ2l2ZW4u3gAEpG5hbWWwSW52YWxpZEp1ZGdlbWVudKZmaWVsZHOQpWluZGV4CKRkb2NzkbJJbnZhbGlkIGp1ZGdlbWVudC7eAASkbmFtZaxJbnZhbGlkSW5kZXimZmllbGRzkKVpbmRleAmkZG9jc5G1VGhlIGluZGV4IGlzIGludmFsaWQu3gAEpG5hbWWtSW52YWxpZFRhcmdldKZmaWVsZHOQpWluZGV4CqRkb2NzkbZUaGUgdGFyZ2V0IGlzIGludmFsaWQu3gAEpG5hbWWtVG9vTWFueUZpZWxkc6ZmaWVsZHOQpWluZGV4C6Rkb2NzkbtUb28gbWFueSBhZGRpdGlvbmFsIGZpZWxkcy7eAASkbmFtZbFUb29NYW55UmVnaXN0cmFyc6ZmaWVsZHOQpWluZGV4DKRkb2Nzkdk6TWF4aW11bSBhbW91bnQgb2YgcmVnaXN0cmFycyByZWFjaGVkLiBDYW5ub3QgYWRkIGFueSBtb3JlLt4ABKRuYW1lrkFscmVhZHlDbGFpbWVkpmZpZWxkc5ClaW5kZXgNpGRvY3ORvEFjY291bnQgSUQgaXMgYWxyZWFkeSBuYW1lZC7eAASkbmFtZaZOb3RTdWKmZmllbGRzkKVpbmRleA6kZG9jc5G8U2VuZGVyIGlzIG5vdCBhIHN1Yi1hY2NvdW50Lt4ABKRuYW1lqE5vdE93bmVkpmZpZWxkc5ClaW5kZXgPpGRvY3OR2SJTdWItYWNjb3VudCBpc24ndCBvd25lZCBieSBzZW5kZXIu3gAEpG5hbWW9SnVkZ2VtZW50Rm9yRGlmZmVyZW50SWRlbnRpdHmmZmllbGRzkKVpbmRleBCkZG9jc5HZNFRoZSBwcm92aWRlZCBqdWRnZW1lbnQgd2FzIGZvciBhIGRpZmZlcmVudCBpZGVudGl0eS7eAASkbmFtZbZKdWRnZW1lbnRQYXltZW50RmFpbGVkpmZpZWxkc5ClaW5kZXgRpGRvY3OR2T5FcnJvciB0aGF0IG9jY3VycyB3aGVuIHRoZXJlIGlzIGFuIGlzc3VlIHBheWluZyBmb3IganVkZ2VtZW50LqRkb2NzkdltCgkJCUN1c3RvbSBbZGlzcGF0Y2ggZXJyb3JzXShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykKCQkJb2YgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZM0CCqR0eXBl3gAEpHBhdGiSr3BhbGxldF9yZWNvdmVyea5SZWNvdmVyeUNvbmZpZ6ZwYXJhbXOT3gACpG5hbWWrQmxvY2tOdW1iZXKkdHlwZQTeAAKkbmFtZadCYWxhbmNlpHR5cGUG3gACpG5hbWWnRnJpZW5kc6R0eXBlzQILo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzlN4ABKRuYW1lrGRlbGF5X3BlcmlvZKR0eXBlBKh0eXBlTmFtZatCbG9ja051bWJlcqRkb2NzkN4ABKRuYW1lp2RlcG9zaXSkdHlwZQaodHlwZU5hbWWnQmFsYW5jZaRkb2NzkN4ABKRuYW1lp2ZyaWVuZHOkdHlwZc0CC6h0eXBlTmFtZadGcmllbmRzpGRvY3OQ3gAEpG5hbWWpdGhyZXNob2xkpHR5cGXMRqh0eXBlTmFtZaN1MTakZG9jc5CkZG9jc5DeAAKiaWTNAgukdHlwZd4ABKRwYXRok7Nib3VuZGVkX2NvbGxlY3Rpb25zq2JvdW5kZWRfdmVjqkJvdW5kZWRWZWOmcGFyYW1zkt4AAqRuYW1loVSkdHlwZQDeAAKkbmFtZaFTpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzOSodHlwZU5hbWWmVmVjPFQ+pGRvY3OQpGRvY3OQ3gAComlkzQIMpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSAACkZG9jc5DeAAKiaWTNAg2kdHlwZd4ABKRwYXRokq9wYWxsZXRfcmVjb3ZlcnmuQWN0aXZlUmVjb3ZlcnmmcGFyYW1zk94AAqRuYW1lq0Jsb2NrTnVtYmVypHR5cGUE3gACpG5hbWWnQmFsYW5jZaR0eXBlBt4AAqRuYW1lp0ZyaWVuZHOkdHlwZc0CC6NkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5PeAASkbmFtZadjcmVhdGVkpHR5cGUEqHR5cGVOYW1lq0Jsb2NrTnVtYmVypGRvY3OQ3gAEpG5hbWWnZGVwb3NpdKR0eXBlBqh0eXBlTmFtZadCYWxhbmNlpGRvY3OQ3gAEpG5hbWWnZnJpZW5kc6R0eXBlzQILqHR5cGVOYW1lp0ZyaWVuZHOkZG9jc5CkZG9jc5DeAAKiaWTNAg6kdHlwZd4ABKRwYXRok69wYWxsZXRfcmVjb3ZlcnmmcGFsbGV0pUVycm9ypnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRz3AAQ3gAEpG5hbWWqTm90QWxsb3dlZKZmaWVsZHOQpWluZGV4AKRkb2Nzkdk8VXNlciBpcyBub3QgYWxsb3dlZCB0byBtYWtlIGEgY2FsbCBvbiBiZWhhbGYgb2YgdGhpcyBhY2NvdW503gAEpG5hbWWtWmVyb1RocmVzaG9sZKZmaWVsZHOQpWluZGV4AaRkb2NzkdkjVGhyZXNob2xkIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm/eAASkbmFtZbBOb3RFbm91Z2hGcmllbmRzpmZpZWxkc5ClaW5kZXgCpGRvY3OR2TRGcmllbmRzIGxpc3QgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVybyBhbmQgdGhyZXNob2xk3gAEpG5hbWWqTWF4RnJpZW5kc6ZmaWVsZHOQpWluZGV4A6Rkb2NzkdkqRnJpZW5kcyBsaXN0IG11c3QgYmUgbGVzcyB0aGFuIG1heCBmcmllbmRz3gAEpG5hbWWpTm90U29ydGVkpmZpZWxkc5ClaW5kZXgEpGRvY3OR2TJGcmllbmRzIGxpc3QgbXVzdCBiZSBzb3J0ZWQgYW5kIGZyZWUgb2YgZHVwbGljYXRlc94ABKRuYW1lrk5vdFJlY292ZXJhYmxlpmZpZWxkc5ClaW5kZXgFpGRvY3OR2SdUaGlzIGFjY291bnQgaXMgbm90IHNldCB1cCBmb3IgcmVjb3ZlcnneAASkbmFtZbJBbHJlYWR5UmVjb3ZlcmFibGWmZmllbGRzkKVpbmRleAakZG9jc5HZK1RoaXMgYWNjb3VudCBpcyBhbHJlYWR5IHNldCB1cCBmb3IgcmVjb3ZlcnneAASkbmFtZa5BbHJlYWR5U3RhcnRlZKZmaWVsZHOQpWluZGV4B6Rkb2Nzkdk3QSByZWNvdmVyeSBwcm9jZXNzIGhhcyBhbHJlYWR5IHN0YXJ0ZWQgZm9yIHRoaXMgYWNjb3VudN4ABKRuYW1lqk5vdFN0YXJ0ZWSmZmllbGRzkKVpbmRleAikZG9jc5HZM0EgcmVjb3ZlcnkgcHJvY2VzcyBoYXMgbm90IHN0YXJ0ZWQgZm9yIHRoaXMgcmVzY3Vlct4ABKRuYW1lqU5vdEZyaWVuZKZmaWVsZHOQpWluZGV4CaRkb2NzkdkqVGhpcyBhY2NvdW50IGlzIG5vdCBhIGZyaWVuZCB3aG8gY2FuIHZvdWNo3gAEpG5hbWWrRGVsYXlQZXJpb2SmZmllbGRzkKVpbmRleAqkZG9jc5HZRlRoZSBmcmllbmQgbXVzdCB3YWl0IHVudGlsIHRoZSBkZWxheSBwZXJpb2QgdG8gdm91Y2ggZm9yIHRoaXMgcmVjb3ZlcnneAASkbmFtZa5BbHJlYWR5Vm91Y2hlZKZmaWVsZHOQpWluZGV4C6Rkb2NzkdkvVGhpcyB1c2VyIGhhcyBhbHJlYWR5IHZvdWNoZWQgZm9yIHRoaXMgcmVjb3ZlcnneAASkbmFtZalUaHJlc2hvbGSmZmllbGRzkKVpbmRleAykZG9jc5HZOlRoZSB0aHJlc2hvbGQgZm9yIHJlY292ZXJpbmcgdGhpcyBhY2NvdW50IGhhcyBub3QgYmVlbiBtZXTeAASkbmFtZatTdGlsbEFjdGl2ZaZmaWVsZHOQpWluZGV4DaRkb2Nzkdk/VGhlcmUgYXJlIHN0aWxsIGFjdGl2ZSByZWNvdmVyeSBhdHRlbXB0cyB0aGF0IG5lZWQgdG8gYmUgY2xvc2Vk3gAEpG5hbWWsQWxyZWFkeVByb3h5pmZpZWxkc5ClaW5kZXgOpGRvY3OR2StUaGlzIGFjY291bnQgaXMgYWxyZWFkeSBzZXQgdXAgZm9yIHJlY292ZXJ53gAEpG5hbWWoQmFkU3RhdGWmZmllbGRzkKVpbmRleA+kZG9jc5G+U29tZSBpbnRlcm5hbCBzdGF0ZSBpcyBicm9rZW4upGRvY3OR2W0KCQkJQ3VzdG9tIFtkaXNwYXRjaCBlcnJvcnNdKGh0dHBzOi8vZG9jcy5zdWJzdHJhdGUuaW8vbWFpbi1kb2NzL2J1aWxkL2V2ZW50cy1lcnJvcnMvKQoJCQlvZiB0aGlzIHBhbGxldC4KCQkJ3gAComlkzQIPpHR5cGXeAASkcGF0aJOzYm91bmRlZF9jb2xsZWN0aW9uc6tib3VuZGVkX3ZlY6pCb3VuZGVkVmVjpnBhcmFtc5LeAAKkbmFtZaFUpHR5cGXNAV3eAAKkbmFtZaFTpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQIQqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZM0CEKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAV2kZG9jc5DeAAKiaWTNAhGkdHlwZd4ABKRwYXRokq5wYWxsZXRfdmVzdGluZ6hSZWxlYXNlc6ZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lolYwpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWiVjGmZmllbGRzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTNAhKkdHlwZd4ABKRwYXRok65wYWxsZXRfdmVzdGluZ6ZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOV3gAEpG5hbWWqTm90VmVzdGluZ6ZmaWVsZHOQpWluZGV4AKRkb2NzkdkhVGhlIGFjY291bnQgZ2l2ZW4gaXMgbm90IHZlc3Rpbmcu3gAEpG5hbWW1QXRNYXhWZXN0aW5nU2NoZWR1bGVzpmZpZWxkc5ClaW5kZXgBpGRvY3OS2UlUaGUgYWNjb3VudCBhbHJlYWR5IGhhcyBgTWF4VmVzdGluZ1NjaGVkdWxlc2AgY291bnQgb2Ygc2NoZWR1bGVzIGFuZCB0aHVz2VRjYW5ub3QgYWRkIGFub3RoZXIgb25lLiBDb25zaWRlciBtZXJnaW5nIGV4aXN0aW5nIHNjaGVkdWxlcyBpbiBvcmRlciB0byBhZGQgYW5vdGhlci7eAASkbmFtZalBbW91bnRMb3emZmllbGRzkKVpbmRleAKkZG9jc5HZQUFtb3VudCBiZWluZyB0cmFuc2ZlcnJlZCBpcyB0b28gbG93IHRvIGNyZWF0ZSBhIHZlc3Rpbmcgc2NoZWR1bGUu3gAEpG5hbWW4U2NoZWR1bGVJbmRleE91dE9mQm91bmRzpmZpZWxkc5ClaW5kZXgDpGRvY3OR2TRBbiBpbmRleCB3YXMgb3V0IG9mIGJvdW5kcyBvZiB0aGUgdmVzdGluZyBzY2hlZHVsZXMu3gAEpG5hbWW1SW52YWxpZFNjaGVkdWxlUGFyYW1zpmZpZWxkc5ClaW5kZXgEpGRvY3OR2UNGYWlsZWQgdG8gY3JlYXRlIGEgbmV3IHNjaGVkdWxlIGJlY2F1c2Ugc29tZSBwYXJhbWV0ZXIgd2FzIGludmFsaWQupGRvY3ORvUVycm9yIGZvciB0aGUgdmVzdGluZyBwYWxsZXQu3gAComlkzQITpHR5cGXeAASkcGF0aJOzYm91bmRlZF9jb2xsZWN0aW9uc6tib3VuZGVkX3ZlY6pCb3VuZGVkVmVjpnBhcmFtc5LeAAKkbmFtZaFUpHR5cGXNAhTeAAKkbmFtZaFTpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQIYqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZM0CFKR0eXBl3gAEpHBhdGiRpk9wdGlvbqZwYXJhbXOR3gACpG5hbWWhVKR0eXBlzQIVo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lpE5vbmWmZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZaRTb21lpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0CFah0eXBlTmFtZcCkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzQIVpHR5cGXeAASkcGF0aJKwcGFsbGV0X3NjaGVkdWxlcqlTY2hlZHVsZWSmcGFyYW1zld4AAqRuYW1lpE5hbWWkdHlwZQHeAAKkbmFtZaRDYWxspHR5cGXNAhbeAAKkbmFtZatCbG9ja051bWJlcqR0eXBlBN4AAqRuYW1lrVBhbGxldHNPcmlnaW6kdHlwZc0B+d4AAqRuYW1lqUFjY291bnRJZKR0eXBlAKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5XeAASkbmFtZahtYXliZV9pZKR0eXBlzECodHlwZU5hbWWsT3B0aW9uPE5hbWU+pGRvY3OQ3gAEpG5hbWWocHJpb3JpdHmkdHlwZQKodHlwZU5hbWWyc2NoZWR1bGU6OlByaW9yaXR5pGRvY3OQ3gAEpG5hbWWkY2FsbKR0eXBlzQIWqHR5cGVOYW1lpENhbGykZG9jc5DeAASkbmFtZa5tYXliZV9wZXJpb2RpY6R0eXBlzQFfqHR5cGVOYW1l2SVPcHRpb248c2NoZWR1bGU6OlBlcmlvZDxCbG9ja051bWJlcj4+pGRvY3OQ3gAEpG5hbWWmb3JpZ2lupHR5cGXNAfmodHlwZU5hbWWtUGFsbGV0c09yaWdpbqRkb2NzkKRkb2NzkN4AAqJpZM0CFqR0eXBl3gAEpHBhdGiUrWZyYW1lX3N1cHBvcnSmdHJhaXRzqXByZWltYWdlc6dCb3VuZGVkpnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXNATKjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWWmTGVnYWN5pmZpZWxkc5HeAASkbmFtZaRoYXNopHR5cGULqHR5cGVOYW1lpEhhc2ikZG9jc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWmSW5saW5lpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0CF6h0eXBlTmFtZa1Cb3VuZGVkSW5saW5lpGRvY3OQpWluZGV4AaRkb2NzkN4ABKRuYW1lpkxvb2t1cKZmaWVsZHOS3gAEpG5hbWWkaGFzaKR0eXBlC6h0eXBlTmFtZaRIYXNopGRvY3OQ3gAEpG5hbWWjbGVupHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAKkZG9jc5CkZG9jc5DeAAKiaWTNAhekdHlwZd4ABKRwYXRok7Nib3VuZGVkX2NvbGxlY3Rpb25zq2JvdW5kZWRfdmVjqkJvdW5kZWRWZWOmcGFyYW1zkt4AAqRuYW1loVSkdHlwZQLeAAKkbmFtZaFTpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlDKh0eXBlTmFtZaZWZWM8VD6kZG9jc5CkZG9jc5DeAAKiaWTNAhikdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQIUpGRvY3OQ3gAComlkzQIZpHR5cGXeAASkcGF0aJOwcGFsbGV0X3NjaGVkdWxlcqZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOV3gAEpG5hbWWwRmFpbGVkVG9TY2hlZHVsZaZmaWVsZHOQpWluZGV4AKRkb2NzkblGYWlsZWQgdG8gc2NoZWR1bGUgYSBjYWxs3gAEpG5hbWWoTm90Rm91bmSmZmllbGRzkKVpbmRleAGkZG9jc5G/Q2Fubm90IGZpbmQgdGhlIHNjaGVkdWxlZCBjYWxsLt4ABKRuYW1lt1RhcmdldEJsb2NrTnVtYmVySW5QYXN0pmZpZWxkc5ClaW5kZXgCpGRvY3OR2SlHaXZlbiB0YXJnZXQgYmxvY2sgbnVtYmVyIGlzIGluIHRoZSBwYXN0Lt4ABKRuYW1lslJlc2NoZWR1bGVOb0NoYW5nZaZmaWVsZHOQpWluZGV4A6Rkb2Nzkdk8UmVzY2hlZHVsZSBmYWlsZWQgYmVjYXVzZSBpdCBkb2VzIG5vdCBjaGFuZ2Ugc2NoZWR1bGVkIHRpbWUu3gAEpG5hbWWlTmFtZWSmZmllbGRzkKVpbmRleASkZG9jc5HZNEF0dGVtcHQgdG8gdXNlIGEgbm9uLW5hbWVkIGZ1bmN0aW9uIG9uIGEgbmFtZWQgdGFzay6kZG9jc5HZbQoJCQlDdXN0b20gW2Rpc3BhdGNoIGVycm9yc10oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pCgkJCW9mIHRoaXMgcGFsbGV0LgoJCQneAAKiaWTNAhqkdHlwZd4ABKRwYXRokq9wYWxsZXRfcHJlaW1hZ2WtUmVxdWVzdFN0YXR1c6ZwYXJhbXOS3gACpG5hbWWpQWNjb3VudElkpHR5cGUA3gACpG5hbWWnQmFsYW5jZaR0eXBlBqNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZatVbnJlcXVlc3RlZKZmaWVsZHOS3gAEpG5hbWWnZGVwb3NpdKR0eXBlzPeodHlwZU5hbWW0KEFjY291bnRJZCwgQmFsYW5jZSmkZG9jc5DeAASkbmFtZaNsZW6kdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4AKRkb2NzkN4ABKRuYW1lqVJlcXVlc3RlZKZmaWVsZHOT3gAEpG5hbWWnZGVwb3NpdKR0eXBlzQIbqHR5cGVOYW1lvE9wdGlvbjwoQWNjb3VudElkLCBCYWxhbmNlKT6kZG9jc5DeAASkbmFtZaVjb3VudKR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZaNsZW6kdHlwZc0BFKh0eXBlTmFtZatPcHRpb248dTMyPqRkb2NzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTNAhukdHlwZd4ABKRwYXRokaZPcHRpb26mcGFyYW1zkd4AAqRuYW1loVSkdHlwZcz3o2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lpE5vbmWmZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZaRTb21lpmZpZWxkc5HeAASkbmFtZcCkdHlwZcz3qHR5cGVOYW1lwKRkb2NzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTNAhykdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZILBKRkb2NzkN4AAqJpZM0CHaR0eXBl3gAEpHBhdGiTs2JvdW5kZWRfY29sbGVjdGlvbnOrYm91bmRlZF92ZWOqQm91bmRlZFZlY6ZwYXJhbXOS3gACpG5hbWWhVKR0eXBlAt4AAqRuYW1loVOkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGUMqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZM0CHqR0eXBl3gAEpHBhdGiTr3BhbGxldF9wcmVpbWFnZaZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOW3gAEpG5hbWWmVG9vQmlnpmZpZWxkc5ClaW5kZXgApGRvY3OR2ShQcmVpbWFnZSBpcyB0b28gbGFyZ2UgdG8gc3RvcmUgb24tY2hhaW4u3gAEpG5hbWWsQWxyZWFkeU5vdGVkpmZpZWxkc5ClaW5kZXgBpGRvY3OR2SlQcmVpbWFnZSBoYXMgYWxyZWFkeSBiZWVuIG5vdGVkIG9uLWNoYWluLt4ABKRuYW1lrU5vdEF1dGhvcml6ZWSmZmllbGRzkKVpbmRleAKkZG9jc5HZMlRoZSB1c2VyIGlzIG5vdCBhdXRob3JpemVkIHRvIHBlcmZvcm0gdGhpcyBhY3Rpb24u3gAEpG5hbWWoTm90Tm90ZWSmZmllbGRzkKVpbmRleAOkZG9jc5HZP1RoZSBwcmVpbWFnZSBjYW5ub3QgYmUgcmVtb3ZlZCBzaW5jZSBpdCBoYXMgbm90IHlldCBiZWVuIG5vdGVkLt4ABKRuYW1lqVJlcXVlc3RlZKZmaWVsZHOQpWluZGV4BKRkb2NzkdlCQSBwcmVpbWFnZSBtYXkgbm90IGJlIHJlbW92ZWQgd2hlbiB0aGVyZSBhcmUgb3V0c3RhbmRpbmcgcmVxdWVzdHMu3gAEpG5hbWWsTm90UmVxdWVzdGVkpmZpZWxkc5ClaW5kZXgFpGRvY3OR2UtUaGUgcHJlaW1hZ2UgcmVxdWVzdCBjYW5ub3QgYmUgcmVtb3ZlZCBzaW5jZSBubyBvdXRzdGFuZGluZyByZXF1ZXN0cyBleGlzdC6kZG9jc5HZbQoJCQlDdXN0b20gW2Rpc3BhdGNoIGVycm9yc10oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pCgkJCW9mIHRoaXMgcGFsbGV0LgoJCQneAAKiaWTNAh+kdHlwZd4ABKRwYXRok6twYWxsZXRfc3Vkb6ZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOR3gAEpG5hbWWrUmVxdWlyZVN1ZG+mZmllbGRzkKVpbmRleACkZG9jc5G/U2VuZGVyIG11c3QgYmUgdGhlIFN1ZG8gYWNjb3VudKRkb2NzkblFcnJvciBmb3IgdGhlIFN1ZG8gcGFsbGV03gAComlkzQIgpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSzQIhBqRkb2NzkN4AAqJpZM0CIaR0eXBl3gAEpHBhdGiTs2JvdW5kZWRfY29sbGVjdGlvbnOrYm91bmRlZF92ZWOqQm91bmRlZFZlY6ZwYXJhbXOS3gACpG5hbWWhVKR0eXBlzQIi3gACpG5hbWWhU6R0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0CI6h0eXBlTmFtZaZWZWM8VD6kZG9jc5CkZG9jc5DeAAKiaWTNAiKkdHlwZd4ABKRwYXRokqxwYWxsZXRfcHJveHmvUHJveHlEZWZpbml0aW9upnBhcmFtc5PeAAKkbmFtZalBY2NvdW50SWSkdHlwZQDeAAKkbmFtZalQcm94eVR5cGWkdHlwZcxF3gACpG5hbWWrQmxvY2tOdW1iZXKkdHlwZQSjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOT3gAEpG5hbWWoZGVsZWdhdGWkdHlwZQCodHlwZU5hbWWpQWNjb3VudElkpGRvY3OQ3gAEpG5hbWWqcHJveHlfdHlwZaR0eXBlzEWodHlwZU5hbWWpUHJveHlUeXBlpGRvY3OQ3gAEpG5hbWWlZGVsYXmkdHlwZQSodHlwZU5hbWWrQmxvY2tOdW1iZXKkZG9jc5CkZG9jc5DeAAKiaWTNAiOkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQIipGRvY3OQ3gAComlkzQIkpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSzQIlBqRkb2NzkN4AAqJpZM0CJaR0eXBl3gAEpHBhdGiTs2JvdW5kZWRfY29sbGVjdGlvbnOrYm91bmRlZF92ZWOqQm91bmRlZFZlY6ZwYXJhbXOS3gACpG5hbWWhVKR0eXBlzQIm3gACpG5hbWWhU6R0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0CJ6h0eXBlTmFtZaZWZWM8VD6kZG9jc5CkZG9jc5DeAAKiaWTNAiakdHlwZd4ABKRwYXRokqxwYWxsZXRfcHJveHmsQW5ub3VuY2VtZW50pnBhcmFtc5PeAAKkbmFtZalBY2NvdW50SWSkdHlwZQDeAAKkbmFtZaRIYXNopHR5cGUL3gACpG5hbWWrQmxvY2tOdW1iZXKkdHlwZQSjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOT3gAEpG5hbWWkcmVhbKR0eXBlAKh0eXBlTmFtZalBY2NvdW50SWSkZG9jc5DeAASkbmFtZaljYWxsX2hhc2ikdHlwZQuodHlwZU5hbWWkSGFzaKRkb2NzkN4ABKRuYW1lpmhlaWdodKR0eXBlBKh0eXBlTmFtZatCbG9ja051bWJlcqRkb2NzkKRkb2NzkN4AAqJpZM0CJ6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAiakZG9jc5DeAAKiaWTNAiikdHlwZd4ABKRwYXRok6xwYWxsZXRfcHJveHmmcGFsbGV0pUVycm9ypnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzmN4ABKRuYW1lp1Rvb01hbnmmZmllbGRzkKVpbmRleACkZG9jc5HZSFRoZXJlIGFyZSB0b28gbWFueSBwcm94aWVzIHJlZ2lzdGVyZWQgb3IgdG9vIG1hbnkgYW5ub3VuY2VtZW50cyBwZW5kaW5nLt4ABKRuYW1lqE5vdEZvdW5kpmZpZWxkc5ClaW5kZXgBpGRvY3ORvVByb3h5IHJlZ2lzdHJhdGlvbiBub3QgZm91bmQu3gAEpG5hbWWoTm90UHJveHmmZmllbGRzkKVpbmRleAKkZG9jc5HZM1NlbmRlciBpcyBub3QgYSBwcm94eSBvZiB0aGUgYWNjb3VudCB0byBiZSBwcm94aWVkLt4ABKRuYW1lq1VucHJveHlhYmxlpmZpZWxkc5ClaW5kZXgDpGRvY3OR2UhBIGNhbGwgd2hpY2ggaXMgaW5jb21wYXRpYmxlIHdpdGggdGhlIHByb3h5IHR5cGUncyBmaWx0ZXIgd2FzIGF0dGVtcHRlZC7eAASkbmFtZalEdXBsaWNhdGWmZmllbGRzkKVpbmRleASkZG9jc5G7QWNjb3VudCBpcyBhbHJlYWR5IGEgcHJveHku3gAEpG5hbWWsTm9QZXJtaXNzaW9upmZpZWxkc5ClaW5kZXgFpGRvY3OR2UVDYWxsIG1heSBub3QgYmUgbWFkZSBieSBwcm94eSBiZWNhdXNlIGl0IG1heSBlc2NhbGF0ZSBpdHMgcHJpdmlsZWdlcy7eAASkbmFtZatVbmFubm91bmNlZKZmaWVsZHOQpWluZGV4BqRkb2Nzkdk0QW5ub3VuY2VtZW50LCBpZiBtYWRlIGF0IGFsbCwgd2FzIG1hZGUgdG9vIHJlY2VudGx5Lt4ABKRuYW1lq05vU2VsZlByb3h5pmZpZWxkc5ClaW5kZXgHpGRvY3ORuUNhbm5vdCBhZGQgc2VsZiBhcyBwcm94eS6kZG9jc5HZbQoJCQlDdXN0b20gW2Rpc3BhdGNoIGVycm9yc10oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pCgkJCW9mIHRoaXMgcGFsbGV0LgoJCQneAAKiaWTNAimkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZIAAaRkb2NzkN4AAqJpZM0CKqR0eXBl3gAEpHBhdGiSr3BhbGxldF9tdWx0aXNpZ6hNdWx0aXNpZ6ZwYXJhbXOU3gACpG5hbWWrQmxvY2tOdW1iZXKkdHlwZQTeAAKkbmFtZadCYWxhbmNlpHR5cGUG3gACpG5hbWWpQWNjb3VudElkpHR5cGUA3gACpG5hbWWsTWF4QXBwcm92YWxzpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzlN4ABKRuYW1lpHdoZW6kdHlwZcxIqHR5cGVOYW1ltlRpbWVwb2ludDxCbG9ja051bWJlcj6kZG9jc5DeAASkbmFtZadkZXBvc2l0pHR5cGUGqHR5cGVOYW1lp0JhbGFuY2WkZG9jc5DeAASkbmFtZalkZXBvc2l0b3KkdHlwZQCodHlwZU5hbWWpQWNjb3VudElkpGRvY3OQ3gAEpG5hbWWpYXBwcm92YWxzpHR5cGXNAiuodHlwZU5hbWXZI0JvdW5kZWRWZWM8QWNjb3VudElkLCBNYXhBcHByb3ZhbHM+pGRvY3OQpGRvY3OQ3gAComlkzQIrpHR5cGXeAASkcGF0aJOzYm91bmRlZF9jb2xsZWN0aW9uc6tib3VuZGVkX3ZlY6pCb3VuZGVkVmVjpnBhcmFtc5LeAAKkbmFtZaFUpHR5cGUA3gACpG5hbWWhU6R0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZczkqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZM0CLKR0eXBl3gAEpHBhdGiTr3BhbGxldF9tdWx0aXNpZ6ZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOe3gAEpG5hbWWwTWluaW11bVRocmVzaG9sZKZmaWVsZHOQpWluZGV4AKRkb2Nzkb9UaHJlc2hvbGQgbXVzdCBiZSAyIG9yIGdyZWF0ZXIu3gAEpG5hbWWvQWxyZWFkeUFwcHJvdmVkpmZpZWxkc5ClaW5kZXgBpGRvY3OR2StDYWxsIGlzIGFscmVhZHkgYXBwcm92ZWQgYnkgdGhpcyBzaWduYXRvcnku3gAEpG5hbWWxTm9BcHByb3ZhbHNOZWVkZWSmZmllbGRzkKVpbmRleAKkZG9jc5HZJ0NhbGwgZG9lc24ndCBuZWVkIGFueSAobW9yZSkgYXBwcm92YWxzLt4ABKRuYW1lsVRvb0Zld1NpZ25hdG9yaWVzpmZpZWxkc5ClaW5kZXgDpGRvY3OR2SpUaGVyZSBhcmUgdG9vIGZldyBzaWduYXRvcmllcyBpbiB0aGUgbGlzdC7eAASkbmFtZbJUb29NYW55U2lnbmF0b3JpZXOmZmllbGRzkKVpbmRleASkZG9jc5HZK1RoZXJlIGFyZSB0b28gbWFueSBzaWduYXRvcmllcyBpbiB0aGUgbGlzdC7eAASkbmFtZbVTaWduYXRvcmllc091dE9mT3JkZXKmZmllbGRzkKVpbmRleAWkZG9jc5HZQ1RoZSBzaWduYXRvcmllcyB3ZXJlIHByb3ZpZGVkIG91dCBvZiBvcmRlcjsgdGhleSBzaG91bGQgYmUgb3JkZXJlZC7eAASkbmFtZbNTZW5kZXJJblNpZ25hdG9yaWVzpmZpZWxkc5ClaW5kZXgGpGRvY3OR2UNUaGUgc2VuZGVyIHdhcyBjb250YWluZWQgaW4gdGhlIG90aGVyIHNpZ25hdG9yaWVzOyBpdCBzaG91bGRuJ3QgYmUu3gAEpG5hbWWoTm90Rm91bmSmZmllbGRzkKVpbmRleAekZG9jc5HZN011bHRpc2lnIG9wZXJhdGlvbiBub3QgZm91bmQgd2hlbiBhdHRlbXB0aW5nIHRvIGNhbmNlbC7eAASkbmFtZahOb3RPd25lcqZmaWVsZHOQpWluZGV4CKRkb2NzkdlLT25seSB0aGUgYWNjb3VudCB0aGF0IG9yaWdpbmFsbHkgY3JlYXRlZCB0aGUgbXVsdGlzaWcgaXMgYWJsZSB0byBjYW5jZWwgaXQu3gAEpG5hbWWrTm9UaW1lcG9pbnSmZmllbGRzkKVpbmRleAmkZG9jc5HZR05vIHRpbWVwb2ludCB3YXMgZ2l2ZW4sIHlldCB0aGUgbXVsdGlzaWcgb3BlcmF0aW9uIGlzIGFscmVhZHkgdW5kZXJ3YXku3gAEpG5hbWWuV3JvbmdUaW1lcG9pbnSmZmllbGRzkKVpbmRleAqkZG9jc5HZS0EgZGlmZmVyZW50IHRpbWVwb2ludCB3YXMgZ2l2ZW4gdG8gdGhlIG11bHRpc2lnIG9wZXJhdGlvbiB0aGF0IGlzIHVuZGVyd2F5Lt4ABKRuYW1ls1VuZXhwZWN0ZWRUaW1lcG9pbnSmZmllbGRzkKVpbmRleAukZG9jc5HZPUEgdGltZXBvaW50IHdhcyBnaXZlbiwgeWV0IG5vIG11bHRpc2lnIG9wZXJhdGlvbiBpcyB1bmRlcndheS7eAASkbmFtZa9NYXhXZWlnaHRUb29Mb3emZmllbGRzkKVpbmRleAykZG9jc5HZNFRoZSBtYXhpbXVtIHdlaWdodCBpbmZvcm1hdGlvbiBwcm92aWRlZCB3YXMgdG9vIGxvdy7eAASkbmFtZa1BbHJlYWR5U3RvcmVkpmZpZWxkc5ClaW5kZXgNpGRvY3OR2ShUaGUgZGF0YSB0byBiZSBzdG9yZWQgaXMgYWxyZWFkeSBzdG9yZWQupGRvY3OR2W0KCQkJQ3VzdG9tIFtkaXNwYXRjaCBlcnJvcnNdKGh0dHBzOi8vZG9jcy5zdWJzdHJhdGUuaW8vbWFpbi1kb2NzL2J1aWxkL2V2ZW50cy1lcnJvcnMvKQoJCQlvZiB0aGlzIHBhbGxldC4KCQkJ3gAComlkzQItpHR5cGXeAASkcGF0aJLZJHBhbGxldF9lbGVjdGlvbl9wcm92aWRlcl9tdWx0aV9waGFzZa1SZWFkeVNvbHV0aW9upnBhcmFtc5LeAAKkbmFtZalBY2NvdW50SWSkdHlwZcDeAAKkbmFtZapNYXhXaW5uZXJzpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzk94ABKRuYW1lqHN1cHBvcnRzpHR5cGXNAi6odHlwZU5hbWXZJkJvdW5kZWRTdXBwb3J0czxBY2NvdW50SWQsIE1heFdpbm5lcnM+pGRvY3OQ3gAEpG5hbWWlc2NvcmWkdHlwZcxLqHR5cGVOYW1lrUVsZWN0aW9uU2NvcmWkZG9jc5DeAASkbmFtZadjb21wdXRlpHR5cGXMSqh0eXBlTmFtZa9FbGVjdGlvbkNvbXB1dGWkZG9jc5CkZG9jc5DeAAKiaWTNAi6kdHlwZd4ABKRwYXRok7Nib3VuZGVkX2NvbGxlY3Rpb25zq2JvdW5kZWRfdmVjqkJvdW5kZWRWZWOmcGFyYW1zkt4AAqRuYW1loVSkdHlwZc0Bnt4AAqRuYW1loVOkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAZ2odHlwZU5hbWWmVmVjPFQ+pGRvY3OQpGRvY3OQ3gAComlkzQIvpHR5cGXeAASkcGF0aJLZJHBhbGxldF9lbGVjdGlvbl9wcm92aWRlcl9tdWx0aV9waGFzZa1Sb3VuZFNuYXBzaG90pnBhcmFtc5LeAAKkbmFtZalBY2NvdW50SWSkdHlwZQDeAAKkbmFtZaxEYXRhUHJvdmlkZXKkdHlwZc0CMKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5LeAASkbmFtZaZ2b3RlcnOkdHlwZc0CMah0eXBlTmFtZbFWZWM8RGF0YVByb3ZpZGVyPqRkb2NzkN4ABKRuYW1lp3RhcmdldHOkdHlwZczkqHR5cGVOYW1lrlZlYzxBY2NvdW50SWQ+pGRvY3OQpGRvY3OQ3gAComlkzQIwpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWTAArM7KRkb2NzkN4AAqJpZM0CMaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAjCkZG9jc5DeAAKiaWTNAjKkdHlwZd4ABKRwYXRok7Nib3VuZGVkX2NvbGxlY3Rpb25zq2JvdW5kZWRfdmVjqkJvdW5kZWRWZWOmcGFyYW1zkt4AAqRuYW1loVSkdHlwZc0CM94AAqRuYW1loVOkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAjSodHlwZU5hbWWmVmVjPFQ+pGRvY3OQpGRvY3OQ3gAComlkzQIzpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWTzEsEBKRkb2NzkN4AAqJpZM0CNKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAjOkZG9jc5DeAAKiaWTNAjWkdHlwZd4ABKRwYXRok9kkcGFsbGV0X2VsZWN0aW9uX3Byb3ZpZGVyX211bHRpX3BoYXNlpnNpZ25lZLBTaWduZWRTdWJtaXNzaW9upnBhcmFtc5PeAAKkbmFtZalBY2NvdW50SWSkdHlwZQDeAAKkbmFtZadCYWxhbmNlpHR5cGUG3gACpG5hbWWoU29sdXRpb26kdHlwZc0BaKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5TeAASkbmFtZaN3aG+kdHlwZQCodHlwZU5hbWWpQWNjb3VudElkpGRvY3OQ3gAEpG5hbWWnZGVwb3NpdKR0eXBlBqh0eXBlTmFtZadCYWxhbmNlpGRvY3OQ3gAEpG5hbWWscmF3X3NvbHV0aW9upHR5cGXNAWeodHlwZU5hbWW1UmF3U29sdXRpb248U29sdXRpb24+pGRvY3OQ3gAEpG5hbWWoY2FsbF9mZWWkdHlwZQaodHlwZU5hbWWnQmFsYW5jZaRkb2NzkKRkb2NzkN4AAqJpZM0CNqR0eXBl3gAEpHBhdGiT2SRwYWxsZXRfZWxlY3Rpb25fcHJvdmlkZXJfbXVsdGlfcGhhc2WmcGFsbGV0pUVycm9ypnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRznt4ABKRuYW1lulByZURpc3BhdGNoRWFybHlTdWJtaXNzaW9upmZpZWxkc5ClaW5kZXgApGRvY3ORuVN1Ym1pc3Npb24gd2FzIHRvbyBlYXJseS7eAASkbmFtZbtQcmVEaXNwYXRjaFdyb25nV2lubmVyQ291bnSmZmllbGRzkKVpbmRleAGkZG9jc5HZIldyb25nIG51bWJlciBvZiB3aW5uZXJzIHByZXNlbnRlZC7eAASkbmFtZblQcmVEaXNwYXRjaFdlYWtTdWJtaXNzaW9upmZpZWxkc5ClaW5kZXgCpGRvY3OR2SRTdWJtaXNzaW9uIHdhcyB0b28gd2Vhaywgc2NvcmUtd2lzZS7eAASkbmFtZa9TaWduZWRRdWV1ZUZ1bGymZmllbGRzkKVpbmRleAOkZG9jc5HZUlRoZSBxdWV1ZSB3YXMgZnVsbCwgYW5kIHRoZSBzb2x1dGlvbiB3YXMgbm90IGJldHRlciB0aGFuIGFueSBvZiB0aGUgZXhpc3Rpbmcgb25lcy7eAASkbmFtZbZTaWduZWRDYW5ub3RQYXlEZXBvc2l0pmZpZWxkc5ClaW5kZXgEpGRvY3OR2SVUaGUgb3JpZ2luIGZhaWxlZCB0byBwYXkgdGhlIGRlcG9zaXQu3gAEpG5hbWW0U2lnbmVkSW52YWxpZFdpdG5lc3OmZmllbGRzkKVpbmRleAWkZG9jc5HZKFdpdG5lc3MgZGF0YSB0byBkaXNwYXRjaGFibGUgaXMgaW52YWxpZC7eAASkbmFtZbNTaWduZWRUb29NdWNoV2VpZ2h0pmZpZWxkc5ClaW5kZXgGpGRvY3OR2S5UaGUgc2lnbmVkIHN1Ym1pc3Npb24gY29uc3VtZXMgdG9vIG11Y2ggd2VpZ2h03gAEpG5hbWWvT2N3Q2FsbFdyb25nRXJhpmZpZWxkc5ClaW5kZXgHpGRvY3OR2SZPQ1cgc3VibWl0dGVkIHNvbHV0aW9uIGZvciB3cm9uZyByb3VuZN4ABKRuYW1lt01pc3NpbmdTbmFwc2hvdE1ldGFkYXRhpmZpZWxkc5ClaW5kZXgIpGRvY3OR2SpTbmFwc2hvdCBtZXRhZGF0YSBzaG91bGQgZXhpc3QgYnV0IGRpZG4ndC7eAASkbmFtZbZJbnZhbGlkU3VibWlzc2lvbkluZGV4pmZpZWxkc5ClaW5kZXgJpGRvY3OR2TRgU2VsZjo6aW5zZXJ0X3N1Ym1pc3Npb25gIHJldHVybmVkIGFuIGludmFsaWQgaW5kZXgu3gAEpG5hbWWuQ2FsbE5vdEFsbG93ZWSmZmllbGRzkKVpbmRleAqkZG9jc5HZJlRoZSBjYWxsIGlzIG5vdCBhbGxvd2VkIGF0IHRoaXMgcG9pbnQu3gAEpG5hbWWuRmFsbGJhY2tGYWlsZWSmZmllbGRzkKVpbmRleAukZG9jc5GzVGhlIGZhbGxiYWNrIGZhaWxlZN4ABKRuYW1lq0JvdW5kTm90TWV0pmZpZWxkc5ClaW5kZXgMpGRvY3ORslNvbWUgYm91bmQgbm90IG1ldN4ABKRuYW1lrlRvb01hbnlXaW5uZXJzpmZpZWxkc5ClaW5kZXgNpGRvY3OR2SdTdWJtaXR0ZWQgc29sdXRpb24gaGFzIHRvbyBtYW55IHdpbm5lcnOkZG9jc5HZQ0Vycm9yIG9mIHRoZSBwYWxsZXQgdGhhdCBjYW4gYmUgcmV0dXJuZWQgaW4gcmVzcG9uc2UgdG8gZGlzcGF0Y2hlcy7eAAKiaWTNAjekdHlwZd4ABKRwYXRok7BwYWxsZXRfYmFnc19saXN0pGxpc3SkTm9kZaZwYXJhbXOS3gACpG5hbWWhVKR0eXBlwN4AAqRuYW1loUmkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOV3gAEpG5hbWWiaWSkdHlwZQCodHlwZU5hbWWsVDo6QWNjb3VudElkpGRvY3OQ3gAEpG5hbWWkcHJldqR0eXBlzEOodHlwZU5hbWW0T3B0aW9uPFQ6OkFjY291bnRJZD6kZG9jc5DeAASkbmFtZaRuZXh0pHR5cGXMQ6h0eXBlTmFtZbRPcHRpb248VDo6QWNjb3VudElkPqRkb2NzkN4ABKRuYW1lqWJhZ191cHBlcqR0eXBlCqh0eXBlTmFtZahUOjpTY29yZaRkb2NzkN4ABKRuYW1lpXNjb3JlpHR5cGUKqHR5cGVOYW1lqFQ6OlNjb3JlpGRvY3OQpGRvY3OQ3gAComlkzQI4pHR5cGXeAASkcGF0aJOwcGFsbGV0X2JhZ3NfbGlzdKRsaXN0o0JhZ6ZwYXJhbXOS3gACpG5hbWWhVKR0eXBlwN4AAqRuYW1loUmkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOS3gAEpG5hbWWkaGVhZKR0eXBlzEOodHlwZU5hbWW0T3B0aW9uPFQ6OkFjY291bnRJZD6kZG9jc5DeAASkbmFtZaR0YWlspHR5cGXMQ6h0eXBlTmFtZbRPcHRpb248VDo6QWNjb3VudElkPqRkb2NzkKRkb2NzkN4AAqJpZM0COaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGUKpGRvY3OQ3gAComlkzQI6pHR5cGXeAASkcGF0aJOwcGFsbGV0X2JhZ3NfbGlzdKZwYWxsZXSlRXJyb3KmcGFyYW1zkt4AAqRuYW1loVSkdHlwZcDeAAKkbmFtZaFJpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkd4ABKRuYW1lpExpc3SmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQI7qHR5cGVOYW1lqUxpc3RFcnJvcqRkb2NzkKVpbmRleACkZG9jc5HZLUEgZXJyb3IgaW4gdGhlIGxpc3QgaW50ZXJmYWNlIGltcGxlbWVudGF0aW9uLqRkb2NzkdltCgkJCUN1c3RvbSBbZGlzcGF0Y2ggZXJyb3JzXShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykKCQkJb2YgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZM0CO6R0eXBl3gAEpHBhdGiTsHBhbGxldF9iYWdzX2xpc3SkbGlzdKlMaXN0RXJyb3KmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5TeAASkbmFtZalEdXBsaWNhdGWmZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZapOb3RIZWF2aWVypmZpZWxkc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWsTm90SW5TYW1lQmFnpmZpZWxkc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWsTm9kZU5vdEZvdW5kpmZpZWxkc5ClaW5kZXgDpGRvY3OQpGRvY3OQ3gAComlkzQI8pHR5cGXeAASkcGF0aJK3cGFsbGV0X25vbWluYXRpb25fcG9vbHOqUG9vbE1lbWJlcqZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5TeAASkbmFtZadwb29sX2lkpHR5cGUEqHR5cGVOYW1lplBvb2xJZKRkb2NzkN4ABKRuYW1lpnBvaW50c6R0eXBlBqh0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5DeAASkbmFtZbxsYXN0X3JlY29yZGVkX3Jld2FyZF9jb3VudGVypHR5cGXM4qh0eXBlTmFtZbBUOjpSZXdhcmRDb3VudGVypGRvY3OQ3gAEpG5hbWWudW5ib25kaW5nX2VyYXOkdHlwZc0CPah0eXBlTmFtZdk4Qm91bmRlZEJUcmVlTWFwPEVyYUluZGV4LCBCYWxhbmNlT2Y8VD4sIFQ6Ok1heFVuYm9uZGluZz6kZG9jc5CkZG9jc5DeAAKiaWTNAj2kdHlwZd4ABKRwYXRok7Nib3VuZGVkX2NvbGxlY3Rpb25zsWJvdW5kZWRfYnRyZWVfbWFwr0JvdW5kZWRCVHJlZU1hcKZwYXJhbXOT3gACpG5hbWWhS6R0eXBlBN4AAqRuYW1loVakdHlwZQbeAAKkbmFtZaFTpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQI+qHR5cGVOYW1lrkJUcmVlTWFwPEssIFY+pGRvY3OQpGRvY3OQ3gAComlkzQI+pHR5cGXeAASkcGF0aJGoQlRyZWVNYXCmcGFyYW1zkt4AAqRuYW1loUukdHlwZQTeAAKkbmFtZaFWpHR5cGUGo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQI/qHR5cGVOYW1lwKRkb2NzkKRkb2NzkN4AAqJpZM0CP6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAkCkZG9jc5DeAAKiaWTNAkCkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZIEBqRkb2NzkN4AAqJpZM0CQaR0eXBl3gAEpHBhdGiSt3BhbGxldF9ub21pbmF0aW9uX3Bvb2xzr0JvbmRlZFBvb2xJbm5lcqZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5XeAASkbmFtZapjb21taXNzaW9upHR5cGXNAkKodHlwZU5hbWWtQ29tbWlzc2lvbjxUPqRkb2NzkN4ABKRuYW1lrm1lbWJlcl9jb3VudGVypHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lpnBvaW50c6R0eXBlBqh0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5DeAASkbmFtZaVyb2xlc6R0eXBlzQJFqHR5cGVOYW1lt1Bvb2xSb2xlczxUOjpBY2NvdW50SWQ+pGRvY3OQ3gAEpG5hbWWlc3RhdGWkdHlwZcxQqHR5cGVOYW1lqVBvb2xTdGF0ZaRkb2NzkKRkb2NzkN4AAqJpZM0CQqR0eXBl3gAEpHBhdGiSt3BhbGxldF9ub21pbmF0aW9uX3Bvb2xzqkNvbW1pc3Npb26mcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOU3gAEpG5hbWWnY3VycmVudKR0eXBlzFGodHlwZU5hbWW/T3B0aW9uPChQZXJiaWxsLCBUOjpBY2NvdW50SWQpPqRkb2NzkN4ABKRuYW1lo21heKR0eXBlzQJDqHR5cGVOYW1lr09wdGlvbjxQZXJiaWxsPqRkb2NzkN4ABKRuYW1lq2NoYW5nZV9yYXRlpHR5cGXNAkSodHlwZU5hbWXZLE9wdGlvbjxDb21taXNzaW9uQ2hhbmdlUmF0ZTxUOjpCbG9ja051bWJlcj4+pGRvY3OQ3gAEpG5hbWWtdGhyb3R0bGVfZnJvbaR0eXBlzQEUqHR5cGVOYW1ltk9wdGlvbjxUOjpCbG9ja051bWJlcj6kZG9jc5CkZG9jc5DeAAKiaWTNAkOkdHlwZd4ABKRwYXRokaZPcHRpb26mcGFyYW1zkd4AAqRuYW1loVSkdHlwZSKjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWkTm9uZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lpFNvbWWmZmllbGRzkd4ABKRuYW1lwKR0eXBlIqh0eXBlTmFtZcCkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzQJEpHR5cGXeAASkcGF0aJGmT3B0aW9upnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXMU6NkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZaROb25lpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWkU29tZaZmaWVsZHOR3gAEpG5hbWXApHR5cGXMU6h0eXBlTmFtZcCkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzQJFpHR5cGXeAASkcGF0aJK3cGFsbGV0X25vbWluYXRpb25fcG9vbHOpUG9vbFJvbGVzpnBhcmFtc5HeAAKkbmFtZalBY2NvdW50SWSkdHlwZQCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOU3gAEpG5hbWWpZGVwb3NpdG9ypHR5cGUAqHR5cGVOYW1lqUFjY291bnRJZKRkb2NzkN4ABKRuYW1lpHJvb3SkdHlwZcxDqHR5cGVOYW1lsU9wdGlvbjxBY2NvdW50SWQ+pGRvY3OQ3gAEpG5hbWWpbm9taW5hdG9ypHR5cGXMQ6h0eXBlTmFtZbFPcHRpb248QWNjb3VudElkPqRkb2NzkN4ABKRuYW1lp2JvdW5jZXKkdHlwZcxDqHR5cGVOYW1lsU9wdGlvbjxBY2NvdW50SWQ+pGRvY3OQpGRvY3OQ3gAComlkzQJGpHR5cGXeAASkcGF0aJK3cGFsbGV0X25vbWluYXRpb25fcG9vbHOqUmV3YXJkUG9vbKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5XeAASkbmFtZbxsYXN0X3JlY29yZGVkX3Jld2FyZF9jb3VudGVypHR5cGXM4qh0eXBlTmFtZbBUOjpSZXdhcmRDb3VudGVypGRvY3OQ3gAEpG5hbWW7bGFzdF9yZWNvcmRlZF90b3RhbF9wYXlvdXRzpHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkN4ABKRuYW1ltXRvdGFsX3Jld2FyZHNfY2xhaW1lZKR0eXBlBqh0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5DeAASkbmFtZbh0b3RhbF9jb21taXNzaW9uX3BlbmRpbmekdHlwZQaodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQ3gAEpG5hbWW4dG90YWxfY29tbWlzc2lvbl9jbGFpbWVkpHR5cGUGqHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkKRkb2NzkN4AAqJpZM0CR6R0eXBl3gAEpHBhdGiSt3BhbGxldF9ub21pbmF0aW9uX3Bvb2xzqFN1YlBvb2xzpnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lpm5vX2VyYaR0eXBlzQJIqHR5cGVOYW1lrVVuYm9uZFBvb2w8VD6kZG9jc5DeAASkbmFtZah3aXRoX2VyYaR0eXBlzQJJqHR5cGVOYW1l2UBCb3VuZGVkQlRyZWVNYXA8RXJhSW5kZXgsIFVuYm9uZFBvb2w8VD4sIFRvdGFsVW5ib25kaW5nUG9vbHM8VD4+pGRvY3OQpGRvY3OQ3gAComlkzQJIpHR5cGXeAASkcGF0aJK3cGFsbGV0X25vbWluYXRpb25fcG9vbHOqVW5ib25kUG9vbKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5LeAASkbmFtZaZwb2ludHOkdHlwZQaodHlwZU5hbWWsQmFsYW5jZU9mPFQ+pGRvY3OQ3gAEpG5hbWWnYmFsYW5jZaR0eXBlBqh0eXBlTmFtZaxCYWxhbmNlT2Y8VD6kZG9jc5CkZG9jc5DeAAKiaWTNAkmkdHlwZd4ABKRwYXRok7Nib3VuZGVkX2NvbGxlY3Rpb25zsWJvdW5kZWRfYnRyZWVfbWFwr0JvdW5kZWRCVHJlZU1hcKZwYXJhbXOT3gACpG5hbWWhS6R0eXBlBN4AAqRuYW1loVakdHlwZc0CSN4AAqRuYW1loVOkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAkqodHlwZU5hbWWuQlRyZWVNYXA8SywgVj6kZG9jc5CkZG9jc5DeAAKiaWTNAkqkdHlwZd4ABKRwYXRokahCVHJlZU1hcKZwYXJhbXOS3gACpG5hbWWhS6R0eXBlBN4AAqRuYW1loVakdHlwZc0CSKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0CS6h0eXBlTmFtZcCkZG9jc5CkZG9jc5DeAAKiaWTNAkukdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQJMpGRvY3OQ3gAComlkzQJMpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSBM0CSKRkb2NzkN4AAqJpZM0CTaR0eXBl3gAEpHBhdGiTs2JvdW5kZWRfY29sbGVjdGlvbnOrYm91bmRlZF92ZWOqQm91bmRlZFZlY6ZwYXJhbXOS3gACpG5hbWWhVKR0eXBlAt4AAqRuYW1loVOkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGUMqHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZM0CTqR0eXBl3gAEpHBhdGiSrWZyYW1lX3N1cHBvcnSoUGFsbGV0SWSmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZcyEqHR5cGVOYW1lp1t1ODsgOF2kZG9jc5CkZG9jc5DeAAKiaWTNAk+kdHlwZd4ABKRwYXRok7dwYWxsZXRfbm9taW5hdGlvbl9wb29sc6ZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHPcAB7eAASkbmFtZaxQb29sTm90Rm91bmSmZmllbGRzkKVpbmRleACkZG9jc5HZIkEgKGJvbmRlZCkgcG9vbCBpZCBkb2VzIG5vdCBleGlzdC7eAASkbmFtZbJQb29sTWVtYmVyTm90Rm91bmSmZmllbGRzkKVpbmRleAGkZG9jc5G7QW4gYWNjb3VudCBpcyBub3QgYSBtZW1iZXIu3gAEpG5hbWWyUmV3YXJkUG9vbE5vdEZvdW5kpmZpZWxkc5ClaW5kZXgCpGRvY3OR2UhBIHJld2FyZCBwb29sIGRvZXMgbm90IGV4aXN0LiBJbiBhbGwgY2FzZXMgdGhpcyBpcyBhIHN5c3RlbSBsb2dpYyBlcnJvci7eAASkbmFtZbBTdWJQb29sc05vdEZvdW5kpmZpZWxkc5ClaW5kZXgDpGRvY3ORukEgc3ViIHBvb2wgZG9lcyBub3QgZXhpc3Qu3gAEpG5hbWW5QWNjb3VudEJlbG9uZ3NUb090aGVyUG9vbKZmaWVsZHOQpWluZGV4BKRkb2NzktlTQW4gYWNjb3VudCBpcyBhbHJlYWR5IGRlbGVnYXRpbmcgaW4gYW5vdGhlciBwb29sLiBBbiBhY2NvdW50IG1heSBvbmx5IGJlbG9uZyB0byBvbmWvcG9vbCBhdCBhIHRpbWUu3gAEpG5hbWWuRnVsbHlVbmJvbmRpbmemZmllbGRzkKVpbmRleAWkZG9jc5LZT1RoZSBtZW1iZXIgaXMgZnVsbHkgdW5ib25kZWQgKGFuZCB0aHVzIGNhbm5vdCBhY2Nlc3MgdGhlIGJvbmRlZCBhbmQgcmV3YXJkIHBvb2zZKmFueW1vcmUgdG8sIGZvciBleGFtcGxlLCBjb2xsZWN0IHJld2FyZHMpLt4ABKRuYW1lsU1heFVuYm9uZGluZ0xpbWl0pmZpZWxkc5ClaW5kZXgGpGRvY3OR2UJUaGUgbWVtYmVyIGNhbm5vdCB1bmJvbmQgZnVydGhlciBjaHVua3MgZHVlIHRvIHJlYWNoaW5nIHRoZSBsaW1pdC7eAASkbmFtZbFDYW5ub3RXaXRoZHJhd0FueaZmaWVsZHOQpWluZGV4B6Rkb2NzkdlTTm9uZSBvZiB0aGUgZnVuZHMgY2FuIGJlIHdpdGhkcmF3biB5ZXQgYmVjYXVzZSB0aGUgYm9uZGluZyBkdXJhdGlvbiBoYXMgbm90IHBhc3NlZC7eAASkbmFtZbFNaW5pbXVtQm9uZE5vdE1ldKZmaWVsZHOQpWluZGV4CKRkb2NzldlKVGhlIGFtb3VudCBkb2VzIG5vdCBtZWV0IHRoZSBtaW5pbXVtIGJvbmQgdG8gZWl0aGVyIGpvaW4gb3IgY3JlYXRlIGEgcG9vbC6g2TNUaGUgZGVwb3NpdG9yIGNhbiBuZXZlciB1bmJvbmQgdG8gYSB2YWx1ZSBsZXNzIHRoYW7ZQWBQYWxsZXQ6OmRlcG9zaXRvcl9taW5fYm9uZGAuIFRoZSBjYWxsZXIgZG9lcyBub3QgaGF2ZSBub21pbmF0aW5n2VJwZXJtaXNzaW9ucyBmb3IgdGhlIHBvb2wuIE1lbWJlcnMgY2FuIG5ldmVyIHVuYm9uZCB0byBhIHZhbHVlIGJlbG93IGBNaW5Kb2luQm9uZGAu3gAEpG5hbWWsT3ZlcmZsb3dSaXNrpmZpZWxkc5ClaW5kZXgJpGRvY3OR2UhUaGUgdHJhbnNhY3Rpb24gY291bGQgbm90IGJlIGV4ZWN1dGVkIGR1ZSB0byBvdmVyZmxvdyByaXNrIGZvciB0aGUgcG9vbC7eAASkbmFtZa1Ob3REZXN0cm95aW5npmZpZWxkc5ClaW5kZXgKpGRvY3OS2VdBIHBvb2wgbXVzdCBiZSBpbiBbYFBvb2xTdGF0ZTo6RGVzdHJveWluZ2BdIGluIG9yZGVyIGZvciB0aGUgZGVwb3NpdG9yIHRvIHVuYm9uZCBvciBmb3LZLm90aGVyIG1lbWJlcnMgdG8gYmUgcGVybWlzc2lvbmxlc3NseSB1bmJvbmRlZC7eAASkbmFtZaxOb3ROb21pbmF0b3KmZmllbGRzkKVpbmRleAukZG9jc5HZPVRoZSBjYWxsZXIgZG9lcyBub3QgaGF2ZSBub21pbmF0aW5nIHBlcm1pc3Npb25zIGZvciB0aGUgcG9vbC7eAASkbmFtZbVOb3RLaWNrZXJPckRlc3Ryb3lpbmemZmllbGRzkKVpbmRleAykZG9jc5HZT0VpdGhlciBhKSB0aGUgY2FsbGVyIGNhbm5vdCBtYWtlIGEgdmFsaWQga2ljayBvciBiKSB0aGUgcG9vbCBpcyBub3QgZGVzdHJveWluZy7eAASkbmFtZadOb3RPcGVupmZpZWxkc5ClaW5kZXgNpGRvY3ORvFRoZSBwb29sIGlzIG5vdCBvcGVuIHRvIGpvaW7eAASkbmFtZahNYXhQb29sc6ZmaWVsZHOQpWluZGV4DqRkb2NzkdkhVGhlIHN5c3RlbSBpcyBtYXhlZCBvdXQgb24gcG9vbHMu3gAEpG5hbWWuTWF4UG9vbE1lbWJlcnOmZmllbGRzkKVpbmRleA+kZG9jc5HZJ1RvbyBtYW55IG1lbWJlcnMgaW4gdGhlIHBvb2wgb3Igc3lzdGVtLt4ABKRuYW1lsUNhbk5vdENoYW5nZVN0YXRlpmZpZWxkc5ClaW5kZXgQpGRvY3OR2SJUaGUgcG9vbHMgc3RhdGUgY2Fubm90IGJlIGNoYW5nZWQu3gAEpG5hbWW1RG9lc05vdEhhdmVQZXJtaXNzaW9upmZpZWxkc5ClaW5kZXgRpGRvY3OR2S5UaGUgY2FsbGVyIGRvZXMgbm90IGhhdmUgYWRlcXVhdGUgcGVybWlzc2lvbnMu3gAEpG5hbWW1TWV0YWRhdGFFeGNlZWRzTWF4TGVupmZpZWxkc5ClaW5kZXgSpGRvY3OR2StNZXRhZGF0YSBleGNlZWRzIFtgQ29uZmlnOjpNYXhNZXRhZGF0YUxlbmBd3gAEpG5hbWWpRGVmZW5zaXZlpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0CUKh0eXBlTmFtZa5EZWZlbnNpdmVFcnJvcqRkb2NzkKVpbmRleBOkZG9jc5LZTFNvbWUgZXJyb3Igb2NjdXJyZWQgdGhhdCBzaG91bGQgbmV2ZXIgaGFwcGVuLiBUaGlzIHNob3VsZCBiZSByZXBvcnRlZCB0byB0aGWsbWFpbnRhaW5lcnMu3gAEpG5hbWXZJ1BhcnRpYWxVbmJvbmROb3RBbGxvd2VkUGVybWlzc2lvbmxlc3NseaZmaWVsZHOQpWluZGV4FKRkb2NzkdkvUGFydGlhbCB1bmJvbmRpbmcgbm93IGFsbG93ZWQgcGVybWlzc2lvbmxlc3NseS7eAASkbmFtZbdNYXhDb21taXNzaW9uUmVzdHJpY3RlZKZmaWVsZHOQpWluZGV4FaRkb2NzkdlHVGhlIHBvb2wncyBtYXggY29tbWlzc2lvbiBjYW5ub3QgYmUgc2V0IGhpZ2hlciB0aGFuIHRoZSBleGlzdGluZyB2YWx1ZS7eAASkbmFtZbhDb21taXNzaW9uRXhjZWVkc01heGltdW2mZmllbGRzkKVpbmRleBakZG9jc5HZO1RoZSBzdXBwbGllZCBjb21taXNzaW9uIGV4Y2VlZHMgdGhlIG1heCBhbGxvd2VkIGNvbW1pc3Npb24u3gAEpG5hbWW5Q29tbWlzc2lvbkNoYW5nZVRocm90dGxlZKZmaWVsZHOQpWluZGV4F6Rkb2NzkdlCTm90IGVub3VnaCBibG9ja3MgaGF2ZSBzdXJwYXNzZWQgc2luY2UgdGhlIGxhc3QgY29tbWlzc2lvbiB1cGRhdGUu3gAEpG5hbWW+Q29tbWlzc2lvbkNoYW5nZVJhdGVOb3RBbGxvd2VkpmZpZWxkc5ClaW5kZXgYpGRvY3OR2UBUaGUgc3VibWl0dGVkIGNoYW5nZXMgdG8gY29tbWlzc2lvbiBjaGFuZ2UgcmF0ZSBhcmUgbm90IGFsbG93ZWQu3gAEpG5hbWWzTm9QZW5kaW5nQ29tbWlzc2lvbqZmaWVsZHOQpWluZGV4GaRkb2NzkdkoVGhlcmUgaXMgbm8gcGVuZGluZyBjb21taXNzaW9uIHRvIGNsYWltLt4ABKRuYW1ltk5vQ29tbWlzc2lvbkN1cnJlbnRTZXSmZmllbGRzkKVpbmRleBqkZG9jc5HZI05vIGNvbW1pc3Npb24gY3VycmVudCBoYXMgYmVlbiBzZXQu3gAEpG5hbWWrUG9vbElkSW5Vc2WmZmllbGRzkKVpbmRleBukZG9jc5G5UG9vbCBpZCBjdXJyZW50bHkgaW4gdXNlLt4ABKRuYW1lrUludmFsaWRQb29sSWSmZmllbGRzkKVpbmRleBykZG9jc5HZJ1Bvb2wgaWQgcHJvdmlkZWQgaXMgbm90IGNvcnJlY3QvdXNhYmxlLt4ABKRuYW1ls0JvbmRFeHRyYVJlc3RyaWN0ZWSmZmllbGRzkKVpbmRleB2kZG9jc5HZP0JvbmRpbmcgZXh0cmEgaXMgcmVzdHJpY3RlZCB0byB0aGUgZXhhY3QgcGVuZGluZyByZXdhcmQgYW1vdW50LqRkb2NzkdltCgkJCUN1c3RvbSBbZGlzcGF0Y2ggZXJyb3JzXShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykKCQkJb2YgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZM0CUKR0eXBl3gAEpHBhdGiTt3BhbGxldF9ub21pbmF0aW9uX3Bvb2xzpnBhbGxldK5EZWZlbnNpdmVFcnJvcqZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzld4ABKRuYW1luk5vdEVub3VnaFNwYWNlSW5VbmJvbmRQb29spmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWsUG9vbE5vdEZvdW5kpmZpZWxkc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWyUmV3YXJkUG9vbE5vdEZvdW5kpmZpZWxkc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWwU3ViUG9vbHNOb3RGb3VuZKZmaWVsZHOQpWluZGV4A6Rkb2NzkN4ABKRuYW1lvEJvbmRlZFN0YXNoS2lsbGVkUHJlbWF0dXJlbHmmZmllbGRzkKVpbmRleASkZG9jc5CkZG9jc5DeAAKiaWTNAlGkdHlwZd4ABKRwYXRok7NwYWxsZXRfZmFzdF91bnN0YWtlpXR5cGVzrlVuc3Rha2VSZXF1ZXN0pnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lp3N0YXNoZXOkdHlwZc0CUqh0eXBlTmFtZdk2Qm91bmRlZFZlYzwoVDo6QWNjb3VudElkLCBCYWxhbmNlT2Y8VD4pLCBUOjpCYXRjaFNpemU+pGRvY3OQ3gAEpG5hbWWnY2hlY2tlZKR0eXBlzQJTqHR5cGVOYW1l2SRCb3VuZGVkVmVjPEVyYUluZGV4LCBNYXhDaGVja2luZzxUPj6kZG9jc5CkZG9jc5DeAAKiaWTNAlKkdHlwZd4ABKRwYXRok7Nib3VuZGVkX2NvbGxlY3Rpb25zq2JvdW5kZWRfdmVjqkJvdW5kZWRWZWOmcGFyYW1zkt4AAqRuYW1loVSkdHlwZcz33gACpG5hbWWhU6R0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZcz2qHR5cGVOYW1lplZlYzxUPqRkb2NzkKRkb2NzkN4AAqJpZM0CU6R0eXBl3gAEpHBhdGiTs2JvdW5kZWRfY29sbGVjdGlvbnOrYm91bmRlZF92ZWOqQm91bmRlZFZlY6ZwYXJhbXOS3gACpG5hbWWhVKR0eXBlBN4AAqRuYW1loVOkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGXMVah0eXBlTmFtZaZWZWM8VD6kZG9jc5CkZG9jc5DeAAKiaWTNAlSkdHlwZd4ABKRwYXRok7NwYWxsZXRfZmFzdF91bnN0YWtlpnBhbGxldKVFcnJvcqZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5beAASkbmFtZa1Ob3RDb250cm9sbGVypmZpZWxkc5ClaW5kZXgApGRvY3OT2S5UaGUgcHJvdmlkZWQgQ29udHJvbGxlciBhY2NvdW50IHdhcyBub3QgZm91bmQuoNkwVGhpcyBtZWFucyB0aGF0IHRoZSBnaXZlbiBhY2NvdW50IGlzIG5vdCBib25kZWQu3gAEpG5hbWWtQWxyZWFkeVF1ZXVlZKZmaWVsZHOQpWluZGV4AaRkb2NzkdkrVGhlIGJvbmRlZCBhY2NvdW50IGhhcyBhbHJlYWR5IGJlZW4gcXVldWVkLt4ABKRuYW1lrk5vdEZ1bGx5Qm9uZGVkpmZpZWxkc5ClaW5kZXgCpGRvY3OR2S9UaGUgYm9uZGVkIGFjY291bnQgaGFzIGFjdGl2ZSB1bmxvY2tpbmcgY2h1bmtzLt4ABKRuYW1lqU5vdFF1ZXVlZKZmaWVsZHOQpWluZGV4A6Rkb2NzkdktVGhlIHByb3ZpZGVkIHVuLXN0YWtlciBpcyBub3QgaW4gdGhlIGBRdWV1ZWAu3gAEpG5hbWWrQWxyZWFkeUhlYWSmZmllbGRzkKVpbmRleASkZG9jc5HZQVRoZSBwcm92aWRlZCB1bi1zdGFrZXIgaXMgYWxyZWFkeSBpbiBIZWFkLCBhbmQgY2Fubm90IGRlcmVnaXN0ZXIu3gAEpG5hbWWuQ2FsbE5vdEFsbG93ZWSmZmllbGRzkKVpbmRleAWkZG9jc5HZR1RoZSBjYWxsIGlzIG5vdCBhbGxvd2VkIGF0IHRoaXMgcG9pbnQgYmVjYXVzZSB0aGUgcGFsbGV0IGlzIG5vdCBhY3RpdmUupGRvY3OR2W0KCQkJQ3VzdG9tIFtkaXNwYXRjaCBlcnJvcnNdKGh0dHBzOi8vZG9jcy5zdWJzdHJhdGUuaW8vbWFpbi1kb2NzL2J1aWxkL2V2ZW50cy1lcnJvcnMvKQoJCQlvZiB0aGlzIHBhbGxldC4KCQkJ3gAComlkzQJVpHR5cGXeAASkcGF0aJO7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zrWNvbmZpZ3VyYXRpb26xSG9zdENvbmZpZ3VyYXRpb26mcGFyYW1zkd4AAqRuYW1lq0Jsb2NrTnVtYmVypHR5cGUEo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRz3AAq3gAEpG5hbWWtbWF4X2NvZGVfc2l6ZaR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZbJtYXhfaGVhZF9kYXRhX3NpemWkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWW2bWF4X3Vwd2FyZF9xdWV1ZV9jb3VudKR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZbVtYXhfdXB3YXJkX3F1ZXVlX3NpemWkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWW3bWF4X3Vwd2FyZF9tZXNzYWdlX3NpemWkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWXZJG1heF91cHdhcmRfbWVzc2FnZV9udW1fcGVyX2NhbmRpZGF0ZaR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZdkiaHJtcF9tYXhfbWVzc2FnZV9udW1fcGVyX2NhbmRpZGF0ZaR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZbt2YWxpZGF0aW9uX3VwZ3JhZGVfY29vbGRvd26kdHlwZQSodHlwZU5hbWWrQmxvY2tOdW1iZXKkZG9jc5DeAASkbmFtZbh2YWxpZGF0aW9uX3VwZ3JhZGVfZGVsYXmkdHlwZQSodHlwZU5hbWWrQmxvY2tOdW1iZXKkZG9jc5DeAASkbmFtZaxtYXhfcG92X3NpemWkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWW5bWF4X2Rvd253YXJkX21lc3NhZ2Vfc2l6ZaR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZbh1bXBfc2VydmljZV90b3RhbF93ZWlnaHSkdHlwZQiodHlwZU5hbWWmV2VpZ2h0pGRvY3OQ3gAEpG5hbWXZJGhybXBfbWF4X3BhcmFjaGFpbl9vdXRib3VuZF9jaGFubmVsc6R0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZdklaHJtcF9tYXhfcGFyYXRocmVhZF9vdXRib3VuZF9jaGFubmVsc6R0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZbNocm1wX3NlbmRlcl9kZXBvc2l0pHR5cGUGqHR5cGVOYW1lp0JhbGFuY2WkZG9jc5DeAASkbmFtZbZocm1wX3JlY2lwaWVudF9kZXBvc2l0pHR5cGUGqHR5cGVOYW1lp0JhbGFuY2WkZG9jc5DeAASkbmFtZblocm1wX2NoYW5uZWxfbWF4X2NhcGFjaXR5pHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lu2hybXBfY2hhbm5lbF9tYXhfdG90YWxfc2l6ZaR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZdkjaHJtcF9tYXhfcGFyYWNoYWluX2luYm91bmRfY2hhbm5lbHOkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWXZJGhybXBfbWF4X3BhcmF0aHJlYWRfaW5ib3VuZF9jaGFubmVsc6R0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZb1ocm1wX2NoYW5uZWxfbWF4X21lc3NhZ2Vfc2l6ZaR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZbVjb2RlX3JldGVudGlvbl9wZXJpb2SkdHlwZQSodHlwZU5hbWWrQmxvY2tOdW1iZXKkZG9jc5DeAASkbmFtZbBwYXJhdGhyZWFkX2NvcmVzpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lsnBhcmF0aHJlYWRfcmV0cmllc6R0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZbhncm91cF9yb3RhdGlvbl9mcmVxdWVuY3mkdHlwZQSodHlwZU5hbWWrQmxvY2tOdW1iZXKkZG9jc5DeAASkbmFtZbljaGFpbl9hdmFpbGFiaWxpdHlfcGVyaW9kpHR5cGUEqHR5cGVOYW1lq0Jsb2NrTnVtYmVypGRvY3OQ3gAEpG5hbWW6dGhyZWFkX2F2YWlsYWJpbGl0eV9wZXJpb2SkdHlwZQSodHlwZU5hbWWrQmxvY2tOdW1iZXKkZG9jc5DeAASkbmFtZbRzY2hlZHVsaW5nX2xvb2thaGVhZKR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZbdtYXhfdmFsaWRhdG9yc19wZXJfY29yZaR0eXBlzQEUqHR5cGVOYW1lq09wdGlvbjx1MzI+pGRvY3OQ3gAEpG5hbWWubWF4X3ZhbGlkYXRvcnOkdHlwZc0BFKh0eXBlTmFtZatPcHRpb248dTMyPqRkb2NzkN4ABKRuYW1lrmRpc3B1dGVfcGVyaW9kpHR5cGUEqHR5cGVOYW1lrFNlc3Npb25JbmRleKRkb2NzkN4ABKRuYW1l2SlkaXNwdXRlX3Bvc3RfY29uY2x1c2lvbl9hY2NlcHRhbmNlX3BlcmlvZKR0eXBlBKh0eXBlTmFtZatCbG9ja051bWJlcqRkb2NzkN4ABKRuYW1l2SVkaXNwdXRlX2NvbmNsdXNpb25fYnlfdGltZV9vdXRfcGVyaW9kpHR5cGUEqHR5cGVOYW1lq0Jsb2NrTnVtYmVypGRvY3OQ3gAEpG5hbWWtbm9fc2hvd19zbG90c6R0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZbBuX2RlbGF5X3RyYW5jaGVzpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lunplcm90aF9kZWxheV90cmFuY2hlX3dpZHRopHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lsG5lZWRlZF9hcHByb3ZhbHOkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWW4cmVsYXlfdnJmX21vZHVsb19zYW1wbGVzpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1luXVtcF9tYXhfaW5kaXZpZHVhbF93ZWlnaHSkdHlwZQiodHlwZU5hbWWmV2VpZ2h0pGRvY3OQ3gAEpG5hbWW0cHZmX2NoZWNraW5nX2VuYWJsZWSkdHlwZSWodHlwZU5hbWWkYm9vbKRkb2NzkN4ABKRuYW1lrnB2Zl92b3RpbmdfdHRspHR5cGUEqHR5cGVOYW1lrFNlc3Npb25JbmRleKRkb2NzkN4ABKRuYW1l2SBtaW5pbXVtX3ZhbGlkYXRpb25fdXBncmFkZV9kZWxheaR0eXBlBKh0eXBlTmFtZatCbG9ja051bWJlcqRkb2NzkKRkb2NzkN4AAqJpZM0CVqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAlekZG9jc5DeAAKiaWTNAlekdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZIEzQJVpGRvY3OQ3gAComlkzQJYpHR5cGXeAASkcGF0aJS7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zrWNvbmZpZ3VyYXRpb26mcGFsbGV0pUVycm9ypnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkd4ABKRuYW1lr0ludmFsaWROZXdWYWx1ZaZmaWVsZHOQpWluZGV4AKRkb2Nzkdk3VGhlIG5ldyB2YWx1ZSBmb3IgYSBjb25maWd1cmF0aW9uIHBhcmFtZXRlciBpcyBpbnZhbGlkLqRkb2NzkdltCgkJCUN1c3RvbSBbZGlzcGF0Y2ggZXJyb3JzXShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykKCQkJb2YgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZM0CWaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAbOkZG9jc5DeAAKiaWTNAlqkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQEKpGRvY3OQ3gAComlkzQJbpHR5cGXeAASkcGF0aJO7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zqWluY2x1c2lvbrpBdmFpbGFiaWxpdHlCaXRmaWVsZFJlY29yZKZwYXJhbXOR3gACpG5hbWWhTqR0eXBlBKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5LeAASkbmFtZahiaXRmaWVsZKR0eXBlzQGwqHR5cGVOYW1ltEF2YWlsYWJpbGl0eUJpdGZpZWxkpGRvY3OQ3gAEpG5hbWWsc3VibWl0dGVkX2F0pHR5cGUEqHR5cGVOYW1loU6kZG9jc5CkZG9jc5DeAAKiaWTNAlykdHlwZd4ABKRwYXRok7twb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOpaW5jbHVzaW9uvENhbmRpZGF0ZVBlbmRpbmdBdmFpbGFiaWxpdHmmcGFyYW1zkt4AAqRuYW1loUikdHlwZQveAAKkbmFtZaFOpHR5cGUEo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzmN4ABKRuYW1lpGNvcmWkdHlwZcxgqHR5cGVOYW1lqUNvcmVJbmRleKRkb2NzkN4ABKRuYW1lpGhhc2ikdHlwZcxpqHR5cGVOYW1lrUNhbmRpZGF0ZUhhc2ikZG9jc5DeAASkbmFtZapkZXNjcmlwdG9ypHR5cGXMWKh0eXBlTmFtZbZDYW5kaWRhdGVEZXNjcmlwdG9yPEg+pGRvY3OQ3gAEpG5hbWWyYXZhaWxhYmlsaXR5X3ZvdGVzpHR5cGXNAbGodHlwZU5hbWW4Qml0VmVjPHU4LCBCaXRPcmRlckxzYjA+pGRvY3OQ3gAEpG5hbWWnYmFja2Vyc6R0eXBlzQGxqHR5cGVOYW1luEJpdFZlYzx1OCwgQml0T3JkZXJMc2IwPqRkb2NzkN4ABKRuYW1ls3JlbGF5X3BhcmVudF9udW1iZXKkdHlwZQSodHlwZU5hbWWhTqRkb2NzkN4ABKRuYW1lsGJhY2tlZF9pbl9udW1iZXKkdHlwZQSodHlwZU5hbWWhTqRkb2NzkN4ABKRuYW1lrWJhY2tpbmdfZ3JvdXCkdHlwZcxhqHR5cGVOYW1lqkdyb3VwSW5kZXikZG9jc5CkZG9jc5DeAAKiaWTNAl2kdHlwZd4ABKRwYXRolLtwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOpaW5jbHVzaW9upnBhbGxldKVFcnJvcqZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c9wAHd4ABKRuYW1l2SNVbnNvcnRlZE9yRHVwbGljYXRlVmFsaWRhdG9ySW5kaWNlc6ZmaWVsZHOQpWluZGV4AKRkb2Nzkdk6VmFsaWRhdG9yIGluZGljZXMgYXJlIG91dCBvZiBvcmRlciBvciBjb250YWlucyBkdXBsaWNhdGVzLt4ABKRuYW1l2SZVbnNvcnRlZE9yRHVwbGljYXRlRGlzcHV0ZVN0YXRlbWVudFNldKZmaWVsZHOQpWluZGV4AaRkb2Nzkdk+RGlzcHV0ZSBzdGF0ZW1lbnQgc2V0cyBhcmUgb3V0IG9mIG9yZGVyIG9yIGNvbnRhaW4gZHVwbGljYXRlcy7eAASkbmFtZdkjVW5zb3J0ZWRPckR1cGxpY2F0ZUJhY2tlZENhbmRpZGF0ZXOmZmllbGRzkKVpbmRleAKkZG9jc5HZRkJhY2tlZCBjYW5kaWRhdGVzIGFyZSBvdXQgb2Ygb3JkZXIgKGNvcmUgaW5kZXgpIG9yIGNvbnRhaW4gZHVwbGljYXRlcy7eAASkbmFtZbVVbmV4cGVjdGVkUmVsYXlQYXJlbnSmZmllbGRzkKVpbmRleAOkZG9jc5HZSkEgZGlmZmVyZW50IHJlbGF5IHBhcmVudCB3YXMgcHJvdmlkZWQgY29tcGFyZWQgdG8gdGhlIG9uLWNoYWluIHN0b3JlZCBvbmUu3gAEpG5hbWWxV3JvbmdCaXRmaWVsZFNpemWmZmllbGRzkKVpbmRleASkZG9jc5HZKkF2YWlsYWJpbGl0eSBiaXRmaWVsZCBoYXMgdW5leHBlY3RlZCBzaXplLt4ABKRuYW1lsEJpdGZpZWxkQWxsWmVyb3OmZmllbGRzkKVpbmRleAWkZG9jc5HZIEJpdGZpZWxkIGNvbnNpc3RzIG9mIHplcm9zIG9ubHku3gAEpG5hbWW8Qml0ZmllbGREdXBsaWNhdGVPclVub3JkZXJlZKZmaWVsZHOQpWluZGV4BqRkb2NzkdlTTXVsdGlwbGUgYml0ZmllbGRzIHN1Ym1pdHRlZCBieSBzYW1lIHZhbGlkYXRvciBvciB2YWxpZGF0b3JzIG91dCBvZiBvcmRlciBieSBpbmRleC7eAASkbmFtZblWYWxpZGF0b3JJbmRleE91dE9mQm91bmRzpmZpZWxkc5ClaW5kZXgHpGRvY3ORvlZhbGlkYXRvciBpbmRleCBvdXQgb2YgYm91bmRzLt4ABKRuYW1luEludmFsaWRCaXRmaWVsZFNpZ25hdHVyZaZmaWVsZHOQpWluZGV4CKRkb2NzkbFJbnZhbGlkIHNpZ25hdHVyZd4ABKRuYW1ltFVuc2NoZWR1bGVkQ2FuZGlkYXRlpmZpZWxkc5ClaW5kZXgJpGRvY3OR2StDYW5kaWRhdGUgc3VibWl0dGVkIGJ1dCBwYXJhIG5vdCBzY2hlZHVsZWQu3gAEpG5hbWXZIENhbmRpZGF0ZVNjaGVkdWxlZEJlZm9yZVBhcmFGcmVlpmZpZWxkc5ClaW5kZXgKpGRvY3OR2UxDYW5kaWRhdGUgc2NoZWR1bGVkIGRlc3BpdGUgcGVuZGluZyBjYW5kaWRhdGUgYWxyZWFkeSBleGlzdGluZyBmb3IgdGhlIHBhcmEu3gAEpG5hbWWtV3JvbmdDb2xsYXRvcqZmaWVsZHOQpWluZGV4C6Rkb2NzkdkrQ2FuZGlkYXRlIGluY2x1ZGVkIHdpdGggdGhlIHdyb25nIGNvbGxhdG9yLt4ABKRuYW1ls1NjaGVkdWxlZE91dE9mT3JkZXKmZmllbGRzkKVpbmRleAykZG9jc5G9U2NoZWR1bGVkIGNvcmVzIG91dCBvZiBvcmRlci7eAASkbmFtZbBIZWFkRGF0YVRvb0xhcmdlpmZpZWxkc5ClaW5kZXgNpGRvY3OR2SlIZWFkIGRhdGEgZXhjZWVkcyB0aGUgY29uZmlndXJlZCBtYXhpbXVtLt4ABKRuYW1ltFByZW1hdHVyZUNvZGVVcGdyYWRlpmZpZWxkc5ClaW5kZXgOpGRvY3ORuUNvZGUgdXBncmFkZSBwcmVtYXR1cmVseS7eAASkbmFtZa9OZXdDb2RlVG9vTGFyZ2WmZmllbGRzkKVpbmRleA+kZG9jc5G4T3V0cHV0IGNvZGUgaXMgdG9vIGxhcmdl3gAEpG5hbWW7Q2FuZGlkYXRlTm90SW5QYXJlbnRDb250ZXh0pmZpZWxkc5ClaW5kZXgQpGRvY3OR2SBDYW5kaWRhdGUgbm90IGluIHBhcmVudCBjb250ZXh0Lt4ABKRuYW1lsUludmFsaWRHcm91cEluZGV4pmZpZWxkc5ClaW5kZXgRpGRvY3OR2SdJbnZhbGlkIGdyb3VwIGluZGV4IGluIGNvcmUgYXNzaWdubWVudC7eAASkbmFtZbNJbnN1ZmZpY2llbnRCYWNraW5npmZpZWxkc5ClaW5kZXgSpGRvY3OR2SRJbnN1ZmZpY2llbnQgKG5vbi1tYWpvcml0eSkgYmFja2luZy7eAASkbmFtZa5JbnZhbGlkQmFja2luZ6ZmaWVsZHOQpWluZGV4E6Rkb2Nzkdk5SW52YWxpZCAoYmFkIHNpZ25hdHVyZSwgdW5rbm93biB2YWxpZGF0b3IsIGV0Yy4pIGJhY2tpbmcu3gAEpG5hbWWxTm90Q29sbGF0b3JTaWduZWSmZmllbGRzkKVpbmRleBSkZG9jc5G6Q29sbGF0b3IgZGlkIG5vdCBzaWduIFBvVi7eAASkbmFtZbpWYWxpZGF0aW9uRGF0YUhhc2hNaXNtYXRjaKZmaWVsZHOQpWluZGV4FaRkb2NzkdkxVGhlIHZhbGlkYXRpb24gZGF0YSBoYXNoIGRvZXMgbm90IG1hdGNoIGV4cGVjdGVkLt4ABKRuYW1l2SBJbmNvcnJlY3REb3dud2FyZE1lc3NhZ2VIYW5kbGluZ6ZmaWVsZHOQpWluZGV4FqRkb2Nzkdk2VGhlIGRvd253YXJkIG1lc3NhZ2UgcXVldWUgaXMgbm90IHByb2Nlc3NlZCBjb3JyZWN0bHku3gAEpG5hbWW1SW52YWxpZFVwd2FyZE1lc3NhZ2VzpmZpZWxkc5ClaW5kZXgXpGRvY3OR2UdBdCBsZWFzdCBvbmUgdXB3YXJkIG1lc3NhZ2Ugc2VudCBkb2VzIG5vdCBwYXNzIHRoZSBhY2NlcHRhbmNlIGNyaXRlcmlhLt4ABKRuYW1luEhybXBXYXRlcm1hcmtNaXNoYW5kbGluZ6ZmaWVsZHOQpWluZGV4GKRkb2NzkdlEVGhlIGNhbmRpZGF0ZSBkaWRuJ3QgZm9sbG93IHRoZSBydWxlcyBvZiBIUk1QIHdhdGVybWFyayBhZHZhbmNlbWVudC7eAASkbmFtZbNJbnZhbGlkT3V0Ym91bmRIcm1wpmZpZWxkc5ClaW5kZXgZpGRvY3OR2TVUaGUgSFJNUCBtZXNzYWdlcyBzZW50IGJ5IHRoZSBjYW5kaWRhdGUgaXMgbm90IHZhbGlkLt4ABKRuYW1luUludmFsaWRWYWxpZGF0aW9uQ29kZUhhc2imZmllbGRzkKVpbmRleBqkZG9jc5HZN1RoZSB2YWxpZGF0aW9uIGNvZGUgaGFzaCBvZiB0aGUgY2FuZGlkYXRlIGlzIG5vdCB2YWxpZC7eAASkbmFtZbBQYXJhSGVhZE1pc21hdGNopmZpZWxkc5ClaW5kZXgbpGRvY3OS2WZUaGUgYHBhcmFfaGVhZGAgaGFzaCBpbiB0aGUgY2FuZGlkYXRlIGRlc2NyaXB0b3IgZG9lc24ndCBtYXRjaCB0aGUgaGFzaCBvZiB0aGUgYWN0dWFsIHBhcmEgaGVhZCBpbiB0aGWsY29tbWl0bWVudHMu3gAEpG5hbWW7Qml0ZmllbGRSZWZlcmVuY2VzRnJlZWRDb3JlpmZpZWxkc5ClaW5kZXgcpGRvY3OT2ShBIGJpdGZpZWxkIHRoYXQgcmVmZXJlbmNlcyBhIGZyZWVkIGNvcmUs2S5laXRoZXIgaW50ZW50aW9uYWxseSBvciBhcyBwYXJ0IG9mIGEgY29uY2x1ZGVksGludmFsaWQgZGlzcHV0ZS6kZG9jc5HZbQoJCQlDdXN0b20gW2Rpc3BhdGNoIGVycm9yc10oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pCgkJCW9mIHRoaXMgcGFsbGV0LgoJCQneAAKiaWTNAl6kdHlwZd4ABKRwYXRok7Nwb2xrYWRvdF9wcmltaXRpdmVzonYys1NjcmFwZWRPbkNoYWluVm90ZXOmcGFyYW1zkd4AAqRuYW1loUikdHlwZQujZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOT3gAEpG5hbWWnc2Vzc2lvbqR0eXBlBKh0eXBlTmFtZaxTZXNzaW9uSW5kZXikZG9jc5DeAASkbmFtZdkgYmFja2luZ192YWxpZGF0b3JzX3Blcl9jYW5kaWRhdGWkdHlwZc0CX6h0eXBlTmFtZdlHVmVjPChDYW5kaWRhdGVSZWNlaXB0PEg+LCBWZWM8KFZhbGlkYXRvckluZGV4LCBWYWxpZGl0eUF0dGVzdGF0aW9uKT4pCj6kZG9jc5DeAASkbmFtZahkaXNwdXRlc6R0eXBlzQHBqHR5cGVOYW1luE11bHRpRGlzcHV0ZVN0YXRlbWVudFNldKRkb2NzkKRkb2NzkN4AAqJpZM0CX6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAmCkZG9jc5DeAAKiaWTNAmCkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZLMV80CYaRkb2NzkN4AAqJpZM0CYaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAmKkZG9jc5DeAAKiaWTNAmKkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZLNAbPNAcCkZG9jc5DeAAKiaWTNAmOkdHlwZd4ABKRwYXRolLtwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOucGFyYXNfaW5oZXJlbnSmcGFsbGV0pUVycm9ypnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzlt4ABKRuYW1luVRvb01hbnlJbmNsdXNpb25JbmhlcmVudHOmZmllbGRzkKVpbmRleACkZG9jc5HZM0luY2x1c2lvbiBpbmhlcmVudCBjYWxsZWQgbW9yZSB0aGFuIG9uY2UgcGVyIGJsb2NrLt4ABKRuYW1ls0ludmFsaWRQYXJlbnRIZWFkZXKmZmllbGRzkKVpbmRleAGkZG9jc5LZVVRoZSBoYXNoIG9mIHRoZSBzdWJtaXR0ZWQgcGFyZW50IGhlYWRlciBkb2Vzbid0IGNvcnJlc3BvbmQgdG8gdGhlIHNhdmVkIGJsb2NrIGhhc2ggb2ardGhlIHBhcmVudC7eAASkbmFtZblDYW5kaWRhdGVDb25jbHVkZWRJbnZhbGlkpmZpZWxkc5ClaW5kZXgCpGRvY3OR2S5EaXNwdXRlZCBjYW5kaWRhdGUgdGhhdCB3YXMgY29uY2x1ZGVkIGludmFsaWQu3gAEpG5hbWWySW5oZXJlbnRPdmVyd2VpZ2h0pmZpZWxkc5ClaW5kZXgDpGRvY3OR2UJUaGUgZGF0YSBnaXZlbiB0byB0aGUgaW5oZXJlbnQgd2lsbCByZXN1bHQgaW4gYW4gb3ZlcndlaWdodCBibG9jay7eAASkbmFtZdklRGlzcHV0ZVN0YXRlbWVudHNVbnNvcnRlZE9yRHVwbGljYXRlc6ZmaWVsZHOQpWluZGV4BKRkb2NzkdkvVGhlIG9yZGVyaW5nIG9mIGRpc3B1dGUgc3RhdGVtZW50cyB3YXMgaW52YWxpZC7eAASkbmFtZa5EaXNwdXRlSW52YWxpZKZmaWVsZHOQpWluZGV4BaRkb2NzkdkgQSBkaXNwdXRlIHN0YXRlbWVudCB3YXMgaW52YWxpZC6kZG9jc5HZbQoJCQlDdXN0b20gW2Rpc3BhdGNoIGVycm9yc10oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pCgkJCW9mIHRoaXMgcGFsbGV0LgoJCQneAAKiaWTNAmSkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQJZpGRvY3OQ3gAComlkzQJlpHR5cGXeAASkcGF0aJO7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zqXNjaGVkdWxlcrRQYXJhdGhyZWFkQ2xhaW1RdWV1ZaZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lpXF1ZXVlpHR5cGXNAmaodHlwZU5hbWW1VmVjPFF1ZXVlZFBhcmF0aHJlYWQ+pGRvY3OQ3gAEpG5hbWWwbmV4dF9jb3JlX29mZnNldKR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5CkZG9jc5DeAAKiaWTNAmakdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQJnpGRvY3OQ3gAComlkzQJnpHR5cGXeAASkcGF0aJO7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zqXNjaGVkdWxlcrBRdWV1ZWRQYXJhdGhyZWFkpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOS3gAEpG5hbWWlY2xhaW2kdHlwZc0CaKh0eXBlTmFtZa9QYXJhdGhyZWFkRW50cnmkZG9jc5DeAASkbmFtZatjb3JlX29mZnNldKR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5CkZG9jc5DeAAKiaWTNAmikdHlwZd4ABKRwYXRok7Nwb2xrYWRvdF9wcmltaXRpdmVzonYyr1BhcmF0aHJlYWRFbnRyeaZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lpWNsYWltpHR5cGXNAmmodHlwZU5hbWWvUGFyYXRocmVhZENsYWltpGRvY3OQ3gAEpG5hbWWncmV0cmllc6R0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5CkZG9jc5DeAAKiaWTNAmmkdHlwZd4ABKRwYXRok7Nwb2xrYWRvdF9wcmltaXRpdmVzonYyr1BhcmF0aHJlYWRDbGFpbaZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lwKR0eXBlzFmodHlwZU5hbWWiSWSkZG9jc5DeAASkbmFtZcCkdHlwZcxaqHR5cGVOYW1lqkNvbGxhdG9ySWSkZG9jc5CkZG9jc5DeAAKiaWTNAmqkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQJrpGRvY3OQ3gAComlkzQJrpHR5cGXeAASkcGF0aJGmT3B0aW9upnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXNAmyjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWkTm9uZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lpFNvbWWmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQJsqHR5cGVOYW1lwKRkb2NzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTNAmykdHlwZd4ABKRwYXRok7Nwb2xrYWRvdF9wcmltaXRpdmVzonYyrENvcmVPY2N1cGllZKZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lqlBhcmF0aHJlYWSmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQJoqHR5cGVOYW1lr1BhcmF0aHJlYWRFbnRyeaRkb2NzkKVpbmRleACkZG9jc5DeAASkbmFtZalQYXJhY2hhaW6mZmllbGRzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTNAm2kdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzFmkZG9jc5DeAAKiaWTNAm6kdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQJvpGRvY3OQ3gAComlkzQJvpHR5cGXeAASkcGF0aJO7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zqXNjaGVkdWxlcq5Db3JlQXNzaWdubWVudKZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzlN4ABKRuYW1lpGNvcmWkdHlwZcxgqHR5cGVOYW1lqUNvcmVJbmRleKRkb2NzkN4ABKRuYW1lp3BhcmFfaWSkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkN4ABKRuYW1lpGtpbmSkdHlwZc0CcKh0eXBlTmFtZa5Bc3NpZ25tZW50S2luZKRkb2NzkN4ABKRuYW1lqWdyb3VwX2lkeKR0eXBlzGGodHlwZU5hbWWqR3JvdXBJbmRleKRkb2NzkKRkb2NzkN4AAqJpZM0CcKR0eXBl3gAEpHBhdGiTu3BvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc6lzY2hlZHVsZXKuQXNzaWdubWVudEtpbmSmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZalQYXJhY2hhaW6mZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZapQYXJhdGhyZWFkpmZpZWxkc5LeAASkbmFtZcCkdHlwZcxaqHR5cGVOYW1lqkNvbGxhdG9ySWSkZG9jc5DeAASkbmFtZcCkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZM0CcaR0eXBl3gAEpHBhdGiTu3BvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc6VwYXJhc7dQdmZDaGVja0FjdGl2ZVZvdGVTdGF0ZaZwYXJhbXOR3gACpG5hbWWrQmxvY2tOdW1iZXKkdHlwZQSjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOV3gAEpG5hbWWsdm90ZXNfYWNjZXB0pHR5cGXNAbGodHlwZU5hbWW4Qml0VmVjPHU4LCBCaXRPcmRlckxzYjA+pGRvY3OQ3gAEpG5hbWWsdm90ZXNfcmVqZWN0pHR5cGXNAbGodHlwZU5hbWW4Qml0VmVjPHU4LCBCaXRPcmRlckxzYjA+pGRvY3OQ3gAEpG5hbWWjYWdlpHR5cGUEqHR5cGVOYW1lrFNlc3Npb25JbmRleKRkb2NzkN4ABKRuYW1lqmNyZWF0ZWRfYXSkdHlwZQSodHlwZU5hbWWrQmxvY2tOdW1iZXKkZG9jc5DeAASkbmFtZaZjYXVzZXOkdHlwZc0Ccqh0eXBlTmFtZb9WZWM8UHZmQ2hlY2tDYXVzZTxCbG9ja051bWJlcj4+pGRvY3OQpGRvY3OQ3gAComlkzQJypHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZc0Cc6Rkb2NzkN4AAqJpZM0Cc6R0eXBl3gAEpHBhdGiTu3BvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc6VwYXJhc61QdmZDaGVja0NhdXNlpnBhcmFtc5HeAAKkbmFtZatCbG9ja051bWJlcqR0eXBlBKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZapPbmJvYXJkaW5npmZpZWxkc5HeAASkbmFtZcCkdHlwZcxZqHR5cGVOYW1lplBhcmFJZKRkb2NzkKVpbmRleACkZG9jc5DeAASkbmFtZadVcGdyYWRlpmZpZWxkc5LeAASkbmFtZaJpZKR0eXBlzFmodHlwZU5hbWWmUGFyYUlkpGRvY3OQ3gAEpG5hbWWzcmVsYXlfcGFyZW50X251bWJlcqR0eXBlBKh0eXBlTmFtZatCbG9ja051bWJlcqRkb2NzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTNAnSkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzF6kZG9jc5DeAAKiaWTNAnWkdHlwZd4ABKRwYXRok7twb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOlcGFyYXOtUGFyYUxpZmVjeWNsZaZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzl94ABKRuYW1lqk9uYm9hcmRpbmemZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZapQYXJhdGhyZWFkpmZpZWxkc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWpUGFyYWNoYWlupmZpZWxkc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWzVXBncmFkaW5nUGFyYXRocmVhZKZmaWVsZHOQpWluZGV4A6Rkb2NzkN4ABKRuYW1ltERvd25ncmFkaW5nUGFyYWNoYWlupmZpZWxkc5ClaW5kZXgEpGRvY3OQ3gAEpG5hbWW1T2ZmYm9hcmRpbmdQYXJhdGhyZWFkpmZpZWxkc5ClaW5kZXgFpGRvY3OQ3gAEpG5hbWW0T2ZmYm9hcmRpbmdQYXJhY2hhaW6mZmllbGRzkKVpbmRleAakZG9jc5CkZG9jc5DeAAKiaWTNAnakdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZLMWQSkZG9jc5DeAAKiaWTNAnekdHlwZd4ABKRwYXRok7twb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOlcGFyYXOwUGFyYVBhc3RDb2RlTWV0YaZwYXJhbXOR3gACpG5hbWWhTqR0eXBlBKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5LeAASkbmFtZa11cGdyYWRlX3RpbWVzpHR5cGXNAniodHlwZU5hbWW4VmVjPFJlcGxhY2VtZW50VGltZXM8Tj4+pGRvY3OQ3gAEpG5hbWWrbGFzdF9wcnVuZWSkdHlwZc0BFKh0eXBlTmFtZalPcHRpb248Tj6kZG9jc5CkZG9jc5DeAAKiaWTNAnikdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQJ5pGRvY3OQ3gAComlkzQJ5pHR5cGXeAASkcGF0aJO7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zpXBhcmFzsFJlcGxhY2VtZW50VGltZXOmcGFyYW1zkd4AAqRuYW1loU6kdHlwZQSjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOS3gAEpG5hbWWrZXhwZWN0ZWRfYXSkdHlwZQSodHlwZU5hbWWhTqRkb2NzkN4ABKRuYW1lrGFjdGl2YXRlZF9hdKR0eXBlBKh0eXBlTmFtZaFOpGRvY3OQpGRvY3OQ3gAComlkzQJ6pHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZc0CdqRkb2NzkN4AAqJpZM0Ce6R0eXBl3gAEpHBhdGiTs3BvbGthZG90X3ByaW1pdGl2ZXOidjKuVXBncmFkZUdvQWhlYWSmcGFyYW1zkKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZaVBYm9ydKZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lp0dvQWhlYWSmZmllbGRzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTNAnykdHlwZd4ABKRwYXRok7Nwb2xrYWRvdF9wcmltaXRpdmVzonYyslVwZ3JhZGVSZXN0cmljdGlvbqZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkd4ABKRuYW1lp1ByZXNlbnSmZmllbGRzkKVpbmRleACkZG9jc5CkZG9jc5DeAAKiaWTNAn2kdHlwZd4ABKRwYXRolLtwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOlcGFyYXOmcGFsbGV0pUVycm9ypnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRznd4ABKRuYW1lrU5vdFJlZ2lzdGVyZWSmZmllbGRzkKVpbmRleACkZG9jc5HZJVBhcmEgaXMgbm90IHJlZ2lzdGVyZWQgaW4gb3VyIHN5c3RlbS7eAASkbmFtZa1DYW5ub3RPbmJvYXJkpmZpZWxkc5ClaW5kZXgBpGRvY3OR2UVQYXJhIGNhbm5vdCBiZSBvbmJvYXJkZWQgYmVjYXVzZSBpdCBpcyBhbHJlYWR5IHRyYWNrZWQgYnkgb3VyIHN5c3RlbS7eAASkbmFtZa5DYW5ub3RPZmZib2FyZKZmaWVsZHOQpWluZGV4AqRkb2NzkdknUGFyYSBjYW5ub3QgYmUgb2ZmYm9hcmRlZCBhdCB0aGlzIHRpbWUu3gAEpG5hbWWtQ2Fubm90VXBncmFkZaZmaWVsZHOQpWluZGV4A6Rkb2NzkdknUGFyYSBjYW5ub3QgYmUgdXBncmFkZWQgdG8gYSBwYXJhY2hhaW4u3gAEpG5hbWWvQ2Fubm90RG93bmdyYWRlpmZpZWxkc5ClaW5kZXgEpGRvY3OR2SpQYXJhIGNhbm5vdCBiZSBkb3duZ3JhZGVkIHRvIGEgcGFyYXRocmVhZC7eAASkbmFtZbZQdmZDaGVja1N0YXRlbWVudFN0YWxlpmZpZWxkc5ClaW5kZXgFpGRvY3OR2SxUaGUgc3RhdGVtZW50IGZvciBQVkYgcHJlLWNoZWNraW5nIGlzIHN0YWxlLt4ABKRuYW1lt1B2ZkNoZWNrU3RhdGVtZW50RnV0dXJlpmZpZWxkc5ClaW5kZXgGpGRvY3OR2TtUaGUgc3RhdGVtZW50IGZvciBQVkYgcHJlLWNoZWNraW5nIGlzIGZvciBhIGZ1dHVyZSBzZXNzaW9uLt4ABKRuYW1l2SFQdmZDaGVja1ZhbGlkYXRvckluZGV4T3V0T2ZCb3VuZHOmZmllbGRzkKVpbmRleAekZG9jc5HZKUNsYWltZWQgdmFsaWRhdG9yIGluZGV4IGlzIG91dCBvZiBib3VuZHMu3gAEpG5hbWW4UHZmQ2hlY2tJbnZhbGlkU2lnbmF0dXJlpmZpZWxkc5ClaW5kZXgIpGRvY3OR2TJUaGUgc2lnbmF0dXJlIGZvciB0aGUgUFZGIHByZS1jaGVja2luZyBpcyBpbnZhbGlkLt4ABKRuYW1lslB2ZkNoZWNrRG91YmxlVm90ZaZmaWVsZHOQpWluZGV4CaRkb2NzkdksVGhlIGdpdmVuIHZhbGlkYXRvciBhbHJlYWR5IGhhcyBjYXN0IGEgdm90ZS7eAASkbmFtZbZQdmZDaGVja1N1YmplY3RJbnZhbGlkpmZpZWxkc5ClaW5kZXgKpGRvY3OR2T1UaGUgZ2l2ZW4gUFZGIGRvZXMgbm90IGV4aXN0IGF0IHRoZSBtb21lbnQgb2YgcHJvY2VzcyBhIHZvdGUu3gAEpG5hbWWwUHZmQ2hlY2tEaXNhYmxlZKZmaWVsZHOQpWluZGV4C6Rkb2NzktlWVGhlIFBWRiBwcmUtY2hlY2tpbmcgc3RhdGVtZW50IGNhbm5vdCBiZSBpbmNsdWRlZCBzaW5jZSB0aGUgUFZGIHByZS1jaGVja2luZyBtZWNoYW5pc22saXMgZGlzYWJsZWQu3gAEpG5hbWWxQ2Fubm90VXBncmFkZUNvZGWmZmllbGRzkKVpbmRleAykZG9jc5HZM1BhcmFjaGFpbiBjYW5ub3QgY3VycmVudGx5IHNjaGVkdWxlIGEgY29kZSB1cGdyYWRlLqRkb2NzkdltCgkJCUN1c3RvbSBbZGlzcGF0Y2ggZXJyb3JzXShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykKCQkJb2YgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZM0CfqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAn+kZG9jc5DeAAKiaWTNAn+kdHlwZd4ABKRwYXRok7twb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOraW5pdGlhbGl6ZXK1QnVmZmVyZWRTZXNzaW9uQ2hhbmdlpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOT3gAEpG5hbWWqdmFsaWRhdG9yc6R0eXBlzQJaqHR5cGVOYW1lsFZlYzxWYWxpZGF0b3JJZD6kZG9jc5DeAASkbmFtZaZxdWV1ZWSkdHlwZc0CWqh0eXBlTmFtZbBWZWM8VmFsaWRhdG9ySWQ+pGRvY3OQ3gAEpG5hbWWtc2Vzc2lvbl9pbmRleKR0eXBlBKh0eXBlTmFtZaxTZXNzaW9uSW5kZXikZG9jc5CkZG9jc5DeAAKiaWTNAoCkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQKBpGRvY3OQ3gAComlkzQKBpHR5cGXeAASkcGF0aJK4cG9sa2Fkb3RfY29yZV9wcmltaXRpdmVztkluYm91bmREb3dud2FyZE1lc3NhZ2WmcGFyYW1zkd4AAqRuYW1lq0Jsb2NrTnVtYmVypHR5cGUEo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lp3NlbnRfYXSkdHlwZQSodHlwZU5hbWWrQmxvY2tOdW1iZXKkZG9jc5DeAASkbmFtZaNtc2ekdHlwZQyodHlwZU5hbWWvRG93bndhcmRNZXNzYWdlpGRvY3OQpGRvY3OQ3gAComlkzQKCpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSzFkMpGRvY3OQ3gAComlkzQKDpHR5cGXeAASkcGF0aJS7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zo3VtcKZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWzVW5rbm93bk1lc3NhZ2VJbmRleKZmaWVsZHOQpWluZGV4AKRkb2NzkdkjVGhlIG1lc3NhZ2UgaW5kZXggZ2l2ZW4gaXMgdW5rbm93bi7eAASkbmFtZa9XZWlnaHRPdmVyTGltaXSmZmllbGRzkKVpbmRleAGkZG9jc5HZTFRoZSBhbW91bnQgb2Ygd2VpZ2h0IGdpdmVuIGlzIHBvc3NpYmx5IG5vdCBlbm91Z2ggZm9yIGV4ZWN1dGluZyB0aGUgbWVzc2FnZS6kZG9jc5HZbQoJCQlDdXN0b20gW2Rpc3BhdGNoIGVycm9yc10oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pCgkJCW9mIHRoaXMgcGFsbGV0LgoJCQneAAKiaWTNAoSkdHlwZd4ABKRwYXRok7twb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOkaHJtcLZIcm1wT3BlbkNoYW5uZWxSZXF1ZXN0pnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOW3gAEpG5hbWWpY29uZmlybWVkpHR5cGUlqHR5cGVOYW1lpGJvb2ykZG9jc5DeAASkbmFtZaRfYWdlpHR5cGUEqHR5cGVOYW1lrFNlc3Npb25JbmRleKRkb2NzkN4ABKRuYW1lrnNlbmRlcl9kZXBvc2l0pHR5cGUGqHR5cGVOYW1lp0JhbGFuY2WkZG9jc5DeAASkbmFtZbBtYXhfbWVzc2FnZV9zaXplpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lrG1heF9jYXBhY2l0eaR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZa5tYXhfdG90YWxfc2l6ZaR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5CkZG9jc5DeAAKiaWTNAoWkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzGekZG9jc5DeAAKiaWTNAoakdHlwZd4ABKRwYXRok7twb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOkaHJtcKtIcm1wQ2hhbm5lbKZwYXJhbXOQo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzmN4ABKRuYW1lrG1heF9jYXBhY2l0eaR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZa5tYXhfdG90YWxfc2l6ZaR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZbBtYXhfbWVzc2FnZV9zaXplpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lqW1zZ19jb3VudKR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZap0b3RhbF9zaXplpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lqG1xY19oZWFkpHR5cGXNAoeodHlwZU5hbWWsT3B0aW9uPEhhc2g+pGRvY3OQ3gAEpG5hbWWuc2VuZGVyX2RlcG9zaXSkdHlwZQaodHlwZU5hbWWnQmFsYW5jZaRkb2NzkN4ABKRuYW1lsXJlY2lwaWVudF9kZXBvc2l0pHR5cGUGqHR5cGVOYW1lp0JhbGFuY2WkZG9jc5CkZG9jc5DeAAKiaWTNAoekdHlwZd4ABKRwYXRokaZPcHRpb26mcGFyYW1zkd4AAqRuYW1loVSkdHlwZQujZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWkTm9uZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lpFNvbWWmZmllbGRzkd4ABKRuYW1lwKR0eXBlC6h0eXBlTmFtZcCkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzQKIpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZc0CiaRkb2NzkN4AAqJpZM0CiaR0eXBl3gAEpHBhdGiSuHBvbGthZG90X2NvcmVfcHJpbWl0aXZlc7JJbmJvdW5kSHJtcE1lc3NhZ2WmcGFyYW1zkd4AAqRuYW1lq0Jsb2NrTnVtYmVypHR5cGUEo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkt4ABKRuYW1lp3NlbnRfYXSkdHlwZQSodHlwZU5hbWWrQmxvY2tOdW1iZXKkZG9jc5DeAASkbmFtZaRkYXRhpHR5cGUMqHR5cGVOYW1ltHNwX3N0ZDo6dmVjOjpWZWM8dTg+pGRvY3OQpGRvY3OQ3gAComlkzQKKpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZc0Ci6Rkb2NzkN4AAqJpZM0Ci6R0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpXR1cGxlkgTNAm2kZG9jc5DeAAKiaWTNAoykdHlwZd4ABKRwYXRolLtwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOkaHJtcKZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHPcABPeAASkbmFtZbVPcGVuSHJtcENoYW5uZWxUb1NlbGamZmllbGRzkKVpbmRleACkZG9jc5HZMVRoZSBzZW5kZXIgdHJpZWQgdG8gb3BlbiBhIGNoYW5uZWwgdG8gdGhlbXNlbHZlcy7eAASkbmFtZb9PcGVuSHJtcENoYW5uZWxJbnZhbGlkUmVjaXBpZW50pmZpZWxkc5ClaW5kZXgBpGRvY3OR2SJUaGUgcmVjaXBpZW50IGlzIG5vdCBhIHZhbGlkIHBhcmEu3gAEpG5hbWW7T3BlbkhybXBDaGFubmVsWmVyb0NhcGFjaXR5pmZpZWxkc5ClaW5kZXgCpGRvY3ORv1RoZSByZXF1ZXN0ZWQgY2FwYWNpdHkgaXMgemVyby7eAASkbmFtZdkjT3BlbkhybXBDaGFubmVsQ2FwYWNpdHlFeGNlZWRzTGltaXSmZmllbGRzkKVpbmRleAOkZG9jc5HZMFRoZSByZXF1ZXN0ZWQgY2FwYWNpdHkgZXhjZWVkcyB0aGUgZ2xvYmFsIGxpbWl0Lt4ABKRuYW1lvk9wZW5Icm1wQ2hhbm5lbFplcm9NZXNzYWdlU2l6ZaZmaWVsZHOQpWluZGV4BKRkb2NzkdkoVGhlIHJlcXVlc3RlZCBtYXhpbXVtIG1lc3NhZ2Ugc2l6ZSBpcyAwLt4ABKRuYW1l2SZPcGVuSHJtcENoYW5uZWxNZXNzYWdlU2l6ZUV4Y2VlZHNMaW1pdKZmaWVsZHOQpWluZGV4BaRkb2NzkdlKVGhlIG9wZW4gcmVxdWVzdCByZXF1ZXN0ZWQgdGhlIG1lc3NhZ2Ugc2l6ZSB0aGF0IGV4Y2VlZHMgdGhlIGdsb2JhbCBsaW1pdC7eAASkbmFtZbxPcGVuSHJtcENoYW5uZWxBbHJlYWR5RXhpc3RzpmZpZWxkc5ClaW5kZXgGpGRvY3ORulRoZSBjaGFubmVsIGFscmVhZHkgZXhpc3Rz3gAEpG5hbWW/T3BlbkhybXBDaGFubmVsQWxyZWFkeVJlcXVlc3RlZKZmaWVsZHOQpWluZGV4B6Rkb2Nzkdk0VGhlcmUgaXMgYWxyZWFkeSBhIHJlcXVlc3QgdG8gb3BlbiB0aGUgc2FtZSBjaGFubmVsLt4ABKRuYW1lvE9wZW5Icm1wQ2hhbm5lbExpbWl0RXhjZWVkZWSmZmllbGRzkKVpbmRleAikZG9jc5HZR1RoZSBzZW5kZXIgYWxyZWFkeSBoYXMgdGhlIG1heGltdW0gbnVtYmVyIG9mIGFsbG93ZWQgb3V0Ym91bmQgY2hhbm5lbHMu3gAEpG5hbWW8QWNjZXB0SHJtcENoYW5uZWxEb2VzbnRFeGlzdKZmaWVsZHOQpWluZGV4CaRkb2Nzkdk4VGhlIGNoYW5uZWwgZnJvbSB0aGUgc2VuZGVyIHRvIHRoZSBvcmlnaW4gZG9lc24ndCBleGlzdC7eAASkbmFtZdkhQWNjZXB0SHJtcENoYW5uZWxBbHJlYWR5Q29uZmlybWVkpmZpZWxkc5ClaW5kZXgKpGRvY3OR2SFUaGUgY2hhbm5lbCBpcyBhbHJlYWR5IGNvbmZpcm1lZC7eAASkbmFtZb5BY2NlcHRIcm1wQ2hhbm5lbExpbWl0RXhjZWVkZWSmZmllbGRzkKVpbmRleAukZG9jc5HZSVRoZSByZWNpcGllbnQgYWxyZWFkeSBoYXMgdGhlIG1heGltdW0gbnVtYmVyIG9mIGFsbG93ZWQgaW5ib3VuZCBjaGFubmVscy7eAASkbmFtZbxDbG9zZUhybXBDaGFubmVsVW5hdXRob3JpemVkpmZpZWxkc5ClaW5kZXgMpGRvY3OR2VVUaGUgb3JpZ2luIHRyaWVzIHRvIGNsb3NlIGEgY2hhbm5lbCB3aGVyZSBpdCBpcyBuZWl0aGVyIHRoZSBzZW5kZXIgbm9yIHRoZSByZWNpcGllbnQu3gAEpG5hbWW7Q2xvc2VIcm1wQ2hhbm5lbERvZXNudEV4aXN0pmZpZWxkc5ClaW5kZXgNpGRvY3OR2SdUaGUgY2hhbm5lbCB0byBiZSBjbG9zZWQgZG9lc24ndCBleGlzdC7eAASkbmFtZb9DbG9zZUhybXBDaGFubmVsQWxyZWFkeVVuZGVyd2F5pmZpZWxkc5ClaW5kZXgOpGRvY3OR2S9UaGUgY2hhbm5lbCBjbG9zZSByZXF1ZXN0IGlzIGFscmVhZHkgcmVxdWVzdGVkLt4ABKRuYW1l2SFDYW5jZWxIcm1wT3BlbkNoYW5uZWxVbmF1dGhvcml6ZWSmZmllbGRzkKVpbmRleA+kZG9jc5HZV0NhbmNlbGluZyBpcyByZXF1ZXN0ZWQgYnkgbmVpdGhlciB0aGUgc2VuZGVyIG5vciByZWNpcGllbnQgb2YgdGhlIG9wZW4gY2hhbm5lbCByZXF1ZXN0Lt4ABKRuYW1luk9wZW5Icm1wQ2hhbm5lbERvZXNudEV4aXN0pmZpZWxkc5ClaW5kZXgQpGRvY3ORv1RoZSBvcGVuIHJlcXVlc3QgZG9lc24ndCBleGlzdC7eAASkbmFtZb9PcGVuSHJtcENoYW5uZWxBbHJlYWR5Q29uZmlybWVkpmZpZWxkc5ClaW5kZXgRpGRvY3OR2UtDYW5ub3QgY2FuY2VsIGFuIEhSTVAgb3BlbiBjaGFubmVsIHJlcXVlc3QgYmVjYXVzZSBpdCBpcyBhbHJlYWR5IGNvbmZpcm1lZC7eAASkbmFtZaxXcm9uZ1dpdG5lc3OmZmllbGRzkKVpbmRleBKkZG9jc5HZI1RoZSBwcm92aWRlZCB3aXRuZXNzIGRhdGEgaXMgd3JvbmcupGRvY3OR2W0KCQkJQ3VzdG9tIFtkaXNwYXRjaCBlcnJvcnNdKGh0dHBzOi8vZG9jcy5zdWJzdHJhdGUuaW8vbWFpbi1kb2NzL2J1aWxkL2V2ZW50cy1lcnJvcnMvKQoJCQlvZiB0aGlzIHBhbGxldC4KCQkJ3gAComlkzQKNpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZc0BC6Rkb2NzkN4AAqJpZM0CjqR0eXBl3gAEpHBhdGiTs3BvbGthZG90X3ByaW1pdGl2ZXOidjKrU2Vzc2lvbkluZm+mcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc53eAASkbmFtZbhhY3RpdmVfdmFsaWRhdG9yX2luZGljZXOkdHlwZc0CWah0eXBlTmFtZbNWZWM8VmFsaWRhdG9ySW5kZXg+pGRvY3OQ3gAEpG5hbWWrcmFuZG9tX3NlZWSkdHlwZQGodHlwZU5hbWWoW3U4OyAzMl2kZG9jc5DeAASkbmFtZa5kaXNwdXRlX3BlcmlvZKR0eXBlBKh0eXBlTmFtZaxTZXNzaW9uSW5kZXikZG9jc5DeAASkbmFtZap2YWxpZGF0b3JzpHR5cGXNAo+odHlwZU5hbWXZJ0luZGV4ZWRWZWM8VmFsaWRhdG9ySW5kZXgsIFZhbGlkYXRvcklkPqRkb2NzkN4ABKRuYW1lrmRpc2NvdmVyeV9rZXlzpHR5cGXNApCodHlwZU5hbWW5VmVjPEF1dGhvcml0eURpc2NvdmVyeUlkPqRkb2NzkN4ABKRuYW1lr2Fzc2lnbm1lbnRfa2V5c6R0eXBlzQKNqHR5cGVOYW1lsVZlYzxBc3NpZ25tZW50SWQ+pGRvY3OQ3gAEpG5hbWWwdmFsaWRhdG9yX2dyb3Vwc6R0eXBlzQKRqHR5cGVOYW1l2StJbmRleGVkVmVjPEdyb3VwSW5kZXgsIFZlYzxWYWxpZGF0b3JJbmRleD4+pGRvY3OQ3gAEpG5hbWWnbl9jb3Jlc6R0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZbp6ZXJvdGhfZGVsYXlfdHJhbmNoZV93aWR0aKR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZbhyZWxheV92cmZfbW9kdWxvX3NhbXBsZXOkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQ3gAEpG5hbWWwbl9kZWxheV90cmFuY2hlc6R0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5DeAASkbmFtZa1ub19zaG93X3Nsb3RzpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkN4ABKRuYW1lsG5lZWRlZF9hcHByb3ZhbHOkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpGRvY3OQ3gAComlkzQKPpHR5cGXeAASkcGF0aJOzcG9sa2Fkb3RfcHJpbWl0aXZlc6J2MqpJbmRleGVkVmVjpnBhcmFtc5LeAAKkbmFtZaFLpHR5cGXNAbPeAAKkbmFtZaFWpHR5cGXNAQqjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAlqodHlwZU5hbWWmVmVjPFY+pGRvY3OQpGRvY3OQ3gAComlkzQKQpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGoc2VxdWVuY2XeAAGkdHlwZc0BDKRkb2NzkN4AAqJpZM0CkaR0eXBl3gAEpHBhdGiTs3BvbGthZG90X3ByaW1pdGl2ZXOidjKqSW5kZXhlZFZlY6ZwYXJhbXOS3gACpG5hbWWhS6R0eXBlzGHeAAKkbmFtZaFWpHR5cGXNAlmjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAmSodHlwZU5hbWWmVmVjPFY+pGRvY3OQpGRvY3OQ3gAComlkzQKSpHR5cGXeAASkcGF0aJSzcG9sa2Fkb3RfcHJpbWl0aXZlc6h2c3RhZ2luZ69leGVjdXRvcl9wYXJhbXOuRXhlY3V0b3JQYXJhbXOmcGFyYW1zkKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0Ck6h0eXBlTmFtZbJWZWM8RXhlY3V0b3JQYXJhbT6kZG9jc5CkZG9jc5DeAAKiaWTNApOkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQKUpGRvY3OQ3gAComlkzQKUpHR5cGXeAASkcGF0aJSzcG9sa2Fkb3RfcHJpbWl0aXZlc6h2c3RhZ2luZ69leGVjdXRvcl9wYXJhbXOtRXhlY3V0b3JQYXJhbaZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzlt4ABKRuYW1lrk1heE1lbW9yeVBhZ2VzpmZpZWxkc5HeAASkbmFtZcCkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpWluZGV4AaRkb2NzkN4ABKRuYW1lr1N0YWNrTG9naWNhbE1heKZmaWVsZHOR3gAEpG5hbWXApHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAKkZG9jc5DeAASkbmFtZa5TdGFja05hdGl2ZU1heKZmaWVsZHOR3gAEpG5hbWXApHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKVpbmRleAOkZG9jc5DeAASkbmFtZbRQcmVjaGVja2luZ01heE1lbW9yeaZmaWVsZHOR3gAEpG5hbWXApHR5cGUKqHR5cGVOYW1lo3U2NKRkb2NzkKVpbmRleASkZG9jc5DeAASkbmFtZa5QdmZQcmVwVGltZW91dKZmaWVsZHOS3gAEpG5hbWXApHR5cGXNApWodHlwZU5hbWWyUHZmUHJlcFRpbWVvdXRLaW5kpGRvY3OQ3gAEpG5hbWXApHR5cGUKqHR5cGVOYW1lo3U2NKRkb2NzkKVpbmRleAWkZG9jc5DeAASkbmFtZa5QdmZFeGVjVGltZW91dKZmaWVsZHOS3gAEpG5hbWXApHR5cGXNApaodHlwZU5hbWWyUHZmRXhlY1RpbWVvdXRLaW5kpGRvY3OQ3gAEpG5hbWXApHR5cGUKqHR5cGVOYW1lo3U2NKRkb2NzkKVpbmRleAakZG9jc5CkZG9jc5DeAAKiaWTNApWkdHlwZd4ABKRwYXRok7Nwb2xrYWRvdF9wcmltaXRpdmVzonYyslB2ZlByZXBUaW1lb3V0S2luZKZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lqFByZWNoZWNrpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWnTGVuaWVudKZmaWVsZHOQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZM0ClqR0eXBl3gAEpHBhdGiTs3BvbGthZG90X3ByaW1pdGl2ZXOidjKyUHZmRXhlY1RpbWVvdXRLaW5kpnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWnQmFja2luZ6ZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lqEFwcHJvdmFspmZpZWxkc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzQKXpHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWSBMxppGRvY3OQ3gAComlkzQKYpHR5cGXeAASkcGF0aJOzcG9sa2Fkb3RfcHJpbWl0aXZlc6J2MqxEaXNwdXRlU3RhdGWmcGFyYW1zkd4AAqRuYW1loU6kdHlwZQSjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOU3gAEpG5hbWWudmFsaWRhdG9yc19mb3KkdHlwZc0Bsah0eXBlTmFtZb9CaXRWZWM8dTgsIGJpdHZlYzo6b3JkZXI6OkxzYjA+pGRvY3OQ3gAEpG5hbWWydmFsaWRhdG9yc19hZ2FpbnN0pHR5cGXNAbGodHlwZU5hbWW/Qml0VmVjPHU4LCBiaXR2ZWM6Om9yZGVyOjpMc2IwPqRkb2NzkN4ABKRuYW1lpXN0YXJ0pHR5cGUEqHR5cGVOYW1loU6kZG9jc5DeAASkbmFtZaxjb25jbHVkZWRfYXSkdHlwZc0BFKh0eXBlTmFtZalPcHRpb248Tj6kZG9jc5CkZG9jc5DeAAKiaWTNApmkdHlwZd4ABKRwYXRokahCVHJlZVNldKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlzQGzo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQJZqHR5cGVOYW1lwKRkb2NzkKRkb2NzkN4AAqJpZM0CmqR0eXBl3gAEpHBhdGiUu3BvbGthZG90X3J1bnRpbWVfcGFyYWNoYWluc6hkaXNwdXRlc6ZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOZ3gAEpG5hbWW9RHVwbGljYXRlRGlzcHV0ZVN0YXRlbWVudFNldHOmZmllbGRzkKVpbmRleACkZG9jc5HZKkR1cGxpY2F0ZSBkaXNwdXRlIHN0YXRlbWVudCBzZXRzIHByb3ZpZGVkLt4ABKRuYW1lt0FuY2llbnREaXNwdXRlU3RhdGVtZW50pmZpZWxkc5ClaW5kZXgBpGRvY3OR2SNBbmNpZW50IGRpc3B1dGUgc3RhdGVtZW50IHByb3ZpZGVkLt4ABKRuYW1luVZhbGlkYXRvckluZGV4T3V0T2ZCb3VuZHOmZmllbGRzkKVpbmRleAKkZG9jc5HZOlZhbGlkYXRvciBpbmRleCBvbiBzdGF0ZW1lbnQgaXMgb3V0IG9mIGJvdW5kcyBmb3Igc2Vzc2lvbi7eAASkbmFtZbBJbnZhbGlkU2lnbmF0dXJlpmZpZWxkc5ClaW5kZXgDpGRvY3ORv0ludmFsaWQgc2lnbmF0dXJlIG9uIHN0YXRlbWVudC7eAASkbmFtZbJEdXBsaWNhdGVTdGF0ZW1lbnSmZmllbGRzkKVpbmRleASkZG9jc5HZM1ZhbGlkYXRvciB2b3RlIHN1Ym1pdHRlZCBtb3JlIHRoYW4gb25jZSB0byBkaXNwdXRlLt4ABKRuYW1lslNpbmdsZVNpZGVkRGlzcHV0ZaZmaWVsZHOQpWluZGV4BaRkb2NzkdkxQSBkaXNwdXRlIHdoZXJlIHRoZXJlIGFyZSBvbmx5IHZvdGVzIG9uIG9uZSBzaWRlLt4ABKRuYW1lr01hbGljaW91c0JhY2tlcqZmaWVsZHOQpWluZGV4BqRkb2NzkdknQSBkaXNwdXRlIHZvdGUgZnJvbSBhIG1hbGljaW91cyBiYWNrZXIu3gAEpG5hbWWzTWlzc2luZ0JhY2tpbmdWb3Rlc6ZmaWVsZHOQpWluZGV4B6Rkb2Nzkdk4Tm8gYmFja2luZyB2b3RlcyB3ZXJlIHByb3ZpZGVzIGFsb25nIGRpc3B1dGUgc3RhdGVtZW50cy7eAASkbmFtZbJVbmNvbmZpcm1lZERpc3B1dGWmZmllbGRzkKVpbmRleAikZG9jc5HZLFVuY29uZmlybWVkIGRpc3B1dGUgc3RhdGVtZW50IHNldHMgcHJvdmlkZWQupGRvY3OR2W0KCQkJQ3VzdG9tIFtkaXNwYXRjaCBlcnJvcnNdKGh0dHBzOi8vZG9jcy5zdWJzdHJhdGUuaW8vbWFpbi1kb2NzL2J1aWxkL2V2ZW50cy1lcnJvcnMvKQoJCQlvZiB0aGlzIHBhbGxldC4KCQkJ3gAComlkzQKbpHR5cGXeAASkcGF0aJS7cG9sa2Fkb3RfcnVudGltZV9wYXJhY2hhaW5zqGRpc3B1dGVzqHNsYXNoaW5nrlBlbmRpbmdTbGFzaGVzpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOS3gAEpG5hbWWka2V5c6R0eXBlzQKcqHR5cGVOYW1l2SVCVHJlZU1hcDxWYWxpZGF0b3JJbmRleCwgVmFsaWRhdG9ySWQ+pGRvY3OQ3gAEpG5hbWWka2luZKR0eXBlzQHSqHR5cGVOYW1ls1NsYXNoaW5nT2ZmZW5jZUtpbmSkZG9jc5CkZG9jc5DeAAKiaWTNApykdHlwZd4ABKRwYXRokahCVHJlZU1hcKZwYXJhbXOS3gACpG5hbWWhS6R0eXBlzQGz3gACpG5hbWWhVqR0eXBlzQEKo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQKdqHR5cGVOYW1lwKRkb2NzkKRkb2NzkN4AAqJpZM0CnaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAp6kZG9jc5DeAAKiaWTNAp6kdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZLNAbPNAQqkZG9jc5DeAAKiaWTNAp+kdHlwZd4ABKRwYXRolbtwb2xrYWRvdF9ydW50aW1lX3BhcmFjaGFpbnOoZGlzcHV0ZXOoc2xhc2hpbmemcGFsbGV0pUVycm9ypnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzlt4ABKRuYW1luEludmFsaWRLZXlPd25lcnNoaXBQcm9vZqZmaWVsZHOQpWluZGV4AKRkb2NzkdkjVGhlIGtleSBvd25lcnNoaXAgcHJvb2YgaXMgaW52YWxpZC7eAASkbmFtZbNJbnZhbGlkU2Vzc2lvbkluZGV4pmZpZWxkc5ClaW5kZXgBpGRvY3OR2ShUaGUgc2Vzc2lvbiBpbmRleCBpcyB0b28gb2xkIG9yIGludmFsaWQu3gAEpG5hbWW0SW52YWxpZENhbmRpZGF0ZUhhc2imZmllbGRzkKVpbmRleAKkZG9jc5G+VGhlIGNhbmRpZGF0ZSBoYXNoIGlzIGludmFsaWQu3gAEpG5hbWW1SW52YWxpZFZhbGlkYXRvckluZGV4pmZpZWxkc5ClaW5kZXgDpGRvY3OS2UBUaGVyZSBpcyBubyBwZW5kaW5nIHNsYXNoIGZvciB0aGUgZ2l2ZW4gdmFsaWRhdG9yIGluZGV4IGFuZCB0aW1lpXNsb3Qu3gAEpG5hbWW4VmFsaWRhdG9ySW5kZXhJZE1pc21hdGNopmZpZWxkc5ClaW5kZXgEpGRvY3OR2TRUaGUgdmFsaWRhdG9yIGluZGV4IGRvZXMgbm90IG1hdGNoIHRoZSB2YWxpZGF0b3IgaWQu3gAEpG5hbWW3RHVwbGljYXRlU2xhc2hpbmdSZXBvcnSmZmllbGRzkKVpbmRleAWkZG9jc5HZQ1RoZSBnaXZlbiBzbGFzaGluZyByZXBvcnQgaXMgdmFsaWQgYnV0IGFscmVhZHkgcHJldmlvdXNseSByZXBvcnRlZC6kZG9jc5HZbQoJCQlDdXN0b20gW2Rpc3BhdGNoIGVycm9yc10oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pCgkJCW9mIHRoaXMgcGFsbGV0LgoJCQneAAKiaWTNAqCkdHlwZd4ABKRwYXRok7dwb2xrYWRvdF9ydW50aW1lX2NvbW1vbq9wYXJhc19yZWdpc3RyYXKoUGFyYUluZm+mcGFyYW1zkt4AAqRuYW1lp0FjY291bnSkdHlwZQDeAAKkbmFtZadCYWxhbmNlpHR5cGUGo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzk94ABKRuYW1lp21hbmFnZXKkdHlwZQCodHlwZU5hbWWnQWNjb3VudKRkb2NzkN4ABKRuYW1lp2RlcG9zaXSkdHlwZQaodHlwZU5hbWWnQmFsYW5jZaRkb2NzkN4ABKRuYW1lpmxvY2tlZKR0eXBlJah0eXBlTmFtZaRib29spGRvY3OQpGRvY3OQ3gAComlkzQKhpHR5cGXeAASkcGF0aJS3cG9sa2Fkb3RfcnVudGltZV9jb21tb26vcGFyYXNfcmVnaXN0cmFypnBhbGxldKVFcnJvcqZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c57eAASkbmFtZa1Ob3RSZWdpc3RlcmVkpmZpZWxkc5ClaW5kZXgApGRvY3ORuVRoZSBJRCBpcyBub3QgcmVnaXN0ZXJlZC7eAASkbmFtZbFBbHJlYWR5UmVnaXN0ZXJlZKZmaWVsZHOQpWluZGV4AaRkb2Nzkb1UaGUgSUQgaXMgYWxyZWFkeSByZWdpc3RlcmVkLt4ABKRuYW1lqE5vdE93bmVypmZpZWxkc5ClaW5kZXgCpGRvY3OR2SdUaGUgY2FsbGVyIGlzIG5vdCB0aGUgb3duZXIgb2YgdGhpcyBJZC7eAASkbmFtZaxDb2RlVG9vTGFyZ2WmZmllbGRzkKVpbmRleAOkZG9jc5G3SW52YWxpZCBwYXJhIGNvZGUgc2l6ZS7eAASkbmFtZbBIZWFkRGF0YVRvb0xhcmdlpmZpZWxkc5ClaW5kZXgEpGRvY3ORvEludmFsaWQgcGFyYSBoZWFkIGRhdGEgc2l6ZS7eAASkbmFtZaxOb3RQYXJhY2hhaW6mZmllbGRzkKVpbmRleAWkZG9jc5G4UGFyYSBpcyBub3QgYSBQYXJhY2hhaW4u3gAEpG5hbWWtTm90UGFyYXRocmVhZKZmaWVsZHOQpWluZGV4BqRkb2NzkblQYXJhIGlzIG5vdCBhIFBhcmF0aHJlYWQu3gAEpG5hbWWwQ2Fubm90RGVyZWdpc3RlcqZmaWVsZHOQpWluZGV4B6Rkb2NzkbZDYW5ub3QgZGVyZWdpc3RlciBwYXJh3gAEpG5hbWWvQ2Fubm90RG93bmdyYWRlpmZpZWxkc5ClaW5kZXgIpGRvY3OR2TRDYW5ub3Qgc2NoZWR1bGUgZG93bmdyYWRlIG9mIHBhcmFjaGFpbiB0byBwYXJhdGhyZWFk3gAEpG5hbWWtQ2Fubm90VXBncmFkZaZmaWVsZHOQpWluZGV4CaRkb2NzkdkyQ2Fubm90IHNjaGVkdWxlIHVwZ3JhZGUgb2YgcGFyYXRocmVhZCB0byBwYXJhY2hhaW7eAASkbmFtZapQYXJhTG9ja2VkpmZpZWxkc5ClaW5kZXgKpGRvY3OR2V5QYXJhIGlzIGxvY2tlZCBmcm9tIG1hbmlwdWxhdGlvbiBieSB0aGUgbWFuYWdlci4gTXVzdCB1c2UgcGFyYWNoYWluIG9yIHJlbGF5IGNoYWluIGdvdmVybmFuY2Uu3gAEpG5hbWWrTm90UmVzZXJ2ZWSmZmllbGRzkKVpbmRleAukZG9jc5HZNFRoZSBJRCBnaXZlbiBmb3IgcmVnaXN0cmF0aW9uIGhhcyBub3QgYmVlbiByZXNlcnZlZC7eAASkbmFtZalFbXB0eUNvZGWmZmllbGRzkKVpbmRleAykZG9jc5HZNVJlZ2lzdGVyaW5nIHBhcmFjaGFpbiB3aXRoIGVtcHR5IGNvZGUgaXMgbm90IGFsbG93ZWQu3gAEpG5hbWWqQ2Fubm90U3dhcKZmaWVsZHOQpWluZGV4DaRkb2NzktlYQ2Fubm90IHBlcmZvcm0gYSBwYXJhY2hhaW4gc2xvdCAvIGxpZmVjeWNsZSBzd2FwLiBDaGVjayB0aGF0IHRoZSBzdGF0ZSBvZiBib3RoIHBhcmFzIGFyZb1jb3JyZWN0IGZvciB0aGUgc3dhcCB0byB3b3JrLqRkb2NzkdltCgkJCUN1c3RvbSBbZGlzcGF0Y2ggZXJyb3JzXShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykKCQkJb2YgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZM0CoqR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABqHNlcXVlbmNl3gABpHR5cGXNAhukZG9jc5DeAAKiaWTNAqOkdHlwZd4ABKRwYXRolLdwb2xrYWRvdF9ydW50aW1lX2NvbW1vbqVzbG90c6ZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWxUGFyYU5vdE9uYm9hcmRpbmemZmllbGRzkKVpbmRleACkZG9jc5HZI1RoZSBwYXJhY2hhaW4gSUQgaXMgbm90IG9uYm9hcmRpbmcu3gAEpG5hbWWqTGVhc2VFcnJvcqZmaWVsZHOQpWluZGV4AaRkb2NzkdkiVGhlcmUgd2FzIGFuIGVycm9yIHdpdGggdGhlIGxlYXNlLqRkb2NzkdltCgkJCUN1c3RvbSBbZGlzcGF0Y2ggZXJyb3JzXShodHRwczovL2RvY3Muc3Vic3RyYXRlLmlvL21haW4tZG9jcy9idWlsZC9ldmVudHMtZXJyb3JzLykKCQkJb2YgdGhpcyBwYWxsZXQuCgkJCd4AAqJpZM0CpKR0eXBl3gAEpHBhdGiUt3BvbGthZG90X3J1bnRpbWVfY29tbW9usnBhcmFzX3N1ZG9fd3JhcHBlcqZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOY3gAEpG5hbWWvUGFyYURvZXNudEV4aXN0pmZpZWxkc5ClaW5kZXgApGRvY3OR2ThUaGUgc3BlY2lmaWVkIHBhcmFjaGFpbiBvciBwYXJhdGhyZWFkIGlzIG5vdCByZWdpc3RlcmVkLt4ABKRuYW1lsVBhcmFBbHJlYWR5RXhpc3RzpmZpZWxkc5ClaW5kZXgBpGRvY3OR2TxUaGUgc3BlY2lmaWVkIHBhcmFjaGFpbiBvciBwYXJhdGhyZWFkIGlzIGFscmVhZHkgcmVnaXN0ZXJlZC7eAASkbmFtZbVFeGNlZWRzTWF4TWVzc2FnZVNpemWmZmllbGRzkKVpbmRleAKkZG9jc5LZWUEgRE1QIG1lc3NhZ2UgY291bGRuJ3QgYmUgc2VudCBiZWNhdXNlIGl0IGV4Y2VlZHMgdGhlIG1heGltdW0gc2l6ZSBhbGxvd2VkIGZvciBhIGRvd253YXJkqG1lc3NhZ2Uu3gAEpG5hbWWuQ291bGRudENsZWFudXCmZmllbGRzkKVpbmRleAOkZG9jc5HZIENvdWxkIG5vdCBzY2hlZHVsZSBwYXJhIGNsZWFudXAu3gAEpG5hbWWtTm90UGFyYXRocmVhZKZmaWVsZHOQpWluZGV4BKRkb2NzkbFOb3QgYSBwYXJhdGhyZWFkLt4ABKRuYW1lrE5vdFBhcmFjaGFpbqZmaWVsZHOQpWluZGV4BaRkb2NzkbBOb3QgYSBwYXJhY2hhaW4u3gAEpG5hbWWtQ2Fubm90VXBncmFkZaZmaWVsZHOQpWluZGV4BqRkb2NzkbpDYW5ub3QgdXBncmFkZSBwYXJhdGhyZWFkLt4ABKRuYW1lr0Nhbm5vdERvd25ncmFkZaZmaWVsZHOQpWluZGV4B6Rkb2NzkbtDYW5ub3QgZG93bmdyYWRlIHBhcmFjaGFpbi6kZG9jc5HZbQoJCQlDdXN0b20gW2Rpc3BhdGNoIGVycm9yc10oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pCgkJCW9mIHRoaXMgcGFsbGV0LgoJCQneAAKiaWTNAqWkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZIAzFmkZG9jc5DeAAKiaWTNAqakdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaVhcnJhed4AAqNsZW4kpHR5cGXNAqekZG9jc5DeAAKiaWTNAqekdHlwZd4ABKRwYXRokaZPcHRpb26mcGFyYW1zkd4AAqRuYW1loVSkdHlwZc0CqKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZaROb25lpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWkU29tZaZmaWVsZHOR3gAEpG5hbWXApHR5cGXNAqiodHlwZU5hbWXApGRvY3OQpWluZGV4AaRkb2NzkKRkb2NzkN4AAqJpZM0CqKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpXR1cGxlkwDMWQakZG9jc5DeAAKiaWTNAqmkdHlwZd4ABKRwYXRolLdwb2xrYWRvdF9ydW50aW1lX2NvbW1vbqhhdWN0aW9uc6ZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOX3gAEpG5hbWWxQXVjdGlvbkluUHJvZ3Jlc3OmZmllbGRzkKVpbmRleACkZG9jc5HZJFRoaXMgYXVjdGlvbiBpcyBhbHJlYWR5IGluIHByb2dyZXNzLt4ABKRuYW1lsUxlYXNlUGVyaW9kSW5QYXN0pmZpZWxkc5ClaW5kZXgBpGRvY3OR2SBUaGUgbGVhc2UgcGVyaW9kIGlzIGluIHRoZSBwYXN0Lt4ABKRuYW1lsVBhcmFOb3RSZWdpc3RlcmVkpmZpZWxkc5ClaW5kZXgCpGRvY3ORtlBhcmEgaXMgbm90IHJlZ2lzdGVyZWTeAASkbmFtZbFOb3RDdXJyZW50QXVjdGlvbqZmaWVsZHOQpWluZGV4A6Rkb2NzkbZOb3QgYSBjdXJyZW50IGF1Y3Rpb24u3gAEpG5hbWWqTm90QXVjdGlvbqZmaWVsZHOQpWluZGV4BKRkb2Nzka9Ob3QgYW4gYXVjdGlvbi7eAASkbmFtZaxBdWN0aW9uRW5kZWSmZmllbGRzkKVpbmRleAWkZG9jc5G6QXVjdGlvbiBoYXMgYWxyZWFkeSBlbmRlZC7eAASkbmFtZbBBbHJlYWR5TGVhc2VkT3V0pmZpZWxkc5ClaW5kZXgGpGRvY3OR2TZUaGUgcGFyYSBpcyBhbHJlYWR5IGxlYXNlZCBvdXQgZm9yIHBhcnQgb2YgdGhpcyByYW5nZS6kZG9jc5HZbQoJCQlDdXN0b20gW2Rpc3BhdGNoIGVycm9yc10oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pCgkJCW9mIHRoaXMgcGFsbGV0LgoJCQneAAKiaWTNAqqkdHlwZd4ABKRwYXRok7dwb2xrYWRvdF9ydW50aW1lX2NvbW1vbqljcm93ZGxvYW6oRnVuZEluZm+mcGFyYW1zlN4AAqRuYW1lqUFjY291bnRJZKR0eXBlAN4AAqRuYW1lp0JhbGFuY2WkdHlwZQbeAAKkbmFtZatCbG9ja051bWJlcqR0eXBlBN4AAqRuYW1lq0xlYXNlUGVyaW9kpHR5cGUEo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzmt4ABKRuYW1lqWRlcG9zaXRvcqR0eXBlAKh0eXBlTmFtZalBY2NvdW50SWSkZG9jc5DeAASkbmFtZah2ZXJpZmllcqR0eXBlzQHmqHR5cGVOYW1ls09wdGlvbjxNdWx0aVNpZ25lcj6kZG9jc5DeAASkbmFtZadkZXBvc2l0pHR5cGUGqHR5cGVOYW1lp0JhbGFuY2WkZG9jc5DeAASkbmFtZaZyYWlzZWSkdHlwZQaodHlwZU5hbWWnQmFsYW5jZaRkb2NzkN4ABKRuYW1lo2VuZKR0eXBlBKh0eXBlTmFtZatCbG9ja051bWJlcqRkb2NzkN4ABKRuYW1lo2NhcKR0eXBlBqh0eXBlTmFtZadCYWxhbmNlpGRvY3OQ3gAEpG5hbWWxbGFzdF9jb250cmlidXRpb26kdHlwZc0Cq6h0eXBlTmFtZb1MYXN0Q29udHJpYnV0aW9uPEJsb2NrTnVtYmVyPqRkb2NzkN4ABKRuYW1lrGZpcnN0X3BlcmlvZKR0eXBlBKh0eXBlTmFtZatMZWFzZVBlcmlvZKRkb2NzkN4ABKRuYW1lq2xhc3RfcGVyaW9kpHR5cGUEqHR5cGVOYW1lq0xlYXNlUGVyaW9kpGRvY3OQ3gAEpG5hbWWqZnVuZF9pbmRleKR0eXBlBKh0eXBlTmFtZalGdW5kSW5kZXikZG9jc5CkZG9jc5DeAAKiaWTNAqukdHlwZd4ABKRwYXRok7dwb2xrYWRvdF9ydW50aW1lX2NvbW1vbqljcm93ZGxvYW6wTGFzdENvbnRyaWJ1dGlvbqZwYXJhbXOR3gACpG5hbWWrQmxvY2tOdW1iZXKkdHlwZQSjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOT3gAEpG5hbWWlTmV2ZXKmZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZalQcmVFbmRpbmemZmllbGRzkd4ABKRuYW1lwKR0eXBlBKh0eXBlTmFtZaN1MzKkZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWmRW5kaW5npmZpZWxkc5HeAASkbmFtZcCkdHlwZQSodHlwZU5hbWWrQmxvY2tOdW1iZXKkZG9jc5ClaW5kZXgCpGRvY3OQpGRvY3OQ3gAComlkzQKspHR5cGXeAASkcGF0aJS3cG9sa2Fkb3RfcnVudGltZV9jb21tb26pY3Jvd2Rsb2FupnBhbGxldKVFcnJvcqZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c9wAF94ABKRuYW1lsUZpcnN0UGVyaW9kSW5QYXN0pmZpZWxkc5ClaW5kZXgApGRvY3OR2T1UaGUgY3VycmVudCBsZWFzZSBwZXJpb2QgaXMgbW9yZSB0aGFuIHRoZSBmaXJzdCBsZWFzZSBwZXJpb2Qu3gAEpG5hbWW5Rmlyc3RQZXJpb2RUb29GYXJJbkZ1dHVyZaZmaWVsZHOQpWluZGV4AaRkb2NzkdlEVGhlIGZpcnN0IGxlYXNlIHBlcmlvZCBuZWVkcyB0byBhdCBsZWFzdCBiZSBsZXNzIHRoYW4gMyBgbWF4X3ZhbHVlYC7eAASkbmFtZbtMYXN0UGVyaW9kQmVmb3JlRmlyc3RQZXJpb2SmZmllbGRzkKVpbmRleAKkZG9jc5HZOkxhc3QgbGVhc2UgcGVyaW9kIG11c3QgYmUgZ3JlYXRlciB0aGFuIGZpcnN0IGxlYXNlIHBlcmlvZC7eAASkbmFtZbhMYXN0UGVyaW9kVG9vRmFySW5GdXR1cmWmZmllbGRzkKVpbmRleAOkZG9jc5HZS1RoZSBsYXN0IGxlYXNlIHBlcmlvZCBjYW5ub3QgYmUgbW9yZSB0aGFuIDMgcGVyaW9kcyBhZnRlciB0aGUgZmlyc3QgcGVyaW9kLt4ABKRuYW1lr0Nhbm5vdEVuZEluUGFzdKZmaWVsZHOQpWluZGV4BKRkb2NzkdlRVGhlIGNhbXBhaWduIGVuZHMgYmVmb3JlIHRoZSBjdXJyZW50IGJsb2NrIG51bWJlci4gVGhlIGVuZCBtdXN0IGJlIGluIHRoZSBmdXR1cmUu3gAEpG5hbWWxRW5kVG9vRmFySW5GdXR1cmWmZmllbGRzkKVpbmRleAWkZG9jc5HZMFRoZSBlbmQgZGF0ZSBmb3IgdGhpcyBjcm93ZGxvYW4gaXMgbm90IHNlbnNpYmxlLt4ABKRuYW1lqE92ZXJmbG93pmZpZWxkc5ClaW5kZXgGpGRvY3ORtlRoZXJlIHdhcyBhbiBvdmVyZmxvdy7eAASkbmFtZbRDb250cmlidXRpb25Ub29TbWFsbKZmaWVsZHOQpWluZGV4B6Rkb2Nzkdk6VGhlIGNvbnRyaWJ1dGlvbiB3YXMgYmVsb3cgdGhlIG1pbmltdW0sIGBNaW5Db250cmlidXRpb25gLt4ABKRuYW1lrUludmFsaWRQYXJhSWSmZmllbGRzkKVpbmRleAikZG9jc5GzSW52YWxpZCBmdW5kIGluZGV4Lt4ABKRuYW1lq0NhcEV4Y2VlZGVkpmZpZWxkc5ClaW5kZXgJpGRvY3OR2SRDb250cmlidXRpb25zIGV4Y2VlZCBtYXhpbXVtIGFtb3VudC7eAASkbmFtZbZDb250cmlidXRpb25QZXJpb2RPdmVypmZpZWxkc5ClaW5kZXgKpGRvY3OR2SpUaGUgY29udHJpYnV0aW9uIHBlcmlvZCBoYXMgYWxyZWFkeSBlbmRlZC7eAASkbmFtZa1JbnZhbGlkT3JpZ2lupmZpZWxkc5ClaW5kZXgLpGRvY3OR2SNUaGUgb3JpZ2luIG9mIHRoaXMgY2FsbCBpcyBpbnZhbGlkLt4ABKRuYW1lrE5vdFBhcmFjaGFpbqZmaWVsZHOQpWluZGV4DKRkb2NzkdkyVGhpcyBjcm93ZGxvYW4gZG9lcyBub3QgY29ycmVzcG9uZCB0byBhIHBhcmFjaGFpbi7eAASkbmFtZatMZWFzZUFjdGl2ZaZmaWVsZHOQpWluZGV4DaRkb2NzkdlFVGhpcyBwYXJhY2hhaW4gbGVhc2UgaXMgc3RpbGwgYWN0aXZlIGFuZCByZXRpcmVtZW50IGNhbm5vdCB5ZXQgYmVnaW4u3gAEpG5hbWWwQmlkT3JMZWFzZUFjdGl2ZaZmaWVsZHOQpWluZGV4DqRkb2NzkdlMVGhpcyBwYXJhY2hhaW4ncyBiaWQgb3IgbGVhc2UgaXMgc3RpbGwgYWN0aXZlIGFuZCB3aXRoZHJhdyBjYW5ub3QgeWV0IGJlZ2luLt4ABKRuYW1lrEZ1bmROb3RFbmRlZKZmaWVsZHOQpWluZGV4D6Rkb2NzkdkgVGhlIGNyb3dkbG9hbiBoYXMgbm90IHlldCBlbmRlZC7eAASkbmFtZa9Ob0NvbnRyaWJ1dGlvbnOmZmllbGRzkKVpbmRleBCkZG9jc5HZNFRoZXJlIGFyZSBubyBjb250cmlidXRpb25zIHN0b3JlZCBpbiB0aGlzIGNyb3dkbG9hbi7eAASkbmFtZbJOb3RSZWFkeVRvRGlzc29sdmWmZmllbGRzkKVpbmRleBGkZG9jc5HZXVRoZSBjcm93ZGxvYW4gaXMgbm90IHJlYWR5IHRvIGRpc3NvbHZlLiBQb3RlbnRpYWxseSBzdGlsbCBoYXMgYSBzbG90IG9yIGluIHJldGlyZW1lbnQgcGVyaW9kLt4ABKRuYW1lsEludmFsaWRTaWduYXR1cmWmZmllbGRzkKVpbmRleBKkZG9jc5GySW52YWxpZCBzaWduYXR1cmUu3gAEpG5hbWWsTWVtb1Rvb0xhcmdlpmZpZWxkc5ClaW5kZXgTpGRvY3ORv1RoZSBwcm92aWRlZCBtZW1vIGlzIHRvbyBsYXJnZS7eAASkbmFtZbFBbHJlYWR5SW5OZXdSYWlzZaZmaWVsZHOQpWluZGV4FKRkb2NzkdkhVGhlIGZ1bmQgaXMgYWxyZWFkeSBpbiBgTmV3UmFpc2Vg3gAEpG5hbWWyVnJmRGVsYXlJblByb2dyZXNzpmZpZWxkc5ClaW5kZXgVpGRvY3OR2S1ObyBjb250cmlidXRpb25zIGFsbG93ZWQgZHVyaW5nIHRoZSBWUkYgZGVsYXneAASkbmFtZa1Ob0xlYXNlUGVyaW9kpmZpZWxkc5ClaW5kZXgWpGRvY3OR2UtBIGxlYXNlIHBlcmlvZCBoYXMgbm90IHN0YXJ0ZWQgeWV0LCBkdWUgdG8gYW4gb2Zmc2V0IGluIHRoZSBzdGFydGluZyBibG9jay6kZG9jc5HZbQoJCQlDdXN0b20gW2Rpc3BhdGNoIGVycm9yc10oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pCgkJCW9mIHRoaXMgcGFsbGV0LgoJCQneAAKiaWTNAq2kdHlwZd4ABKRwYXRok7dwb2xrYWRvdF9ydW50aW1lX2NvbW1vbq5hc3NpZ25lZF9zbG90c7ZQYXJhY2hhaW5UZW1wb3JhcnlTbG90pnBhcmFtc5LeAAKkbmFtZalBY2NvdW50SWSkdHlwZQDeAAKkbmFtZatMZWFzZVBlcmlvZKR0eXBlBKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5XeAASkbmFtZadtYW5hZ2VypHR5cGUAqHR5cGVOYW1lqUFjY291bnRJZKRkb2NzkN4ABKRuYW1lrHBlcmlvZF9iZWdpbqR0eXBlBKh0eXBlTmFtZatMZWFzZVBlcmlvZKRkb2NzkN4ABKRuYW1lrHBlcmlvZF9jb3VudKR0eXBlBKh0eXBlTmFtZatMZWFzZVBlcmlvZKRkb2NzkN4ABKRuYW1lqmxhc3RfbGVhc2WkdHlwZc0BFKh0eXBlTmFtZbNPcHRpb248TGVhc2VQZXJpb2Q+pGRvY3OQ3gAEpG5hbWWrbGVhc2VfY291bnSkdHlwZQSodHlwZU5hbWWjdTMypGRvY3OQpGRvY3OQ3gAComlkzQKupHR5cGXeAASkcGF0aJS3cG9sa2Fkb3RfcnVudGltZV9jb21tb26uYXNzaWduZWRfc2xvdHOmcGFsbGV0pUVycm9ypnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzmd4ABKRuYW1lr1BhcmFEb2VzbnRFeGlzdKZmaWVsZHOQpWluZGV4AKRkb2Nzkdk4VGhlIHNwZWNpZmllZCBwYXJhY2hhaW4gb3IgcGFyYXRocmVhZCBpcyBub3QgcmVnaXN0ZXJlZC7eAASkbmFtZa1Ob3RQYXJhdGhyZWFkpmZpZWxkc5ClaW5kZXgBpGRvY3ORsU5vdCBhIHBhcmF0aHJlYWQu3gAEpG5hbWWtQ2Fubm90VXBncmFkZaZmaWVsZHOQpWluZGV4AqRkb2NzkbpDYW5ub3QgdXBncmFkZSBwYXJhdGhyZWFkLt4ABKRuYW1lr0Nhbm5vdERvd25ncmFkZaZmaWVsZHOQpWluZGV4A6Rkb2NzkbtDYW5ub3QgZG93bmdyYWRlIHBhcmFjaGFpbi7eAASkbmFtZbNTbG90QWxyZWFkeUFzc2lnbmVkpmZpZWxkc5ClaW5kZXgEpGRvY3OR2S1QZXJtYW5lbnQgb3IgVGVtcG9yYXJ5IHNsb3QgYWxyZWFkeSBhc3NpZ25lZC7eAASkbmFtZa9TbG90Tm90QXNzaWduZWSmZmllbGRzkKVpbmRleAWkZG9jc5HZMlBlcm1hbmVudCBvciBUZW1wb3Jhcnkgc2xvdCBoYXMgbm90IGJlZW4gYXNzaWduZWQu3gAEpG5hbWWyT25nb2luZ0xlYXNlRXhpc3RzpmZpZWxkc5ClaW5kZXgGpGRvY3OR2SBBbiBvbmdvaW5nIGxlYXNlIGFscmVhZHkgZXhpc3RzLt4ABKRuYW1luU1heFBlcm1hbmVudFNsb3RzRXhjZWVkZWSmZmllbGRzkKVpbmRleAekZG9jc5DeAASkbmFtZblNYXhUZW1wb3JhcnlTbG90c0V4Y2VlZGVkpmZpZWxkc5ClaW5kZXgIpGRvY3OQpGRvY3OR2W0KCQkJQ3VzdG9tIFtkaXNwYXRjaCBlcnJvcnNdKGh0dHBzOi8vZG9jcy5zdWJzdHJhdGUuaW8vbWFpbi1kb2NzL2J1aWxkL2V2ZW50cy1lcnJvcnMvKQoJCQlvZiB0aGlzIHBhbGxldC4KCQkJ3gAComlkzQKvpHR5cGXeAASkcGF0aJOqcGFsbGV0X3hjbaZwYWxsZXSrUXVlcnlTdGF0dXOmcGFyYW1zkd4AAqRuYW1lq0Jsb2NrTnVtYmVypHR5cGUEo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzk94ABKRuYW1lp1BlbmRpbmemZmllbGRzlN4ABKRuYW1lqXJlc3BvbmRlcqR0eXBlzKSodHlwZU5hbWW2VmVyc2lvbmVkTXVsdGlMb2NhdGlvbqRkb2NzkN4ABKRuYW1ls21heWJlX21hdGNoX3F1ZXJpZXKkdHlwZc0CsKh0eXBlTmFtZb5PcHRpb248VmVyc2lvbmVkTXVsdGlMb2NhdGlvbj6kZG9jc5DeAASkbmFtZaxtYXliZV9ub3RpZnmkdHlwZc0Csah0eXBlTmFtZbBPcHRpb248KHU4LCB1OCk+pGRvY3OQ3gAEpG5hbWWndGltZW91dKR0eXBlBKh0eXBlTmFtZatCbG9ja051bWJlcqRkb2NzkKVpbmRleACkZG9jc5DeAASkbmFtZa9WZXJzaW9uTm90aWZpZXKmZmllbGRzkt4ABKRuYW1lpm9yaWdpbqR0eXBlzKSodHlwZU5hbWW2VmVyc2lvbmVkTXVsdGlMb2NhdGlvbqRkb2NzkN4ABKRuYW1lqWlzX2FjdGl2ZaR0eXBlJah0eXBlTmFtZaRib29spGRvY3OQpWluZGV4AaRkb2NzkN4ABKRuYW1lpVJlYWR5pmZpZWxkc5LeAASkbmFtZahyZXNwb25zZaR0eXBlzQKzqHR5cGVOYW1lsVZlcnNpb25lZFJlc3BvbnNlpGRvY3OQ3gAEpG5hbWWiYXSkdHlwZQSodHlwZU5hbWWrQmxvY2tOdW1iZXKkZG9jc5ClaW5kZXgCpGRvY3OQpGRvY3OQ3gAComlkzQKwpHR5cGXeAASkcGF0aJGmT3B0aW9upnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXMpKNkZWbeAAGndmFyaWFudN4AAah2YXJpYW50c5LeAASkbmFtZaROb25lpmZpZWxkc5ClaW5kZXgApGRvY3OQ3gAEpG5hbWWkU29tZaZmaWVsZHOR3gAEpG5hbWXApHR5cGXMpKh0eXBlTmFtZcCkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzQKxpHR5cGXeAASkcGF0aJGmT3B0aW9upnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXNArKjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWkTm9uZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lpFNvbWWmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQKyqHR5cGVOYW1lwKRkb2NzkKVpbmRleAGkZG9jc5CkZG9jc5DeAAKiaWTNArKkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZICAqRkb2NzkN4AAqJpZM0Cs6R0eXBl3gAEpHBhdGiSo3hjbbFWZXJzaW9uZWRSZXNwb25zZaZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkt4ABKRuYW1lolYypmZpZWxkc5HeAASkbmFtZcCkdHlwZc0B26h0eXBlTmFtZax2Mjo6UmVzcG9uc2WkZG9jc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWWiVjOmZmllbGRzkd4ABKRuYW1lwKR0eXBlzIWodHlwZU5hbWWsdjM6OlJlc3BvbnNlpGRvY3OQpWluZGV4A6Rkb2NzkKRkb2NzkN4AAqJpZM0CtKR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpXR1cGxlkgTMpKRkb2NzkN4AAqJpZM0CtaR0eXBl3gAEpHBhdGiQpnBhcmFtc5CjZGVm3gABpXR1cGxlkwoIBKRkb2NzkN4AAqJpZM0CtqR0eXBl3gAEpHBhdGiTs2JvdW5kZWRfY29sbGVjdGlvbnOrYm91bmRlZF92ZWOqQm91bmRlZFZlY6ZwYXJhbXOS3gACpG5hbWWhVKR0eXBlzQK33gACpG5hbWWhU6R0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0CuKh0eXBlTmFtZaZWZWM8VD6kZG9jc5CkZG9jc5DeAAKiaWTNArekdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZLMpASkZG9jc5DeAAKiaWTNArikdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQK3pGRvY3OQ3gAComlkzQK5pHR5cGXeAASkcGF0aJOqcGFsbGV0X3hjbaZwYWxsZXS1VmVyc2lvbk1pZ3JhdGlvblN0YWdlpnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOU3gAEpG5hbWW3TWlncmF0ZVN1cHBvcnRlZFZlcnNpb26mZmllbGRzkKVpbmRleACkZG9jc5DeAASkbmFtZbdNaWdyYXRlVmVyc2lvbk5vdGlmaWVyc6ZmaWVsZHOQpWluZGV4AaRkb2NzkN4ABKRuYW1ltE5vdGlmeUN1cnJlbnRUYXJnZXRzpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0Cuqh0eXBlTmFtZa9PcHRpb248VmVjPHU4Pj6kZG9jc5ClaW5kZXgCpGRvY3OQ3gAEpG5hbWW6TWlncmF0ZUFuZE5vdGlmeU9sZFRhcmdldHOmZmllbGRzkKVpbmRleAOkZG9jc5CkZG9jc5DeAAKiaWTNArqkdHlwZd4ABKRwYXRokaZPcHRpb26mcGFyYW1zkd4AAqRuYW1loVSkdHlwZQyjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHOS3gAEpG5hbWWkTm9uZaZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lpFNvbWWmZmllbGRzkd4ABKRuYW1lwKR0eXBlDKh0eXBlTmFtZcCkZG9jc5ClaW5kZXgBpGRvY3OQpGRvY3OQ3gAComlkzQK7pHR5cGXeAASkcGF0aJCmcGFyYW1zkKNkZWbeAAGldHVwbGWTBADNArykZG9jc5DeAAKiaWTNArykdHlwZd4ABKRwYXRokqN4Y22wVmVyc2lvbmVkQXNzZXRJZKZwYXJhbXOQo2RlZt4AAad2YXJpYW503gABqHZhcmlhbnRzkd4ABKRuYW1lolYzpmZpZWxkc5HeAASkbmFtZcCkdHlwZcyBqHR5cGVOYW1lq3YzOjpBc3NldElkpGRvY3OQpWluZGV4A6Rkb2NzkKRkb2NzkN4AAqJpZM0CvaR0eXBl3gAEpHBhdGiTqnBhbGxldF94Y22mcGFsbGV0ulJlbW90ZUxvY2tlZEZ1bmdpYmxlUmVjb3JkpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOU3gAEpG5hbWWmYW1vdW50pHR5cGUGqHR5cGVOYW1lpHUxMjikZG9jc5DeAASkbmFtZaVvd25lcqR0eXBlzKSodHlwZU5hbWW2VmVyc2lvbmVkTXVsdGlMb2NhdGlvbqRkb2NzkN4ABKRuYW1lpmxvY2tlcqR0eXBlzKSodHlwZU5hbWW2VmVyc2lvbmVkTXVsdGlMb2NhdGlvbqRkb2NzkN4ABKRuYW1lpXVzZXJzpHR5cGUEqHR5cGVOYW1lo3UzMqRkb2NzkKRkb2NzkN4AAqJpZM0CvqR0eXBl3gAEpHBhdGiTs2JvdW5kZWRfY29sbGVjdGlvbnOrYm91bmRlZF92ZWOqQm91bmRlZFZlY6ZwYXJhbXOS3gACpG5hbWWhVKR0eXBlzQK/3gACpG5hbWWhU6R0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5HeAASkbmFtZcCkdHlwZc0CwKh0eXBlTmFtZaZWZWM8VD6kZG9jc5CkZG9jc5DeAAKiaWTNAr+kdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZIGzKSkZG9jc5DeAAKiaWTNAsCkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAahzZXF1ZW5jZd4AAaR0eXBlzQK/pGRvY3OQ3gAComlkzQLBpHR5cGXeAASkcGF0aJOqcGFsbGV0X3hjbaZwYWxsZXSlRXJyb3KmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHPcABTeAASkbmFtZatVbnJlYWNoYWJsZaZmaWVsZHOQpWluZGV4AKRkb2NzktlXVGhlIGRlc2lyZWQgZGVzdGluYXRpb24gd2FzIHVucmVhY2hhYmxlLCBnZW5lcmFsbHkgYmVjYXVzZSB0aGVyZSBpcyBhIG5vIHdheSBvZiByb3V0aW5npnRvIGl0Lt4ABKRuYW1lq1NlbmRGYWlsdXJlpmZpZWxkc5ClaW5kZXgBpGRvY3OS2VhUaGVyZSB3YXMgc29tZSBvdGhlciBpc3N1ZSAoaS5lLiBub3QgdG8gZG8gd2l0aCByb3V0aW5nKSBpbiBzZW5kaW5nIHRoZSBtZXNzYWdlLiBQZXJoYXBz2SphIGxhY2sgb2Ygc3BhY2UgZm9yIGJ1ZmZlcmluZyB0aGUgbWVzc2FnZS7eAASkbmFtZahGaWx0ZXJlZKZmaWVsZHOQpWluZGV4AqRkb2NzkdknVGhlIG1lc3NhZ2UgZXhlY3V0aW9uIGZhaWxzIHRoZSBmaWx0ZXIu3gAEpG5hbWWyVW53ZWlnaGFibGVNZXNzYWdlpmZpZWxkc5ClaW5kZXgDpGRvY3OR2S1UaGUgbWVzc2FnZSdzIHdlaWdodCBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZC7eAASkbmFtZbhEZXN0aW5hdGlvbk5vdEludmVydGlibGWmZmllbGRzkKVpbmRleASkZG9jc5HZPFRoZSBkZXN0aW5hdGlvbiBgTXVsdGlMb2NhdGlvbmAgcHJvdmlkZWQgY2Fubm90IGJlIGludmVydGVkLt4ABKRuYW1lpUVtcHR5pmZpZWxkc5ClaW5kZXgFpGRvY3OR2SBUaGUgYXNzZXRzIHRvIGJlIHNlbnQgYXJlIGVtcHR5Lt4ABKRuYW1lrkNhbm5vdFJlYW5jaG9ypmZpZWxkc5ClaW5kZXgGpGRvY3OR2U1Db3VsZCBub3QgcmUtYW5jaG9yIHRoZSBhc3NldHMgdG8gZGVjbGFyZSB0aGUgZmVlcyBmb3IgdGhlIGRlc3RpbmF0aW9uIGNoYWluLt4ABKRuYW1lrVRvb01hbnlBc3NldHOmZmllbGRzkKVpbmRleAekZG9jc5HZMVRvbyBtYW55IGFzc2V0cyBoYXZlIGJlZW4gYXR0ZW1wdGVkIGZvciB0cmFuc2Zlci7eAASkbmFtZa1JbnZhbGlkT3JpZ2lupmZpZWxkc5ClaW5kZXgIpGRvY3ORvk9yaWdpbiBpcyBpbnZhbGlkIGZvciBzZW5kaW5nLt4ABKRuYW1lqkJhZFZlcnNpb26mZmllbGRzkKVpbmRleAmkZG9jc5HZSFRoZSB2ZXJzaW9uIG9mIHRoZSBgVmVyc2lvbmVkYCB2YWx1ZSB1c2VkIGlzIG5vdCBhYmxlIHRvIGJlIGludGVycHJldGVkLt4ABKRuYW1lq0JhZExvY2F0aW9upmZpZWxkc5ClaW5kZXgKpGRvY3OS2VBUaGUgZ2l2ZW4gbG9jYXRpb24gY291bGQgbm90IGJlIHVzZWQgKGUuZy4gYmVjYXVzZSBpdCBjYW5ub3QgYmUgZXhwcmVzc2VkIGluIHRoZbhkZXNpcmVkIHZlcnNpb24gb2YgWENNKS7eAASkbmFtZa5Ob1N1YnNjcmlwdGlvbqZmaWVsZHOQpWluZGV4C6Rkb2NzkdkvVGhlIHJlZmVyZW5jZWQgc3Vic2NyaXB0aW9uIGNvdWxkIG5vdCBiZSBmb3VuZC7eAASkbmFtZbFBbHJlYWR5U3Vic2NyaWJlZKZmaWVsZHOQpWluZGV4DKRkb2NzkdlEVGhlIGxvY2F0aW9uIGlzIGludmFsaWQgc2luY2UgaXQgYWxyZWFkeSBoYXMgYSBzdWJzY3JpcHRpb24gZnJvbSB1cy7eAASkbmFtZaxJbnZhbGlkQXNzZXSmZmllbGRzkKVpbmRleA2kZG9jc5HZIEludmFsaWQgYXNzZXQgZm9yIHRoZSBvcGVyYXRpb24u3gAEpG5hbWWqTG93QmFsYW5jZaZmaWVsZHOQpWluZGV4DqRkb2NzkdlQVGhlIG93bmVyIGRvZXMgbm90IG93biAoYWxsKSBvZiB0aGUgYXNzZXQgdGhhdCB0aGV5IHdpc2ggdG8gZG8gdGhlIG9wZXJhdGlvbiBvbi7eAASkbmFtZaxUb29NYW55TG9ja3OmZmllbGRzkKVpbmRleA+kZG9jc5HZMFRoZSBhc3NldCBvd25lciBoYXMgdG9vIG1hbnkgbG9ja3Mgb24gdGhlIGFzc2V0Lt4ABKRuYW1ls0FjY291bnROb3RTb3ZlcmVpZ26mZmllbGRzkKVpbmRleBCkZG9jc5HZTFRoZSBnaXZlbiBhY2NvdW50IGlzIG5vdCBhbiBpZGVudGlmaWFibGUgc292ZXJlaWduIGFjY291bnQgZm9yIGFueSBsb2NhdGlvbi7eAASkbmFtZapGZWVzTm90TWV0pmZpZWxkc5ClaW5kZXgRpGRvY3OR2UpUaGUgb3BlcmF0aW9uIHJlcXVpcmVkIGZlZXMgdG8gYmUgcGFpZCB3aGljaCB0aGUgaW5pdGlhdG9yIGNvdWxkIG5vdCBtZWV0Lt4ABKRuYW1lrExvY2tOb3RGb3VuZKZmaWVsZHOQpWluZGV4EqRkb2Nzkdk9QSByZW1vdGUgbG9jayB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGRhdGEgY291bGQgbm90IGJlIGZvdW5kLt4ABKRuYW1lpUluVXNlpmZpZWxkc5ClaW5kZXgTpGRvY3OR2U5UaGUgdW5sb2NrIG9wZXJhdGlvbiBjYW5ub3Qgc3VjY2VlZCBiZWNhdXNlIHRoZXJlIGFyZSBzdGlsbCB1c2VycyBvZiB0aGUgbG9jay6kZG9jc5HZbQoJCQlDdXN0b20gW2Rpc3BhdGNoIGVycm9yc10oaHR0cHM6Ly9kb2NzLnN1YnN0cmF0ZS5pby9tYWluLWRvY3MvYnVpbGQvZXZlbnRzLWVycm9ycy8pCgkJCW9mIHRoaXMgcGFsbGV0LgoJCQneAAKiaWTNAsKkdHlwZd4ABKRwYXRolKpzcF9ydW50aW1lp2dlbmVyaWOzdW5jaGVja2VkX2V4dHJpbnNpY7JVbmNoZWNrZWRFeHRyaW5zaWOmcGFyYW1zlN4AAqRuYW1lp0FkZHJlc3OkdHlwZczW3gACpG5hbWWkQ2FsbKR0eXBlzQEy3gACpG5hbWWpU2lnbmF0dXJlpHR5cGXNAeveAAKkbmFtZaVFeHRyYaR0eXBlzQLDo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlDKh0eXBlTmFtZcCkZG9jc5CkZG9jc5DeAAKiaWTNAsOkdHlwZd4ABKRwYXRokKZwYXJhbXOQo2RlZt4AAaV0dXBsZZjNAsTNAsXNAsbNAsfNAsjNAsrNAsvNAsykZG9jc5DeAAKiaWTNAsSkdHlwZd4ABKRwYXRolKxmcmFtZV9zeXN0ZW2qZXh0ZW5zaW9uc7VjaGVja19ub25femVyb19zZW5kZXKyQ2hlY2tOb25aZXJvU2VuZGVypnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkKRkb2NzkN4AAqJpZM0CxaR0eXBl3gAEpHBhdGiUrGZyYW1lX3N5c3RlbapleHRlbnNpb25zsmNoZWNrX3NwZWNfdmVyc2lvbrBDaGVja1NwZWNWZXJzaW9upnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkKRkb2NzkN4AAqJpZM0CxqR0eXBl3gAEpHBhdGiUrGZyYW1lX3N5c3RlbapleHRlbnNpb25zsGNoZWNrX3R4X3ZlcnNpb26uQ2hlY2tUeFZlcnNpb26mcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOQpGRvY3OQ3gAComlkzQLHpHR5cGXeAASkcGF0aJSsZnJhbWVfc3lzdGVtqmV4dGVuc2lvbnOtY2hlY2tfZ2VuZXNpc6xDaGVja0dlbmVzaXOmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOQpGRvY3OQ3gAComlkzQLIpHR5cGXeAASkcGF0aJSsZnJhbWVfc3lzdGVtqmV4dGVuc2lvbnOvY2hlY2tfbW9ydGFsaXR5rkNoZWNrTW9ydGFsaXR5pnBhcmFtc5HeAAKkbmFtZaFUpHR5cGXAo2RlZt4AAaljb21wb3NpdGXeAAGmZmllbGRzkd4ABKRuYW1lwKR0eXBlzQLJqHR5cGVOYW1lo0VyYaRkb2NzkKRkb2NzkN4AAqJpZM0CyaR0eXBl3gAEpHBhdGiUqnNwX3J1bnRpbWWnZ2VuZXJpY6NlcmGjRXJhpnBhcmFtc5CjZGVm3gABp3ZhcmlhbnTeAAGodmFyaWFudHPcAQDeAASkbmFtZahJbW1vcnRhbKZmaWVsZHOQpWluZGV4AKRkb2NzkN4ABKRuYW1lp01vcnRhbDGmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXgBpGRvY3OQ3gAEpG5hbWWnTW9ydGFsMqZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleAKkZG9jc5DeAASkbmFtZadNb3J0YWwzpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4A6Rkb2NzkN4ABKRuYW1lp01vcnRhbDSmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXgEpGRvY3OQ3gAEpG5hbWWnTW9ydGFsNaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleAWkZG9jc5DeAASkbmFtZadNb3J0YWw2pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4BqRkb2NzkN4ABKRuYW1lp01vcnRhbDemZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXgHpGRvY3OQ3gAEpG5hbWWnTW9ydGFsOKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleAikZG9jc5DeAASkbmFtZadNb3J0YWw5pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4CaRkb2NzkN4ABKRuYW1lqE1vcnRhbDEwpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4CqRkb2NzkN4ABKRuYW1lqE1vcnRhbDExpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4C6Rkb2NzkN4ABKRuYW1lqE1vcnRhbDEypmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4DKRkb2NzkN4ABKRuYW1lqE1vcnRhbDEzpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4DaRkb2NzkN4ABKRuYW1lqE1vcnRhbDE0pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4DqRkb2NzkN4ABKRuYW1lqE1vcnRhbDE1pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4D6Rkb2NzkN4ABKRuYW1lqE1vcnRhbDE2pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4EKRkb2NzkN4ABKRuYW1lqE1vcnRhbDE3pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4EaRkb2NzkN4ABKRuYW1lqE1vcnRhbDE4pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4EqRkb2NzkN4ABKRuYW1lqE1vcnRhbDE5pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4E6Rkb2NzkN4ABKRuYW1lqE1vcnRhbDIwpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4FKRkb2NzkN4ABKRuYW1lqE1vcnRhbDIxpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4FaRkb2NzkN4ABKRuYW1lqE1vcnRhbDIypmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4FqRkb2NzkN4ABKRuYW1lqE1vcnRhbDIzpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4F6Rkb2NzkN4ABKRuYW1lqE1vcnRhbDI0pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4GKRkb2NzkN4ABKRuYW1lqE1vcnRhbDI1pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4GaRkb2NzkN4ABKRuYW1lqE1vcnRhbDI2pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4GqRkb2NzkN4ABKRuYW1lqE1vcnRhbDI3pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4G6Rkb2NzkN4ABKRuYW1lqE1vcnRhbDI4pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4HKRkb2NzkN4ABKRuYW1lqE1vcnRhbDI5pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4HaRkb2NzkN4ABKRuYW1lqE1vcnRhbDMwpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4HqRkb2NzkN4ABKRuYW1lqE1vcnRhbDMxpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4H6Rkb2NzkN4ABKRuYW1lqE1vcnRhbDMypmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4IKRkb2NzkN4ABKRuYW1lqE1vcnRhbDMzpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4IaRkb2NzkN4ABKRuYW1lqE1vcnRhbDM0pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4IqRkb2NzkN4ABKRuYW1lqE1vcnRhbDM1pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4I6Rkb2NzkN4ABKRuYW1lqE1vcnRhbDM2pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4JKRkb2NzkN4ABKRuYW1lqE1vcnRhbDM3pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4JaRkb2NzkN4ABKRuYW1lqE1vcnRhbDM4pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4JqRkb2NzkN4ABKRuYW1lqE1vcnRhbDM5pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4J6Rkb2NzkN4ABKRuYW1lqE1vcnRhbDQwpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4KKRkb2NzkN4ABKRuYW1lqE1vcnRhbDQxpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4KaRkb2NzkN4ABKRuYW1lqE1vcnRhbDQypmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4KqRkb2NzkN4ABKRuYW1lqE1vcnRhbDQzpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4K6Rkb2NzkN4ABKRuYW1lqE1vcnRhbDQ0pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4LKRkb2NzkN4ABKRuYW1lqE1vcnRhbDQ1pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4LaRkb2NzkN4ABKRuYW1lqE1vcnRhbDQ2pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4LqRkb2NzkN4ABKRuYW1lqE1vcnRhbDQ3pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4L6Rkb2NzkN4ABKRuYW1lqE1vcnRhbDQ4pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4MKRkb2NzkN4ABKRuYW1lqE1vcnRhbDQ5pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4MaRkb2NzkN4ABKRuYW1lqE1vcnRhbDUwpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4MqRkb2NzkN4ABKRuYW1lqE1vcnRhbDUxpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4M6Rkb2NzkN4ABKRuYW1lqE1vcnRhbDUypmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4NKRkb2NzkN4ABKRuYW1lqE1vcnRhbDUzpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4NaRkb2NzkN4ABKRuYW1lqE1vcnRhbDU0pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4NqRkb2NzkN4ABKRuYW1lqE1vcnRhbDU1pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4N6Rkb2NzkN4ABKRuYW1lqE1vcnRhbDU2pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4OKRkb2NzkN4ABKRuYW1lqE1vcnRhbDU3pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4OaRkb2NzkN4ABKRuYW1lqE1vcnRhbDU4pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4OqRkb2NzkN4ABKRuYW1lqE1vcnRhbDU5pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4O6Rkb2NzkN4ABKRuYW1lqE1vcnRhbDYwpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4PKRkb2NzkN4ABKRuYW1lqE1vcnRhbDYxpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4PaRkb2NzkN4ABKRuYW1lqE1vcnRhbDYypmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4PqRkb2NzkN4ABKRuYW1lqE1vcnRhbDYzpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4P6Rkb2NzkN4ABKRuYW1lqE1vcnRhbDY0pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zECkZG9jc5DeAASkbmFtZahNb3J0YWw2NaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxBpGRvY3OQ3gAEpG5hbWWoTW9ydGFsNjamZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMQqRkb2NzkN4ABKRuYW1lqE1vcnRhbDY3pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zEOkZG9jc5DeAASkbmFtZahNb3J0YWw2OKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxEpGRvY3OQ3gAEpG5hbWWoTW9ydGFsNjmmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMRaRkb2NzkN4ABKRuYW1lqE1vcnRhbDcwpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zEakZG9jc5DeAASkbmFtZahNb3J0YWw3MaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxHpGRvY3OQ3gAEpG5hbWWoTW9ydGFsNzKmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMSKRkb2NzkN4ABKRuYW1lqE1vcnRhbDczpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zEmkZG9jc5DeAASkbmFtZahNb3J0YWw3NKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxKpGRvY3OQ3gAEpG5hbWWoTW9ydGFsNzWmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMS6Rkb2NzkN4ABKRuYW1lqE1vcnRhbDc2pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zEykZG9jc5DeAASkbmFtZahNb3J0YWw3N6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxNpGRvY3OQ3gAEpG5hbWWoTW9ydGFsNzimZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMTqRkb2NzkN4ABKRuYW1lqE1vcnRhbDc5pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zE+kZG9jc5DeAASkbmFtZahNb3J0YWw4MKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxQpGRvY3OQ3gAEpG5hbWWoTW9ydGFsODGmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMUaRkb2NzkN4ABKRuYW1lqE1vcnRhbDgypmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zFKkZG9jc5DeAASkbmFtZahNb3J0YWw4M6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxTpGRvY3OQ3gAEpG5hbWWoTW9ydGFsODSmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMVKRkb2NzkN4ABKRuYW1lqE1vcnRhbDg1pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zFWkZG9jc5DeAASkbmFtZahNb3J0YWw4NqZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxWpGRvY3OQ3gAEpG5hbWWoTW9ydGFsODemZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMV6Rkb2NzkN4ABKRuYW1lqE1vcnRhbDg4pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zFikZG9jc5DeAASkbmFtZahNb3J0YWw4OaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxZpGRvY3OQ3gAEpG5hbWWoTW9ydGFsOTCmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMWqRkb2NzkN4ABKRuYW1lqE1vcnRhbDkxpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zFukZG9jc5DeAASkbmFtZahNb3J0YWw5MqZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxcpGRvY3OQ3gAEpG5hbWWoTW9ydGFsOTOmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMXaRkb2NzkN4ABKRuYW1lqE1vcnRhbDk0pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zF6kZG9jc5DeAASkbmFtZahNb3J0YWw5NaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxfpGRvY3OQ3gAEpG5hbWWoTW9ydGFsOTamZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMYKRkb2NzkN4ABKRuYW1lqE1vcnRhbDk3pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zGGkZG9jc5DeAASkbmFtZahNb3J0YWw5OKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxipGRvY3OQ3gAEpG5hbWWoTW9ydGFsOTmmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMY6Rkb2NzkN4ABKRuYW1lqU1vcnRhbDEwMKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxkpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTAxpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zGWkZG9jc5DeAASkbmFtZalNb3J0YWwxMDKmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMZqRkb2NzkN4ABKRuYW1lqU1vcnRhbDEwM6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxnpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTA0pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zGikZG9jc5DeAASkbmFtZalNb3J0YWwxMDWmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMaaRkb2NzkN4ABKRuYW1lqU1vcnRhbDEwNqZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxqpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTA3pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zGukZG9jc5DeAASkbmFtZalNb3J0YWwxMDimZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMbKRkb2NzkN4ABKRuYW1lqU1vcnRhbDEwOaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxtpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTEwpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zG6kZG9jc5DeAASkbmFtZalNb3J0YWwxMTGmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMb6Rkb2NzkN4ABKRuYW1lqU1vcnRhbDExMqZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxwpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTEzpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zHGkZG9jc5DeAASkbmFtZalNb3J0YWwxMTSmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMcqRkb2NzkN4ABKRuYW1lqU1vcnRhbDExNaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMxzpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTE2pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zHSkZG9jc5DeAASkbmFtZalNb3J0YWwxMTemZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMdaRkb2NzkN4ABKRuYW1lqU1vcnRhbDExOKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMx2pGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTE5pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zHekZG9jc5DeAASkbmFtZalNb3J0YWwxMjCmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMeKRkb2NzkN4ABKRuYW1lqU1vcnRhbDEyMaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMx5pGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTIypmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zHqkZG9jc5DeAASkbmFtZalNb3J0YWwxMjOmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMe6Rkb2NzkN4ABKRuYW1lqU1vcnRhbDEyNKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMx8pGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTI1pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zH2kZG9jc5DeAASkbmFtZalNb3J0YWwxMjamZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMfqRkb2NzkN4ABKRuYW1lqU1vcnRhbDEyN6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMx/pGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTI4pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zICkZG9jc5DeAASkbmFtZalNb3J0YWwxMjmmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMgaRkb2NzkN4ABKRuYW1lqU1vcnRhbDEzMKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMyCpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTMxpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zIOkZG9jc5DeAASkbmFtZalNb3J0YWwxMzKmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMhKRkb2NzkN4ABKRuYW1lqU1vcnRhbDEzM6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMyFpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTM0pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zIakZG9jc5DeAASkbmFtZalNb3J0YWwxMzWmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMh6Rkb2NzkN4ABKRuYW1lqU1vcnRhbDEzNqZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMyIpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTM3pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zImkZG9jc5DeAASkbmFtZalNb3J0YWwxMzimZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMiqRkb2NzkN4ABKRuYW1lqU1vcnRhbDEzOaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMyLpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTQwpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zIykZG9jc5DeAASkbmFtZalNb3J0YWwxNDGmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMjaRkb2NzkN4ABKRuYW1lqU1vcnRhbDE0MqZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMyOpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTQzpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zI+kZG9jc5DeAASkbmFtZalNb3J0YWwxNDSmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMkKRkb2NzkN4ABKRuYW1lqU1vcnRhbDE0NaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMyRpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTQ2pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zJKkZG9jc5DeAASkbmFtZalNb3J0YWwxNDemZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMk6Rkb2NzkN4ABKRuYW1lqU1vcnRhbDE0OKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMyUpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTQ5pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zJWkZG9jc5DeAASkbmFtZalNb3J0YWwxNTCmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMlqRkb2NzkN4ABKRuYW1lqU1vcnRhbDE1MaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMyXpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTUypmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zJikZG9jc5DeAASkbmFtZalNb3J0YWwxNTOmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMmaRkb2NzkN4ABKRuYW1lqU1vcnRhbDE1NKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMyapGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTU1pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zJukZG9jc5DeAASkbmFtZalNb3J0YWwxNTamZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMnKRkb2NzkN4ABKRuYW1lqU1vcnRhbDE1N6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMydpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTU4pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zJ6kZG9jc5DeAASkbmFtZalNb3J0YWwxNTmmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMn6Rkb2NzkN4ABKRuYW1lqU1vcnRhbDE2MKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMygpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTYxpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zKGkZG9jc5DeAASkbmFtZalNb3J0YWwxNjKmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMoqRkb2NzkN4ABKRuYW1lqU1vcnRhbDE2M6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMyjpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTY0pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zKSkZG9jc5DeAASkbmFtZalNb3J0YWwxNjWmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMpaRkb2NzkN4ABKRuYW1lqU1vcnRhbDE2NqZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMympGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTY3pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zKekZG9jc5DeAASkbmFtZalNb3J0YWwxNjimZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMqKRkb2NzkN4ABKRuYW1lqU1vcnRhbDE2OaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMyppGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTcwpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zKqkZG9jc5DeAASkbmFtZalNb3J0YWwxNzGmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMq6Rkb2NzkN4ABKRuYW1lqU1vcnRhbDE3MqZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMyspGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTczpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zK2kZG9jc5DeAASkbmFtZalNb3J0YWwxNzSmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMrqRkb2NzkN4ABKRuYW1lqU1vcnRhbDE3NaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMyvpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTc2pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zLCkZG9jc5DeAASkbmFtZalNb3J0YWwxNzemZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMsaRkb2NzkN4ABKRuYW1lqU1vcnRhbDE3OKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMyypGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTc5pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zLOkZG9jc5DeAASkbmFtZalNb3J0YWwxODCmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMtKRkb2NzkN4ABKRuYW1lqU1vcnRhbDE4MaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMy1pGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTgypmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zLakZG9jc5DeAASkbmFtZalNb3J0YWwxODOmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMt6Rkb2NzkN4ABKRuYW1lqU1vcnRhbDE4NKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMy4pGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTg1pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zLmkZG9jc5DeAASkbmFtZalNb3J0YWwxODamZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMuqRkb2NzkN4ABKRuYW1lqU1vcnRhbDE4N6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMy7pGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTg4pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zLykZG9jc5DeAASkbmFtZalNb3J0YWwxODmmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMvaRkb2NzkN4ABKRuYW1lqU1vcnRhbDE5MKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMy+pGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTkxpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zL+kZG9jc5DeAASkbmFtZalNb3J0YWwxOTKmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMwKRkb2NzkN4ABKRuYW1lqU1vcnRhbDE5M6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzBpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTk0pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zMKkZG9jc5DeAASkbmFtZalNb3J0YWwxOTWmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMw6Rkb2NzkN4ABKRuYW1lqU1vcnRhbDE5NqZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzEpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMTk3pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zMWkZG9jc5DeAASkbmFtZalNb3J0YWwxOTimZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMxqRkb2NzkN4ABKRuYW1lqU1vcnRhbDE5OaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzHpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjAwpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zMikZG9jc5DeAASkbmFtZalNb3J0YWwyMDGmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMyaRkb2NzkN4ABKRuYW1lqU1vcnRhbDIwMqZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzKpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjAzpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zMukZG9jc5DeAASkbmFtZalNb3J0YWwyMDSmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMzKRkb2NzkN4ABKRuYW1lqU1vcnRhbDIwNaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzNpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjA2pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zM6kZG9jc5DeAASkbmFtZalNb3J0YWwyMDemZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjMz6Rkb2NzkN4ABKRuYW1lqU1vcnRhbDIwOKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzQpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjA5pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zNGkZG9jc5DeAASkbmFtZalNb3J0YWwyMTCmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjM0qRkb2NzkN4ABKRuYW1lqU1vcnRhbDIxMaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzTpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjEypmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zNSkZG9jc5DeAASkbmFtZalNb3J0YWwyMTOmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjM1aRkb2NzkN4ABKRuYW1lqU1vcnRhbDIxNKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzWpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjE1pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zNekZG9jc5DeAASkbmFtZalNb3J0YWwyMTamZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjM2KRkb2NzkN4ABKRuYW1lqU1vcnRhbDIxN6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzZpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjE4pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zNqkZG9jc5DeAASkbmFtZalNb3J0YWwyMTmmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjM26Rkb2NzkN4ABKRuYW1lqU1vcnRhbDIyMKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzcpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjIxpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zN2kZG9jc5DeAASkbmFtZalNb3J0YWwyMjKmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjM3qRkb2NzkN4ABKRuYW1lqU1vcnRhbDIyM6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzfpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjI0pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zOCkZG9jc5DeAASkbmFtZalNb3J0YWwyMjWmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjM4aRkb2NzkN4ABKRuYW1lqU1vcnRhbDIyNqZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzipGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjI3pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zOOkZG9jc5DeAASkbmFtZalNb3J0YWwyMjimZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjM5KRkb2NzkN4ABKRuYW1lqU1vcnRhbDIyOaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzlpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjMwpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zOakZG9jc5DeAASkbmFtZalNb3J0YWwyMzGmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjM56Rkb2NzkN4ABKRuYW1lqU1vcnRhbDIzMqZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzopGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjMzpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zOmkZG9jc5DeAASkbmFtZalNb3J0YWwyMzSmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjM6qRkb2NzkN4ABKRuYW1lqU1vcnRhbDIzNaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzrpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjM2pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zOykZG9jc5DeAASkbmFtZalNb3J0YWwyMzemZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjM7aRkb2NzkN4ABKRuYW1lqU1vcnRhbDIzOKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzupGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjM5pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zO+kZG9jc5DeAASkbmFtZalNb3J0YWwyNDCmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjM8KRkb2NzkN4ABKRuYW1lqU1vcnRhbDI0MaZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMzxpGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjQypmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zPKkZG9jc5DeAASkbmFtZalNb3J0YWwyNDOmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjM86Rkb2NzkN4ABKRuYW1lqU1vcnRhbDI0NKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMz0pGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjQ1pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zPWkZG9jc5DeAASkbmFtZalNb3J0YWwyNDamZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjM9qRkb2NzkN4ABKRuYW1lqU1vcnRhbDI0N6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMz3pGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjQ4pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zPikZG9jc5DeAASkbmFtZalNb3J0YWwyNDmmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjM+aRkb2NzkN4ABKRuYW1lqU1vcnRhbDI1MKZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMz6pGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjUxpmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zPukZG9jc5DeAASkbmFtZalNb3J0YWwyNTKmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjM/KRkb2NzkN4ABKRuYW1lqU1vcnRhbDI1M6ZmaWVsZHOR3gAEpG5hbWXApHR5cGUCqHR5cGVOYW1lwKRkb2NzkKVpbmRleMz9pGRvY3OQ3gAEpG5hbWWpTW9ydGFsMjU0pmZpZWxkc5HeAASkbmFtZcCkdHlwZQKodHlwZU5hbWXApGRvY3OQpWluZGV4zP6kZG9jc5DeAASkbmFtZalNb3J0YWwyNTWmZmllbGRzkd4ABKRuYW1lwKR0eXBlAqh0eXBlTmFtZcCkZG9jc5ClaW5kZXjM/6Rkb2NzkKRkb2NzkN4AAqJpZM0CyqR0eXBl3gAEpHBhdGiUrGZyYW1lX3N5c3RlbapleHRlbnNpb25zq2NoZWNrX25vbmNlqkNoZWNrTm9uY2WmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGXMdah0eXBlTmFtZahUOjpJbmRleKRkb2NzkKRkb2NzkN4AAqJpZM0Cy6R0eXBl3gAEpHBhdGiUrGZyYW1lX3N5c3RlbapleHRlbnNpb25zrGNoZWNrX3dlaWdodKtDaGVja1dlaWdodKZwYXJhbXOR3gACpG5hbWWhVKR0eXBlwKNkZWbeAAGpY29tcG9zaXRl3gABpmZpZWxkc5CkZG9jc5DeAAKiaWTNAsykdHlwZd4ABKRwYXRokrpwYWxsZXRfdHJhbnNhY3Rpb25fcGF5bWVudLhDaGFyZ2VUcmFuc2FjdGlvblBheW1lbnSmcGFyYW1zkd4AAqRuYW1loVSkdHlwZcCjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOR3gAEpG5hbWXApHR5cGU1qHR5cGVOYW1lrEJhbGFuY2VPZjxUPqRkb2NzkKRkb2NzkN4AAqJpZM0CzaR0eXBl3gAEpHBhdGiSr3dlc3RlbmRfcnVudGltZadSdW50aW1lpnBhcmFtc5CjZGVm3gABqWNvbXBvc2l0Zd4AAaZmaWVsZHOQpGRvY3OQp3BhbGxldHPcADDeAAekbmFtZaZTeXN0ZW2nc3RvcmFnZd4AAqZwcmVmaXimU3lzdGVtpWl0ZW1z3AAQ3gAFpG5hbWWnQWNjb3VudKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnORsEJsYWtlMl8xMjhDb25jYXSja2V5AKV2YWx1ZQOoZmFsbGJhY2vZojB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMKRkb2Nzkdk6IFRoZSBmdWxsIGFjY291bnQgaW5mb3JtYXRpb24gZm9yIGEgcGFydGljdWxhciBhY2NvdW50IElELt4ABaRuYW1lrkV4dHJpbnNpY0NvdW50qG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrpDB4MDCkZG9jc5HZLiBUb3RhbCBleHRyaW5zaWNzIGNvdW50IGZvciB0aGUgY3VycmVudCBibG9jay7eAAWkbmFtZatCbG9ja1dlaWdodKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4HqGZhbGxiYWNrrjB4MDAwMDAwMDAwMDAwpGRvY3OR2SIgVGhlIGN1cnJlbnQgd2VpZ2h0IGZvciB0aGUgYmxvY2su3gAFpG5hbWWwQWxsRXh0cmluc2ljc0xlbqhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABpXBsYWluBKhmYWxsYmFja6QweDAwpGRvY3OR2VAgVG90YWwgbGVuZ3RoIChpbiBieXRlcykgZm9yIGFsbCBleHRyaW5zaWNzIHB1dCB0b2dldGhlciwgZm9yIHRoZSBjdXJyZW50IGJsb2NrLt4ABaRuYW1lqUJsb2NrSGFzaKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkEpXZhbHVlC6hmYWxsYmFja9lCMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwpGRvY3OR2SYgTWFwIG9mIGJsb2NrIG51bWJlcnMgdG8gYmxvY2sgaGFzaGVzLt4ABaRuYW1lrUV4dHJpbnNpY0RhdGGobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5BKV2YWx1ZQyoZmFsbGJhY2ukMHgwMKRkb2NzkdlPIEV4dHJpbnNpY3MgZGF0YSBmb3IgdGhlIGN1cnJlbnQgYmxvY2sgKG1hcHMgYW4gZXh0cmluc2ljJ3MgaW5kZXggdG8gaXRzIGRhdGEpLt4ABaRuYW1lpk51bWJlcqhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrqjB4MDAwMDAwMDCkZG9jc5HZQiBUaGUgY3VycmVudCBibG9jayBudW1iZXIgYmVpbmcgcHJvY2Vzc2VkLiBTZXQgYnkgYGV4ZWN1dGVfYmxvY2tgLt4ABaRuYW1lqlBhcmVudEhhc2iobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluC6hmYWxsYmFja9lCMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwpGRvY3ORvCBIYXNoIG9mIHRoZSBwcmV2aW91cyBibG9jay7eAAWkbmFtZaZEaWdlc3SobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluDahmYWxsYmFja6QweDAwpGRvY3OR2TwgRGlnZXN0IG9mIHRoZSBjdXJyZW50IGJsb2NrLCBhbHNvIHBhcnQgb2YgdGhlIGJsb2NrIGhlYWRlci7eAAWkbmFtZaZFdmVudHOobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluEahmYWxsYmFja6QweDAwpGRvY3OX2SggRXZlbnRzIGRlcG9zaXRlZCBmb3IgdGhlIGN1cnJlbnQgYmxvY2suoNlHIE5PVEU6IFRoZSBpdGVtIGlzIHVuYm91bmQgYW5kIHNob3VsZCB0aGVyZWZvcmUgbmV2ZXIgYmUgcmVhZCBvbiBjaGFpbi7ZNCBJdCBjb3VsZCBvdGhlcndpc2UgaW5mbGF0ZSB0aGUgUG9WIHNpemUgb2YgYSBibG9jay6g2UsgRXZlbnRzIGhhdmUgYSBsYXJnZSBpbi1tZW1vcnkgc2l6ZS4gQm94IHRoZSBldmVudHMgdG8gbm90IGdvIG91dC1vZi1tZW1vcnnZPyBqdXN0IGluIGNhc2Ugc29tZW9uZSBzdGlsbCByZWFkcyB0aGVtIGZyb20gd2l0aGluIHRoZSBydW50aW1lLt4ABaRuYW1lqkV2ZW50Q291bnSobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluBKhmYWxsYmFja6oweDAwMDAwMDAwpGRvY3OR2S4gVGhlIG51bWJlciBvZiBldmVudHMgaW4gdGhlIGBFdmVudHM8VD5gIGxpc3Qu3gAFpG5hbWWrRXZlbnRUb3BpY3OobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABo21hcN4AA6doYXNoZXJzkbBCbGFrZTJfMTI4Q29uY2F0o2tleQuldmFsdWXMp6hmYWxsYmFja6QweDAwpGRvY3Oa2UkgTWFwcGluZyBiZXR3ZWVuIGEgdG9waWMgKHJlcHJlc2VudGVkIGJ5IFQ6Okhhc2gpIGFuZCBhIHZlY3RvciBvZiBpbmRleGVz2SUgb2YgZXZlbnRzIGluIHRoZSBgPEV2ZW50czxUPj5gIGxpc3QuoNlUIEFsbCB0b3BpYyB2ZWN0b3JzIGhhdmUgZGV0ZXJtaW5pc3RpYyBzdG9yYWdlIGxvY2F0aW9ucyBkZXBlbmRpbmcgb24gdGhlIHRvcGljLiBUaGlz2VEgYWxsb3dzIGxpZ2h0LWNsaWVudHMgdG8gbGV2ZXJhZ2UgdGhlIGNoYW5nZXMgdHJpZSBzdG9yYWdlIHRyYWNraW5nIG1lY2hhbmlzbSBhbmTZOSBpbiBjYXNlIG9mIGNoYW5nZXMgZmV0Y2ggdGhlIGxpc3Qgb2YgZXZlbnRzIG9mIGludGVyZXN0LqDZUyBUaGUgdmFsdWUgaGFzIHRoZSB0eXBlIGAoVDo6QmxvY2tOdW1iZXIsIEV2ZW50SW5kZXgpYCBiZWNhdXNlIGlmIHdlIHVzZWQgb25seSBqdXN02VMgdGhlIGBFdmVudEluZGV4YCB0aGVuIGluIGNhc2UgaWYgdGhlIHRvcGljIGhhcyB0aGUgc2FtZSBjb250ZW50cyBvbiB0aGUgbmV4dCBibG9ja9lAIG5vIG5vdGlmaWNhdGlvbiB3aWxsIGJlIHRyaWdnZXJlZCB0aHVzIHRoZSBldmVudCBtaWdodCBiZSBsb3N0Lt4ABaRuYW1lskxhc3RSdW50aW1lVXBncmFkZahtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABpXBsYWluzKioZmFsbGJhY2ukMHgwMKRkb2NzkdlVIFN0b3JlcyB0aGUgYHNwZWNfdmVyc2lvbmAgYW5kIGBzcGVjX25hbWVgIG9mIHdoZW4gdGhlIGxhc3QgcnVudGltZSB1cGdyYWRlIGhhcHBlbmVkLt4ABaRuYW1ltVVwZ3JhZGVkVG9VMzJSZWZDb3VudKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4lqGZhbGxiYWNrpDB4MDCkZG9jc5HZUyBUcnVlIGlmIHdlIGhhdmUgdXBncmFkZWQgc28gdGhhdCBgdHlwZSBSZWZDb3VudGAgaXMgYHUzMmAuIEZhbHNlIChkZWZhdWx0KSBpZiBub3Qu3gAFpG5hbWW4VXBncmFkZWRUb1RyaXBsZVJlZkNvdW50qG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbiWoZmFsbGJhY2ukMHgwMKRkb2NzktlXIFRydWUgaWYgd2UgaGF2ZSB1cGdyYWRlZCBzbyB0aGF0IEFjY291bnRJbmZvIGNvbnRhaW5zIHRocmVlIHR5cGVzIG9mIGBSZWZDb3VudGAuIEZhbHNlsiAoZGVmYXVsdCkgaWYgbm90Lt4ABaRuYW1lrkV4ZWN1dGlvblBoYXNlqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGlcGxhaW7MpahmYWxsYmFja6QweDAwpGRvY3OR2SIgVGhlIGV4ZWN1dGlvbiBwaGFzZSBvZiB0aGUgYmxvY2supWNhbGxz3gABpHR5cGXMqqZldmVudHPeAAGkdHlwZRSpY29uc3RhbnRzlt4ABKRuYW1lrEJsb2NrV2VpZ2h0c6R0eXBlzK6ldmFsdWXZ/jB4ODI4ZjI2NmEwMDBiMDAyMDRhYTlkMTAxMTNmZmZmZmZmZmZmZmZmZmZmNjI3YTVmMTYwMDAxMGI2OGYxNDc5MTU4MDExM2EzNzAzZDBhZDdhMzcwYmQwMTBiMDA5OGY3M2U1ZDAxMTNmZmZmZmZmZmZmZmZmZmJmMDEwMDAwNjI3YTVmMTYwMDAxMGI2ODc5OWFmYmNjMDExM2EzNzAzZDBhZDdhMzcwZmQwMTBiMDAyMDRhYTlkMTAxMTNmZmZmZmZmZmZmZmZmZmZmMDEwNzAwODg1MjZhNzQxMzAwMDAwMDAwMDAwMDAwNDA2MjdhNWYxNjAwMDAwMDAwpGRvY3OR2TQgQmxvY2sgJiBleHRyaW5zaWNzIHdlaWdodHM6IGJhc2UgdmFsdWVzIGFuZCBsaW1pdHMu3gAEpG5hbWWrQmxvY2tMZW5ndGikdHlwZcyypXZhbHVlujB4MDAwMDNjMDAwMDAwNTAwMDAwMDA1MDAwpGRvY3OR2SogVGhlIG1heGltdW0gbGVuZ3RoIG9mIGEgYmxvY2sgKGluIGJ5dGVzKS7eAASkbmFtZa5CbG9ja0hhc2hDb3VudKR0eXBlBKV2YWx1ZaoweDAwMTAwMDAwpGRvY3OR2VUgTWF4aW11bSBudW1iZXIgb2YgYmxvY2sgbnVtYmVyIHRvIGJsb2NrIGhhc2ggbWFwcGluZ3MgdG8ga2VlcCAob2xkZXN0IHBydW5lZCBmaXJzdCku3gAEpG5hbWWoRGJXZWlnaHSkdHlwZcy0pXZhbHVl2SIweDQwNzg3ZDAxMDAwMDAwMDAwMGUxZjUwNTAwMDAwMDAwpGRvY3OR2UIgVGhlIHdlaWdodCBvZiBydW50aW1lIGRhdGFiYXNlIG9wZXJhdGlvbnMgdGhlIHJ1bnRpbWUgY2FuIGludm9rZS7eAASkbmFtZadWZXJzaW9upHR5cGXMtaV2YWx1ZdoB7DB4MWM3NzY1NzM3NDY1NmU2NDM4NzA2MTcyNjk3NDc5MmQ3NzY1NzM3NDY1NmU2NDAyMDAwMDAwYjkyNDAwMDAwMDAwMDAwMDQ0ZGY2YWNiNjg5OTA3NjA5YjA0MDAwMDAwMzdlMzk3ZmM3YzkxZjVlNDAxMDAwMDAwNDBmZTNhZDQwMWY4OTU5YTA2MDAwMDAwZDJiYzk4OTdlZWQwOGYxNTAzMDAwMDAwZjc4YjI3OGJlNTNmNDU0YzAyMDAwMDAwYWYyYzAyOTdhMjNlNmQzZDA0MDAwMDAwNDllYWFmMWI1NDhhMGNiMDAyMDAwMDAwOTFkNWRmMThiMGQyY2Y1ODAyMDAwMDAwZWQ5OWM1YWNiMjVlZWRmNTAzMDAwMDAwY2JjYTI1ZTM5ZjE0MjM4NzAyMDAwMDAwNjg3YWQ0NGFkMzdmMDNjMjAxMDAwMDAwYWIzYzA1NzIyOTFmZWI4YjAxMDAwMDAwYmM5ZDg5OTA0ZjViOTIzZjAxMDAwMDAwMzdjOGJiMTM1MGE5YTJhODAzMDAwMDAwZjNmZjE0ZDVhYjUyNzA1OTAzMDAwMDAwMTdhNmJjMGQwMDYyYWViMzAxMDAwMDAwMThlZjU4YTNiNjdiYTc3MDAxMDAwMDAwMTQwMDAwMDAwMaRkb2NzkdkhIEdldCB0aGUgY2hhaW4ncyBjdXJyZW50IHZlcnNpb24u3gAEpG5hbWWqU1M1OFByZWZpeKR0eXBlzEaldmFsdWWmMHgyYTAwpGRvY3OV2SogVGhlIGRlc2lnbmF0ZWQgU1M1OCBwcmVmaXggb2YgdGhpcyBjaGFpbi6g2U4gVGhpcyByZXBsYWNlcyB0aGUgInNzNThGb3JtYXQiIHByb3BlcnR5IGRlY2xhcmVkIGluIHRoZSBjaGFpbiBzcGVjLiBSZWFzb24gaXPZTCB0aGF0IHRoZSBydW50aW1lIHNob3VsZCBrbm93IGFib3V0IHRoZSBwcmVmaXggaW4gb3JkZXIgdG8gbWFrZSB1c2Ugb2YgaXQgYXO8IGFuIGlkZW50aWZpZXIgb2YgdGhlIGNoYWluLqZlcnJvcnPeAAGkdHlwZcy5pWluZGV4AN4AB6RuYW1lpEJhYmWnc3RvcmFnZd4AAqZwcmVmaXikQmFiZaVpdGVtc9wAEd4ABaRuYW1lqkVwb2NoSW5kZXiobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluCqhmYWxsYmFja7IweDAwMDAwMDAwMDAwMDAwMDCkZG9jc5G1IEN1cnJlbnQgZXBvY2ggaW5kZXgu3gAFpG5hbWWrQXV0aG9yaXRpZXOobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluzLqoZmFsbGJhY2ukMHgwMKRkb2NzkbsgQ3VycmVudCBlcG9jaCBhdXRob3JpdGllcy7eAAWkbmFtZatHZW5lc2lzU2xvdKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW7MvqhmYWxsYmFja7IweDAwMDAwMDAwMDAwMDAwMDCkZG9jc5LZPiBUaGUgc2xvdCBhdCB3aGljaCB0aGUgZmlyc3QgZXBvY2ggYWN0dWFsbHkgc3RhcnRlZC4gVGhpcyBpcyAw2SQgdW50aWwgdGhlIGZpcnN0IGJsb2NrIG9mIHRoZSBjaGFpbi7eAAWkbmFtZatDdXJyZW50U2xvdKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW7MvqhmYWxsYmFja7IweDAwMDAwMDAwMDAwMDAwMDCkZG9jc5G1IEN1cnJlbnQgc2xvdCBudW1iZXIu3gAFpG5hbWWqUmFuZG9tbmVzc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4BqGZhbGxiYWNr2UIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5rZLiBUaGUgZXBvY2ggcmFuZG9tbmVzcyBmb3IgdGhlICpjdXJyZW50KiBlcG9jaC6gqyAjIFNlY3VyaXR5oNlBIFRoaXMgTVVTVCBOT1QgYmUgdXNlZCBmb3IgZ2FtYmxpbmcsIGFzIGl0IGNhbiBiZSBpbmZsdWVuY2VkIGJ5IGHZPiBtYWxpY2lvdXMgdmFsaWRhdG9yIGluIHRoZSBzaG9ydCB0ZXJtLiBJdCBNQVkgYmUgdXNlZCBpbiBtYW552UUgY3J5cHRvZ3JhcGhpYyBwcm90b2NvbHMsIGhvd2V2ZXIsIHNvIGxvbmcgYXMgb25lIHJlbWVtYmVycyB0aGF0IHRoaXPZRSAobGlrZSBldmVyeXRoaW5nIGVsc2Ugb24tY2hhaW4pIGl0IGlzIHB1YmxpYy4gRm9yIGV4YW1wbGUsIGl0IGNhbiBiZdlBIHVzZWQgd2hlcmUgYSBudW1iZXIgaXMgbmVlZGVkIHRoYXQgY2Fubm90IGhhdmUgYmVlbiBjaG9zZW4gYnkgYW7ZQyBhZHZlcnNhcnksIGZvciBwdXJwb3NlcyBzdWNoIGFzIHB1YmxpYy1jb2luIHplcm8ta25vd2xlZGdlIHByb29mcy7eAAWkbmFtZbhQZW5kaW5nRXBvY2hDb25maWdDaGFuZ2WobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaVwbGFpbsy/qGZhbGxiYWNrpDB4MDCkZG9jc5HZWCBQZW5kaW5nIGVwb2NoIGNvbmZpZ3VyYXRpb24gY2hhbmdlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHdoZW4gdGhlIG5leHQgZXBvY2ggaXMgZW5hY3RlZC7eAAWkbmFtZa5OZXh0UmFuZG9tbmVzc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4BqGZhbGxiYWNr2UIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5G3IE5leHQgZXBvY2ggcmFuZG9tbmVzcy7eAAWkbmFtZa9OZXh0QXV0aG9yaXRpZXOobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluzLqoZmFsbGJhY2ukMHgwMKRkb2NzkbggTmV4dCBlcG9jaCBhdXRob3JpdGllcy7eAAWkbmFtZaxTZWdtZW50SW5kZXiobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluBKhmYWxsYmFja6oweDAwMDAwMDAwpGRvY3OZvyBSYW5kb21uZXNzIHVuZGVyIGNvbnN0cnVjdGlvbi6g2T4gV2UgbWFrZSBhIHRyYWRlLW9mZiBiZXR3ZWVuIHN0b3JhZ2UgYWNjZXNzZXMgYW5kIGxpc3QgbGVuZ3RoLtlAIFdlIHN0b3JlIHRoZSB1bmRlci1jb25zdHJ1Y3Rpb24gcmFuZG9tbmVzcyBpbiBzZWdtZW50cyBvZiB1cCB0b9klIGBVTkRFUl9DT05TVFJVQ1RJT05fU0VHTUVOVF9MRU5HVEhgLqDZOyBPbmNlIGEgc2VnbWVudCByZWFjaGVzIHRoaXMgbGVuZ3RoLCB3ZSBiZWdpbiB0aGUgbmV4dCBvbmUu2UIgV2UgcmVzZXQgYWxsIHNlZ21lbnRzIGFuZCByZXR1cm4gdG8gYDBgIGF0IHRoZSBiZWdpbm5pbmcgb2YgZXZlcnmnIGVwb2NoLt4ABaRuYW1lsVVuZGVyQ29uc3RydWN0aW9uqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tleQSldmFsdWXMwqhmYWxsYmFja6QweDAwpGRvY3OR2UUgVFdPWC1OT1RFOiBgU2VnbWVudEluZGV4YCBpcyBhbiBpbmNyZWFzaW5nIGludGVnZXIsIHNvIHRoaXMgaXMgb2theS7eAAWkbmFtZatJbml0aWFsaXplZKhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABpXBsYWluzMSoZmFsbGJhY2ukMHgwMKRkb2NzktlAIFRlbXBvcmFyeSB2YWx1ZSAoY2xlYXJlZCBhdCBibG9jayBmaW5hbGl6YXRpb24pIHdoaWNoIGlzIGBTb21lYNlHIGlmIHBlci1ibG9jayBpbml0aWFsaXphdGlvbiBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZCBmb3IgY3VycmVudCBibG9jay7eAAWkbmFtZbNBdXRob3JWcmZSYW5kb21uZXNzqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbsxAqGZhbGxiYWNrpDB4MDCkZG9jc5TZRSBUaGlzIGZpZWxkIHNob3VsZCBhbHdheXMgYmUgcG9wdWxhdGVkIGR1cmluZyBibG9jayBwcm9jZXNzaW5nIHVubGVzc9lGIHNlY29uZGFyeSBwbGFpbiBzbG90cyBhcmUgZW5hYmxlZCAod2hpY2ggZG9uJ3QgY29udGFpbiBhIFZSRiBvdXRwdXQpLqDZUiBJdCBpcyBzZXQgaW4gYG9uX2ZpbmFsaXplYCwgYmVmb3JlIGl0IHdpbGwgY29udGFpbiB0aGUgdmFsdWUgZnJvbSB0aGUgbGFzdCBibG9jay7eAAWkbmFtZapFcG9jaFN0YXJ0qG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbj+oZmFsbGJhY2uyMHgwMDAwMDAwMDAwMDAwMDAwpGRvY3OV2VcgVGhlIGJsb2NrIG51bWJlcnMgd2hlbiB0aGUgbGFzdCBhbmQgY3VycmVudCBlcG9jaCBoYXZlIHN0YXJ0ZWQsIHJlc3BlY3RpdmVseSBgTi0xYCBhbmSlIGBOYC7ZUiBOT1RFOiBXZSB0cmFjayB0aGlzIGlzIGluIG9yZGVyIHRvIGFubm90YXRlIHRoZSBibG9jayBudW1iZXIgd2hlbiBhIGdpdmVuIHBvb2wgb2bZViBlbnRyb3B5IHdhcyBmaXhlZCAoaS5lLiBpdCB3YXMga25vd24gdG8gY2hhaW4gb2JzZXJ2ZXJzKS4gU2luY2UgZXBvY2hzIGFyZSBkZWZpbmVkIGlu2VYgc2xvdHMsIHdoaWNoIG1heSBiZSBza2lwcGVkLCB0aGUgYmxvY2sgbnVtYmVycyBtYXkgbm90IGxpbmUgdXAgd2l0aCB0aGUgc2xvdCBudW1iZXJzLt4ABaRuYW1lqExhdGVuZXNzqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbgSoZmFsbGJhY2uqMHgwMDAwMDAwMKRkb2Nzldk2IEhvdyBsYXRlIHRoZSBjdXJyZW50IGJsb2NrIGlzIGNvbXBhcmVkIHRvIGl0cyBwYXJlbnQuoNlFIFRoaXMgZW50cnkgaXMgcG9wdWxhdGVkIGFzIHBhcnQgb2YgYmxvY2sgZXhlY3V0aW9uIGFuZCBpcyBjbGVhbmVkIHVw2UQgb24gYmxvY2sgZmluYWxpemF0aW9uLiBRdWVyeWluZyB0aGlzIHN0b3JhZ2UgZW50cnkgb3V0c2lkZSBvZiBibG9ja9ksIGV4ZWN1dGlvbiBjb250ZXh0IHNob3VsZCBhbHdheXMgeWllbGQgemVyby7eAAWkbmFtZatFcG9jaENvbmZpZ6htb2RpZmllcqhPcHRpb25hbKR0eXBl3gABpXBsYWluzMmoZmFsbGJhY2ukMHgwMKRkb2NzktlYIFRoZSBjb25maWd1cmF0aW9uIGZvciB0aGUgY3VycmVudCBlcG9jaC4gU2hvdWxkIG5ldmVyIGJlIGBOb25lYCBhcyBpdCBpcyBpbml0aWFsaXplZCBpbqkgZ2VuZXNpcy7eAAWkbmFtZa9OZXh0RXBvY2hDb25maWeobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaVwbGFpbszJqGZhbGxiYWNrpDB4MDCkZG9jc5LZSyBUaGUgY29uZmlndXJhdGlvbiBmb3IgdGhlIG5leHQgZXBvY2gsIGBOb25lYCBpZiB0aGUgY29uZmlnIHdpbGwgbm90IGNoYW5nZdk6ICh5b3UgY2FuIGZhbGxiYWNrIHRvIGBFcG9jaENvbmZpZ2AgaW5zdGVhZCBpbiB0aGF0IGNhc2UpLt4ABaRuYW1lrVNraXBwZWRFcG9jaHOobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluzMqoZmFsbGJhY2ukMHgwMKRkb2NzmNlKIEEgbGlzdCBvZiB0aGUgbGFzdCAxMDAgc2tpcHBlZCBlcG9jaHMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIHNlc3Npb24gaW5kZXi8IHdoZW4gdGhlIGVwb2NoIHdhcyBza2lwcGVkLqDZTCBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgdmFsaWRhdGluZyBlcXVpdm9jYXRpb24gcHJvb2ZzLiBBbiBlcXVpdm9jYXRpb24gcHJvb2bZTSBtdXN0IGNvbnRhaW5zIGEga2V5LW93bmVyc2hpcCBwcm9vZiBmb3IgYSBnaXZlbiBzZXNzaW9uLCB0aGVyZWZvcmUgd2UgbmVlZCBh2U4gd2F5IHRvIHRpZSB0b2dldGhlciBzZXNzaW9ucyBhbmQgZXBvY2ggaW5kaWNlcywgaS5lLiB3ZSBuZWVkIHRvIHZhbGlkYXRlIHRoYXTZSiBhIHZhbGlkYXRvciB3YXMgdGhlIG93bmVyIG9mIGEgZ2l2ZW4ga2V5IG9uIGEgZ2l2ZW4gc2Vzc2lvbiwgYW5kIHdoYXQgdGhl2SwgYWN0aXZlIGVwb2NoIGluZGV4IHdhcyBkdXJpbmcgdGhhdCBzZXNzaW9uLqVjYWxsc94AAaR0eXBlzM2mZXZlbnRzwKljb25zdGFudHOT3gAEpG5hbWWtRXBvY2hEdXJhdGlvbqR0eXBlCqV2YWx1ZbIweDU4MDIwMDAwMDAwMDAwMDCkZG9jc5PZOyBUaGUgYW1vdW50IG9mIHRpbWUsIGluIHNsb3RzLCB0aGF0IGVhY2ggZXBvY2ggc2hvdWxkIGxhc3Qu2UYgTk9URTogQ3VycmVudGx5IGl0IGlzIG5vdCBwb3NzaWJsZSB0byBjaGFuZ2UgdGhlIGVwb2NoIGR1cmF0aW9uIGFmdGVy2UggdGhlIGNoYWluIGhhcyBzdGFydGVkLiBBdHRlbXB0aW5nIHRvIGRvIHNvIHdpbGwgYnJpY2sgYmxvY2sgcHJvZHVjdGlvbi7eAASkbmFtZbFFeHBlY3RlZEJsb2NrVGltZaR0eXBlCqV2YWx1ZbIweDcwMTcwMDAwMDAwMDAwMDCkZG9jc5XZQSBUaGUgZXhwZWN0ZWQgYXZlcmFnZSBibG9jayB0aW1lIGF0IHdoaWNoIEJBQkUgc2hvdWxkIGJlIGNyZWF0aW5n2UQgYmxvY2tzLiBTaW5jZSBCQUJFIGlzIHByb2JhYmlsaXN0aWMgaXQgaXMgbm90IHRyaXZpYWwgdG8gZmlndXJlIG91dNlBIHdoYXQgdGhlIGV4cGVjdGVkIGF2ZXJhZ2UgYmxvY2sgdGltZSBzaG91bGQgYmUgYmFzZWQgb24gdGhlIHNsb3TZQiBkdXJhdGlvbiBhbmQgdGhlIHNlY3VyaXR5IHBhcmFtZXRlciBgY2AgKHdoZXJlIGAxIC0gY2AgcmVwcmVzZW50c9koIHRoZSBwcm9iYWJpbGl0eSBvZiBhIHNsb3QgYmVpbmcgZW1wdHkpLt4ABKRuYW1lrk1heEF1dGhvcml0aWVzpHR5cGUEpXZhbHVlqjB4YTA4NjAxMDCkZG9jc5HZIiBNYXggbnVtYmVyIG9mIGF1dGhvcml0aWVzIGFsbG93ZWSmZXJyb3Jz3gABpHR5cGXM0qVpbmRleAHeAAekbmFtZalUaW1lc3RhbXCnc3RvcmFnZd4AAqZwcmVmaXipVGltZXN0YW1wpWl0ZW1zkt4ABaRuYW1lo05vd6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4KqGZhbGxiYWNrsjB4MDAwMDAwMDAwMDAwMDAwMKRkb2NzkdkkIEN1cnJlbnQgdGltZSBmb3IgdGhlIGN1cnJlbnQgYmxvY2su3gAFpG5hbWWpRGlkVXBkYXRlqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbiWoZmFsbGJhY2ukMHgwMKRkb2NzkdktIERpZCB0aGUgdGltZXN0YW1wIGdldCB1cGRhdGVkIGluIHRoaXMgYmxvY2s/pWNhbGxz3gABpHR5cGXM06ZldmVudHPAqWNvbnN0YW50c5HeAASkbmFtZa1NaW5pbXVtUGVyaW9kpHR5cGUKpXZhbHVlsjB4YjgwYjAwMDAwMDAwMDAwMKRkb2NzlNlTIFRoZSBtaW5pbXVtIHBlcmlvZCBiZXR3ZWVuIGJsb2Nrcy4gQmV3YXJlIHRoYXQgdGhpcyBpcyBkaWZmZXJlbnQgdG8gdGhlICpleHBlY3RlZCrZVyBwZXJpb2QgdGhhdCB0aGUgYmxvY2sgcHJvZHVjdGlvbiBhcHBhcmF0dXMgcHJvdmlkZXMuIFlvdXIgY2hvc2VuIGNvbnNlbnN1cyBzeXN0ZW0gd2lsbNlXIGdlbmVyYWxseSB3b3JrIHdpdGggdGhpcyB0byBkZXRlcm1pbmUgYSBzZW5zaWJsZSBibG9jayB0aW1lLiBlLmcuIEZvciBBdXJhLCBpdCB3aWxsIGJl2SggZG91YmxlIHRoaXMgcGVyaW9kIG9uIGRlZmF1bHQgc2V0dGluZ3MupmVycm9yc8ClaW5kZXgC3gAHpG5hbWWnSW5kaWNlc6dzdG9yYWdl3gACpnByZWZpeKdJbmRpY2VzpWl0ZW1zkd4ABaRuYW1lqEFjY291bnRzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORsEJsYWtlMl8xMjhDb25jYXSja2V5BKV2YWx1ZczUqGZhbGxiYWNrpDB4MDCkZG9jc5HZIiBUaGUgbG9va3VwIGZyb20gaW5kZXggdG8gYWNjb3VudC6lY2FsbHPeAAGkdHlwZczVpmV2ZW50c94AAaR0eXBlHaljb25zdGFudHOR3gAEpG5hbWWnRGVwb3NpdKR0eXBlBqV2YWx1ZdkiMHgwMDEwYTVkNGU4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMKRkb2NzkdkrIFRoZSBkZXBvc2l0IG5lZWRlZCBmb3IgcmVzZXJ2aW5nIGFuIGluZGV4LqZlcnJvcnPeAAGkdHlwZczYpWluZGV4A94AB6RuYW1lqEJhbGFuY2Vzp3N0b3JhZ2XeAAKmcHJlZml4qEJhbGFuY2VzpWl0ZW1zld4ABaRuYW1lrVRvdGFsSXNzdWFuY2WobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluBqhmYWxsYmFja9kiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMKRkb2NzkdkmIFRoZSB0b3RhbCB1bml0cyBpc3N1ZWQgaW4gdGhlIHN5c3RlbS7eAAWkbmFtZbBJbmFjdGl2ZUlzc3VhbmNlqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbgaoZmFsbGJhY2vZIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5HZQiBUaGUgdG90YWwgdW5pdHMgb2Ygb3V0c3RhbmRpbmcgZGVhY3RpdmF0ZWQgYmFsYW5jZSBpbiB0aGUgc3lzdGVtLt4ABaRuYW1lp0FjY291bnSobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABo21hcN4AA6doYXNoZXJzkbBCbGFrZTJfMTI4Q29uY2F0o2tleQCldmFsdWUFqGZhbGxiYWNr2YIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwpGRvY3PcABjZQiBUaGUgQmFsYW5jZXMgcGFsbGV0IGV4YW1wbGUgb2Ygc3RvcmluZyB0aGUgYmFsYW5jZSBvZiBhbiBhY2NvdW50LqCqICMgRXhhbXBsZaCtIGBgYG5vY29tcGlsZdksICBpbXBsIHBhbGxldF9iYWxhbmNlczo6Q29uZmlnIGZvciBSdW50aW1lIHvZhiAgICB0eXBlIEFjY291bnRTdG9yZSA9IFN0b3JhZ2VNYXBTaGltPFNlbGY6OkFjY291bnQ8UnVudGltZT4sIGZyYW1lX3N5c3RlbTo6UHJvdmlkZXI8UnVudGltZT4sIEFjY291bnRJZCwgU2VsZjo6QWNjb3VudERhdGE8QmFsYW5jZT4+oyAgfaQgYGBgoNlFIFlvdSBjYW4gYWxzbyBzdG9yZSB0aGUgYmFsYW5jZSBvZiBhbiBhY2NvdW50IGluIHRoZSBgU3lzdGVtYCBwYWxsZXQuoKogIyBFeGFtcGxloK0gYGBgbm9jb21waWxl2SwgIGltcGwgcGFsbGV0X2JhbGFuY2VzOjpDb25maWcgZm9yIFJ1bnRpbWUge70gICB0eXBlIEFjY291bnRTdG9yZSA9IFN5c3RlbaMgIH2kIGBgYKDZVCBCdXQgdGhpcyBjb21lcyB3aXRoIHRyYWRlb2Zmcywgc3RvcmluZyBhY2NvdW50IGJhbGFuY2VzIGluIHRoZSBzeXN0ZW0gcGFsbGV0IHN0b3Jlc9lbIGBmcmFtZV9zeXN0ZW1gIGRhdGEgYWxvbmdzaWRlIHRoZSBhY2NvdW50IGRhdGEgY29udHJhcnkgdG8gc3RvcmluZyBhY2NvdW50IGJhbGFuY2VzIGluIHRoZdlKIGBCYWxhbmNlc2AgcGFsbGV0LCB3aGljaCB1c2VzIGEgYFN0b3JhZ2VNYXBgIHRvIHN0b3JlIGJhbGFuY2VzIGRhdGEgb25seS7ZUCBOT1RFOiBUaGlzIGlzIG9ubHkgdXNlZCBpbiB0aGUgY2FzZSB0aGF0IHRoaXMgcGFsbGV0IGlzIHVzZWQgdG8gc3RvcmUgYmFsYW5jZXMu3gAFpG5hbWWlTG9ja3OobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABo21hcN4AA6doYXNoZXJzkbBCbGFrZTJfMTI4Q29uY2F0o2tleQCldmFsdWXM2ahmYWxsYmFja6QweDAwpGRvY3OS2S4gQW55IGxpcXVpZGl0eSBsb2NrcyBvbiBzb21lIGFjY291bnQgYmFsYW5jZXMu2UkgTk9URTogU2hvdWxkIG9ubHkgYmUgYWNjZXNzZWQgd2hlbiBzZXR0aW5nLCBjaGFuZ2luZyBhbmQgZnJlZWluZyBhIGxvY2su3gAFpG5hbWWoUmVzZXJ2ZXOobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABo21hcN4AA6doYXNoZXJzkbBCbGFrZTJfMTI4Q29uY2F0o2tleQCldmFsdWXM3ahmYWxsYmFja6QweDAwpGRvY3OR2SkgTmFtZWQgcmVzZXJ2ZXMgb24gc29tZSBhY2NvdW50IGJhbGFuY2VzLqVjYWxsc94AAaR0eXBlzOCmZXZlbnRz3gABpHR5cGUeqWNvbnN0YW50c5PeAASkbmFtZbJFeGlzdGVudGlhbERlcG9zaXSkdHlwZQaldmFsdWXZIjB4MDBlNDBiNTQwMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5HZNSBUaGUgbWluaW11bSBhbW91bnQgcmVxdWlyZWQgdG8ga2VlcCBhbiBhY2NvdW50IG9wZW4u3gAEpG5hbWWoTWF4TG9ja3OkdHlwZQSldmFsdWWqMHgzMjAwMDAwMKRkb2Nzktk9IFRoZSBtYXhpbXVtIG51bWJlciBvZiBsb2NrcyB0aGF0IHNob3VsZCBleGlzdCBvbiBhbiBhY2NvdW50Ltk3IE5vdCBzdHJpY3RseSBlbmZvcmNlZCwgYnV0IHVzZWQgZm9yIHdlaWdodCBlc3RpbWF0aW9uLt4ABKRuYW1lq01heFJlc2VydmVzpHR5cGUEpXZhbHVlqjB4MzIwMDAwMDCkZG9jc5HZQyBUaGUgbWF4aW11bSBudW1iZXIgb2YgbmFtZWQgcmVzZXJ2ZXMgdGhhdCBjYW4gZXhpc3Qgb24gYW4gYWNjb3VudC6mZXJyb3Jz3gABpHR5cGXM4aVpbmRleATeAAekbmFtZbJUcmFuc2FjdGlvblBheW1lbnSnc3RvcmFnZd4AAqZwcmVmaXiyVHJhbnNhY3Rpb25QYXltZW50pWl0ZW1zkt4ABaRuYW1lsU5leHRGZWVNdWx0aXBsaWVyqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbsziqGZhbGxiYWNr2SIweDAwMDA2NGE3YjNiNmUwMGQwMDAwMDAwMDAwMDAwMDAwpGRvY3OQ3gAFpG5hbWWuU3RvcmFnZVZlcnNpb26obW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluzOOoZmFsbGJhY2ukMHgwMKRkb2NzkKVjYWxsc8CmZXZlbnRz3gABpHR5cGUgqWNvbnN0YW50c5HeAASkbmFtZbhPcGVyYXRpb25hbEZlZU11bHRpcGxpZXKkdHlwZQKldmFsdWWkMHgwNaRkb2Nz3AAV2VYgQSBmZWUgbXVsaXRwbGllciBmb3IgYE9wZXJhdGlvbmFsYCBleHRyaW5zaWNzIHRvIGNvbXB1dGUgInZpcnR1YWwgdGlwIiB0byBib29zdCB0aGVpcqsgYHByaW9yaXR5YKDZUyBUaGlzIHZhbHVlIGlzIG11bHRpcGxlZCBieSB0aGUgYGZpbmFsX2ZlZWAgdG8gb2J0YWluIGEgInZpcnR1YWwgdGlwIiB0aGF0IGlzIGxhdGVy2T0gYWRkZWQgdG8gYSB0aXAgY29tcG9uZW50IGluIHJlZ3VsYXIgYHByaW9yaXR5YCBjYWxjdWxhdGlvbnMu2VMgSXQgbWVhbnMgdGhhdCBhIGBOb3JtYWxgIHRyYW5zYWN0aW9uIGNhbiBmcm9udC1ydW4gYSBzaW1pbGFybHktc2l6ZWQgYE9wZXJhdGlvbmFsYNlQIGV4dHJpbnNpYyAod2l0aCBubyB0aXApLCBieSBpbmNsdWRpbmcgYSB0aXAgdmFsdWUgZ3JlYXRlciB0aGFuIHRoZSB2aXJ0dWFsIHRpcC6gryBgYGBydXN0LGlnbm9yZbAgLy8gRm9yIGBOb3JtYWxg2SMgbGV0IHByaW9yaXR5ID0gcHJpb3JpdHlfY2FsYyh0aXApO6C1IC8vIEZvciBgT3BlcmF0aW9uYWxg2UQgbGV0IHZpcnR1YWxfdGlwID0gKGluY2x1c2lvbl9mZWUgKyB0aXApICogT3BlcmF0aW9uYWxGZWVNdWx0aXBsaWVyO9kxIGxldCBwcmlvcml0eSA9IHByaW9yaXR5X2NhbGModGlwICsgdmlydHVhbF90aXApO6QgYGBgoNlUIE5vdGUgdGhhdCBzaW5jZSB3ZSB1c2UgYGZpbmFsX2ZlZWAgdGhlIG11bHRpcGxpZXIgYXBwbGllcyBhbHNvIHRvIHRoZSByZWd1bGFyIGB0aXBg2Vcgc2VudCB3aXRoIHRoZSB0cmFuc2FjdGlvbi4gU28sIG5vdCBvbmx5IGRvZXMgdGhlIHRyYW5zYWN0aW9uIGdldCBhIHByaW9yaXR5IGJ1bXAgYmFzZWTZWCBvbiB0aGUgYGluY2x1c2lvbl9mZWVgLCBidXQgd2UgYWxzbyBhbXBsaWZ5IHRoZSBpbXBhY3Qgb2YgdGlwcyBhcHBsaWVkIHRvIGBPcGVyYXRpb25hbGCuIHRyYW5zYWN0aW9ucy6mZXJyb3JzwKVpbmRleBreAAekbmFtZapBdXRob3JzaGlwp3N0b3JhZ2XeAAKmcHJlZml4qkF1dGhvcnNoaXClaXRlbXOR3gAFpG5hbWWmQXV0aG9yqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGlcGxhaW4AqGZhbGxiYWNrpDB4MDCkZG9jc5G5IEF1dGhvciBvZiBjdXJyZW50IGJsb2NrLqVjYWxsc8CmZXZlbnRzwKljb25zdGFudHOQpmVycm9yc8ClaW5kZXgF3gAHpG5hbWWnU3Rha2luZ6dzdG9yYWdl3gACpnByZWZpeKdTdGFraW5npWl0ZW1z3AAl3gAFpG5hbWWuVmFsaWRhdG9yQ291bnSobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluBKhmYWxsYmFja6oweDAwMDAwMDAwpGRvY3OR2ScgVGhlIGlkZWFsIG51bWJlciBvZiBhY3RpdmUgdmFsaWRhdG9ycy7eAAWkbmFtZbVNaW5pbXVtVmFsaWRhdG9yQ291bnSobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluBKhmYWxsYmFja6oweDAwMDAwMDAwpGRvY3OR2VAgTWluaW11bSBudW1iZXIgb2Ygc3Rha2luZyBwYXJ0aWNpcGFudHMgYmVmb3JlIGVtZXJnZW5jeSBjb25kaXRpb25zIGFyZSBpbXBvc2VkLt4ABaRuYW1lrUludnVsbmVyYWJsZXOobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluzOSoZmFsbGJhY2ukMHgwMKRkb2Nzk9lWIEFueSB2YWxpZGF0b3JzIHRoYXQgbWF5IG5ldmVyIGJlIHNsYXNoZWQgb3IgZm9yY2libHkga2lja2VkLiBJdCdzIGEgVmVjIHNpbmNlIHRoZXkncmXZUyBlYXN5IHRvIGluaXRpYWxpemUgYW5kIHRoZSBwZXJmb3JtYW5jZSBoaXQgaXMgbWluaW1hbCAod2UgZXhwZWN0IG5vIG1vcmUgdGhhbiBmb3Vy2SsgaW52dWxuZXJhYmxlcykgYW5kIHJlc3RyaWN0ZWQgdG8gdGVzdG5ldHMu3gAFpG5hbWWmQm9uZGVkqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkApXZhbHVlAKhmYWxsYmFja6QweDAwpGRvY3OT2UAgTWFwIGZyb20gYWxsIGxvY2tlZCAic3Rhc2giIGFjY291bnRzIHRvIHRoZSBjb250cm9sbGVyIGFjY291bnQuoNk0IFRXT1gtTk9URTogU0FGRSBzaW5jZSBgQWNjb3VudElkYCBpcyBhIHNlY3VyZSBoYXNoLt4ABaRuYW1lsE1pbk5vbWluYXRvckJvbmSobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluBqhmYWxsYmFja9kiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMKRkb2NzkdlIIFRoZSBtaW5pbXVtIGFjdGl2ZSBib25kIHRvIGJlY29tZSBhbmQgbWFpbnRhaW4gdGhlIHJvbGUgb2YgYSBub21pbmF0b3Iu3gAFpG5hbWWwTWluVmFsaWRhdG9yQm9uZKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4GqGZhbGxiYWNr2SIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwpGRvY3OR2UggVGhlIG1pbmltdW0gYWN0aXZlIGJvbmQgdG8gYmVjb21lIGFuZCBtYWludGFpbiB0aGUgcm9sZSBvZiBhIHZhbGlkYXRvci7eAAWkbmFtZbJNaW5pbXVtQWN0aXZlU3Rha2WobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluBqhmYWxsYmFja9kiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMKRkb2NzkdlEIFRoZSBtaW5pbXVtIGFjdGl2ZSBub21pbmF0b3Igc3Rha2Ugb2YgdGhlIGxhc3Qgc3VjY2Vzc2Z1bCBlbGVjdGlvbi7eAAWkbmFtZa1NaW5Db21taXNzaW9uqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbiKoZmFsbGJhY2uqMHgwMDAwMDAwMKRkb2Nzk9k6IFRoZSBtaW5pbXVtIGFtb3VudCBvZiBjb21taXNzaW9uIHRoYXQgdmFsaWRhdG9ycyBjYW4gc2V0LqDZICBJZiBzZXQgdG8gYDBgLCBubyBsaW1pdCBleGlzdHMu3gAFpG5hbWWmTGVkZ2VyqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORsEJsYWtlMl8xMjhDb25jYXSja2V5AKV2YWx1ZczlqGZhbGxiYWNrpDB4MDCkZG9jc5HZUSBNYXAgZnJvbSBhbGwgKHVubG9ja2VkKSAiY29udHJvbGxlciIgYWNjb3VudHMgdG8gdGhlIGluZm8gcmVnYXJkaW5nIHRoZSBzdGFraW5nLt4ABaRuYW1lpVBheWVlqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tleQCldmFsdWXM6qhmYWxsYmFja6QweDAwpGRvY3OT2TkgV2hlcmUgdGhlIHJld2FyZCBwYXltZW50IHNob3VsZCBiZSBtYWRlLiBLZXllZCBieSBzdGFzaC6g2TQgVFdPWC1OT1RFOiBTQUZFIHNpbmNlIGBBY2NvdW50SWRgIGlzIGEgc2VjdXJlIGhhc2gu3gAFpG5hbWWqVmFsaWRhdG9yc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkApXZhbHVlI6hmYWxsYmFja6YweDAwMDCkZG9jc5PZUSBUaGUgbWFwIGZyb20gKHdhbm5hYmUpIHZhbGlkYXRvciBzdGFzaCBrZXkgdG8gdGhlIHByZWZlcmVuY2VzIG9mIHRoYXQgdmFsaWRhdG9yLqDZNCBUV09YLU5PVEU6IFNBRkUgc2luY2UgYEFjY291bnRJZGAgaXMgYSBzZWN1cmUgaGFzaC7eAAWkbmFtZbRDb3VudGVyRm9yVmFsaWRhdG9yc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrqjB4MDAwMDAwMDCkZG9jc5HZK0NvdW50ZXIgZm9yIHRoZSByZWxhdGVkIGNvdW50ZWQgc3RvcmFnZSBtYXDeAAWkbmFtZbJNYXhWYWxpZGF0b3JzQ291bnSobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaVwbGFpbgSoZmFsbGJhY2ukMHgwMKRkb2Nzk9lMIFRoZSBtYXhpbXVtIHZhbGlkYXRvciBjb3VudCBiZWZvcmUgd2Ugc3RvcCBhbGxvd2luZyBuZXcgdmFsaWRhdG9ycyB0byBqb2luLqDZNCBXaGVuIHRoaXMgdmFsdWUgaXMgbm90IHNldCwgbm8gbGltaXRzIGFyZSBlbmZvcmNlZC7eAAWkbmFtZapOb21pbmF0b3JzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkApXZhbHVlzOuoZmFsbGJhY2ukMHgwMKRkb2Nz3AAS2V0gVGhlIG1hcCBmcm9tIG5vbWluYXRvciBzdGFzaCBrZXkgdG8gdGhlaXIgbm9taW5hdGlvbiBwcmVmZXJlbmNlcywgbmFtZWx5IHRoZSB2YWxpZGF0b3JzIHRoYXS2IHRoZXkgd2lzaCB0byBzdXBwb3J0LqDZTiBOb3RlIHRoYXQgdGhlIGtleXMgb2YgdGhpcyBzdG9yYWdlIG1hcCBtaWdodCBiZWNvbWUgbm9uLWRlY29kYWJsZSBpbiBjYXNlIHRoZdlbIFtgQ29uZmlnOjpNYXhOb21pbmF0aW9uc2BdIGNvbmZpZ3VyYXRpb24gaXMgZGVjcmVhc2VkLiBJbiB0aGlzIHJhcmUgY2FzZSwgdGhlc2Ugbm9taW5hdG9yc9lZIGFyZSBzdGlsbCBleGlzdGVudCBpbiBzdG9yYWdlLCB0aGVpciBrZXkgaXMgY29ycmVjdCBhbmQgcmV0cmlldmFibGUgKGkuZS4gYGNvbnRhaW5zX2tleWDZXCBpbmRpY2F0ZXMgdGhhdCB0aGV5IGV4aXN0KSwgYnV0IHRoZWlyIHZhbHVlIGNhbm5vdCBiZSBkZWNvZGVkLiBUaGVyZWZvcmUsIHRoZSBub24tZGVjb2RhYmxl2Vsgbm9taW5hdG9ycyB3aWxsIGVmZmVjdGl2ZWx5IG5vdC1leGlzdCwgdW50aWwgdGhleSByZS1zdWJtaXQgdGhlaXIgcHJlZmVyZW5jZXMgc3VjaCB0aGF0IGl02UAgaXMgd2l0aGluIHRoZSBib3VuZHMgb2YgdGhlIG5ld2x5IHNldCBgQ29uZmlnOjpNYXhOb21pbmF0aW9uc2AuoNlYIFRoaXMgaW1wbGllcyB0aGF0IGA6Oml0ZXJfa2V5cygpLmNvdW50KClgIGFuZCBgOjppdGVyKCkuY291bnQoKWAgbWlnaHQgcmV0dXJuIGRpZmZlcmVudNlbIHZhbHVlcyBmb3IgdGhpcyBtYXAuIE1vcmVvdmVyLCB0aGUgbWFpbiBgOjpjb3VudCgpYCBpcyBhbGlnbmVkIHdpdGggdGhlIGZvcm1lciwgbmFtZWx5IHRoZbsgbnVtYmVyIG9mIGtleXMgdGhhdCBleGlzdC6g2VsgTGFzdGx5LCBpZiBhbnkgb2YgdGhlIG5vbWluYXRvcnMgYmVjb21lIG5vbi1kZWNvZGFibGUsIHRoZXkgY2FuIGJlIGNoaWxsZWQgaW1tZWRpYXRlbHkgdmlh2S4gW2BDYWxsOjpjaGlsbF9vdGhlcmBdIGRpc3BhdGNoYWJsZSBieSBhbnlvbmUuoNk0IFRXT1gtTk9URTogU0FGRSBzaW5jZSBgQWNjb3VudElkYCBpcyBhIHNlY3VyZSBoYXNoLt4ABaRuYW1ltENvdW50ZXJGb3JOb21pbmF0b3JzqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbgSoZmFsbGJhY2uqMHgwMDAwMDAwMKRkb2NzkdkrQ291bnRlciBmb3IgdGhlIHJlbGF0ZWQgY291bnRlZCBzdG9yYWdlIG1hcN4ABaRuYW1lsk1heE5vbWluYXRvcnNDb3VudKhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABpXBsYWluBKhmYWxsYmFja6QweDAwpGRvY3OT2UwgVGhlIG1heGltdW0gbm9taW5hdG9yIGNvdW50IGJlZm9yZSB3ZSBzdG9wIGFsbG93aW5nIG5ldyB2YWxpZGF0b3JzIHRvIGpvaW4uoNk0IFdoZW4gdGhpcyB2YWx1ZSBpcyBub3Qgc2V0LCBubyBsaW1pdHMgYXJlIGVuZm9yY2VkLt4ABaRuYW1lqkN1cnJlbnRFcmGobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaVwbGFpbgSoZmFsbGJhY2ukMHgwMKRkb2NzlLcgVGhlIGN1cnJlbnQgZXJhIGluZGV4LqDZWSBUaGlzIGlzIHRoZSBsYXRlc3QgcGxhbm5lZCBlcmEsIGRlcGVuZGluZyBvbiBob3cgdGhlIFNlc3Npb24gcGFsbGV0IHF1ZXVlcyB0aGUgdmFsaWRhdG9y2SAgc2V0LCBpdCBtaWdodCBiZSBhY3RpdmUgb3Igbm90Lt4ABaRuYW1lqUFjdGl2ZUVyYahtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABpXBsYWluzO2oZmFsbGJhY2ukMHgwMKRkb2NzlNk2IFRoZSBhY3RpdmUgZXJhIGluZm9ybWF0aW9uLCBpdCBob2xkcyBpbmRleCBhbmQgc3RhcnQuoNlWIFRoZSBhY3RpdmUgZXJhIGlzIHRoZSBlcmEgYmVpbmcgY3VycmVudGx5IHJld2FyZGVkLiBWYWxpZGF0b3Igc2V0IG9mIHRoaXMgZXJhIG11c3QgYmXZKyBlcXVhbCB0byBbYFNlc3Npb25JbnRlcmZhY2U6OnZhbGlkYXRvcnNgXS7eAAWkbmFtZbVFcmFzU3RhcnRTZXNzaW9uSW5kZXiobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tleQSldmFsdWUEqGZhbGxiYWNrpDB4MDCkZG9jc5TZTCBUaGUgc2Vzc2lvbiBpbmRleCBhdCB3aGljaCB0aGUgZXJhIHN0YXJ0IGZvciB0aGUgbGFzdCBgSElTVE9SWV9ERVBUSGAgZXJhcy6g2VggTm90ZTogVGhpcyB0cmFja3MgdGhlIHN0YXJ0aW5nIHNlc3Npb24gKGkuZS4gc2Vzc2lvbiBpbmRleCB3aGVuIGVyYSBzdGFydCBiZWluZyBhY3RpdmUp2TwgZm9yIHRoZSBlcmFzIGluIGBbQ3VycmVudEVyYSAtIEhJU1RPUllfREVQVEgsIEN1cnJlbnRFcmFdYC7eAAWkbmFtZatFcmFzU3Rha2Vyc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnOSrFR3b3g2NENvbmNhdKxUd294NjRDb25jYXSja2V5zO+ldmFsdWU0qGZhbGxiYWNrqDB4MDAwMDAwpGRvY3OWviBFeHBvc3VyZSBvZiB2YWxpZGF0b3IgYXQgZXJhLqDZWCBUaGlzIGlzIGtleWVkIGZpcnN0IGJ5IHRoZSBlcmEgaW5kZXggdG8gYWxsb3cgYnVsayBkZWxldGlvbiBhbmQgdGhlbiB0aGUgc3Rhc2ggYWNjb3VudC6g2SogSXMgaXQgcmVtb3ZlZCBhZnRlciBgSElTVE9SWV9ERVBUSGAgZXJhcy7ZUCBJZiBzdGFrZXJzIGhhc24ndCBiZWVuIHNldCBvciBoYXMgYmVlbiByZW1vdmVkIHRoZW4gZW1wdHkgZXhwb3N1cmUgaXMgcmV0dXJuZWQu3gAFpG5hbWWyRXJhc1N0YWtlcnNDbGlwcGVkqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5KsVHdveDY0Q29uY2F0rFR3b3g2NENvbmNhdKNrZXnM76V2YWx1ZTSoZmFsbGJhY2uoMHgwMDAwMDCkZG9jc5vZJiBDbGlwcGVkIEV4cG9zdXJlIG9mIHZhbGlkYXRvciBhdCBlcmEuoNlWIFRoaXMgaXMgc2ltaWxhciB0byBbYEVyYXNTdGFrZXJzYF0gYnV0IG51bWJlciBvZiBub21pbmF0b3JzIGV4cG9zZWQgaXMgcmVkdWNlZCB0byB0aGXZNyBgVDo6TWF4Tm9taW5hdG9yUmV3YXJkZWRQZXJWYWxpZGF0b3JgIGJpZ2dlc3Qgc3Rha2Vycy7ZRyAoTm90ZTogdGhlIGZpZWxkIGB0b3RhbGAgYW5kIGBvd25gIG9mIHRoZSBleHBvc3VyZSByZW1haW5zIHVuY2hhbmdlZCku2T0gVGhpcyBpcyB1c2VkIHRvIGxpbWl0IHRoZSBpL28gY29zdCBmb3IgdGhlIG5vbWluYXRvciBwYXlvdXQuoNlXIFRoaXMgaXMga2V5ZWQgZmlzdCBieSB0aGUgZXJhIGluZGV4IHRvIGFsbG93IGJ1bGsgZGVsZXRpb24gYW5kIHRoZW4gdGhlIHN0YXNoIGFjY291bnQuoNkqIElzIGl0IHJlbW92ZWQgYWZ0ZXIgYEhJU1RPUllfREVQVEhgIGVyYXMu2VAgSWYgc3Rha2VycyBoYXNuJ3QgYmVlbiBzZXQgb3IgaGFzIGJlZW4gcmVtb3ZlZCB0aGVuIGVtcHR5IGV4cG9zdXJlIGlzIHJldHVybmVkLt4ABaRuYW1lskVyYXNWYWxpZGF0b3JQcmVmc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnOSrFR3b3g2NENvbmNhdKxUd294NjRDb25jYXSja2V5zO+ldmFsdWUjqGZhbGxiYWNrpjB4MDAwMKRkb2NzldlEIFNpbWlsYXIgdG8gYEVyYXNTdGFrZXJzYCwgdGhpcyBob2xkcyB0aGUgcHJlZmVyZW5jZXMgb2YgdmFsaWRhdG9ycy6g2VggVGhpcyBpcyBrZXllZCBmaXJzdCBieSB0aGUgZXJhIGluZGV4IHRvIGFsbG93IGJ1bGsgZGVsZXRpb24gYW5kIHRoZW4gdGhlIHN0YXNoIGFjY291bnQuoNkqIElzIGl0IHJlbW92ZWQgYWZ0ZXIgYEhJU1RPUllfREVQVEhgIGVyYXMu3gAFpG5hbWWzRXJhc1ZhbGlkYXRvclJld2FyZKhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5BKV2YWx1ZQaoZmFsbGJhY2ukMHgwMKRkb2Nzk9lCIFRoZSB0b3RhbCB2YWxpZGF0b3IgZXJhIHBheW91dCBmb3IgdGhlIGxhc3QgYEhJU1RPUllfREVQVEhgIGVyYXMuoNlIIEVyYXMgdGhhdCBoYXZlbid0IGZpbmlzaGVkIHlldCBvciBoYXMgYmVlbiByZW1vdmVkIGRvZXNuJ3QgaGF2ZSByZXdhcmQu3gAFpG5hbWWwRXJhc1Jld2FyZFBvaW50c6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkEpXZhbHVlzPCoZmFsbGJhY2usMHgwMDAwMDAwMDAwpGRvY3OS2SsgUmV3YXJkcyBmb3IgdGhlIGxhc3QgYEhJU1RPUllfREVQVEhgIGVyYXMu2UkgSWYgcmV3YXJkIGhhc24ndCBiZWVuIHNldCBvciBoYXMgYmVlbiByZW1vdmVkIHRoZW4gMCByZXdhcmQgaXMgcmV0dXJuZWQu3gAFpG5hbWWuRXJhc1RvdGFsU3Rha2WobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5BKV2YWx1ZQaoZmFsbGJhY2vZIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5LZOyBUaGUgdG90YWwgYW1vdW50IHN0YWtlZCBmb3IgdGhlIGxhc3QgYEhJU1RPUllfREVQVEhgIGVyYXMu2UcgSWYgdG90YWwgaGFzbid0IGJlZW4gc2V0IG9yIGhhcyBiZWVuIHJlbW92ZWQgdGhlbiAwIHN0YWtlIGlzIHJldHVybmVkLt4ABaRuYW1lqEZvcmNlRXJhqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbiaoZmFsbGJhY2ukMHgwMKRkb2NzkbUgTW9kZSBvZiBlcmEgZm9yY2luZy7eAAWkbmFtZbNTbGFzaFJld2FyZEZyYWN0aW9uqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbiKoZmFsbGJhY2uqMHgwMDAwMDAwMKRkb2Nzk9k+IFRoZSBwZXJjZW50YWdlIG9mIHRoZSBzbGFzaCB0aGF0IGlzIGRpc3RyaWJ1dGVkIHRvIHJlcG9ydGVycy6g2TkgVGhlIHJlc3Qgb2YgdGhlIHNsYXNoZWQgdmFsdWUgaXMgaGFuZGxlZCBieSB0aGUgYFNsYXNoYC7eAAWkbmFtZbNDYW5jZWxlZFNsYXNoUGF5b3V0qG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbgaoZmFsbGJhY2vZIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5LZRSBUaGUgYW1vdW50IG9mIGN1cnJlbmN5IGdpdmVuIHRvIHJlcG9ydGVycyBvZiBhIHNsYXNoIGV2ZW50IHdoaWNoIHdhc9k7IGNhbmNlbGVkIGJ5IGV4dHJhb3JkaW5hcnkgY2lyY3Vtc3RhbmNlcyAoZS5nLiBnb3Zlcm5hbmNlKS7eAAWkbmFtZbBVbmFwcGxpZWRTbGFzaGVzqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tleQSldmFsdWXM9KhmYWxsYmFja6QweDAwpGRvY3OR2TEgQWxsIHVuYXBwbGllZCBzbGFzaGVzIHRoYXQgYXJlIHF1ZXVlZCBmb3IgbGF0ZXIu3gAFpG5hbWWqQm9uZGVkRXJhc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW7Mp6hmYWxsYmFja6QweDAwpGRvY3OU2UkgQSBtYXBwaW5nIGZyb20gc3RpbGwtYm9uZGVkIGVyYXMgdG8gdGhlIGZpcnN0IHNlc3Npb24gaW5kZXggb2YgdGhhdCBlcmEuoNkyIE11c3QgY29udGFpbnMgaW5mb3JtYXRpb24gZm9yIGVyYXMgZm9yIHRoZSByYW5nZTrZLyBgW2FjdGl2ZV9lcmEgLSBib3VuZGluZ19kdXJhdGlvbjsgYWN0aXZlX2VyYV1g3gAFpG5hbWWzVmFsaWRhdG9yU2xhc2hJbkVyYahtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkqxUd294NjRDb25jYXSsVHdveDY0Q29uY2F0o2tleczvpXZhbHVlzPioZmFsbGJhY2ukMHgwMKRkb2NzktlRIEFsbCBzbGFzaGluZyBldmVudHMgb24gdmFsaWRhdG9ycywgbWFwcGVkIGJ5IGVyYSB0byB0aGUgaGlnaGVzdCBzbGFzaCBwcm9wb3J0aW9uvCBhbmQgc2xhc2ggdmFsdWUgb2YgdGhlIGVyYS7eAAWkbmFtZbNOb21pbmF0b3JTbGFzaEluRXJhqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnOSrFR3b3g2NENvbmNhdKxUd294NjRDb25jYXSja2V5zO+ldmFsdWUGqGZhbGxiYWNrpDB4MDCkZG9jc5HZWCBBbGwgc2xhc2hpbmcgZXZlbnRzIG9uIG5vbWluYXRvcnMsIG1hcHBlZCBieSBlcmEgdG8gdGhlIGhpZ2hlc3Qgc2xhc2ggdmFsdWUgb2YgdGhlIGVyYS7eAAWkbmFtZa1TbGFzaGluZ1NwYW5zqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkApXZhbHVlzPmoZmFsbGJhY2ukMHgwMKRkb2NzkdkjIFNsYXNoaW5nIHNwYW5zIGZvciBzdGFzaCBhY2NvdW50cy7eAAWkbmFtZalTcGFuU2xhc2iobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5zPOldmFsdWXM+qhmYWxsYmFja9lCMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwpGRvY3OS2U8gUmVjb3JkcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbWF4aW11bSBzbGFzaCBvZiBhIHN0YXNoIHdpdGhpbiBhIHNsYXNoaW5nIHNwYW4s2S4gYXMgd2VsbCBhcyBob3cgbXVjaCByZXdhcmQgaGFzIGJlZW4gcGFpZCBvdXQu3gAFpG5hbWW1Q3VycmVudFBsYW5uZWRTZXNzaW9uqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbgSoZmFsbGJhY2uqMHgwMDAwMDAwMKRkb2Nzk9k6IFRoZSBsYXN0IHBsYW5uZWQgc2Vzc2lvbiBzY2hlZHVsZWQgYnkgdGhlIHNlc3Npb24gcGFsbGV0LqDZXCBUaGlzIGlzIGJhc2ljYWxseSBpbiBzeW5jIHdpdGggdGhlIGNhbGwgdG8gW2BwYWxsZXRfc2Vzc2lvbjo6U2Vzc2lvbk1hbmFnZXI6Om5ld19zZXNzaW9uYF0u3gAFpG5hbWWzT2ZmZW5kaW5nVmFsaWRhdG9yc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW7M+6hmYWxsYmFja6QweDAwpGRvY3OZ2VogSW5kaWNlcyBvZiB2YWxpZGF0b3JzIHRoYXQgaGF2ZSBvZmZlbmRlZCBpbiB0aGUgYWN0aXZlIGVyYSBhbmQgd2hldGhlciB0aGV5IGFyZSBjdXJyZW50bHmqIGRpc2FibGVkLqDZWiBUaGlzIHZhbHVlIHNob3VsZCBiZSBhIHN1cGVyc2V0IG9mIGRpc2FibGVkIHZhbGlkYXRvcnMgc2luY2Ugbm90IGFsbCBvZmZlbmNlcyBsZWFkIHRvIHRoZdlcIHZhbGlkYXRvciBiZWluZyBkaXNhYmxlZCAoaWYgdGhlcmUgd2FzIG5vIHNsYXNoKS4gVGhpcyBpcyBuZWVkZWQgdG8gdHJhY2sgdGhlIHBlcmNlbnRhZ2Ugb2bZUiB2YWxpZGF0b3JzIHRoYXQgaGF2ZSBvZmZlbmRlZCBpbiB0aGUgY3VycmVudCBlcmEsIGVuc3VyaW5nIGEgbmV3IGVyYSBpcyBmb3JjZWQgaWbZXSBgT2ZmZW5kaW5nVmFsaWRhdG9yc1RocmVzaG9sZGAgaXMgcmVhY2hlZC4gVGhlIHZlYyBpcyBhbHdheXMga2VwdCBzb3J0ZWQgc28gdGhhdCB3ZSBjYW4gZmluZNlcIHdoZXRoZXIgYSBnaXZlbiB2YWxpZGF0b3IgaGFzIHByZXZpb3VzbHkgb2ZmZW5kZWQgdXNpbmcgYmluYXJ5IHNlYXJjaC4gSXQgZ2V0cyBjbGVhcmVkIHdoZW6uIHRoZSBlcmEgZW5kcy7eAAWkbmFtZa5DaGlsbFRocmVzaG9sZKhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABpXBsYWluzP2oZmFsbGJhY2ukMHgwMKRkb2Nzk9lUIFRoZSB0aHJlc2hvbGQgZm9yIHdoZW4gdXNlcnMgY2FuIHN0YXJ0IGNhbGxpbmcgYGNoaWxsX290aGVyYCBmb3Igb3RoZXIgdmFsaWRhdG9ycyAv2VYgbm9taW5hdG9ycy4gVGhlIHRocmVzaG9sZCBpcyBjb21wYXJlZCB0byB0aGUgYWN0dWFsIG51bWJlciBvZiB2YWxpZGF0b3JzIC8gbm9taW5hdG9yc9lKIChgQ291bnRGb3IqYCkgaW4gdGhlIHN5c3RlbSBjb21wYXJlZCB0byB0aGUgY29uZmlndXJlZCBtYXggKGBNYXgqQ291bnRgKS6lY2FsbHPeAAGkdHlwZcz+pmV2ZW50c94AAaR0eXBlIaljb25zdGFudHOX3gAEpG5hbWWuTWF4Tm9taW5hdGlvbnOkdHlwZQSldmFsdWWqMHgxMDAwMDAwMKRkb2NzkdktIE1heGltdW0gbnVtYmVyIG9mIG5vbWluYXRpb25zIHBlciBub21pbmF0b3Iu3gAEpG5hbWWsSGlzdG9yeURlcHRopHR5cGUEpXZhbHVlqjB4NTQwMDAwMDCkZG9jc9wAFNkjIE51bWJlciBvZiBlcmFzIHRvIGtlZXAgaW4gaGlzdG9yeS6g2TogRm9sbG93aW5nIGluZm9ybWF0aW9uIGlzIGtlcHQgZm9yIGVyYXMgaW4gYFtjdXJyZW50X2VyYSAt2UIgSGlzdG9yeURlcHRoLCBjdXJyZW50X2VyYV1gOiBgRXJhc1N0YWtlcnNgLCBgRXJhc1N0YWtlcnNDbGlwcGVkYCzZQSBgRXJhc1ZhbGlkYXRvclByZWZzYCwgYEVyYXNWYWxpZGF0b3JSZXdhcmRgLCBgRXJhc1Jld2FyZFBvaW50c2As2SsgYEVyYXNUb3RhbFN0YWtlYCwgYEVyYXNTdGFydFNlc3Npb25JbmRleGAs2SEgYFN0YWtpbmdMZWRnZXIuY2xhaW1lZF9yZXdhcmRzYC6g2TkgTXVzdCBiZSBtb3JlIHRoYW4gdGhlIG51bWJlciBvZiBlcmFzIGRlbGF5ZWQgYnkgc2Vzc2lvbi7ZPiBJLmUuIGFjdGl2ZSBlcmEgbXVzdCBhbHdheXMgYmUgaW4gaGlzdG9yeS4gSS5lLiBgYWN0aXZlX2VyYSA+2TEgY3VycmVudF9lcmEgLSBoaXN0b3J5X2RlcHRoYCBtdXN0IGJlIGd1YXJhbnRlZWQuoNlEIElmIG1pZ3JhdGluZyBhbiBleGlzdGluZyBwYWxsZXQgZnJvbSBzdG9yYWdlIHZhbHVlIHRvIGNvbmZpZyB2YWx1ZSzZOyB0aGlzIHNob3VsZCBiZSBzZXQgdG8gc2FtZSB2YWx1ZSBvciBncmVhdGVyIGFzIGluIHN0b3JhZ2UuoNlFIE5vdGU6IGBIaXN0b3J5RGVwdGhgIGlzIHVzZWQgYXMgdGhlIHVwcGVyIGJvdW5kIGZvciB0aGUgYEJvdW5kZWRWZWNg2UQgaXRlbSBgU3Rha2luZ0xlZGdlci5jbGFpbWVkX3Jld2FyZHNgLiBTZXR0aW5nIHRoaXMgdmFsdWUgbG93ZXIgdGhhbtk2IHRoZSBleGlzdGluZyB2YWx1ZSBjYW4gbGVhZCB0byBpbmNvbnNpc3RlbmNpZXMgaW4gdGhl2UUgYFN0YWtpbmdMZWRnZXJgIGFuZCB3aWxsIG5lZWQgdG8gYmUgaGFuZGxlZCBwcm9wZXJseSBpbiBhIG1pZ3JhdGlvbi7ZPCBUaGUgdGVzdCBgcmVkdWNpbmdfaGlzdG9yeV9kZXB0aF9hYnJ1cHRgIHNob3dzIHRoaXMgZWZmZWN0Lt4ABKRuYW1lrlNlc3Npb25zUGVyRXJhpHR5cGUEpXZhbHVlqjB4MDYwMDAwMDCkZG9jc5G8IE51bWJlciBvZiBzZXNzaW9ucyBwZXIgZXJhLt4ABKRuYW1lr0JvbmRpbmdEdXJhdGlvbqR0eXBlBKV2YWx1ZaoweDAyMDAwMDAwpGRvY3OR2TkgTnVtYmVyIG9mIGVyYXMgdGhhdCBzdGFrZWQgZnVuZHMgbXVzdCByZW1haW4gYm9uZGVkIGZvci7eAASkbmFtZbJTbGFzaERlZmVyRHVyYXRpb26kdHlwZQSldmFsdWWqMHgwMTAwMDAwMKRkb2NzlNlAIE51bWJlciBvZiBlcmFzIHRoYXQgc2xhc2hlcyBhcmUgZGVmZXJyZWQgYnksIGFmdGVyIGNvbXB1dGF0aW9uLqDZQyBUaGlzIHNob3VsZCBiZSBsZXNzIHRoYW4gdGhlIGJvbmRpbmcgZHVyYXRpb24uIFNldCB0byAwIGlmIHNsYXNoZXPZRSBzaG91bGQgYmUgYXBwbGllZCBpbW1lZGlhdGVseSwgd2l0aG91dCBvcHBvcnR1bml0eSBmb3IgaW50ZXJ2ZW50aW9uLt4ABKRuYW1l2SBNYXhOb21pbmF0b3JSZXdhcmRlZFBlclZhbGlkYXRvcqR0eXBlBKV2YWx1ZaoweDQwMDAwMDAwpGRvY3OU2T4gVGhlIG1heGltdW0gbnVtYmVyIG9mIG5vbWluYXRvcnMgcmV3YXJkZWQgZm9yIGVhY2ggdmFsaWRhdG9yLqDZVCBGb3IgZWFjaCB2YWxpZGF0b3Igb25seSB0aGUgYCRNYXhOb21pbmF0b3JSZXdhcmRlZFBlclZhbGlkYXRvcmAgYmlnZ2VzdCBzdGFrZXJzIGNhbtlOIGNsYWltIHRoZWlyIHJld2FyZC4gVGhpcyB1c2VkIHRvIGxpbWl0IHRoZSBpL28gY29zdCBmb3IgdGhlIG5vbWluYXRvciBwYXlvdXQu3gAEpG5hbWWyTWF4VW5sb2NraW5nQ2h1bmtzpHR5cGUEpXZhbHVlqjB4MjAwMDAwMDCkZG9jc5rZQSBUaGUgbWF4aW11bSBudW1iZXIgb2YgYHVubG9ja2luZ2AgY2h1bmtzIGEgW2BTdGFraW5nTGVkZ2VyYF0gY2Fu2UIgaGF2ZS4gRWZmZWN0aXZlbHkgZGV0ZXJtaW5lcyBob3cgbWFueSB1bmlxdWUgZXJhcyBhIHN0YWtlciBtYXkgYmWuIHVuYm9uZGluZyBpbi6g2T4gTm90ZTogYE1heFVubG9ja2luZ0NodW5rc2AgaXMgdXNlZCBhcyB0aGUgdXBwZXIgYm91bmQgZm9yIHRoZdlAIGBCb3VuZGVkVmVjYCBpdGVtIGBTdGFraW5nTGVkZ2VyLnVubG9ja2luZ2AuIFNldHRpbmcgdGhpcyB2YWx1ZdlBIGxvd2VyIHRoYW4gdGhlIGV4aXN0aW5nIHZhbHVlIGNhbiBsZWFkIHRvIGluY29uc2lzdGVuY2llcyBpbiB0aGXZQiBgU3Rha2luZ0xlZGdlcmAgYW5kIHdpbGwgbmVlZCB0byBiZSBoYW5kbGVkIHByb3Blcmx5IGluIGEgcnVudGltZdlBIG1pZ3JhdGlvbi4gVGhlIHRlc3QgYHJlZHVjaW5nX21heF91bmxvY2tpbmdfY2h1bmtzX2FicnVwdGAgc2hvd3OtIHRoaXMgZWZmZWN0LqZlcnJvcnPeAAGkdHlwZc0BBKVpbmRleAbeAAekbmFtZahPZmZlbmNlc6dzdG9yYWdl3gACpnByZWZpeKhPZmZlbmNlc6VpdGVtc5PeAAWkbmFtZadSZXBvcnRzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkLpXZhbHVlzQEFqGZhbGxiYWNrpDB4MDCkZG9jc5HZUiBUaGUgcHJpbWFyeSBzdHJ1Y3R1cmUgdGhhdCBob2xkcyBhbGwgb2ZmZW5jZSByZWNvcmRzIGtleWVkIGJ5IHJlcG9ydCBpZGVudGlmaWVycy7eAAWkbmFtZbZDb25jdXJyZW50UmVwb3J0c0luZGV4qG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5KsVHdveDY0Q29uY2F0rFR3b3g2NENvbmNhdKNrZXnNAQaldmFsdWXMpqhmYWxsYmFja6QweDAwpGRvY3OR2UogQSB2ZWN0b3Igb2YgcmVwb3J0cyBvZiB0aGUgc2FtZSBraW5kIHRoYXQgaGFwcGVuZWQgYXQgdGhlIHNhbWUgdGltZSBzbG90Lt4ABaRuYW1lslJlcG9ydHNCeUtpbmRJbmRleKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkopXZhbHVlDKhmYWxsYmFja6QweDAwpGRvY3OW2UQgRW51bWVyYXRlcyBhbGwgcmVwb3J0cyBvZiBhIGtpbmQgYWxvbmcgd2l0aCB0aGUgdGltZSB0aGV5IGhhcHBlbmVkLqDZLyBBbGwgcmVwb3J0cyBhcmUgc29ydGVkIGJ5IHRoZSB0aW1lIG9mIG9mZmVuY2UuoNlSIE5vdGUgdGhhdCB0aGUgYWN0dWFsIHR5cGUgb2YgdGhpcyBtYXBwaW5nIGlzIGBWZWM8dTg+YCwgdGhpcyBpcyBiZWNhdXNlIHZhbHVlcyBvZtlaIGRpZmZlcmVudCB0eXBlcyBhcmUgbm90IHN1cHBvcnRlZCBhdCB0aGUgbW9tZW50IHNvIHdlIGFyZSBkb2luZyB0aGUgbWFudWFsIHNlcmlhbGl6YXRpb24upWNhbGxzwKZldmVudHPeAAGkdHlwZSepY29uc3RhbnRzkKZlcnJvcnPApWluZGV4B94AB6RuYW1lqkhpc3RvcmljYWync3RvcmFnZcClY2FsbHPApmV2ZW50c8CpY29uc3RhbnRzkKZlcnJvcnPApWluZGV4G94AB6RuYW1lp1Nlc3Npb26nc3RvcmFnZd4AAqZwcmVmaXinU2Vzc2lvbqVpdGVtc5feAAWkbmFtZapWYWxpZGF0b3JzqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbszkqGZhbGxiYWNrpDB4MDCkZG9jc5G/IFRoZSBjdXJyZW50IHNldCBvZiB2YWxpZGF0b3JzLt4ABaRuYW1lrEN1cnJlbnRJbmRleKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrqjB4MDAwMDAwMDCkZG9jc5G+IEN1cnJlbnQgaW5kZXggb2YgdGhlIHNlc3Npb24u3gAFpG5hbWWtUXVldWVkQ2hhbmdlZKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4lqGZhbGxiYWNrpDB4MDCkZG9jc5LZTiBUcnVlIGlmIHRoZSB1bmRlcmx5aW5nIGVjb25vbWljIGlkZW50aXRpZXMgb3Igd2VpZ2h0aW5nIGJlaGluZCB0aGUgdmFsaWRhdG9yc9kpIGhhcyBjaGFuZ2VkIGluIHRoZSBxdWV1ZWQgdmFsaWRhdG9yIHNldC7eAAWkbmFtZapRdWV1ZWRLZXlzqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbs0BB6hmYWxsYmFja6QweDAwpGRvY3OS2U8gVGhlIHF1ZXVlZCBrZXlzIGZvciB0aGUgbmV4dCBzZXNzaW9uLiBXaGVuIHRoZSBuZXh0IHNlc3Npb24gYmVnaW5zLCB0aGVzZSBrZXlz2Tggd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSB0aGUgdmFsaWRhdG9yJ3Mgc2Vzc2lvbiBrZXlzLt4ABaRuYW1lskRpc2FibGVkVmFsaWRhdG9yc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW7MVahmYWxsYmFja6QweDAwpGRvY3OV2SAgSW5kaWNlcyBvZiBkaXNhYmxlZCB2YWxpZGF0b3JzLqDZTyBUaGUgdmVjIGlzIGFsd2F5cyBrZXB0IHNvcnRlZCBzbyB0aGF0IHdlIGNhbiBmaW5kIHdoZXRoZXIgYSBnaXZlbiB2YWxpZGF0b3IgaXPZTyBkaXNhYmxlZCB1c2luZyBiaW5hcnkgc2VhcmNoLiBJdCBnZXRzIGNsZWFyZWQgd2hlbiBgb25fc2Vzc2lvbl9lbmRpbmdgIHJldHVybnO5IGEgbmV3IHNldCBvZiBpZGVudGl0aWVzLt4ABaRuYW1lqE5leHRLZXlzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkApXZhbHVlzQEJqGZhbGxiYWNrpDB4MDCkZG9jc5HZJyBUaGUgbmV4dCBzZXNzaW9uIGtleXMgZm9yIGEgdmFsaWRhdG9yLt4ABaRuYW1lqEtleU93bmVyqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXnNAQ2ldmFsdWUAqGZhbGxiYWNrpDB4MDCkZG9jc5HZQiBUaGUgb3duZXIgb2YgYSBrZXkuIFRoZSBrZXkgaXMgdGhlIGBLZXlUeXBlSWRgICsgdGhlIGVuY29kZWQga2V5LqVjYWxsc94AAaR0eXBlzQEPpmV2ZW50c94AAaR0eXBlKaljb25zdGFudHOQpmVycm9yc94AAaR0eXBlzQEQpWluZGV4CN4AB6RuYW1lp0dyYW5kcGGnc3RvcmFnZd4AAqZwcmVmaXinR3JhbmRwYaVpdGVtc5beAAWkbmFtZaVTdGF0Zahtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW7NARGoZmFsbGJhY2ukMHgwMKRkb2NzkdkkIFN0YXRlIG9mIHRoZSBjdXJyZW50IGF1dGhvcml0eSBzZXQu3gAFpG5hbWWtUGVuZGluZ0NoYW5nZahtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABpXBsYWluzQESqGZhbGxiYWNrpDB4MDCkZG9jc5HZMSBQZW5kaW5nIGNoYW5nZTogKHNpZ25hbGVkIGF0LCBzY2hlZHVsZWQgY2hhbmdlKS7eAAWkbmFtZapOZXh0Rm9yY2VkqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrpDB4MDCkZG9jc5HZLyBuZXh0IGJsb2NrIG51bWJlciB3aGVyZSB3ZSBjYW4gZm9yY2UgYSBjaGFuZ2Uu3gAFpG5hbWWnU3RhbGxlZKhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABpXBsYWluP6hmYWxsYmFja6QweDAwpGRvY3OR2SQgYHRydWVgIGlmIHdlIGFyZSBjdXJyZW50bHkgc3RhbGxlZC7eAAWkbmFtZaxDdXJyZW50U2V0SWSobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluCqhmYWxsYmFja7IweDAwMDAwMDAwMDAwMDAwMDCkZG9jc5LZVyBUaGUgbnVtYmVyIG9mIGNoYW5nZXMgKGJvdGggaW4gdGVybXMgb2Yga2V5cyBhbmQgdW5kZXJseWluZyBlY29ub21pYyByZXNwb25zaWJpbGl0aWVzKdkxIGluIHRoZSAic2V0IiBvZiBHcmFuZHBhIHZhbGlkYXRvcnMgZnJvbSBnZW5lc2lzLt4ABaRuYW1lrFNldElkU2Vzc2lvbqhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5CqV2YWx1ZQSoZmFsbGJhY2ukMHgwMKRkb2NzmtlWIEEgbWFwcGluZyBmcm9tIGdyYW5kcGEgc2V0IElEIHRvIHRoZSBpbmRleCBvZiB0aGUgKm1vc3QgcmVjZW50KiBzZXNzaW9uIGZvciB3aGljaCBpdHO6IG1lbWJlcnMgd2VyZSByZXNwb25zaWJsZS6g2VEgVGhpcyBpcyBvbmx5IHVzZWQgZm9yIHZhbGlkYXRpbmcgZXF1aXZvY2F0aW9uIHByb29mcy4gQW4gZXF1aXZvY2F0aW9uIHByb29mIG11c3TZUyBjb250YWlucyBhIGtleS1vd25lcnNoaXAgcHJvb2YgZm9yIGEgZ2l2ZW4gc2Vzc2lvbiwgdGhlcmVmb3JlIHdlIG5lZWQgYSB3YXkgdG8gdGll2VEgdG9nZXRoZXIgc2Vzc2lvbnMgYW5kIEdSQU5EUEEgc2V0IGlkcywgaS5lLiB3ZSBuZWVkIHRvIHZhbGlkYXRlIHRoYXQgYSB2YWxpZGF0b3LZUCB3YXMgdGhlIG93bmVyIG9mIGEgZ2l2ZW4ga2V5IG9uIGEgZ2l2ZW4gc2Vzc2lvbiwgYW5kIHdoYXQgdGhlIGFjdGl2ZSBzZXQgSUQgd2FztSBkdXJpbmcgdGhhdCBzZXNzaW9uLqDZLiBUV09YLU5PVEU6IGBTZXRJZGAgaXMgbm90IHVuZGVyIHVzZXIgY29udHJvbC6lY2FsbHPeAAGkdHlwZc0BFaZldmVudHPeAAGkdHlwZSqpY29uc3RhbnRzkt4ABKRuYW1lrk1heEF1dGhvcml0aWVzpHR5cGUEpXZhbHVlqjB4YTA4NjAxMDCkZG9jc5G3IE1heCBBdXRob3JpdGllcyBpbiB1c2XeAASkbmFtZbZNYXhTZXRJZFNlc3Npb25FbnRyaWVzpHR5cGUKpXZhbHVlsjB4MGMwMDAwMDAwMDAwMDAwMKRkb2NzltlOIFRoZSBtYXhpbXVtIG51bWJlciBvZiBlbnRyaWVzIHRvIGtlZXAgaW4gdGhlIHNldCBpZCB0byBzZXNzaW9uIGluZGV4IG1hcHBpbmcuoNlMIFNpbmNlIHRoZSBgU2V0SWRTZXNzaW9uYCBtYXAgaXMgb25seSB1c2VkIGZvciB2YWxpZGF0aW5nIGVxdWl2b2NhdGlvbnMgdGhpc9lKIHZhbHVlIHNob3VsZCByZWxhdGUgdG8gdGhlIGJvbmRpbmcgZHVyYXRpb24gb2Ygd2hhdGV2ZXIgc3Rha2luZyBzeXN0ZW0gaXPZTSBiZWluZyB1c2VkIChpZiBhbnkpLiBJZiBlcXVpdm9jYXRpb24gaGFuZGxpbmcgaXMgbm90IGVuYWJsZWQgdGhlbiB0aGlzIHZhbHVlrSBjYW4gYmUgemVyby6mZXJyb3Jz3gABpHR5cGXNASClaW5kZXgK3gAHpG5hbWWoSW1PbmxpbmWnc3RvcmFnZd4AAqZwcmVmaXioSW1PbmxpbmWlaXRlbXOU3gAFpG5hbWWuSGVhcnRiZWF0QWZ0ZXKobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluBKhmYWxsYmFja6oweDAwMDAwMDAwpGRvY3Ob2UcgVGhlIGJsb2NrIG51bWJlciBhZnRlciB3aGljaCBpdCdzIG9rIHRvIHNlbmQgaGVhcnRiZWF0cyBpbiB0aGUgY3VycmVudKkgc2Vzc2lvbi6g2UkgQXQgdGhlIGJlZ2lubmluZyBvZiBlYWNoIHNlc3Npb24gd2Ugc2V0IHRoaXMgdG8gYSB2YWx1ZSB0aGF0IHNob3VsZCBmYWxs2U0gcm91Z2hseSBpbiB0aGUgbWlkZGxlIG9mIHRoZSBzZXNzaW9uIGR1cmF0aW9uLiBUaGUgaWRlYSBpcyB0byBmaXJzdCB3YWl0IGZvctlGIHRoZSB2YWxpZGF0b3JzIHRvIHByb2R1Y2UgYSBibG9jayBpbiB0aGUgY3VycmVudCBzZXNzaW9uLCBzbyB0aGF0IHRoZdkqIGhlYXJ0YmVhdCBsYXRlciBvbiB3aWxsIG5vdCBiZSBuZWNlc3NhcnkuoNlOIFRoaXMgdmFsdWUgd2lsbCBvbmx5IGJlIHVzZWQgYXMgYSBmYWxsYmFjayBpZiB3ZSBmYWlsIHRvIGdldCBhIHByb3BlciBzZXNzaW9u2UsgcHJvZ3Jlc3MgZXN0aW1hdGUgZnJvbSBgTmV4dFNlc3Npb25Sb3RhdGlvbmAsIGFzIHRob3NlIGVzdGltYXRlcyBzaG91bGQgYmXZQCBtb3JlIGFjY3VyYXRlIHRoZW4gdGhlIHZhbHVlIHdlIGNhbGN1bGF0ZSBmb3IgYEhlYXJ0YmVhdEFmdGVyYC7eAAWkbmFtZaRLZXlzqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbs0BIahmYWxsYmFja6QweDAwpGRvY3OR2TQgVGhlIGN1cnJlbnQgc2V0IG9mIGtleXMgdGhhdCBtYXkgaXNzdWUgYSBoZWFydGJlYXQu3gAFpG5hbWWyUmVjZWl2ZWRIZWFydGJlYXRzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnOSrFR3b3g2NENvbmNhdKxUd294NjRDb25jYXSja2V5P6V2YWx1Zc0BI6hmYWxsYmFja6QweDAwpGRvY3OS2U8gRm9yIGVhY2ggc2Vzc2lvbiBpbmRleCwgd2Uga2VlcCBhIG1hcHBpbmcgb2YgYFNlc3Npb25JbmRleGAgYW5kIGBBdXRoSW5kZXhgIHRv2SwgYFdyYXBwZXJPcGFxdWU8Qm91bmRlZE9wYXF1ZU5ldHdvcmtTdGF0ZT5gLt4ABaRuYW1lrkF1dGhvcmVkQmxvY2tzqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5KsVHdveDY0Q29uY2F0rFR3b3g2NENvbmNhdKNrZXnM76V2YWx1ZQSoZmFsbGJhY2uqMHgwMDAwMDAwMKRkb2NzktlFIEZvciBlYWNoIHNlc3Npb24gaW5kZXgsIHdlIGtlZXAgYSBtYXBwaW5nIG9mIGBWYWxpZGF0b3JJZDxUPmAgdG8gdGhl2TIgbnVtYmVyIG9mIGJsb2NrcyBhdXRob3JlZCBieSB0aGUgZ2l2ZW4gYXV0aG9yaXR5LqVjYWxsc94AAaR0eXBlzQEopmV2ZW50c94AAaR0eXBlL6ljb25zdGFudHOR3gAEpG5hbWWwVW5zaWduZWRQcmlvcml0eaR0eXBlCqV2YWx1ZbIweGZmZmZmZmZmZmZmZmZmZmakZG9jc5TZPCBBIGNvbmZpZ3VyYXRpb24gZm9yIGJhc2UgcHJpb3JpdHkgb2YgdW5zaWduZWQgdHJhbnNhY3Rpb25zLqDZRSBUaGlzIGlzIGV4cG9zZWQgc28gdGhhdCBpdCBjYW4gYmUgdHVuZWQgZm9yIHBhcnRpY3VsYXIgcnVudGltZSwgd2hlbtktIG11bHRpcGxlIHBhbGxldHMgc2VuZCB1bnNpZ25lZCB0cmFuc2FjdGlvbnMupmVycm9yc94AAaR0eXBlzQEvpWluZGV4C94AB6RuYW1lskF1dGhvcml0eURpc2NvdmVyeadzdG9yYWdlwKVjYWxsc8CmZXZlbnRzwKljb25zdGFudHOQpmVycm9yc8ClaW5kZXgM3gAHpG5hbWWnVXRpbGl0eadzdG9yYWdlwKVjYWxsc94AAaR0eXBlzQEwpmV2ZW50c94AAaR0eXBlOKljb25zdGFudHOR3gAEpG5hbWWzYmF0Y2hlZF9jYWxsc19saW1pdKR0eXBlBKV2YWx1ZaoweGFhMmEwMDAwpGRvY3OR2SogVGhlIGxpbWl0IG9uIHRoZSBudW1iZXIgb2YgYmF0Y2hlZCBjYWxscy6mZXJyb3Jz3gABpHR5cGXNAf6laW5kZXgQ3gAHpG5hbWWoSWRlbnRpdHmnc3RvcmFnZd4AAqZwcmVmaXioSWRlbnRpdHmlaXRlbXOU3gAFpG5hbWWqSWRlbnRpdHlPZqhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5AKV2YWx1Zc0B/6hmYWxsYmFja6QweDAwpGRvY3OT2UggSW5mb3JtYXRpb24gdGhhdCBpcyBwZXJ0aW5lbnQgdG8gaWRlbnRpZnkgdGhlIGVudGl0eSBiZWhpbmQgYW4gYWNjb3VudC6g2TAgVFdPWC1OT1RFOiBPSyDigJUgYEFjY291bnRJZGAgaXMgYSBzZWN1cmUgaGFzaC7eAAWkbmFtZadTdXBlck9mqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORsEJsYWtlMl8xMjhDb25jYXSja2V5AKV2YWx1Zc0BV6hmYWxsYmFja6QweDAwpGRvY3OS2VggVGhlIHN1cGVyLWlkZW50aXR5IG9mIGFuIGFsdGVybmF0aXZlICJzdWIiIGlkZW50aXR5IHRvZ2V0aGVyIHdpdGggaXRzIG5hbWUsIHdpdGhpbiB0aGF02VQgY29udGV4dC4gSWYgdGhlIGFjY291bnQgaXMgbm90IHNvbWUgb3RoZXIgYWNjb3VudCdzIHN1Yi1pZGVudGl0eSwgdGhlbiBqdXN0IGBOb25lYC7eAAWkbmFtZaZTdWJzT2aobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5AKV2YWx1Zc0CA6hmYWxsYmFja9kkMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwpGRvY3OV2S4gQWx0ZXJuYXRpdmUgInN1YiIgaWRlbnRpdGllcyBvZiB0aGlzIGFjY291bnQuoNlHIFRoZSBmaXJzdCBpdGVtIGlzIHRoZSBkZXBvc2l0LCB0aGUgc2Vjb25kIGlzIGEgdmVjdG9yIG9mIHRoZSBhY2NvdW50cy6g2TAgVFdPWC1OT1RFOiBPSyDigJUgYEFjY291bnRJZGAgaXMgYSBzZWN1cmUgaGFzaC7eAAWkbmFtZapSZWdpc3RyYXJzqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbs0CBahmYWxsYmFja6QweDAwpGRvY3OU2VMgVGhlIHNldCBvZiByZWdpc3RyYXJzLiBOb3QgZXhwZWN0ZWQgdG8gZ2V0IHZlcnkgYmlnIGFzIGNhbiBvbmx5IGJlIGFkZGVkIHRocm91Z2ggYdkqIHNwZWNpYWwgb3JpZ2luIChsaWtlbHkgYSBjb3VuY2lsIG1vdGlvbikuoNlKIFRoZSBpbmRleCBpbnRvIHRoaXMgY2FuIGJlIGNhc3QgdG8gYFJlZ2lzdHJhckluZGV4YCB0byBnZXQgYSB2YWxpZCB2YWx1ZS6lY2FsbHPeAAGkdHlwZc0BM6ZldmVudHPeAAGkdHlwZTupY29uc3RhbnRzlt4ABKRuYW1lrEJhc2ljRGVwb3NpdKR0eXBlBqV2YWx1ZdkiMHgwMGEwNzI0ZTE4MDkwMDAwMDAwMDAwMDAwMDAwMDAwMKRkb2Nzkdk1IFRoZSBhbW91bnQgaGVsZCBvbiBkZXBvc2l0IGZvciBhIHJlZ2lzdGVyZWQgaWRlbnRpdHneAASkbmFtZaxGaWVsZERlcG9zaXSkdHlwZQaldmFsdWXZIjB4MDBhODljMTM0NjAyMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5HZSyBUaGUgYW1vdW50IGhlbGQgb24gZGVwb3NpdCBwZXIgYWRkaXRpb25hbCBmaWVsZCBmb3IgYSByZWdpc3RlcmVkIGlkZW50aXR5Lt4ABKRuYW1lsVN1YkFjY291bnREZXBvc2l0pHR5cGUGpXZhbHVl2SIweDAwMjA0YWE5ZDEwMTAwMDAwMDAwMDAwMDAwMDAwMDAwpGRvY3OT2VkgVGhlIGFtb3VudCBoZWxkIG9uIGRlcG9zaXQgZm9yIGEgcmVnaXN0ZXJlZCBzdWJhY2NvdW50LiBUaGlzIHNob3VsZCBhY2NvdW50IGZvciB0aGUgZmFjdNlZIHRoYXQgb25lIHN0b3JhZ2UgaXRlbSdzIHZhbHVlIHdpbGwgaW5jcmVhc2UgYnkgdGhlIHNpemUgb2YgYW4gYWNjb3VudCBJRCwgYW5kIHRoZXJlIHdpbGzZTSBiZSBhbm90aGVyIHRyaWUgaXRlbSB3aG9zZSB2YWx1ZSBpcyB0aGUgc2l6ZSBvZiBhbiBhY2NvdW50IElEIHBsdXMgMzIgYnl0ZXMu3gAEpG5hbWWuTWF4U3ViQWNjb3VudHOkdHlwZQSldmFsdWWqMHg2NDAwMDAwMKRkb2NzkdlDIFRoZSBtYXhpbXVtIG51bWJlciBvZiBzdWItYWNjb3VudHMgYWxsb3dlZCBwZXIgaWRlbnRpZmllZCBhY2NvdW50Lt4ABKRuYW1ls01heEFkZGl0aW9uYWxGaWVsZHOkdHlwZQSldmFsdWWqMHg2NDAwMDAwMKRkb2NzktlZIE1heGltdW0gbnVtYmVyIG9mIGFkZGl0aW9uYWwgZmllbGRzIHRoYXQgbWF5IGJlIHN0b3JlZCBpbiBhbiBJRC4gTmVlZGVkIHRvIGJvdW5kIHRoZSBJL0/ZOCByZXF1aXJlZCB0byBhY2Nlc3MgYW4gaWRlbnRpdHksIGJ1dCBjYW4gYmUgcHJldHR5IGhpZ2gu3gAEpG5hbWWtTWF4UmVnaXN0cmFyc6R0eXBlBKV2YWx1ZaoweDE0MDAwMDAwpGRvY3OS2VQgTWF4bWltdW0gbnVtYmVyIG9mIHJlZ2lzdHJhcnMgYWxsb3dlZCBpbiB0aGUgc3lzdGVtLiBOZWVkZWQgdG8gYm91bmQgdGhlIGNvbXBsZXhpdHm/IG9mLCBlLmcuLCB1cGRhdGluZyBqdWRnZW1lbnRzLqZlcnJvcnPeAAGkdHlwZc0CCaVpbmRleBHeAAekbmFtZahSZWNvdmVyeadzdG9yYWdl3gACpnByZWZpeKhSZWNvdmVyeaVpdGVtc5PeAAWkbmFtZatSZWNvdmVyYWJsZahtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5AKV2YWx1Zc0CCqhmYWxsYmFja6QweDAwpGRvY3OR2UIgVGhlIHNldCBvZiByZWNvdmVyYWJsZSBhY2NvdW50cyBhbmQgdGhlaXIgcmVjb3ZlcnkgY29uZmlndXJhdGlvbi7eAAWkbmFtZbBBY3RpdmVSZWNvdmVyaWVzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnOSrFR3b3g2NENvbmNhdKxUd294NjRDb25jYXSja2V5zQIMpXZhbHVlzQINqGZhbGxiYWNrpDB4MDCkZG9jc5S6IEFjdGl2ZSByZWNvdmVyeSBhdHRlbXB0cy6g2UUgRmlyc3QgYWNjb3VudCBpcyB0aGUgYWNjb3VudCB0byBiZSByZWNvdmVyZWQsIGFuZCB0aGUgc2Vjb25kIGFjY291bnTZKyBpcyB0aGUgdXNlciB0cnlpbmcgdG8gcmVjb3ZlciB0aGUgYWNjb3VudC7eAAWkbmFtZaVQcm94eahtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkbBCbGFrZTJfMTI4Q29uY2F0o2tleQCldmFsdWUAqGZhbGxiYWNrpDB4MDCkZG9jc5PZJCBUaGUgbGlzdCBvZiBhbGxvd2VkIHByb3h5IGFjY291bnRzLqDZPiBNYXAgZnJvbSB0aGUgdXNlciB3aG8gY2FuIGFjY2VzcyBpdCB0byB0aGUgcmVjb3ZlcmVkIGFjY291bnQupWNhbGxz3gABpHR5cGXNAVumZXZlbnRz3gABpHR5cGU8qWNvbnN0YW50c5TeAASkbmFtZbFDb25maWdEZXBvc2l0QmFzZaR0eXBlBqV2YWx1ZdkiMHgwMDUwMzkyNzhjMDQwMDAwMDAwMDAwMDAwMDAwMDAwMKRkb2NzlNlVIFRoZSBiYXNlIGFtb3VudCBvZiBjdXJyZW5jeSBuZWVkZWQgdG8gcmVzZXJ2ZSBmb3IgY3JlYXRpbmcgYSByZWNvdmVyeSBjb25maWd1cmF0aW9uLqDZQCBUaGlzIGlzIGhlbGQgZm9yIGFuIGFkZGl0aW9uYWwgc3RvcmFnZSBpdGVtIHdob3NlIHZhbHVlIHNpemUgaXPZKiBgMiArIHNpemVvZihCbG9ja051bWJlciwgQmFsYW5jZSlgIGJ5dGVzLt4ABKRuYW1ls0ZyaWVuZERlcG9zaXRGYWN0b3KkdHlwZQaldmFsdWXZIjB4MDA4ODUyNmE3NDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5XZSyBUaGUgYW1vdW50IG9mIGN1cnJlbmN5IG5lZWRlZCBwZXIgYWRkaXRpb25hbCB1c2VyIHdoZW4gY3JlYXRpbmcgYSByZWNvdmVyea8gY29uZmlndXJhdGlvbi6g2VMgVGhpcyBpcyBoZWxkIGZvciBhZGRpbmcgYHNpemVvZihBY2NvdW50SWQpYCBieXRlcyBtb3JlIGludG8gYSBwcmUtZXhpc3Rpbmcgc3RvcmFnZacgdmFsdWUu3gAEpG5hbWWqTWF4RnJpZW5kc6R0eXBlBKV2YWx1ZaoweDA5MDAwMDAwpGRvY3OW2UMgVGhlIG1heGltdW0gYW1vdW50IG9mIGZyaWVuZHMgYWxsb3dlZCBpbiBhIHJlY292ZXJ5IGNvbmZpZ3VyYXRpb24uoNlDIE5PVEU6IFRoZSB0aHJlc2hvbGQgcHJvZ3JhbW1lZCBpbiB0aGlzIFBhbGxldCB1c2VzIHUxNiwgc28gaXQgZG9lc9lCIG5vdCByZWFsbHkgbWFrZSBzZW5zZSB0byBoYXZlIGEgbGltaXQgaGVyZSBncmVhdGVyIHRoYW4gdTE2OjpNQVgu2UUgQnV0IGFsc28sIHRoYXQgaXMgYSBsb3QgbW9yZSB0aGFuIHlvdSBzaG91bGQgcHJvYmFibHkgc2V0IHRoaXMgdmFsdWWtIHRvIGFueXdheS4uLt4ABKRuYW1lr1JlY292ZXJ5RGVwb3NpdKR0eXBlBqV2YWx1ZdkiMHgwMDUwMzkyNzhjMDQwMDAwMDAwMDAwMDAwMDAwMDAwMKRkb2Nzl9lHIFRoZSBiYXNlIGFtb3VudCBvZiBjdXJyZW5jeSBuZWVkZWQgdG8gcmVzZXJ2ZSBmb3Igc3RhcnRpbmcgYSByZWNvdmVyeS6g2U0gVGhpcyBpcyBwcmltYXJpbHkgaGVsZCBmb3IgZGV0ZXJyaW5nIG1hbGljaW91cyByZWNvdmVyeSBhdHRlbXB0cywgYW5kIHNob3VsZNlKIGhhdmUgYSB2YWx1ZSBsYXJnZSBlbm91Z2ggdGhhdCBhIGJhZCBhY3RvciB3b3VsZCBjaG9vc2Ugbm90IHRvIHBsYWNlIHRoaXPZSiBkZXBvc2l0LiBJdCBhbHNvIGFjdHMgdG8gZnVuZCBhZGRpdGlvbmFsIHN0b3JhZ2UgaXRlbSB3aG9zZSB2YWx1ZSBzaXplIGlz2VAgYHNpemVvZihCbG9ja051bWJlciwgQmFsYW5jZSArIFQgKiBBY2NvdW50SWQpYCBieXRlcy4gV2hlcmUgVCBpcyBhIGNvbmZpZ3VyYWJsZasgdGhyZXNob2xkLqZlcnJvcnPeAAGkdHlwZc0CDqVpbmRleBLeAAekbmFtZadWZXN0aW5np3N0b3JhZ2XeAAKmcHJlZml4p1Zlc3RpbmelaXRlbXOS3gAFpG5hbWWnVmVzdGluZ6htb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkbBCbGFrZTJfMTI4Q29uY2F0o2tleQCldmFsdWXNAg+oZmFsbGJhY2ukMHgwMKRkb2Nzkdk2IEluZm9ybWF0aW9uIHJlZ2FyZGluZyB0aGUgdmVzdGluZyBvZiBhIGdpdmVuIGFjY291bnQu3gAFpG5hbWWuU3RvcmFnZVZlcnNpb26obW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluzQIRqGZhbGxiYWNrpDB4MDCkZG9jc5O/IFN0b3JhZ2UgdmVyc2lvbiBvZiB0aGUgcGFsbGV0LqDZTCBOZXcgbmV0d29ya3Mgc3RhcnQgd2l0aCBsYXRlc3QgdmVyc2lvbiwgYXMgZGV0ZXJtaW5lZCBieSB0aGUgZ2VuZXNpcyBidWlsZC6lY2FsbHPeAAGkdHlwZc0BXKZldmVudHPeAAGkdHlwZT2pY29uc3RhbnRzkt4ABKRuYW1lsU1pblZlc3RlZFRyYW5zZmVypHR5cGUGpXZhbHVl2SIweDAwMTBhNWQ0ZTgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwpGRvY3OR2TogVGhlIG1pbmltdW0gYW1vdW50IHRyYW5zZmVycmVkIHRvIGNhbGwgYHZlc3RlZF90cmFuc2ZlcmAu3gAEpG5hbWWzTWF4VmVzdGluZ1NjaGVkdWxlc6R0eXBlBKV2YWx1ZaoweDFjMDAwMDAwpGRvY3OQpmVycm9yc94AAaR0eXBlzQISpWluZGV4E94AB6RuYW1lqVNjaGVkdWxlcqdzdG9yYWdl3gACpnByZWZpeKlTY2hlZHVsZXKlaXRlbXOT3gAFpG5hbWWvSW5jb21wbGV0ZVNpbmNlqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrpDB4MDCkZG9jc5DeAAWkbmFtZaZBZ2VuZGGobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5BKV2YWx1Zc0CE6hmYWxsYmFja6QweDAwpGRvY3OR2VMgSXRlbXMgdG8gYmUgZXhlY3V0ZWQsIGluZGV4ZWQgYnkgdGhlIGJsb2NrIG51bWJlciB0aGF0IHRoZXkgc2hvdWxkIGJlIGV4ZWN1dGVkIG9uLt4ABaRuYW1lpkxvb2t1cKhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5AaV2YWx1ZT+oZmFsbGJhY2ukMHgwMKRkb2NzlNk+IExvb2t1cCBmcm9tIGEgbmFtZSB0byB0aGUgYmxvY2sgbnVtYmVyIGFuZCBpbmRleCBvZiB0aGUgdGFzay6g2VYgRm9yIHYzIC0+IHY0IHRoZSBwcmV2aW91c2x5IHVuYm91bmRlZCBpZGVudGl0aWVzIGFyZSBCbGFrZTItMjU2IGhhc2hlZCB0byBmb3JtIHRoZSB2NKwgaWRlbnRpdGllcy6lY2FsbHPeAAGkdHlwZc0BXqZldmVudHPeAAGkdHlwZT6pY29uc3RhbnRzkt4ABKRuYW1lrU1heGltdW1XZWlnaHSkdHlwZQildmFsdWXZIjB4MGIwMDgwNmU4Nzc0MDExM2NjY2NjY2NjY2NjY2NjY2OkZG9jc5HZSiBUaGUgbWF4aW11bSB3ZWlnaHQgdGhhdCBtYXkgYmUgc2NoZWR1bGVkIHBlciBibG9jayBmb3IgYW55IGRpc3BhdGNoYWJsZXMu3gAEpG5hbWW0TWF4U2NoZWR1bGVkUGVyQmxvY2ukdHlwZQSldmFsdWWqMHgzMjAwMDAwMKRkb2NzkdlHIFRoZSBtYXhpbXVtIG51bWJlciBvZiBzY2hlZHVsZWQgY2FsbHMgaW4gdGhlIHF1ZXVlIGZvciBhIHNpbmdsZSBibG9jay6mZXJyb3Jz3gABpHR5cGXNAhmlaW5kZXgU3gAHpG5hbWWoUHJlaW1hZ2Wnc3RvcmFnZd4AAqZwcmVmaXioUHJlaW1hZ2WlaXRlbXOS3gAFpG5hbWWpU3RhdHVzRm9yqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORqElkZW50aXR5o2tleQuldmFsdWXNAhqoZmFsbGJhY2ukMHgwMKRkb2NzkdkkIFRoZSByZXF1ZXN0IHN0YXR1cyBvZiBhIGdpdmVuIGhhc2gu3gAFpG5hbWWrUHJlaW1hZ2VGb3KobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GoSWRlbnRpdHmja2V5zQIcpXZhbHVlzQIdqGZhbGxiYWNrpDB4MDCkZG9jc5ClY2FsbHPeAAGkdHlwZc0BYKZldmVudHPeAAGkdHlwZcxBqWNvbnN0YW50c5CmZXJyb3Jz3gABpHR5cGXNAh6laW5kZXgc3gAHpG5hbWWkU3Vkb6dzdG9yYWdl3gACpnByZWZpeKRTdWRvpWl0ZW1zkd4ABaRuYW1lo0tleahtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABpXBsYWluAKhmYWxsYmFja6QweDAwpGRvY3OR2SEgVGhlIGBBY2NvdW50SWRgIG9mIHRoZSBzdWRvIGtleS6lY2FsbHPeAAGkdHlwZc0BYaZldmVudHPeAAGkdHlwZcxCqWNvbnN0YW50c5CmZXJyb3Jz3gABpHR5cGXNAh+laW5kZXgV3gAHpG5hbWWlUHJveHmnc3RvcmFnZd4AAqZwcmVmaXilUHJveHmlaXRlbXOS3gAFpG5hbWWnUHJveGllc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkApXZhbHVlzQIgqGZhbGxiYWNr2SQweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5LZUSBUaGUgc2V0IG9mIGFjY291bnQgcHJveGllcy4gTWFwcyB0aGUgYWNjb3VudCB3aGljaCBoYXMgZGVsZWdhdGVkIHRvIHRoZSBhY2NvdW50c9lIIHdoaWNoIGFyZSBiZWluZyBkZWxlZ2F0ZWQgdG8sIHRvZ2V0aGVyIHdpdGggdGhlIGFtb3VudCBoZWxkIG9uIGRlcG9zaXQu3gAFpG5hbWWtQW5ub3VuY2VtZW50c6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkApXZhbHVlzQIkqGZhbGxiYWNr2SQweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5HZKyBUaGUgYW5ub3VuY2VtZW50cyBtYWRlIGJ5IHRoZSBwcm94eSAoa2V5KS6lY2FsbHPeAAGkdHlwZc0BYqZldmVudHPeAAGkdHlwZcxEqWNvbnN0YW50c5beAASkbmFtZbBQcm94eURlcG9zaXRCYXNlpHR5cGUGpXZhbHVl2SIweDAwOTQ3Y2VjZTgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwpGRvY3OU2UQgVGhlIGJhc2UgYW1vdW50IG9mIGN1cnJlbmN5IG5lZWRlZCB0byByZXNlcnZlIGZvciBjcmVhdGluZyBhIHByb3h5LqDZQCBUaGlzIGlzIGhlbGQgZm9yIGFuIGFkZGl0aW9uYWwgc3RvcmFnZSBpdGVtIHdob3NlIHZhbHVlIHNpemUgaXPZSSBgc2l6ZW9mKEJhbGFuY2UpYCBieXRlcyBhbmQgd2hvc2Uga2V5IHNpemUgaXMgYHNpemVvZihBY2NvdW50SWQpYCBieXRlcy7eAASkbmFtZbJQcm94eURlcG9zaXRGYWN0b3KkdHlwZQaldmFsdWXZIjB4ODAwMDU5NjIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5XZLyBUaGUgYW1vdW50IG9mIGN1cnJlbmN5IG5lZWRlZCBwZXIgcHJveHkgYWRkZWQuoNlNIFRoaXMgaXMgaGVsZCBmb3IgYWRkaW5nIDMyIGJ5dGVzIHBsdXMgYW4gaW5zdGFuY2Ugb2YgYFByb3h5VHlwZWAgbW9yZSBpbnRvIGHZWCBwcmUtZXhpc3Rpbmcgc3RvcmFnZSB2YWx1ZS4gVGh1cywgd2hlbiBjb25maWd1cmluZyBgUHJveHlEZXBvc2l0RmFjdG9yYCBvbmUgc2hvdWxkIHRha2XZPSBpbnRvIGFjY291bnQgYDMyICsgcHJveHlfdHlwZS5lbmNvZGUoKS5sZW4oKWAgYnl0ZXMgb2YgZGF0YS7eAASkbmFtZapNYXhQcm94aWVzpHR5cGUEpXZhbHVlqjB4MjAwMDAwMDCkZG9jc5HZPCBUaGUgbWF4aW11bSBhbW91bnQgb2YgcHJveGllcyBhbGxvd2VkIGZvciBhIHNpbmdsZSBhY2NvdW50Lt4ABKRuYW1lqk1heFBlbmRpbmekdHlwZQSldmFsdWWqMHgyMDAwMDAwMKRkb2NzkdlRIFRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lLWRlbGF5ZWQgYW5ub3VuY2VtZW50cyB0aGF0IGFyZSBhbGxvd2VkIHRvIGJlIHBlbmRpbmcu3gAEpG5hbWW3QW5ub3VuY2VtZW50RGVwb3NpdEJhc2WkdHlwZQaldmFsdWXZIjB4MDA5NDdjZWNlODAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5TZTCBUaGUgYmFzZSBhbW91bnQgb2YgY3VycmVuY3kgbmVlZGVkIHRvIHJlc2VydmUgZm9yIGNyZWF0aW5nIGFuIGFubm91bmNlbWVudC6g2VIgVGhpcyBpcyBoZWxkIHdoZW4gYSBuZXcgc3RvcmFnZSBpdGVtIGhvbGRpbmcgYSBgQmFsYW5jZWAgaXMgY3JlYXRlZCAodHlwaWNhbGx5IDE2qCBieXRlcyku3gAEpG5hbWW5QW5ub3VuY2VtZW50RGVwb3NpdEZhY3RvcqR0eXBlBqV2YWx1ZdkiMHgwMDAxYjJjNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMKRkb2NzlNk1IFRoZSBhbW91bnQgb2YgY3VycmVuY3kgbmVlZGVkIHBlciBhbm5vdW5jZW1lbnQgbWFkZS6g2VYgVGhpcyBpcyBoZWxkIGZvciBhZGRpbmcgYW4gYEFjY291bnRJZGAsIGBIYXNoYCBhbmQgYEJsb2NrTnVtYmVyYCAodHlwaWNhbGx5IDY4IGJ5dGVzKdkjIGludG8gYSBwcmUtZXhpc3Rpbmcgc3RvcmFnZSB2YWx1ZS6mZXJyb3Jz3gABpHR5cGXNAiilaW5kZXgW3gAHpG5hbWWoTXVsdGlzaWenc3RvcmFnZd4AAqZwcmVmaXioTXVsdGlzaWelaXRlbXOR3gAFpG5hbWWpTXVsdGlzaWdzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnOSrFR3b3g2NENvbmNhdLBCbGFrZTJfMTI4Q29uY2F0o2tlec0CKaV2YWx1Zc0CKqhmYWxsYmFja6QweDAwpGRvY3OR2SUgVGhlIHNldCBvZiBvcGVuIG11bHRpc2lnIG9wZXJhdGlvbnMupWNhbGxz3gABpHR5cGXNAWSmZXZlbnRz3gABpHR5cGXMR6ljb25zdGFudHOT3gAEpG5hbWWrRGVwb3NpdEJhc2WkdHlwZQaldmFsdWXZIjB4MDBiY2U3ZGFlOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5bZViBUaGUgYmFzZSBhbW91bnQgb2YgY3VycmVuY3kgbmVlZGVkIHRvIHJlc2VydmUgZm9yIGNyZWF0aW5nIGEgbXVsdGlzaWcgZXhlY3V0aW9uIG9yIHRv2SEgc3RvcmUgYSBkaXNwYXRjaCBjYWxsIGZvciBsYXRlci6g2UAgVGhpcyBpcyBoZWxkIGZvciBhbiBhZGRpdGlvbmFsIHN0b3JhZ2UgaXRlbSB3aG9zZSB2YWx1ZSBzaXplIGlz2UwgYDQgKyBzaXplb2YoKEJsb2NrTnVtYmVyLCBCYWxhbmNlLCBBY2NvdW50SWQpKWAgYnl0ZXMgYW5kIHdob3NlIGtleSBzaXplIGlz2SAgYDMyICsgc2l6ZW9mKEFjY291bnRJZClgIGJ5dGVzLt4ABKRuYW1lrURlcG9zaXRGYWN0b3KkdHlwZQaldmFsdWXZIjB4MDAxMDVlNWYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5PZVSBUaGUgYW1vdW50IG9mIGN1cnJlbmN5IG5lZWRlZCBwZXIgdW5pdCB0aHJlc2hvbGQgd2hlbiBjcmVhdGluZyBhIG11bHRpc2lnIGV4ZWN1dGlvbi6g2UkgVGhpcyBpcyBoZWxkIGZvciBhZGRpbmcgMzIgYnl0ZXMgbW9yZSBpbnRvIGEgcHJlLWV4aXN0aW5nIHN0b3JhZ2UgdmFsdWUu3gAEpG5hbWWuTWF4U2lnbmF0b3JpZXOkdHlwZQSldmFsdWWqMHg2NDAwMDAwMKRkb2Nzkdk7IFRoZSBtYXhpbXVtIGFtb3VudCBvZiBzaWduYXRvcmllcyBhbGxvd2VkIGluIHRoZSBtdWx0aXNpZy6mZXJyb3Jz3gABpHR5cGXNAiylaW5kZXgX3gAHpG5hbWW6RWxlY3Rpb25Qcm92aWRlck11bHRpUGhhc2Wnc3RvcmFnZd4AAqZwcmVmaXi6RWxlY3Rpb25Qcm92aWRlck11bHRpUGhhc2WlaXRlbXOa3gAFpG5hbWWlUm91bmSobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluBKhmYWxsYmFja6oweDAxMDAwMDAwpGRvY3OW2SsgSW50ZXJuYWwgY291bnRlciBmb3IgdGhlIG51bWJlciBvZiByb3VuZHMuoNlVIFRoaXMgaXMgdXNlZnVsIGZvciBkZS1kdXBsaWNhdGlvbiBvZiB0cmFuc2FjdGlvbnMgc3VibWl0dGVkIHRvIHRoZSBwb29sLCBhbmQgZ2VuZXJhbLsgZGlhZ25vc3RpY3Mgb2YgdGhlIHBhbGxldC6g2VMgVGhpcyBpcyBtZXJlbHkgaW5jcmVtZW50ZWQgb25jZSBwZXIgZXZlcnkgdGltZSB0aGF0IGFuIHVwc3RyZWFtIGBlbGVjdGAgaXMgY2FsbGVkLt4ABaRuYW1lrEN1cnJlbnRQaGFzZahtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW7MTKhmYWxsYmFja6QweDAwpGRvY3ORryBDdXJyZW50IHBoYXNlLt4ABaRuYW1lrlF1ZXVlZFNvbHV0aW9uqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGlcGxhaW7NAi2oZmFsbGJhY2ukMHgwMKRkb2NzkdlPIEN1cnJlbnQgYmVzdCBzb2x1dGlvbiwgc2lnbmVkIG9yIHVuc2lnbmVkLCBxdWV1ZWQgdG8gYmUgcmV0dXJuZWQgdXBvbiBgZWxlY3RgLt4ABaRuYW1lqFNuYXBzaG90qG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGlcGxhaW7NAi+oZmFsbGJhY2ukMHgwMKRkb2Nzk7wgU25hcHNob3QgZGF0YSBvZiB0aGUgcm91bmQuoNlXIFRoaXMgaXMgY3JlYXRlZCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzaWduZWQgcGhhc2UgYW5kIGNsZWFyZWQgdXBvbiBjYWxsaW5nIGBlbGVjdGAu3gAFpG5hbWWuRGVzaXJlZFRhcmdldHOobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaVwbGFpbgSoZmFsbGJhY2ukMHgwMKRkb2Nzk9kzIERlc2lyZWQgbnVtYmVyIG9mIHRhcmdldHMgdG8gZWxlY3QgZm9yIHRoaXMgcm91bmQuoNkqIE9ubHkgZXhpc3RzIHdoZW4gW2BTbmFwc2hvdGBdIGlzIHByZXNlbnQu3gAFpG5hbWWwU25hcHNob3RNZXRhZGF0Yahtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABpXBsYWluzQGbqGZhbGxiYWNrpDB4MDCkZG9jc5PZJiBUaGUgbWV0YWRhdGEgb2YgdGhlIFtgUm91bmRTbmFwc2hvdGBdoNkqIE9ubHkgZXhpc3RzIHdoZW4gW2BTbmFwc2hvdGBdIGlzIHByZXNlbnQu3gAFpG5hbWW5U2lnbmVkU3VibWlzc2lvbk5leHRJbmRleKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrqjB4MDAwMDAwMDCkZG9jc5nZQCBUaGUgbmV4dCBpbmRleCB0byBiZSBhc3NpZ25lZCB0byBhbiBpbmNvbWluZyBzaWduZWQgc3VibWlzc2lvbi6g2V0gRXZlcnkgYWNjZXB0ZWQgc3VibWlzc2lvbiBpcyBhc3NpZ25lZCBhIHVuaXF1ZSBpbmRleDsgdGhhdCBpbmRleCBpcyBib3VuZCB0byB0aGF0IHBhcnRpY3VsYXLZWSBzdWJtaXNzaW9uIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGVsZWN0aW9uLiBPbiBlbGVjdGlvbiBmaW5hbGl6YXRpb24sIHRoZSBuZXh0IGluZGV4IGlzrCByZXNldCB0byAwLqDZWiBXZSBjYW4ndCBqdXN0IHVzZSBgU2lnbmVkU3VibWlzc2lvbkluZGljZXMubGVuKClgLCBiZWNhdXNlIHRoYXQncyBhIGJvdW5kZWQgc2V0OyBwYXN0IGl0c9lWIGNhcGFjaXR5LCBpdCB3aWxsIHNpbXBseSBzYXR1cmF0ZS4gV2UgY2FuJ3QganVzdCBpdGVyYXRlIG92ZXIgYFNpZ25lZFN1Ym1pc3Npb25zTWFwYCzZPSBiZWNhdXNlIGl0ZXJhdGlvbiBpcyBzbG93LiBJbnN0ZWFkLCB3ZSBzdG9yZSB0aGUgdmFsdWUgaGVyZS7eAAWkbmFtZbdTaWduZWRTdWJtaXNzaW9uSW5kaWNlc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW7NAjKoZmFsbGJhY2ukMHgwMKRkb2NzltlbIEEgc29ydGVkLCBib3VuZGVkIHZlY3RvciBvZiBgKHNjb3JlLCBibG9ja19udW1iZXIsIGluZGV4KWAsIHdoZXJlIGVhY2ggYGluZGV4YCBwb2ludHMgdG8gYb4gdmFsdWUgaW4gYFNpZ25lZFN1Ym1pc3Npb25zYC6g2VwgV2UgbmV2ZXIgbmVlZCB0byBwcm9jZXNzIG1vcmUgdGhhbiBhIHNpbmdsZSBzaWduZWQgc3VibWlzc2lvbiBhdCBhIHRpbWUuIFNpZ25lZCBzdWJtaXNzaW9uc9ldIGNhbiBiZSBxdWl0ZSBsYXJnZSwgc28gd2UncmUgd2lsbGluZyB0byBwYXkgdGhlIGNvc3Qgb2YgbXVsdGlwbGUgZGF0YWJhc2UgYWNjZXNzZXMgdG8gYWNjZXNz2UggdGhlbSBvbmUgYXQgYSB0aW1lIGluc3RlYWQgb2YgcmVhZGluZyBhbmQgZGVjb2RpbmcgYWxsIG9mIHRoZW0gYXQgb25jZS7eAAWkbmFtZbRTaWduZWRTdWJtaXNzaW9uc01hcKhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5BKV2YWx1Zc0CNahmYWxsYmFja6QweDAwpGRvY3OXvSBVbmNoZWNrZWQsIHNpZ25lZCBzb2x1dGlvbnMuoNlaIFRvZ2V0aGVyIHdpdGggYFN1Ym1pc3Npb25JbmRpY2VzYCwgdGhpcyBzdG9yZXMgYSBib3VuZGVkIHNldCBvZiBgU2lnbmVkU3VibWlzc2lvbnNgIHdoaWxl2TsgYWxsb3dpbmcgdXMgdG8ga2VlcCBvbmx5IGEgc2luZ2xlIG9uZSBpbiBtZW1vcnkgYXQgYSB0aW1lLqDZWiBUd294IG5vdGU6IHRoZSBrZXkgb2YgdGhlIG1hcCBpcyBhbiBhdXRvLWluY3JlbWVudGluZyBpbmRleCB3aGljaCB1c2VycyBjYW5ub3QgaW5zcGVjdCBvctk9IGFmZmVjdDsgd2Ugc2hvdWxkbid0IG5lZWQgYSBjcnlwdG9ncmFwaGljYWxseSBzZWN1cmUgaGFzaGVyLt4ABaRuYW1ltU1pbmltdW1VbnRydXN0ZWRTY29yZahtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABpXBsYWluzEuoZmFsbGJhY2ukMHgwMKRkb2NzlNlXIFRoZSBtaW5pbXVtIHNjb3JlIHRoYXQgZWFjaCAndW50cnVzdGVkJyBzb2x1dGlvbiBtdXN0IGF0dGFpbiBpbiBvcmRlciB0byBiZSBjb25zaWRlcmVkqiBmZWFzaWJsZS6g2S4gQ2FuIGJlIHNldCB2aWEgYHNldF9taW5pbXVtX3VudHJ1c3RlZF9zY29yZWAupWNhbGxz3gABpHR5cGXNAWamZXZlbnRz3gABpHR5cGXMSaljb25zdGFudHPcABTeAASkbmFtZa1VbnNpZ25lZFBoYXNlpHR5cGUEpXZhbHVlqjB4OTYwMDAwMDCkZG9jc5HZICBEdXJhdGlvbiBvZiB0aGUgdW5zaWduZWQgcGhhc2Uu3gAEpG5hbWWrU2lnbmVkUGhhc2WkdHlwZQSldmFsdWWqMHg5NjAwMDAwMKRkb2Nzkb4gRHVyYXRpb24gb2YgdGhlIHNpZ25lZCBwaGFzZS7eAASkbmFtZbVCZXR0ZXJTaWduZWRUaHJlc2hvbGSkdHlwZSKldmFsdWWqMHgwMDAwMDAwMKRkb2NzktlTIFRoZSBtaW5pbXVtIGFtb3VudCBvZiBpbXByb3ZlbWVudCB0byB0aGUgc29sdXRpb24gc2NvcmUgdGhhdCBkZWZpbmVzIGEgc29sdXRpb24gYXO+ICJiZXR0ZXIiIGluIHRoZSBTaWduZWQgcGhhc2Uu3gAEpG5hbWW3QmV0dGVyVW5zaWduZWRUaHJlc2hvbGSkdHlwZSKldmFsdWWqMHgyMGExMDcwMKRkb2NzktlTIFRoZSBtaW5pbXVtIGFtb3VudCBvZiBpbXByb3ZlbWVudCB0byB0aGUgc29sdXRpb24gc2NvcmUgdGhhdCBkZWZpbmVzIGEgc29sdXRpb24gYXPZICAiYmV0dGVyIiBpbiB0aGUgVW5zaWduZWQgcGhhc2Uu3gAEpG5hbWWuT2ZmY2hhaW5SZXBlYXSkdHlwZQSldmFsdWWqMHgyNTAwMDAwMKRkb2NzlNktIFRoZSByZXBlYXQgdGhyZXNob2xkIG9mIHRoZSBvZmZjaGFpbiB3b3JrZXIuoNlYIEZvciBleGFtcGxlLCBpZiBpdCBpcyA1LCB0aGF0IG1lYW5zIHRoYXQgYXQgbGVhc3QgNSBibG9ja3Mgd2lsbCBlbGFwc2UgYmV0d2VlbiBhdHRlbXB0c9khIHRvIHN1Ym1pdCB0aGUgd29ya2VyJ3Mgc29sdXRpb24u3gAEpG5hbWWvTWluZXJUeFByaW9yaXR5pHR5cGUKpXZhbHVlsjB4ZmZmZmZmZmZmZmZmZmY3ZqRkb2NzkdlJIFRoZSBwcmlvcml0eSBvZiB0aGUgdW5zaWduZWQgdHJhbnNhY3Rpb24gc3VibWl0dGVkIGluIHRoZSB1bnNpZ25lZC1waGFzZd4ABKRuYW1ltFNpZ25lZE1heFN1Ym1pc3Npb25zpHR5cGUEpXZhbHVlqjB4ODAwMDAwMDCkZG9jc5fZOSBNYXhpbXVtIG51bWJlciBvZiBzaWduZWQgc3VibWlzc2lvbnMgdGhhdCBjYW4gYmUgcXVldWVkLqDZVSBJdCBpcyBiZXN0IHRvIGF2b2lkIGFkanVzdGluZyB0aGlzIGR1cmluZyBhbiBlbGVjdGlvbiwgYXMgaXQgaW1wYWN0cyBkb3duc3RyZWFtIGRhdGHZWSBzdHJ1Y3R1cmVzLiBJbiBwYXJ0aWN1bGFyLCBgU2lnbmVkU3VibWlzc2lvbkluZGljZXM8VD5gIGlzIGJvdW5kZWQgb24gdGhpcyB2YWx1ZS4gSWYgeW912T0gdXBkYXRlIHRoaXMgdmFsdWUgZHVyaW5nIGFuIGVsZWN0aW9uLCB5b3UgX211c3RfIGVuc3VyZSB0aGF02VMgYFNpZ25lZFN1Ym1pc3Npb25JbmRpY2VzLmxlbigpYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIG5ldyB2YWx1ZS4gT3RoZXJ3aXNlLNk8IGF0dGVtcHRzIHRvIHN1Ym1pdCBuZXcgc29sdXRpb25zIG1heSBjYXVzZSBhIHJ1bnRpbWUgcGFuaWMu3gAEpG5hbWWvU2lnbmVkTWF4V2VpZ2h0pHR5cGUIpXZhbHVl2SIweDBiODg0ZGJlNzY1ODAxMTNhMzcwM2QwYWQ3YTM3MGJkpGRvY3OV2SUgTWF4aW11bSB3ZWlnaHQgb2YgYSBzaWduZWQgc29sdXRpb24uoNlXIElmIFtgQ29uZmlnOjpNaW5lckNvbmZpZ2BdIGlzIGJlaW5nIGltcGxlbWVudGVkIHRvIHN1Ym1pdCBzaWduZWQgc29sdXRpb25zIChvdXRzaWRlIG9m2U8gdGhpcyBwYWxsZXQpLCB0aGVuIFtgTWluZXJDb25maWc6OnNvbHV0aW9uX3dlaWdodGBdIGlzIHVzZWQgdG8gY29tcGFyZSBhZ2FpbnN0rCB0aGlzIHZhbHVlLt4ABKRuYW1lsFNpZ25lZE1heFJlZnVuZHOkdHlwZQSldmFsdWWqMHgyMDAwMDAwMKRkb2NzkdlGIFRoZSBtYXhpbXVtIGFtb3VudCBvZiB1bmNoZWNrZWQgc29sdXRpb25zIHRvIHJlZnVuZCB0aGUgY2FsbCBmZWUgZm9yLt4ABKRuYW1lsFNpZ25lZFJld2FyZEJhc2WkdHlwZQaldmFsdWXZIjB4MDAxMGE1ZDRlODAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5HZIiBCYXNlIHJld2FyZCBmb3IgYSBzaWduZWQgc29sdXRpb27eAASkbmFtZbFTaWduZWREZXBvc2l0QmFzZaR0eXBlBqV2YWx1ZdkiMHgwMDIwNGFhOWQxMDEwMDAwMDAwMDAwMDAwMDAwMDAwMKRkb2NzkdkkIEJhc2UgZGVwb3NpdCBmb3IgYSBzaWduZWQgc29sdXRpb24u3gAEpG5hbWWxU2lnbmVkRGVwb3NpdEJ5dGWkdHlwZQaldmFsdWXZIjB4NTk3MzA3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5HZKCBQZXItYnl0ZSBkZXBvc2l0IGZvciBhIHNpZ25lZCBzb2x1dGlvbi7eAASkbmFtZbNTaWduZWREZXBvc2l0V2VpZ2h0pHR5cGUGpXZhbHVl2SIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwpGRvY3OR2SogUGVyLXdlaWdodCBkZXBvc2l0IGZvciBhIHNpZ25lZCBzb2x1dGlvbi7eAASkbmFtZbFNYXhFbGVjdGluZ1ZvdGVyc6R0eXBlBKV2YWx1ZaoweGU0NTcwMDAwpGRvY3OT2VcgVGhlIG1heGltdW0gbnVtYmVyIG9mIGVsZWN0aW5nIHZvdGVycyB0byBwdXQgaW4gdGhlIHNuYXBzaG90LiBBdCB0aGUgbW9tZW50LCBzbmFwc2hvdHPZViBhcmUgb25seSBvdmVyIGEgc2luZ2xlIGJsb2NrLCBidXQgb25jZSBtdWx0aS1ibG9jayBlbGVjdGlvbnMgYXJlIGludHJvZHVjZWQgdGhleSB3aWxs2SEgdGFrZSBwbGFjZSBvdmVyIG11bHRpcGxlIGJsb2Nrcy7eAASkbmFtZbNNYXhFbGVjdGFibGVUYXJnZXRzpHR5cGXMRqV2YWx1ZaYweGZmZmakZG9jc5HZQCBUaGUgbWF4aW11bSBudW1iZXIgb2YgZWxlY3RhYmxlIHRhcmdldHMgdG8gcHV0IGluIHRoZSBzbmFwc2hvdC7eAASkbmFtZapNYXhXaW5uZXJzpHR5cGUEpXZhbHVlqjB4ZTgwMzAwMDCkZG9jc5TZTSBUaGUgbWF4aW11bSBudW1iZXIgb2Ygd2lubmVycyB0aGF0IGNhbiBiZSBlbGVjdGVkIGJ5IHRoaXMgYEVsZWN0aW9uUHJvdmlkZXJgsCBpbXBsZW1lbnRhdGlvbi6g2VQgTm90ZTogVGhpcyBtdXN0IGFsd2F5cyBiZSBncmVhdGVyIG9yIGVxdWFsIHRvIGBUOjpEYXRhUHJvdmlkZXI6OmRlc2lyZWRfdGFyZ2V0cygpYC7eAASkbmFtZa5NaW5lck1heExlbmd0aKR0eXBlBKV2YWx1ZaoweDAwMDAzNjAwpGRvY3OQ3gAEpG5hbWWuTWluZXJNYXhXZWlnaHSkdHlwZQildmFsdWXZIjB4MGI4ODRkYmU3NjU4MDExM2EzNzAzZDBhZDdhMzcwYmSkZG9jc5DeAASkbmFtZbVNaW5lck1heFZvdGVzUGVyVm90ZXKkdHlwZQSldmFsdWWqMHgxMDAwMDAwMKRkb2NzkN4ABKRuYW1lr01pbmVyTWF4V2lubmVyc6R0eXBlBKV2YWx1ZaoweGU4MDMwMDAwpGRvY3OQpmVycm9yc94AAaR0eXBlzQI2pWluZGV4GN4AB6RuYW1lqVZvdGVyTGlzdKdzdG9yYWdl3gACpnByZWZpeKlWb3Rlckxpc3SlaXRlbXOT3gAFpG5hbWWpTGlzdE5vZGVzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkApXZhbHVlzQI3qGZhbGxiYWNrpDB4MDCkZG9jc5PZICBBIHNpbmdsZSBub2RlLCB3aXRoaW4gc29tZSBiYWcuoNlBIE5vZGVzIHN0b3JlIGxpbmtzIGZvcndhcmQgYW5kIGJhY2sgd2l0aGluIHRoZWlyIHJlc3BlY3RpdmUgYmFncy7eAAWkbmFtZbNDb3VudGVyRm9yTGlzdE5vZGVzqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbgSoZmFsbGJhY2uqMHgwMDAwMDAwMKRkb2NzkdkrQ291bnRlciBmb3IgdGhlIHJlbGF0ZWQgY291bnRlZCBzdG9yYWdlIG1hcN4ABaRuYW1lqExpc3RCYWdzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkKpXZhbHVlzQI4qGZhbGxiYWNrpDB4MDCkZG9jc5O5IEEgYmFnIHN0b3JlZCBpbiBzdG9yYWdlLqDZRiBTdG9yZXMgYSBgQmFnYCBzdHJ1Y3QsIHdoaWNoIHN0b3JlcyBoZWFkIGFuZCB0YWlsIHBvaW50ZXJzIHRvIGl0c2VsZi6lY2FsbHPeAAGkdHlwZc0BoKZldmVudHPeAAGkdHlwZcxOqWNvbnN0YW50c5HeAASkbmFtZa1CYWdUaHJlc2hvbGRzpHR5cGXNAjmldmFsdWXaDIYweDIxMDMwMGU0MGI1NDAyMDAwMDAwZjM5ZTgwOTcwMjAwMDAwMGE4YjE5N2UyMDIwMDAwMDA5NDQ5MmUzNjAzMDAwMDAwMjc5YzNhOTMwMzAwMDAwMDAzYmNjZWZhMDMwMDAwMDA0MmMwMWI2ZTA0MDAwMDAwMWI0Nzc1ZWUwNDAwMDAwMDM4NWU1NTdkMDUwMDAwMDA0NmRjNjAxYzA2MDAwMDAwODkzODZjY2QwNjAwMDAwMGI2ZWU4MDkyMDcwMDAwMDBmZTdlZTM2ZDA4MDAwMDAwZTgxYjFhNjIwOTAwMDAwMGIwMTlmNDcxMGEwMDAwMDAxMDM1OTJhMDBiMDAwMDAwY2ZjOTZmZjEwYzAwMDAwMDQxMTQ2ZDY4MGUwMDAwMDBlNzliZGEwOTEwMDAwMDAwY2VlODg1ZGExMTAwMDAwMDI4YTljN2RmMTMwMDAwMDBiYjcwOTMxZjE2MDAwMDAwOGU0MDg5YTAxODAwMDAwMDgxMGEwOTZhMWIwMDAwMDAzNjZhNDg4NDFlMDAwMDAwNWJkMzZhZjgyMTAwMDAwMDgwN2M5Y2QwMjUwMDAwMDBjOTU1MzAxODJhMDAwMDAwYmQ2M2MxZGIyZTAwMDAwMDcxZTA1NzI5MzQwMDAwMDA2ODkwOTIxMDNhMDAwMDAwZWRjNGQ0YTI0MDAwMDAwMDY5OTM3OWYzNDcwMDAwMDA4ZmQ4MGMxODUwMDAwMDAwNGJhZjhhMjg1OTAwMDAwMDZhMTZhNjNmNjMwMDAwMDAwOTk1MTc3YjZlMDAwMDAwNzhjNWY0ZmI3YTAwMDAwMDYyYzgxMWU3ODgwMDAwMDA1MWJmNmQ2NTk4MDAwMDAwMDQ4ZWFiYTRhOTAwMDAwMDU0NDY5OGQ3YmMwMDAwMDA5MWNhYzAzNmQyMDAwMDAwMTc1ZjE4MDFlYTAwMDAwMGJkMTViMjdjMDQwMTAwMDA0MzM1OGZmNzIxMDEwMDAwYjhmYzg0Yzg0MjAxMDAwMDk5NjczYzUwNjcwMTAwMDAwN2U0NGVmYThmMDEwMDAwYjM0MTgzM2ViZDAxMDAwMDAyN2YyZWEyZWYwMTAwMDA5ODgzYmNiOTI3MDIwMDAwMTY0ZDY1MmE2NjAyMDAwMGI0OTUxM2FjYWIwMjAwMDAyZDhlODIwYmY5MDIwMDAwYTFlNjk4MmM0ZjAzMDAwMGE2MTYwODBkYWYwMzAwMDBjYzlkMzdjNzE5MDQwMDAwYTBkNTg0OTU5MDA0MDAwMDQyZTdlMGQ1MTQwNTAwMDAwMjhjZDcwZGE4MDUwMDAwMGY3NTBhZWY0YjA2MDAwMGVhOGQyZTVjMDIwNzAwMDBjM2NiOTk2ZWNkMDcwMDAwYjFlNTcxN2NhZjA4MDAwMGFhMmI4ZTFmYWIwOTAwMDBiNWMxMjAzZGMzMGEwMDAwMjZkMDNkMGVmYjBiMDAwMDcwYzc1OTI5NTYwZDAwMDBlYmFkZGE4Y2Q4MGUwMDAwZjc5N2RiYWE4NjEwMDAwMGNmZjA0NDc2NjUxMjAwMDAxZjI2NjA3MTdhMTQwMDAwMDlhNjExYmVjYjE2MDAwMDFkZmJlODJmNjAxOTAwMDA5NDNhM2M2MDNmMWMwMDAwOGFmZTg5YzQ3MTFmMDAwMGNlZDk2M2M3MDAyMzAwMDAwM2E5MmFlNGY2MjYwMDAwZmU3MmVlYzU1ZjJiMDAwMDM2YzljYzY5NDgzMDAwMDBkYWUzMzI0NWJmMzUwMDAwMDYyYTc0NzBkNDNiMDAwMDdjOTczMmQ2OTk0MjAwMDA4NGEzMjQ2ODIzNGEwMDAwNTcxYWQ0NTk4NzUyMDAwMGU3ZjEwMjYyZGU1YjAwMDAwZGI4NzYwMzQ0NjYwMDAwYWUwNDAxZGVkNjcxMDAwMDdkOWViMzA4Yjk3ZTAwMDAxZTA0NGE3NjEwOGQwMDAwM2ExZGYwNjQwNzlkMDAwMGUwNGZhZmRhY2NhZTAwMDA1Njc5ZjAyZjk1YzIwMDAwOTVjM2FhYTk5YWQ4MDAwMDk2N2MwNTI1MWVmMTAwMDAxNzdhNjZkNjY3MGMwMTAwMjhjYjFmMWVjODJhMDEwMGZhMjgyZjc1OTg0YzAxMDBkNTdkYzg3NDNjNzIwMTAwN2RjNGIzZmIyMjljMDEwMDM2NWNkZTc0YzdjYTAxMDA5ZWI4ZTE0MmIzZmUwMTAwMGMzMWFlNTQ3ZjM4MDIwMDVmZTEwMWU4ZDU3ODAyMDA2MzczZGE3ZTc0YzAwMjAwNTFkMWE2MGQyZTEwMDMwMGM3ZTlhNDY4ZWQ2ODAzMDA2MWMwOTFmN2I3Y2IwMzAwYmYyN2ExYjdiMDM5MDQwMDdiMTQ5OTk0MWJiNDA0MDA4NTIzZWQyMjYxM2MwNTAwNjlhNWQ0YzUxMmQ0MDUwMGVjOGM5MzRkZWY3YzA2MDBmNWFhOTAxYmU4MzgwNzAwOGNiZTVkZGIyNjBhMDgwMDAyOTc4Y2UxMTNmMzA4MDBmYWUzMTQ0MzVkZjYwOTAwZGRmMTJkYmFmZTE2MGIwMDJlYmFkYzZmNGE1ODBjMDAwYzU1MThjNGYyYmQwZDAwZjBiYjU0MzExNTRjMGYwMDQ5OGU4NjZiNDYwNzExMDBiMmMxNTNkZTlmZjQxMjAwMjc4YTJmYjJjZTE5MTUwMGIyMzk5Zjg0MjQ3ZDE3MDBlMTk5ZTcwNGFhMjUxYTAwYmExM2Y1YWIzMzFiMWQwMDI2NDc4NWNjNzg2NjIwMDA4OGJmODAzZjJkMTEyNDAwMWM5ODIzZjgxZDI2MjgwMGNjYzQyMmQ0NTBiMTJjMDBmMDg4ODIwNTI4YzAzMTAwMzY3YzZkN2U4OTYxMzcwMDZlOTMyOWQzMGFhNjNkMDA4Y2JjNmMxMzIyYTA0NDAwMDA3MGYzMmE1YzY0NGMwMGI0M2I4NDY5OTkwOTU1MDA4MGI0YWJlNDUwYTk1ZTAwYTBjZGE5NzlkYjVmNjkwMDRjYzI3ZjRjYzc0Yzc1MDBkMGFjMGViYTM0OTM4MjAwNDgzZTBjY2YzZDVhOTEwMDY4YzY4ZTc0NjljZGExMDAyODFlNmZhNTJiMWRiNDAwOThhOTIzMjY3NDdmYzgwMGYwOWE3NDYzNGQzMGRmMDA4MGNkZmM0YjhkNzJmODAwOTAxNDYwMmQ5YTkwMTQwMWYwYjQxM2Q5NDVkZDMzMDEyMDk3MzU5NmMxYjQ1NjAxNTBkY2ZiYWVhZDdkN2QwMWUwMTE5OGI5NDdhYWE4MDEzMGM3ZWUxNmJiYjlkODAxMjA2ZTQ4ODY5NzM5MGUwMmEwZmE0YjFkNzJjNzQ5MDJjMDExNzE3MGI1MTI4YzAyODA4YTE2NDNhNmRlZDUwMmMwZjgyM2IxYTIwNDI4MDM4MGFmNTk3MGEyNzY4MzAzYzA2ZjJkODdmZjQxZTkwMzQwOTM3ZmFjOGY5MjVhMDQwMDkxMDk3MTE3YjZkODA0NDAwZmRmNWIyMTIwNjUwNTAwNDljMTQ5NDQ2ZTAxMDYwMDhlYmNhNmU1NmNhZjA2MDA1OTU2ODY4NTFjNzEwNzgwNjhhYTM0YTRiNzQ4MDg4MGExZTI5ZTUyYjkzODA5MDBiZGFiZTg4MGU0NDMwYTAwMmE3MmI0MjA0YzZkMGI4MGYxYzAxMzMzNWNiODBjMDBhMDNjY2JkY2UzMjgwZTgwYjg2MjlhOWUyMGMzMGYwMGRlNTY5M2QyY2E4YjExMDA1ZDdmNGM5MzIzODgxMzAwMWE4N2RmMzUwNGJlMTUwMGE3Y2U0Yjg0ZWYzMzE4MDAwMTEwZmJlYTI0ZjExYTAwODAyYWU1ZDFiNWZkMWQwMDIyYTEzNDYwOWQ2MjIxMDA0NDIxNmJmMGRhMjkyNTAwMDI2MWYxODI4ZjVlMjkwMDY2MjBjZjg1MWUwZDJlMDA4NDEwMTk1MjUyNDMzMzAwYTBjMThmY2E4NDEwMzkwMDI2YWQxNDkzY2M4NTNmMDBkMGNkMjQ2NjJmYjY0NjAwOWNlMTlhMWNkYWI2NGUwMDU4Y2NjMjBjNWY5ZjU3MDAyMDBhNzU3OGZiODk2MTAwMzBiYmJiZDZlNDkzNmMwMDYwY2JhN2RjOWVkZDc4MDBiODNiYzA0MjViOGI4NjAwYjg4NjIzNjE2NGM1OTUwMGY4ZjE1ZmRjOTNiOGE2MDAyMDZhOTFjMGQ2OTZiOTAwZDhlZmUyOGZjMDk3Y2UwMDY4Mjk5YmY1MmVmOWU1ZmZmZmZmZmZmZmZmZmZmZqRkb2Nz3AAr2TQgVGhlIGxpc3Qgb2YgdGhyZXNob2xkcyBzZXBhcmF0aW5nIHRoZSB2YXJpb3VzIGJhZ3MuoNlSIElkcyBhcmUgc2VwYXJhdGVkIGludG8gdW5zb3J0ZWQgYmFncyBhY2NvcmRpbmcgdG8gdGhlaXIgc2NvcmUuIFRoaXMgc3BlY2lmaWVzIHRoZdlYIHRocmVzaG9sZHMgc2VwYXJhdGluZyB0aGUgYmFncy4gQW4gaWQncyBiYWcgaXMgdGhlIGxhcmdlc3QgYmFnIGZvciB3aGljaCB0aGUgaWQncyBzY29yZdkuIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBpdHMgdXBwZXIgdGhyZXNob2xkLqDZWSBXaGVuIGlkcyBhcmUgaXRlcmF0ZWQsIGhpZ2hlciBiYWdzIGFyZSBpdGVyYXRlZCBjb21wbGV0ZWx5IGJlZm9yZSBsb3dlciBiYWdzLiBUaGlzIG1lYW5z2VYgdGhhdCBpdGVyYXRpb24gaXMgX3NlbWktc29ydGVkXzogaWRzIG9mIGhpZ2hlciBzY29yZSB0ZW5kIHRvIGNvbWUgYmVmb3JlIGlkcyBvZiBsb3dlctlLIHNjb3JlLCBidXQgcGVlciBpZHMgd2l0aGluIGEgcGFydGljdWxhciBiYWcgYXJlIHNvcnRlZCBpbiBpbnNlcnRpb24gb3JkZXIuoLogIyBFeHByZXNzaW5nIHRoZSBjb25zdGFudKDZUyBUaGlzIGNvbnN0YW50IG11c3QgYmUgc29ydGVkIGluIHN0cmljdGx5IGluY3JlYXNpbmcgb3JkZXIuIER1cGxpY2F0ZSBpdGVtcyBhcmUgbm90qyBwZXJtaXR0ZWQuoNlQIFRoZXJlIGlzIGFuIGltcGxpZWQgdXBwZXIgbGltaXQgb2YgYFNjb3JlOjpNQVhgOyB0aGF0IHZhbHVlIGRvZXMgbm90IG5lZWQgdG8gYmXZSCBzcGVjaWZpZWQgd2l0aGluIHRoZSBiYWcuIEZvciBhbnkgdHdvIHRocmVzaG9sZCBsaXN0cywgaWYgb25lIGVuZHMgd2l0aNlMIGBTY29yZTo6TUFYYCwgdGhlIG90aGVyIG9uZSBkb2VzIG5vdCwgYW5kIHRoZXkgYXJlIG90aGVyd2lzZSBlcXVhbCwgdGhlIHR3b78gbGlzdHMgd2lsbCBiZWhhdmUgaWRlbnRpY2FsbHkuoK4gIyBDYWxjdWxhdGlvbqDZVSBJdCBpcyByZWNvbW1lbmRlZCB0byBnZW5lcmF0ZSB0aGUgc2V0IG9mIHRocmVzaG9sZHMgaW4gYSBnZW9tZXRyaWMgc2VyaWVzLCBzdWNoIHRoYXTZUCB0aGVyZSBleGlzdHMgc29tZSBjb25zdGFudCByYXRpbyBzdWNoIHRoYXQgYHRocmVzaG9sZFtrICsgMV0gPT0gKHRocmVzaG9sZFtrXSAq2TQgY29uc3RhbnRfcmF0aW8pLm1heCh0aHJlc2hvbGRba10gKyAxKWAgZm9yIGFsbCBga2AuoNlWIFRoZSBoZWxwZXJzIGluIHRoZSBgL3V0aWxzL2ZyYW1lL2dlbmVyYXRlLWJhZ3NgIG1vZHVsZSBjYW4gc2ltcGxpZnkgdGhpcyBjYWxjdWxhdGlvbi6gqyAjIEV4YW1wbGVzoNlUIC0gSWYgYEJhZ1RocmVzaG9sZHM6OmdldCgpLmlzX2VtcHR5KClgLCB0aGVuIGFsbCBpZHMgYXJlIHB1dCBpbnRvIHRoZSBzYW1lIGJhZywgYW5k2SwgICBpdGVyYXRpb24gaXMgc3RyaWN0bHkgaW4gaW5zZXJ0aW9uIG9yZGVyLtlYIC0gSWYgYEJhZ1RocmVzaG9sZHM6OmdldCgpLmxlbigpID09IDY0YCwgYW5kIHRoZSB0aHJlc2hvbGRzIGFyZSBkZXRlcm1pbmVkIGFjY29yZGluZyB0b9lEICAgdGhlIHByb2NlZHVyZSBnaXZlbiBhYm92ZSwgdGhlbiB0aGUgY29uc3RhbnQgcmF0aW8gaXMgZXF1YWwgdG8gMi7ZWSAtIElmIGBCYWdUaHJlc2hvbGRzOjpnZXQoKS5sZW4oKSA9PSAyMDBgLCBhbmQgdGhlIHRocmVzaG9sZHMgYXJlIGRldGVybWluZWQgYWNjb3JkaW5nIHRv2VYgICB0aGUgcHJvY2VkdXJlIGdpdmVuIGFib3ZlLCB0aGVuIHRoZSBjb25zdGFudCByYXRpbyBpcyBhcHByb3hpbWF0ZWx5IGVxdWFsIHRvIDEuMjQ4LtlYIC0gSWYgdGhlIHRocmVzaG9sZCBsaXN0IGJlZ2lucyBgWzEsIDIsIDMsIC4uLl1gLCB0aGVuIGFuIGlkIHdpdGggc2NvcmUgMCBvciAxIHdpbGwgZmFsbNk8ICAgaW50byBiYWcgMCwgYW4gaWQgd2l0aCBzY29yZSAyIHdpbGwgZmFsbCBpbnRvIGJhZyAxLCBldGMuoKwgIyBNaWdyYXRpb26g2VggSW4gdGhlIGV2ZW50IHRoYXQgdGhpcyBsaXN0IGV2ZXIgY2hhbmdlcywgYSBjb3B5IG9mIHRoZSBvbGQgYmFncyBsaXN0IG11c3QgYmUgcmV0YWluZWQu2VcgV2l0aCB0aGF0IGBMaXN0OjptaWdyYXRlYCBjYW4gYmUgY2FsbGVkLCB3aGljaCB3aWxsIHBlcmZvcm0gdGhlIGFwcHJvcHJpYXRlIG1pZ3JhdGlvbi6mZXJyb3Jz3gABpHR5cGXNAjqlaW5kZXgZ3gAHpG5hbWWvTm9taW5hdGlvblBvb2xzp3N0b3JhZ2XeAAKmcHJlZml4r05vbWluYXRpb25Qb29sc6VpdGVtc9wAFN4ABaRuYW1lq01pbkpvaW5Cb25kqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbgaoZmFsbGJhY2vZIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5HZJyBNaW5pbXVtIGFtb3VudCB0byBib25kIHRvIGpvaW4gYSBwb29sLt4ABaRuYW1lrU1pbkNyZWF0ZUJvbmSobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluBqhmYWxsYmFja9kiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMKRkb2Nzl9koIE1pbmltdW0gYm9uZCByZXF1aXJlZCB0byBjcmVhdGUgYSBwb29sLqDZWSBUaGlzIGlzIHRoZSBhbW91bnQgdGhhdCB0aGUgZGVwb3NpdG9yIG11c3QgcHV0IGFzIHRoZWlyIGluaXRpYWwgc3Rha2UgaW4gdGhlIHBvb2wsIGFzIGFu2SIgaW5kaWNhdGlvbiBvZiAic2tpbiBpbiB0aGUgZ2FtZSIuoNlaIFRoaXMgaXMgdGhlIHZhbHVlIHRoYXQgd2lsbCBhbHdheXMgZXhpc3QgaW4gdGhlIHN0YWtpbmcgbGVkZ2VyIG9mIHRoZSBwb29sIGJvbmRlZCBhY2NvdW502SAgd2hpbGUgYWxsIG90aGVyIGFjY291bnRzIGxlYXZlLt4ABaRuYW1lqE1heFBvb2xzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrpDB4MDCkZG9jc5LZWiBNYXhpbXVtIG51bWJlciBvZiBub21pbmF0aW9uIHBvb2xzIHRoYXQgY2FuIGV4aXN0LiBJZiBgTm9uZWAsIHRoZW4gYW4gdW5ib3VuZGVkIG51bWJlciBvZrEgcG9vbHMgY2FuIGV4aXN0Lt4ABaRuYW1lrk1heFBvb2xNZW1iZXJzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrpDB4MDCkZG9jc5LZUiBNYXhpbXVtIG51bWJlciBvZiBtZW1iZXJzIHRoYXQgY2FuIGV4aXN0IGluIHRoZSBzeXN0ZW0uIElmIGBOb25lYCwgdGhlbiB0aGUgY291bnTZLiBtZW1iZXJzIGFyZSBub3QgYm91bmQgb24gYSBzeXN0ZW0gd2lkZSBiYXNpcy7eAAWkbmFtZbVNYXhQb29sTWVtYmVyc1BlclBvb2yobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaVwbGFpbgSoZmFsbGJhY2ukMHgwMKRkb2NzktlQIE1heGltdW0gbnVtYmVyIG9mIG1lbWJlcnMgdGhhdCBtYXkgYmVsb25nIHRvIHBvb2wuIElmIGBOb25lYCwgdGhlbiB0aGUgY291bnQgb2bZKiBtZW1iZXJzIGlzIG5vdCBib3VuZCBvbiBhIHBlciBwb29sIGJhc2lzLt4ABaRuYW1ls0dsb2JhbE1heENvbW1pc3Npb26obW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaVwbGFpbiKoZmFsbGJhY2ukMHgwMKRkb2Nzk9laIFRoZSBtYXhpbXVtIGNvbW1pc3Npb24gdGhhdCBjYW4gYmUgY2hhcmdlZCBieSBhIHBvb2wuIFVzZWQgb24gY29tbWlzc2lvbiBwYXlvdXRzIHRvIGJvdW5k2UkgcG9vbCBjb21taXNzaW9ucyB0aGF0IGFyZSA+IGBHbG9iYWxNYXhDb21taXNzaW9uYCwgbmVjZXNzYXJ5IGlmIGEgZnV0dXJl2UMgYEdsb2JhbE1heENvbW1pc3Npb25gIGlzIGxvd2VyIHRoYW4gc29tZSBjdXJyZW50IHBvb2wgY29tbWlzc2lvbnMu3gAFpG5hbWWrUG9vbE1lbWJlcnOobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tleQCldmFsdWXNAjyoZmFsbGJhY2ukMHgwMKRkb2Nzk7AgQWN0aXZlIG1lbWJlcnMuoNk0IFRXT1gtTk9URTogU0FGRSBzaW5jZSBgQWNjb3VudElkYCBpcyBhIHNlY3VyZSBoYXNoLt4ABaRuYW1ltUNvdW50ZXJGb3JQb29sTWVtYmVyc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrqjB4MDAwMDAwMDCkZG9jc5HZK0NvdW50ZXIgZm9yIHRoZSByZWxhdGVkIGNvdW50ZWQgc3RvcmFnZSBtYXDeAAWkbmFtZatCb25kZWRQb29sc6htb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5BKV2YWx1Zc0CQahmYWxsYmFja6QweDAwpGRvY3ORuiBTdG9yYWdlIGZvciBib25kZWQgcG9vbHMu3gAFpG5hbWW1Q291bnRlckZvckJvbmRlZFBvb2xzqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbgSoZmFsbGJhY2uqMHgwMDAwMDAwMKRkb2NzkdkrQ291bnRlciBmb3IgdGhlIHJlbGF0ZWQgY291bnRlZCBzdG9yYWdlIG1hcN4ABaRuYW1lq1Jld2FyZFBvb2xzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkEpXZhbHVlzQJGqGZhbGxiYWNrpDB4MDCkZG9jc5LZXSBSZXdhcmQgcG9vbHMuIFRoaXMgaXMgd2hlcmUgdGhlcmUgcmV3YXJkcyBmb3IgZWFjaCBwb29sIGFjY3VtdWxhdGUuIFdoZW4gYSBtZW1iZXJzIHBheW91dCBpc9lWIGNsYWltZWQsIHRoZSBiYWxhbmNlIGNvbWVzIG91dCBmbyB0aGUgcmV3YXJkIHBvb2wuIEtleWVkIGJ5IHRoZSBib25kZWQgcG9vbHMgYWNjb3VudC7eAAWkbmFtZbVDb3VudGVyRm9yUmV3YXJkUG9vbHOobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluBKhmYWxsYmFja6oweDAwMDAwMDAwpGRvY3OR2StDb3VudGVyIGZvciB0aGUgcmVsYXRlZCBjb3VudGVkIHN0b3JhZ2UgbWFw3gAFpG5hbWWvU3ViUG9vbHNTdG9yYWdlqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkEpXZhbHVlzQJHqGZhbGxiYWNrpDB4MDCkZG9jc5LZRiBHcm91cHMgb2YgdW5ib25kaW5nIHBvb2xzLiBFYWNoIGdyb3VwIG9mIHVuYm9uZGluZyBwb29scyBiZWxvbmdzIHRvIGHZSiBib25kZWQgcG9vbCwgaGVuY2UgdGhlIG5hbWUgc3ViLXBvb2xzLiBLZXllZCBieSB0aGUgYm9uZGVkIHBvb2xzIGFjY291bnQu3gAFpG5hbWW5Q291bnRlckZvclN1YlBvb2xzU3RvcmFnZahtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrqjB4MDAwMDAwMDCkZG9jc5HZK0NvdW50ZXIgZm9yIHRoZSByZWxhdGVkIGNvdW50ZWQgc3RvcmFnZSBtYXDeAAWkbmFtZahNZXRhZGF0Yahtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkEpXZhbHVlzQJNqGZhbGxiYWNrpDB4MDCkZG9jc5G3IE1ldGFkYXRhIGZvciB0aGUgcG9vbC7eAAWkbmFtZbJDb3VudGVyRm9yTWV0YWRhdGGobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluBKhmYWxsYmFja6oweDAwMDAwMDAwpGRvY3OR2StDb3VudGVyIGZvciB0aGUgcmVsYXRlZCBjb3VudGVkIHN0b3JhZ2UgbWFw3gAFpG5hbWWqTGFzdFBvb2xJZKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrqjB4MDAwMDAwMDCkZG9jc5HZNCBFdmVyIGluY3JlYXNpbmcgbnVtYmVyIG9mIGFsbCBwb29scyBjcmVhdGVkIHNvIGZhci7eAAWkbmFtZbNSZXZlcnNlUG9vbElkTG9va3VwqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkApXZhbHVlBKhmYWxsYmFja6QweDAwpGRvY3OU2TcgQSByZXZlcnNlIGxvb2t1cCBmcm9tIHRoZSBwb29sJ3MgYWNjb3VudCBpZCB0byBpdHMgaWQuoNlVIFRoaXMgaXMgb25seSB1c2VkIGZvciBzbGFzaGluZy4gSW4gYWxsIG90aGVyIGluc3RhbmNlcywgdGhlIHBvb2wgaWQgaXMgdXNlZCwgYW5kIHRoZdkwIGFjY291bnRzIGFyZSBkZXRlcm1pbmlzdGljYWxseSBkZXJpdmVkIGZyb20gaXQu3gAFpG5hbWW9Q291bnRlckZvclJldmVyc2VQb29sSWRMb29rdXCobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluBKhmYWxsYmFja6oweDAwMDAwMDAwpGRvY3OR2StDb3VudGVyIGZvciB0aGUgcmVsYXRlZCBjb3VudGVkIHN0b3JhZ2UgbWFw3gAFpG5hbWWwQ2xhaW1QZXJtaXNzaW9uc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkApXZhbHVlzQGnqGZhbGxiYWNrpDB4MDCkZG9jc5HZQCBNYXAgZnJvbSBhIHBvb2wgbWVtYmVyIGFjY291bnQgdG8gdGhlaXIgb3B0ZWQgY2xhaW0gcGVybWlzc2lvbi6lY2FsbHPeAAGkdHlwZc0BoaZldmVudHPeAAGkdHlwZcxPqWNvbnN0YW50c5LeAASkbmFtZahQYWxsZXRJZKR0eXBlzQJOpXZhbHVlsjB4NzA3OTJmNmU2ZjcwNmM3M6Rkb2NzkdkhIFRoZSBub21pbmF0aW9uIHBvb2wncyBwYWxsZXQgaWQu3gAEpG5hbWWyTWF4UG9pbnRzVG9CYWxhbmNlpHR5cGUCpXZhbHVlpDB4MGGkZG9jc5zZRyBUaGUgbWF4aW11bSBwb29sIHBvaW50cy10by1iYWxhbmNlIHJhdGlvIHRoYXQgYW4gYG9wZW5gIHBvb2wgY2FuIGhhdmUuoNlVIFRoaXMgaXMgaW1wb3J0YW50IGluIHRoZSBldmVudCBzbGFzaGluZyB0YWtlcyBwbGFjZSBhbmQgdGhlIHBvb2wncyBwb2ludHMtdG8tYmFsYW5jZb8gcmF0aW8gYmVjb21lcyBkaXNwcm9wb3J0aW9uYWwuoNlZIE1vcmVvdmVyLCB0aGlzIHJlbGF0ZXMgdG8gdGhlIGBSZXdhcmRDb3VudGVyYCB0eXBlIGFzIHdlbGwsIGFzIHRoZSBhcml0aG1ldGljIG9wZXJhdGlvbnPZVSBhcmUgYSBmdW5jdGlvbiBvZiBudW1iZXIgb2YgcG9pbnRzLCBhbmQgYnkgc2V0dGluZyB0aGlzIHZhbHVlIHRvIGUuZy4gMTAsIHlvdSBlbnN1cmXZWSB0aGF0IHRoZSB0b3RhbCBudW1iZXIgb2YgcG9pbnRzIGluIHRoZSBzeXN0ZW0gYXJlIGF0IG1vc3QgMTAgdGltZXMgdGhlIHRvdGFsX2lzc3VhbmNlIG9m2ScgdGhlIGNoYWluLCBpbiB0aGUgYWJzb2x1dGUgd29yc2UgY2FzZS6g2VIgRm9yIGEgdmFsdWUgb2YgMTAsIHRoZSB0aHJlc2hvbGQgd291bGQgYmUgYSBwb29sIHBvaW50cy10by1iYWxhbmNlIHJhdGlvIG9mIDEwOjEu2UwgU3VjaCBhIHNjZW5hcmlvIHdvdWxkIGFsc28gYmUgdGhlIGVxdWl2YWxlbnQgb2YgdGhlIHBvb2wgYmVpbmcgOTAlIHNsYXNoZWQupmVycm9yc94AAaR0eXBlzQJPpWluZGV4Hd4AB6RuYW1lq0Zhc3RVbnN0YWtlp3N0b3JhZ2XeAAKmcHJlZml4q0Zhc3RVbnN0YWtlpWl0ZW1zlN4ABaRuYW1lpEhlYWSobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaVwbGFpbs0CUahmYWxsYmFja6QweDAwpGRvY3OR2TAgVGhlIGN1cnJlbnQgImhlYWQgb2YgdGhlIHF1ZXVlIiBiZWluZyB1bnN0YWtlZC7eAAWkbmFtZaVRdWV1Zahtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5AKV2YWx1ZQaoZmFsbGJhY2ukMHgwMKRkb2NzldkwIFRoZSBtYXAgb2YgYWxsIGFjY291bnRzIHdpc2hpbmcgdG8gYmUgdW5zdGFrZWQuoNlOIEtlZXBzIHRyYWNrIG9mIGBBY2NvdW50SWRgIHdpc2hpbmcgdG8gdW5zdGFrZSBhbmQgaXQncyBjb3JyZXNwb25kaW5nIGRlcG9zaXQuoNk0IFRXT1gtTk9URTogU0FGRSBzaW5jZSBgQWNjb3VudElkYCBpcyBhIHNlY3VyZSBoYXNoLt4ABaRuYW1lr0NvdW50ZXJGb3JRdWV1Zahtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrqjB4MDAwMDAwMDCkZG9jc5HZK0NvdW50ZXIgZm9yIHRoZSByZWxhdGVkIGNvdW50ZWQgc3RvcmFnZSBtYXDeAAWkbmFtZbNFcmFzVG9DaGVja1BlckJsb2NrqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbgSoZmFsbGJhY2uqMHgwMDAwMDAwMKRkb2NzltkjIE51bWJlciBvZiBlcmFzIHRvIGNoZWNrIHBlciBibG9jay6g2TIgSWYgc2V0IHRvIDAsIHRoaXMgcGFsbGV0IGRvZXMgYWJzb2x1dGVseSBub3RoaW5nLqDZVyBCYXNlZCBvbiB0aGUgYW1vdW50IG9mIHdlaWdodCBhdmFpbGFibGUgYXQgYG9uX2lkbGVgLCB1cCB0byB0aGlzIG1hbnkgZXJhcyBvZiBhIHNpbmdsZbwgbm9taW5hdG9yIG1pZ2h0IGJlIGNoZWNrZWQupWNhbGxz3gABpHR5cGXNAaimZXZlbnRz3gABpHR5cGXMVKljb25zdGFudHOR3gAEpG5hbWWnRGVwb3NpdKR0eXBlBqV2YWx1ZdkiMHgwMDEwYTVkNGU4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMKRkb2NzktlZIERlcG9zaXQgdG8gdGFrZSBmb3IgdW5zdGFraW5nLCB0byBtYWtlIHN1cmUgd2UncmUgYWJsZSB0byBzbGFzaCB0aGUgaXQgaW4gb3JkZXIgdG8gY292ZXLZMCB0aGUgY29zdHMgb2YgcmVzb3VyY2VzIG9uIHVuc3VjY2Vzc2Z1bCB1bnN0YWtlLqZlcnJvcnPeAAGkdHlwZc0CVKVpbmRleB7eAAekbmFtZbBQYXJhY2hhaW5zT3JpZ2lup3N0b3JhZ2XApWNhbGxzwKZldmVudHPAqWNvbnN0YW50c5CmZXJyb3JzwKVpbmRleCneAAekbmFtZa1Db25maWd1cmF0aW9up3N0b3JhZ2XeAAKmcHJlZml4rUNvbmZpZ3VyYXRpb26laXRlbXOT3gAFpG5hbWWsQWN0aXZlQ29uZmlnqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbs0CVahmYWxsYmFja9oBeDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDAxMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwNjAwMDAwMDY0MDAwMDAwYzgwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDcwMGM4MTdhODA0MDIwMDQwMDEwMDAyMDAwMDAwMDIwMDAwMDCkZG9jc5HZMiBUaGUgYWN0aXZlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBjdXJyZW50IHNlc3Npb24u3gAFpG5hbWWuUGVuZGluZ0NvbmZpZ3OobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluzQJWqGZhbGxiYWNrpDB4MDCkZG9jc5e/IFBlbmRpbmcgY29uZmlndXJhdGlvbiBjaGFuZ2VzLqDZViBUaGlzIGlzIGEgbGlzdCBvZiBjb25maWd1cmF0aW9uIGNoYW5nZXMsIGVhY2ggd2l0aCBhIHNlc3Npb24gaW5kZXggYXQgd2hpY2ggaXQgc2hvdWxkrCBiZSBhcHBsaWVkLqDZWCBUaGUgbGlzdCBpcyBzb3J0ZWQgYXNjZW5kaW5nIGJ5IHNlc3Npb24gaW5kZXguIEFsc28sIHRoaXMgbGlzdCBjYW4gb25seSBjb250YWluIGF0IG1vc3TZPyAyIGl0ZW1zOiBmb3IgdGhlIG5leHQgc2Vzc2lvbiBhbmQgZm9yIHRoZSBgc2NoZWR1bGVkX3Nlc3Npb25gLt4ABaRuYW1ltkJ5cGFzc0NvbnNpc3RlbmN5Q2hlY2uobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluJahmYWxsYmFja6QweDAwpGRvY3OS2VggSWYgdGhpcyBpcyBzZXQsIHRoZW4gdGhlIGNvbmZpZ3VyYXRpb24gc2V0dGVycyB3aWxsIGJ5cGFzcyB0aGUgY29uc2lzdGVuY3kgY2hlY2tzLiBUaGlz2S0gaXMgbWVhbnQgdG8gYmUgdXNlZCBvbmx5IGFzIHRoZSBsYXN0IHJlc29ydC6lY2FsbHPeAAGkdHlwZc0BqaZldmVudHPAqWNvbnN0YW50c5CmZXJyb3Jz3gABpHR5cGXNAlilaW5kZXgq3gAHpG5hbWWrUGFyYXNTaGFyZWSnc3RvcmFnZd4AAqZwcmVmaXirUGFyYXNTaGFyZWSlaXRlbXOT3gAFpG5hbWWzQ3VycmVudFNlc3Npb25JbmRleKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrqjB4MDAwMDAwMDCkZG9jc5G7IFRoZSBjdXJyZW50IHNlc3Npb24gaW5kZXgu3gAFpG5hbWW2QWN0aXZlVmFsaWRhdG9ySW5kaWNlc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW7NAlmoZmFsbGJhY2ukMHgwMKRkb2NzktlCIEFsbCB0aGUgdmFsaWRhdG9ycyBhY3RpdmVseSBwYXJ0aWNpcGF0aW5nIGluIHBhcmFjaGFpbiBjb25zZW5zdXMu2SwgSW5kaWNlcyBhcmUgaW50byB0aGUgYnJvYWRlciB2YWxpZGF0b3Igc2V0Lt4ABaRuYW1ls0FjdGl2ZVZhbGlkYXRvcktleXOobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluzQJaqGZhbGxiYWNrpDB4MDCkZG9jc5LZYCBUaGUgcGFyYWNoYWluIGF0dGVzdGF0aW9uIGtleXMgb2YgdGhlIHZhbGlkYXRvcnMgYWN0aXZlbHkgcGFydGljaXBhdGluZyBpbiBwYXJhY2hhaW4gY29uc2Vuc3VzLtk8IFRoaXMgc2hvdWxkIGJlIHRoZSBzYW1lIGxlbmd0aCBhcyBgQWN0aXZlVmFsaWRhdG9ySW5kaWNlc2AupWNhbGxz3gABpHR5cGXNAaqmZXZlbnRzwKljb25zdGFudHOQpmVycm9yc8ClaW5kZXgr3gAHpG5hbWWtUGFyYUluY2x1c2lvbqdzdG9yYWdl3gACpnByZWZpeK1QYXJhSW5jbHVzaW9upWl0ZW1zk94ABaRuYW1ltUF2YWlsYWJpbGl0eUJpdGZpZWxkc6htb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5zQGzpXZhbHVlzQJbqGZhbGxiYWNrpDB4MDCkZG9jc5HZWSBUaGUgbGF0ZXN0IGJpdGZpZWxkIGZvciBlYWNoIHZhbGlkYXRvciwgcmVmZXJyZWQgdG8gYnkgdGhlaXIgaW5kZXggaW4gdGhlIHZhbGlkYXRvciBzZXQu3gAFpG5hbWWzUGVuZGluZ0F2YWlsYWJpbGl0eahtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5zFmldmFsdWXNAlyoZmFsbGJhY2ukMHgwMKRkb2NzkdktIENhbmRpZGF0ZXMgcGVuZGluZyBhdmFpbGFiaWxpdHkgYnkgYFBhcmFJZGAu3gAFpG5hbWW+UGVuZGluZ0F2YWlsYWJpbGl0eUNvbW1pdG1lbnRzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXnMWaV2YWx1Zc0BuKhmYWxsYmFja6QweDAwpGRvY3OR2UEgVGhlIGNvbW1pdG1lbnRzIG9mIGNhbmRpZGF0ZXMgcGVuZGluZyBhdmFpbGFiaWxpdHksIGJ5IGBQYXJhSWRgLqVjYWxsc94AAaR0eXBlzQGrpmV2ZW50c94AAaR0eXBlzFapY29uc3RhbnRzkKZlcnJvcnPeAAGkdHlwZc0CXaVpbmRleCzeAAekbmFtZaxQYXJhSW5oZXJlbnSnc3RvcmFnZd4AAqZwcmVmaXisUGFyYUluaGVyZW50pWl0ZW1zkt4ABaRuYW1lqEluY2x1ZGVkqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGlcGxhaW46qGZhbGxiYWNrpDB4MDCkZG9jc5bZOyBXaGV0aGVyIHRoZSBwYXJhcyBpbmhlcmVudCB3YXMgaW5jbHVkZWQgd2l0aGluIHRoaXMgYmxvY2suoNlaIFRoZSBgT3B0aW9uPCgpPmAgaXMgZWZmZWN0aXZlbHkgYSBgYm9vbGAsIGJ1dCBpdCBuZXZlciBoaXRzIHN0b3JhZ2UgaW4gdGhlIGBOb25lYCB2YXJpYW502S8gZHVlIHRvIHRoZSBndWFyYW50ZWVzIG9mIEZSQU1FJ3Mgc3RvcmFnZSBBUElzLqDZUiBJZiB0aGlzIGlzIGBOb25lYCBhdCB0aGUgZW5kIG9mIHRoZSBibG9jaywgd2UgcGFuaWMgYW5kIHJlbmRlciB0aGUgYmxvY2sgaW52YWxpZC7eAAWkbmFtZaxPbkNoYWluVm90ZXOobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaVwbGFpbs0CXqhmYWxsYmFja6QweDAwpGRvY3OR2VEgU2NyYXBlZCBvbiBjaGFpbiBkYXRhIGZvciBleHRyYWN0aW5nIHJlc29sdmVkIGRpc3B1dGVzIGFzIHdlbGwgYXMgYmFja2luZyB2b3Rlcy6lY2FsbHPeAAGkdHlwZc0BrKZldmVudHPAqWNvbnN0YW50c5CmZXJyb3Jz3gABpHR5cGXNAmOlaW5kZXgt3gAHpG5hbWWtUGFyYVNjaGVkdWxlcqdzdG9yYWdl3gACpnByZWZpeK1QYXJhU2NoZWR1bGVypWl0ZW1zlt4ABaRuYW1lr1ZhbGlkYXRvckdyb3Vwc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW7NAmSoZmFsbGJhY2ukMHgwMKRkb2NzltlbIEFsbCB0aGUgdmFsaWRhdG9yIGdyb3Vwcy4gT25lIGZvciBlYWNoIGNvcmUuIEluZGljZXMgYXJlIGludG8gYEFjdGl2ZVZhbGlkYXRvcnNgIC0gbm90IHRoZdlbIGJyb2FkZXIgc2V0IG9mIFBvbGthZG90IHZhbGlkYXRvcnMsIGJ1dCBpbnN0ZWFkIGp1c3QgdGhlIHN1YnNldCB1c2VkIGZvciBwYXJhY2hhaW5zIGR1cmluZ64gdGhpcyBzZXNzaW9uLqDZYCBCb3VuZDogVGhlIG51bWJlciBvZiBjb3JlcyBpcyB0aGUgc3VtIG9mIHRoZSBudW1iZXJzIG9mIHBhcmFjaGFpbnMgYW5kIHBhcmF0aHJlYWQgbXVsdGlwbGV4ZXJzLtlgIFJlYXNvbmFibHksIDEwMC0xMDAwLiBUaGUgZG9taW5hbnQgZmFjdG9yIGlzIHRoZSBudW1iZXIgb2YgdmFsaWRhdG9yczogc2FmZSB1cHBlciBib3VuZCBhdCAxMGsu3gAFpG5hbWWvUGFyYXRocmVhZFF1ZXVlqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbs0CZahmYWxsYmFja6wweDAwMDAwMDAwMDCkZG9jc5TZRiBBIHF1ZXVlIG9mIHVwY29taW5nIGNsYWltcyBhbmQgd2hpY2ggY29yZSB0aGV5IHNob3VsZCBiZSBtYXBwZWQgb250by6g2UUgVGhlIG51bWJlciBvZiBxdWV1ZWQgY2xhaW1zIGlzIGJvdW5kZWQgYXQgdGhlIGBzY2hlZHVsaW5nX2xvb2thaGVhZGDZVSBtdWx0aXBsaWVkIGJ5IHRoZSBudW1iZXIgb2YgcGFyYXRocmVhZCBtdWx0aXBsZXhlciBjb3Jlcy4gUmVhc29uYWJseSwgMTAgKiA1MCA9IDUwMC7eAAWkbmFtZbFBdmFpbGFiaWxpdHlDb3Jlc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW7NAmqoZmFsbGJhY2ukMHgwMKRkb2NzmNlnIE9uZSBlbnRyeSBmb3IgZWFjaCBhdmFpbGFiaWxpdHkgY29yZS4gRW50cmllcyBhcmUgYE5vbmVgIGlmIHRoZSBjb3JlIGlzIG5vdCBjdXJyZW50bHkgb2NjdXBpZWQuIENhbiBiZdkyIHRlbXBvcmFyaWx5IGBTb21lYCBpZiBzY2hlZHVsZWQgYnV0IG5vdCBvY2N1cGllZC7ZUCBUaGUgaSd0aCBwYXJhY2hhaW4gYmVsb25ncyB0byB0aGUgaSd0aCBjb3JlLCB3aXRoIHRoZSByZW1haW5pbmcgY29yZXMgYWxsIGJlaW5nuSBwYXJhdGhyZWFkLW11bHRpcGxleGVycy6g2TYgQm91bmRlZCBieSB0aGUgbWF4aW11bSBvZiBlaXRoZXIgb2YgdGhlc2UgdHdvIHZhbHVlczrZOSAgICogVGhlIG51bWJlciBvZiBwYXJhY2hhaW5zIGFuZCBwYXJhdGhyZWFkIG11bHRpcGxleGVyc9lRICAgKiBUaGUgbnVtYmVyIG9mIHZhbGlkYXRvcnMgZGl2aWRlZCBieSBgY29uZmlndXJhdGlvbi5tYXhfdmFsaWRhdG9yc19wZXJfY29yZWAu3gAFpG5hbWW0UGFyYXRocmVhZENsYWltSW5kZXiobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluzQJtqGZhbGxiYWNrpDB4MDCkZG9jc5TZViBBbiBpbmRleCB1c2VkIHRvIGVuc3VyZSB0aGF0IG9ubHkgb25lIGNsYWltIG9uIGEgcGFyYXRocmVhZCBleGlzdHMgaW4gdGhlIHF1ZXVlIG9yIGlz2S0gY3VycmVudGx5IGJlaW5nIGhhbmRsZWQgYnkgYW4gb2NjdXBpZWQgY29yZS6g2V8gQm91bmRlZCBieSB0aGUgbnVtYmVyIG9mIHBhcmF0aHJlYWQgY29yZXMgYW5kIHNjaGVkdWxpbmcgbG9va2FoZWFkLiBSZWFzb25hYmx5LCAxMCAqIDUwID0gNTAwLt4ABaRuYW1lsVNlc3Npb25TdGFydEJsb2NrqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbgSoZmFsbGJhY2uqMHgwMDAwMDAwMKRkb2NzltlpIFRoZSBibG9jayBudW1iZXIgd2hlcmUgdGhlIHNlc3Npb24gc3RhcnQgb2NjdXJyZWQuIFVzZWQgdG8gdHJhY2sgaG93IG1hbnkgZ3JvdXAgcm90YXRpb25zIGhhdmUgb2NjdXJyZWQuoNlVIE5vdGUgdGhhdCBpbiB0aGUgY29udGV4dCBvZiBwYXJhY2hhaW5zIG1vZHVsZXMgdGhlIHNlc3Npb24gY2hhbmdlIGlzIHNpZ25hbGVkIGR1cmluZ9lYIHRoZSBibG9jayBhbmQgZW5hY3RlZCBhdCB0aGUgZW5kIG9mIHRoZSBibG9jayAoYXQgdGhlIGZpbmFsaXphdGlvbiBzdGFnZSwgdG8gYmUgZXhhY3QpLtlWIFRodXMgZm9yIGFsbCBpbnRlbnRzIGFuZCBwdXJwb3NlcyB0aGUgZWZmZWN0IG9mIHRoZSBzZXNzaW9uIGNoYW5nZSBpcyBvYnNlcnZlZCBhdCB0aGXZWSBibG9jayBmb2xsb3dpbmcgdGhlIHNlc3Npb24gY2hhbmdlLCBibG9jayBudW1iZXIgb2Ygd2hpY2ggd2Ugc2F2ZSBpbiB0aGlzIHN0b3JhZ2UgdmFsdWUu3gAFpG5hbWWpU2NoZWR1bGVkqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbs0CbqhmYWxsYmFja6QweDAwpGRvY3OW2TggQ3VycmVudGx5IHNjaGVkdWxlZCBjb3JlcyAtIGZyZWUgYnV0IHVwIHRvIGJlIG9jY3VwaWVkLqDZUyBCb3VuZGVkIGJ5IHRoZSBudW1iZXIgb2YgY29yZXM6IG9uZSBmb3IgZWFjaCBwYXJhY2hhaW4gYW5kIHBhcmF0aHJlYWQgbXVsdGlwbGV4ZXIuoNl/IFRoZSB2YWx1ZSBjb250YWluZWQgaGVyZSB3aWxsIG5vdCBiZSB2YWxpZCBhZnRlciB0aGUgZW5kIG9mIGEgYmxvY2suIFJ1bnRpbWUgQVBJcyBzaG91bGQgYmUgdXNlZCB0byBkZXRlcm1pbmUgc2NoZWR1bGVkIGNvcmVzL7ggZm9yIHRoZSB1cGNvbWluZyBibG9jay6lY2FsbHPApmV2ZW50c8CpY29uc3RhbnRzkKZlcnJvcnPApWluZGV4Lt4AB6RuYW1lpVBhcmFzp3N0b3JhZ2XeAAKmcHJlZml4pVBhcmFzpWl0ZW1z3AAT3gAFpG5hbWWwUHZmQWN0aXZlVm90ZU1hcKhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5zF6ldmFsdWXNAnGoZmFsbGJhY2ukMHgwMKRkb2NzlNktIEFsbCBjdXJyZW50bHkgYWN0aXZlIFBWRiBwcmUtY2hlY2tpbmcgdm90ZXMuoKsgSW52YXJpYW50OtldIC0gVGhlcmUgYXJlIG5vIFBWRiBwcmUtY2hlY2tpbmcgdm90ZXMgdGhhdCBleGlzdHMgaW4gbGlzdCBidXQgbm90IGluIHRoZSBzZXQgYW5kIHZpY2UgdmVyc2Eu3gAFpG5hbWWxUHZmQWN0aXZlVm90ZUxpc3SobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluzQJ0qGZhbGxiYWNrpDB4MDCkZG9jc5HZTSBUaGUgbGlzdCBvZiBhbGwgY3VycmVudGx5IGFjdGl2ZSBQVkYgdm90ZXMuIEF1eGlsaWFyeSB0byBgUHZmQWN0aXZlVm90ZU1hcGAu3gAFpG5hbWWqUGFyYWNoYWluc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW7NAm2oZmFsbGJhY2ukMHgwMKRkb2Nzk9lNIEFsbCBwYXJhY2hhaW5zLiBPcmRlcmVkIGFzY2VuZGluZyBieSBgUGFyYUlkYC4gUGFyYXRocmVhZHMgYXJlIG5vdCBpbmNsdWRlZC6g2TogQ29uc2lkZXIgdXNpbmcgdGhlIFtgUGFyYWNoYWluc0NhY2hlYF0gdHlwZSBvZiBtb2RpZnlpbmcu3gAFpG5hbWWuUGFyYUxpZmVjeWNsZXOobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tlecxZpXZhbHVlzQJ1qGZhbGxiYWNrpDB4MDCkZG9jc5HZLyBUaGUgY3VycmVudCBsaWZlY3ljbGUgb2YgYSBhbGwga25vd24gUGFyYSBJRHMu3gAFpG5hbWWlSGVhZHOobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tlecxZpXZhbHVlzF+oZmFsbGJhY2ukMHgwMKRkb2NzkdkoIFRoZSBoZWFkLWRhdGEgb2YgZXZlcnkgcmVnaXN0ZXJlZCBwYXJhLt4ABaRuYW1lr0N1cnJlbnRDb2RlSGFzaKhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5zFmldmFsdWXMXqhmYWxsYmFja6QweDAwpGRvY3OT2S0gVGhlIHZhbGlkYXRpb24gY29kZSBoYXNoIG9mIGV2ZXJ5IGxpdmUgcGFyYS6g2TkgQ29ycmVzcG9uZGluZyBjb2RlIGNhbiBiZSByZXRyaWV2ZWQgd2l0aCBbYENvZGVCeUhhc2hgXS7eAAWkbmFtZaxQYXN0Q29kZUhhc2iobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tlec0CdqV2YWx1ZcxeqGZhbGxiYWNrpDB4MDCkZG9jc5TZWCBBY3R1YWwgcGFzdCBjb2RlIGhhc2gsIGluZGljYXRlZCBieSB0aGUgcGFyYSBpZCBhcyB3ZWxsIGFzIHRoZSBibG9jayBudW1iZXIgYXQgd2hpY2ggaXSxIGJlY2FtZSBvdXRkYXRlZC6g2TkgQ29ycmVzcG9uZGluZyBjb2RlIGNhbiBiZSByZXRyaWV2ZWQgd2l0aCBbYENvZGVCeUhhc2hgXS7eAAWkbmFtZaxQYXN0Q29kZU1ldGGobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5zFmldmFsdWXNAneoZmFsbGJhY2umMHgwMDAwpGRvY3OT2VIgUGFzdCBjb2RlIG9mIHBhcmFjaGFpbnMuIFRoZSBwYXJhY2hhaW5zIHRoZW1zZWx2ZXMgbWF5IG5vdCBiZSByZWdpc3RlcmVkIGFueW1vcmUs2VIgYnV0IHdlIGFsc28ga2VlcCB0aGVpciBjb2RlIG9uLWNoYWluIGZvciB0aGUgc2FtZSBhbW91bnQgb2YgdGltZSBhcyBvdXRkYXRlZCBjb2Rl2SwgdG8ga2VlcCBpdCBhdmFpbGFibGUgZm9yIGFwcHJvdmFsIGNoZWNrZXJzLt4ABaRuYW1lr1Bhc3RDb2RlUHJ1bmluZ6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW7NAnqoZmFsbGJhY2ukMHgwMKRkb2NzltloIFdoaWNoIHBhcmFzIGhhdmUgcGFzdCBjb2RlIHRoYXQgbmVlZHMgcHJ1bmluZyBhbmQgdGhlIHJlbGF5LWNoYWluIGJsb2NrIGF0IHdoaWNoIHRoZSBjb2RlIHdhcyByZXBsYWNlZC7ZYCBOb3RlIHRoYXQgdGhpcyBpcyB0aGUgYWN0dWFsIGhlaWdodCBvZiB0aGUgaW5jbHVkZWQgYmxvY2ssIG5vdCB0aGUgZXhwZWN0ZWQgaGVpZ2h0IGF0IHdoaWNoIHRoZdk7IGNvZGUgdXBncmFkZSB3b3VsZCBiZSBhcHBsaWVkLCBhbHRob3VnaCB0aGV5IG1heSBiZSBlcXVhbC7ZZCBUaGlzIGlzIHRvIGVuc3VyZSB0aGUgZW50aXJlIGFjY2VwdGFuY2UgcGVyaW9kIGlzIGNvdmVyZWQsIG5vdCBhbiBvZmZzZXQgYWNjZXB0YW5jZSBwZXJpb2Qgc3RhcnRpbmfZUiBmcm9tIHRoZSB0aW1lIGF0IHdoaWNoIHRoZSBwYXJhY2hhaW4gcGVyY2VpdmVzIGEgY29kZSB1cGdyYWRlIGFzIGhhdmluZyBvY2N1cnJlZC7ZVSBNdWx0aXBsZSBlbnRyaWVzIGZvciBhIHNpbmdsZSBwYXJhIGFyZSBwZXJtaXR0ZWQuIE9yZGVyZWQgYXNjZW5kaW5nIGJ5IGJsb2NrIG51bWJlci7eAAWkbmFtZbJGdXR1cmVDb2RlVXBncmFkZXOobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tlecxZpXZhbHVlBKhmYWxsYmFja6QweDAwpGRvY3OT2UogVGhlIGJsb2NrIG51bWJlciBhdCB3aGljaCB0aGUgcGxhbm5lZCBjb2RlIGNoYW5nZSBpcyBleHBlY3RlZCBmb3IgYSBwYXJhLtlZIFRoZSBjaGFuZ2Ugd2lsbCBiZSBhcHBsaWVkIGFmdGVyIHRoZSBmaXJzdCBwYXJhYmxvY2sgZm9yIHRoaXMgSUQgaW5jbHVkZWQgd2hpY2ggZXhlY3V0ZXPZRiBpbiB0aGUgY29udGV4dCBvZiBhIHJlbGF5IGNoYWluIGJsb2NrIHdpdGggYSBudW1iZXIgPj0gYGV4cGVjdGVkX2F0YC7eAAWkbmFtZa5GdXR1cmVDb2RlSGFzaKhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5zFmldmFsdWXMXqhmYWxsYmFja6QweDAwpGRvY3OT2ScgVGhlIGFjdHVhbCBmdXR1cmUgY29kZSBoYXNoIG9mIGEgcGFyYS6g2TkgQ29ycmVzcG9uZGluZyBjb2RlIGNhbiBiZSByZXRyaWV2ZWQgd2l0aCBbYENvZGVCeUhhc2hgXS7eAAWkbmFtZbRVcGdyYWRlR29BaGVhZFNpZ25hbKhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5zFmldmFsdWXNAnuoZmFsbGJhY2ukMHgwMKRkb2NzmdloIFRoaXMgaXMgdXNlZCBieSB0aGUgcmVsYXktY2hhaW4gdG8gY29tbXVuaWNhdGUgdG8gYSBwYXJhY2hhaW4gYSBnby1haGVhZCB3aXRoIGluIHRoZSB1cGdyYWRlIHByb2NlZHVyZS6g2V0gVGhpcyB2YWx1ZSBpcyBhYnNlbnQgd2hlbiB0aGVyZSBhcmUgbm8gdXBncmFkZXMgc2NoZWR1bGVkIG9yIGR1cmluZyB0aGUgdGltZSB0aGUgcmVsYXkgY2hhaW7ZXyBwZXJmb3JtcyB0aGUgY2hlY2tzLiBJdCBpcyBzZXQgYXQgdGhlIGZpcnN0IHJlbGF5LWNoYWluIGJsb2NrIHdoZW4gdGhlIGNvcnJlc3BvbmRpbmcgcGFyYWNoYWlu2VkgY2FuIHN3aXRjaCBpdHMgdXBncmFkZSBmdW5jdGlvbi4gQXMgc29vbiBhcyB0aGUgcGFyYWNoYWluJ3MgYmxvY2sgaXMgaW5jbHVkZWQsIHRoZSB2YWx1ZbYgZ2V0cyByZXNldCB0byBgTm9uZWAuoNlZIE5PVEUgdGhhdCB0aGlzIGZpZWxkIGlzIHVzZWQgYnkgcGFyYWNoYWlucyB2aWEgbWVya2xlIHN0b3JhZ2UgcHJvb2ZzLCB0aGVyZWZvcmUgY2hhbmdpbmfZMSB0aGUgZm9ybWF0IHdpbGwgcmVxdWlyZSBtaWdyYXRpb24gb2YgcGFyYWNoYWlucy7eAAWkbmFtZbhVcGdyYWRlUmVzdHJpY3Rpb25TaWduYWyobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tlecxZpXZhbHVlzQJ8qGZhbGxiYWNrpDB4MDCkZG9jc5nZWiBUaGlzIGlzIHVzZWQgYnkgdGhlIHJlbGF5LWNoYWluIHRvIGNvbW11bmljYXRlIHRoYXQgdGhlcmUgYXJlIHJlc3RyaWN0aW9ucyBmb3IgcGVyZm9ybWluZ78gYW4gdXBncmFkZSBmb3IgdGhpcyBwYXJhY2hhaW4uoNlWIFRoaXMgbWF5IGJlIGEgYmVjYXVzZSB0aGUgcGFyYWNoYWluIHdhaXRzIGZvciB0aGUgdXBncmFkZSBjb29sZG93biB0byBleHBpcmUuIEFub3RoZXLZWyBwb3RlbnRpYWwgdXNlIGNhc2UgaXMgd2hlbiB3ZSB3YW50IHRvIHBlcmZvcm0gc29tZSBtYWludGVuYW5jZSAoc3VjaCBhcyBzdG9yYWdlIG1pZ3JhdGlvbinZOCB3ZSBjb3VsZCByZXN0cmljdCB1cGdyYWRlcyB0byBtYWtlIHRoZSBwcm9jZXNzIHNpbXBsZXIuoNlZIE5PVEUgdGhhdCB0aGlzIGZpZWxkIGlzIHVzZWQgYnkgcGFyYWNoYWlucyB2aWEgbWVya2xlIHN0b3JhZ2UgcHJvb2ZzLCB0aGVyZWZvcmUgY2hhbmdpbmfZMSB0aGUgZm9ybWF0IHdpbGwgcmVxdWlyZSBtaWdyYXRpb24gb2YgcGFyYWNoYWlucy7eAAWkbmFtZbBVcGdyYWRlQ29vbGRvd25zqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbs0CeqhmYWxsYmFja6QweDAwpGRvY3OT2VQgVGhlIGxpc3Qgb2YgcGFyYWNoYWlucyB0aGF0IGFyZSBhd2FpdGluZyBmb3IgdGhlaXIgdXBncmFkZSByZXN0cmljdGlvbiB0byBjb29sZG93bi6g2SMgT3JkZXJlZCBhc2NlbmRpbmcgYnkgYmxvY2sgbnVtYmVyLt4ABaRuYW1lsFVwY29taW5nVXBncmFkZXOobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluzQJ6qGZhbGxiYWNrpDB4MDCkZG9jc5TZViBUaGUgbGlzdCBvZiB1cGNvbWluZyBjb2RlIHVwZ3JhZGVzLiBFYWNoIGl0ZW0gaXMgYSBwYWlyIG9mIHdoaWNoIHBhcmEgcGVyZm9ybXMgYSBjb2Rl2TogdXBncmFkZSBhbmQgYXQgd2hpY2ggcmVsYXktY2hhaW4gYmxvY2sgaXQgaXMgZXhwZWN0ZWQgYXQuoNkjIE9yZGVyZWQgYXNjZW5kaW5nIGJ5IGJsb2NrIG51bWJlci7eAAWkbmFtZaxBY3Rpb25zUXVldWWobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5BKV2YWx1Zc0CbahmYWxsYmFja6QweDAwpGRvY3OR2UUgVGhlIGFjdGlvbnMgdG8gcGVyZm9ybSBkdXJpbmcgdGhlIHN0YXJ0IG9mIGEgc3BlY2lmaWMgc2Vzc2lvbiBpbmRleC7eAAWkbmFtZbRVcGNvbWluZ1BhcmFzR2VuZXNpc6htb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5zFmldmFsdWXNAdaoZmFsbGJhY2ukMHgwMKRkb2NzlNkoIFVwY29taW5nIHBhcmFzIGluc3RhbnRpYXRpb24gYXJndW1lbnRzLqDZWSBOT1RFIHRoYXQgYWZ0ZXIgUFZGIHByZS1jaGVja2luZyBpcyBlbmFibGVkIHRoZSBwYXJhIGdlbmVzaXMgYXJnIHdpbGwgaGF2ZSBpdCdzIGNvZGUgc2V02VggdG8gZW1wdHkuIEluc3RlYWQsIHRoZSBjb2RlIHdpbGwgYmUgc2F2ZWQgaW50byB0aGUgc3RvcmFnZSByaWdodCBhd2F5IHZpYSBgQ29kZUJ5SGFzaGAu3gAFpG5hbWWuQ29kZUJ5SGFzaFJlZnOobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABo21hcN4AA6doYXNoZXJzkahJZGVudGl0eaNrZXnMXqV2YWx1ZQSoZmFsbGJhY2uqMHgwMDAwMDAwMKRkb2NzkdlKIFRoZSBudW1iZXIgb2YgcmVmZXJlbmNlIG9uIHRoZSB2YWxpZGF0aW9uIGNvZGUgaW4gW2BDb2RlQnlIYXNoYF0gc3RvcmFnZS7eAAWkbmFtZapDb2RlQnlIYXNoqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORqElkZW50aXR5o2tlecxepXZhbHVlzQG+qGZhbGxiYWNrpDB4MDCkZG9jc5TZJCBWYWxpZGF0aW9uIGNvZGUgc3RvcmVkIGJ5IGl0cyBoYXNoLqDZTCBUaGlzIHN0b3JhZ2UgaXMgY29uc2lzdGVudCB3aXRoIFtgRnV0dXJlQ29kZUhhc2hgXSwgW2BDdXJyZW50Q29kZUhhc2hgXSBhbmSyIFtgUGFzdENvZGVIYXNoYF0upWNhbGxz3gABpHR5cGXNAcimZXZlbnRz3gABpHR5cGXMYqljb25zdGFudHOR3gAEpG5hbWWwVW5zaWduZWRQcmlvcml0eaR0eXBlCqV2YWx1ZbIweGZmZmZmZmZmZmZmZmZmZmakZG9jc5CmZXJyb3Jz3gABpHR5cGXNAn2laW5kZXgv3gAHpG5hbWWrSW5pdGlhbGl6ZXKnc3RvcmFnZd4AAqZwcmVmaXirSW5pdGlhbGl6ZXKlaXRlbXOS3gAFpG5hbWWuSGFzSW5pdGlhbGl6ZWSobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaVwbGFpbjqoZmFsbGJhY2ukMHgwMKRkb2NzmNlIIFdoZXRoZXIgdGhlIHBhcmFjaGFpbnMgbW9kdWxlcyBoYXZlIGJlZW4gaW5pdGlhbGl6ZWQgd2l0aGluIHRoaXMgYmxvY2suoNlJIFNlbWFudGljYWxseSBhIGBib29sYCwgYnV0IHRoaXMgZ3VhcmFudGVlcyBpdCBzaG91bGQgbmV2ZXIgaGl0IHRoZSB0cmllLNlaIGFzIHRoaXMgaXMgY2xlYXJlZCBpbiBgb25fZmluYWxpemVgIGFuZCBGcmFtZSBvcHRpbWl6ZXMgYE5vbmVgIHZhbHVlcyB0byBiZSBlbXB0eSB2YWx1ZXMuoNlfIEFzIGEgYGJvb2xgLCBgc2V0KGZhbHNlKWAgYW5kIGByZW1vdmUoKWAgYm90aCBsZWFkIHRvIHRoZSBuZXh0IGBnZXQoKWAgYmVpbmcgZmFsc2UsIGJ1dCBvbmUgb2bZXiB0aGVtIHdyaXRlcyB0byB0aGUgdHJpZSBhbmQgb25lIGRvZXMgbm90LiBUaGlzIGNvbmZ1c2lvbiBtYWtlcyBgT3B0aW9uPCgpPmAgbW9yZSBzdWl0YWJsZSBmb3LZICB0aGUgc2VtYW50aWNzIG9mIHRoaXMgdmFyaWFibGUu3gAFpG5hbWW2QnVmZmVyZWRTZXNzaW9uQ2hhbmdlc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW7NAn6oZmFsbGJhY2ukMHgwMKRkb2Nzl9lWIEJ1ZmZlcmVkIHNlc3Npb24gY2hhbmdlcyBhbG9uZyB3aXRoIHRoZSBibG9jayBudW1iZXIgYXQgd2hpY2ggdGhleSBzaG91bGQgYmUgYXBwbGllZC6g2VcgVHlwaWNhbGx5IHRoaXMgd2lsbCBiZSBlbXB0eSBvciBvbmUgZWxlbWVudCBsb25nLiBBcGFydCBmcm9tIHRoYXQgdGhpcyBpdGVtIG5ldmVyIGhpdHOtIHRoZSBzdG9yYWdlLqDZWiBIb3dldmVyIHRoaXMgaXMgYSBgVmVjYCByZWdhcmRsZXNzIHRvIGhhbmRsZSB2YXJpb3VzIGVkZ2UgY2FzZXMgdGhhdCBtYXkgb2NjdXIgYXQgcnVudGltZdkwIHVwZ3JhZGUgYm91bmRhcmllcyBvciBpZiBnb3Zlcm5hbmNlIGludGVydmVuZXMupWNhbGxz3gABpHR5cGXNAcqmZXZlbnRzwKljb25zdGFudHOQpmVycm9yc8ClaW5kZXgw3gAHpG5hbWWjRG1wp3N0b3JhZ2XeAAKmcHJlZml4o0RtcKVpdGVtc5LeAAWkbmFtZbVEb3dud2FyZE1lc3NhZ2VRdWV1ZXOobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5zFmldmFsdWXNAoCoZmFsbGJhY2ukMHgwMKRkb2Nzkdk0IFRoZSBkb3dud2FyZCBtZXNzYWdlcyBhZGRyZXNzZWQgZm9yIGEgY2VydGFpbiBwYXJhLt4ABaRuYW1luURvd253YXJkTWVzc2FnZVF1ZXVlSGVhZHOobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5zFmldmFsdWULqGZhbGxiYWNr2UIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5fZSSBBIG1hcHBpbmcgdGhhdCBzdG9yZXMgdGhlIGRvd253YXJkIG1lc3NhZ2UgcXVldWUgTVFDIGhlYWQgZm9yIGVhY2ggcGFyYS6g2SQgRWFjaCBsaW5rIGluIHRoaXMgY2hhaW4gaGFzIGEgZm9ybTq+IGAocHJldl9oZWFkLCBCLCBIKE0pKWAsIHdoZXJl2TogLSBgcHJldl9oZWFkYDogaXMgdGhlIHByZXZpb3VzIGhlYWQgaGFzaCBvciB6ZXJvIGlmIG5vbmUu2UggLSBgQmA6IGlzIHRoZSByZWxheS1jaGFpbiBibG9jayBudW1iZXIgaW4gd2hpY2ggYSBtZXNzYWdlIHdhcyBhcHBlbmRlZC7ZNSAtIGBIKE0pYDogaXMgdGhlIGhhc2ggb2YgdGhlIG1lc3NhZ2UgYmVpbmcgYXBwZW5kZWQupWNhbGxz3gABpHR5cGXNAcumZXZlbnRzwKljb25zdGFudHOQpmVycm9yc8ClaW5kZXgx3gAHpG5hbWWjVW1wp3N0b3JhZ2XeAAKmcHJlZml4o1VtcKVpdGVtc5feAAWkbmFtZbNSZWxheURpc3BhdGNoUXVldWVzqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tlecxZpXZhbHVlzK2oZmFsbGJhY2ukMHgwMKRkb2NzltlcIFRoZSBtZXNzYWdlcyB3YWl0aW5nIHRvIGJlIGhhbmRsZWQgYnkgdGhlIHJlbGF5LWNoYWluIG9yaWdpbmF0aW5nIGZyb20gYSBjZXJ0YWluIHBhcmFjaGFpbi6g2V4gTm90ZSB0aGF0IHNvbWUgdXB3YXJkIG1lc3NhZ2VzIG1pZ2h0IGhhdmUgYmVlbiBhbHJlYWR5IHByb2Nlc3NlZCBieSB0aGUgaW5jbHVzaW9uIGxvZ2ljLiBFLmcuvSBjaGFubmVsIG1hbmFnZW1lbnQgbWVzc2FnZXMuoNkqIFRoZSBtZXNzYWdlcyBhcmUgcHJvY2Vzc2VkIGluIEZJRk8gb3JkZXIu3gAFpG5hbWW2UmVsYXlEaXNwYXRjaFF1ZXVlU2l6Zahtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXnMWaV2YWx1ZT+oZmFsbGJhY2uyMHgwMDAwMDAwMDAwMDAwMDAwpGRvY3Ob2VEgU2l6ZSBvZiB0aGUgZGlzcGF0Y2ggcXVldWVzLiBDYWNoZXMgc2l6ZXMgb2YgdGhlIHF1ZXVlcyBpbiBgUmVsYXlEaXNwYXRjaFF1ZXVlYC6g2TwgRmlyc3QgaXRlbSBpbiB0aGUgdHVwbGUgaXMgdGhlIGNvdW50IG9mIG1lc3NhZ2VzIGFuZCBzZWNvbmTZOCBpcyB0aGUgdG90YWwgbGVuZ3RoIChpbiBieXRlcykgb2YgdGhlIG1lc3NhZ2UgcGF5bG9hZHMuoNleIE5vdGUgdGhhdCB0aGlzIGlzIGFuIGF1eGlsaWFyeSBtYXBwaW5nOiBpdCdzIHBvc3NpYmxlIHRvIHRlbGwgdGhlIGJ5dGUgc2l6ZSBhbmQgdGhlIG51bWJlciBvZtleIG1lc3NhZ2VzIG9ubHkgbG9va2luZyBhdCBgUmVsYXlEaXNwYXRjaFF1ZXVlc2AuIFRoaXMgbWFwcGluZyBpcyBzZXBhcmF0ZSB0byBhdm9pZCB0aGUgY29zdCBvZtlPIGxvYWRpbmcgdGhlIHdob2xlIG1lc3NhZ2UgcXVldWUgaWYgb25seSB0aGUgdG90YWwgc2l6ZSBhbmQgY291bnQgYXJlIHJlcXVpcmVkLqCrIEludmFyaWFudDrZUSAtIFRoZSBzZXQgb2Yga2V5cyBzaG91bGQgZXhhY3RseSBtYXRjaCB0aGUgc2V0IG9mIGtleXMgb2YgYFJlbGF5RGlzcGF0Y2hRdWV1ZXNgLt4ABaRuYW1lrU5lZWRzRGlzcGF0Y2iobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluzQJtqGZhbGxiYWNrpDB4MDCkZG9jc5XZRiBUaGUgb3JkZXJlZCBsaXN0IG9mIGBQYXJhSWRgcyB0aGF0IGhhdmUgYSBgUmVsYXlEaXNwYXRjaFF1ZXVlYCBlbnRyeS6gqyBJbnZhcmlhbnQ62U0gLSBUaGUgc2V0IG9mIGl0ZW1zIGZyb20gdGhpcyB2ZWN0b3Igc2hvdWxkIGJlIGV4YWN0bHkgdGhlIHNldCBvZiB0aGUga2V5cyBpbtk2ICAgYFJlbGF5RGlzcGF0Y2hRdWV1ZXNgIGFuZCBgUmVsYXlEaXNwYXRjaFF1ZXVlU2l6ZWAu3gAFpG5hbWW6TmV4dERpc3BhdGNoUm91bmRTdGFydFdpdGiobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaVwbGFpbsxZqGZhbGxiYWNrpDB4MDCkZG9jc5XZXyBUaGlzIGlzIHRoZSBwYXJhIHRoYXQgZ2V0cyB3aWxsIGdldCBkaXNwYXRjaGVkIGZpcnN0IGR1cmluZyB0aGUgbmV4dCB1cHdhcmQgZGlzcGF0Y2hhYmxlIHF1ZXVlsSBleGVjdXRpb24gcm91bmQuoKsgSW52YXJpYW50OtlDIC0gSWYgYFNvbWUocGFyYSlgLCB0aGVuIGBwYXJhYCBtdXN0IGJlIHByZXNlbnQgaW4gYE5lZWRzRGlzcGF0Y2hgLt4ABaRuYW1lqk92ZXJ3ZWlnaHSobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tleQqldmFsdWXNAoKoZmFsbGJhY2ukMHgwMKRkb2Nzk9lBIFRoZSBtZXNzYWdlcyB0aGF0IGV4Y2VlZGVkIG1heCBpbmRpdmlkdWFsIG1lc3NhZ2Ugd2VpZ2h0IGJ1ZGdldC6g2TUgVGhlc2UgbWVzc2FnZXMgc3RheSB0aGVyZSB1bnRpbCBtYW51YWxseSBkaXNwYXRjaGVkLt4ABaRuYW1ltENvdW50ZXJGb3JPdmVyd2VpZ2h0qG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbgSoZmFsbGJhY2uqMHgwMDAwMDAwMKRkb2NzkdkrQ291bnRlciBmb3IgdGhlIHJlbGF0ZWQgY291bnRlZCBzdG9yYWdlIG1hcN4ABaRuYW1lr092ZXJ3ZWlnaHRDb3VudKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4KqGZhbGxiYWNrsjB4MDAwMDAwMDAwMDAwMDAwMKRkb2NzktlaIFRoZSBudW1iZXIgb2Ygb3ZlcndlaWdodCBtZXNzYWdlcyBldmVyIHJlY29yZGVkIGluIGBPdmVyd2VpZ2h0YCAoYW5kIHRodXMgdGhlIGxvd2VzdCBmcmVlqCBpbmRleCkupWNhbGxz3gABpHR5cGXNAcymZXZlbnRz3gABpHR5cGXMY6ljb25zdGFudHOQpmVycm9yc94AAaR0eXBlzQKDpWluZGV4Mt4AB6RuYW1lpEhybXCnc3RvcmFnZd4AAqZwcmVmaXikSHJtcKVpdGVtc5zeAAWkbmFtZbdIcm1wT3BlbkNoYW5uZWxSZXF1ZXN0c6htb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5zGeldmFsdWXNAoSoZmFsbGJhY2ukMHgwMKRkb2NzltkvIFRoZSBzZXQgb2YgcGVuZGluZyBIUk1QIG9wZW4gY2hhbm5lbCByZXF1ZXN0cy6g2TAgVGhlIHNldCBpcyBhY2NvbXBhbmllZCBieSBhIGxpc3QgZm9yIGl0ZXJhdGlvbi6gqyBJbnZhcmlhbnQ62U8gLSBUaGVyZSBhcmUgbm8gY2hhbm5lbHMgdGhhdCBleGlzdHMgaW4gbGlzdCBidXQgbm90IGluIHRoZSBzZXQgYW5kIHZpY2UgdmVyc2Eu3gAFpG5hbWW7SHJtcE9wZW5DaGFubmVsUmVxdWVzdHNMaXN0qG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbs0ChahmYWxsYmFja6QweDAwpGRvY3OQ3gAFpG5hbWW7SHJtcE9wZW5DaGFubmVsUmVxdWVzdENvdW50qG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tlecxZpXZhbHVlBKhmYWxsYmFja6oweDAwMDAwMDAwpGRvY3OT2VkgVGhpcyBtYXBwaW5nIHRyYWNrcyBob3cgbWFueSBvcGVuIGNoYW5uZWwgcmVxdWVzdHMgYXJlIGluaXRpYXRlZCBieSBhIGdpdmVuIHNlbmRlciBwYXJhLtlWIEludmFyaWFudDogYEhybXBPcGVuQ2hhbm5lbFJlcXVlc3RzYCBzaG91bGQgY29udGFpbiB0aGUgc2FtZSBudW1iZXIgb2YgaXRlbXMgdGhhdCBoYXPZQSBgKFgsIF8pYCBhcyB0aGUgbnVtYmVyIG9mIGBIcm1wT3BlbkNoYW5uZWxSZXF1ZXN0Q291bnRgIGZvciBgWGAu3gAFpG5hbWW/SHJtcEFjY2VwdGVkQ2hhbm5lbFJlcXVlc3RDb3VudKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXnMWaV2YWx1ZQSoZmFsbGJhY2uqMHgwMDAwMDAwMKRkb2Nzk9lcIFRoaXMgbWFwcGluZyB0cmFja3MgaG93IG1hbnkgb3BlbiBjaGFubmVsIHJlcXVlc3RzIHdlcmUgYWNjZXB0ZWQgYnkgYSBnaXZlbiByZWNpcGllbnQgcGFyYS7ZWyBJbnZhcmlhbnQ6IGBIcm1wT3BlbkNoYW5uZWxSZXF1ZXN0c2Agc2hvdWxkIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIGl0ZW1zIGAoXywgWClgIHdpdGjZVSBgY29uZmlybWVkYCBzZXQgdG8gdHJ1ZSwgYXMgdGhlIG51bWJlciBvZiBgSHJtcEFjY2VwdGVkQ2hhbm5lbFJlcXVlc3RDb3VudGAgZm9yIGBYYC7eAAWkbmFtZbhIcm1wQ2xvc2VDaGFubmVsUmVxdWVzdHOobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tlecxnpXZhbHVlOqhmYWxsYmFja6QweDAwpGRvY3OX2VwgQSBzZXQgb2YgcGVuZGluZyBIUk1QIGNsb3NlIGNoYW5uZWwgcmVxdWVzdHMgdGhhdCBhcmUgZ29pbmcgdG8gYmUgY2xvc2VkIGR1cmluZyB0aGUgc2Vzc2lvbtlIIGNoYW5nZS4gVXNlZCBmb3IgY2hlY2tpbmcgaWYgYSBnaXZlbiBjaGFubmVsIGlzIHJlZ2lzdGVyZWQgZm9yIGNsb3N1cmUuoNkwIFRoZSBzZXQgaXMgYWNjb21wYW5pZWQgYnkgYSBsaXN0IGZvciBpdGVyYXRpb24uoKsgSW52YXJpYW50OtlPIC0gVGhlcmUgYXJlIG5vIGNoYW5uZWxzIHRoYXQgZXhpc3RzIGluIGxpc3QgYnV0IG5vdCBpbiB0aGUgc2V0IGFuZCB2aWNlIHZlcnNhLt4ABaRuYW1lvEhybXBDbG9zZUNoYW5uZWxSZXF1ZXN0c0xpc3SobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluzQKFqGZhbGxiYWNrpDB4MDCkZG9jc5DeAAWkbmFtZa5Icm1wV2F0ZXJtYXJrc6htb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5zFmldmFsdWUEqGZhbGxiYWNrpDB4MDCkZG9jc5PZLiBUaGUgSFJNUCB3YXRlcm1hcmsgYXNzb2NpYXRlZCB3aXRoIGVhY2ggcGFyYS6rIEludmFyaWFudDrZXiAtIGVhY2ggcGFyYSBgUGAgdXNlZCBoZXJlIGFzIGEga2V5IHNob3VsZCBzYXRpc2Z5IGBQYXJhczo6aXNfdmFsaWRfcGFyYShQKWAgd2l0aGluIGEgc2Vzc2lvbi7eAAWkbmFtZaxIcm1wQ2hhbm5lbHOobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tlecxnpXZhbHVlzQKGqGZhbGxiYWNrpDB4MDCkZG9jc5PZLSBIUk1QIGNoYW5uZWwgZGF0YSBhc3NvY2lhdGVkIHdpdGggZWFjaCBwYXJhLqsgSW52YXJpYW50OtldIC0gZWFjaCBwYXJ0aWNpcGFudCBpbiB0aGUgY2hhbm5lbCBzaG91bGQgc2F0aXNmeSBgUGFyYXM6OmlzX3ZhbGlkX3BhcmEoUClgIHdpdGhpbiBhIHNlc3Npb24u3gAFpG5hbWW4SHJtcEluZ3Jlc3NDaGFubmVsc0luZGV4qG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tlecxZpXZhbHVlzQJtqGZhbGxiYWNrpDB4MDCkZG9jc53ZXCBJbmdyZXNzL2VncmVzcyBpbmRleGVzIGFsbG93IHRvIGZpbmQgYWxsIHRoZSBzZW5kZXJzIGFuZCByZWNlaXZlcnMgZ2l2ZW4gdGhlIG9wcG9zaXRlIHNpZGUupSBJLmUuoNlIIChhKSBpbmdyZXNzIGluZGV4IGFsbG93cyB0byBmaW5kIGFsbCB0aGUgc2VuZGVycyBmb3IgYSBnaXZlbiByZWNpcGllbnQu2UcgKGIpIGVncmVzcyBpbmRleCBhbGxvd3MgdG8gZmluZCBhbGwgdGhlIHJlY2lwaWVudHMgZm9yIGEgZ2l2ZW4gc2VuZGVyLqCsIEludmFyaWFudHM62VQgLSBmb3IgZWFjaCBpbmdyZXNzIGluZGV4IGVudHJ5IGZvciBgUGAgZWFjaCBpdGVtIGBJYCBpbiB0aGUgaW5kZXggc2hvdWxkIHByZXNlbnQgaW6+ICAgYEhybXBDaGFubmVsc2AgYXMgYChJLCBQKWAu2VMgLSBmb3IgZWFjaCBlZ3Jlc3MgaW5kZXggZW50cnkgZm9yIGBQYCBlYWNoIGl0ZW0gYEVgIGluIHRoZSBpbmRleCBzaG91bGQgcHJlc2VudCBpbr4gICBgSHJtcENoYW5uZWxzYCBhcyBgKFAsIEUpYC7ZQCAtIHRoZXJlIHNob3VsZCBiZSBubyBvdGhlciBkYW5nbGluZyBjaGFubmVscyBpbiBgSHJtcENoYW5uZWxzYC66IC0gdGhlIHZlY3RvcnMgYXJlIHNvcnRlZC7eAAWkbmFtZbdIcm1wRWdyZXNzQ2hhbm5lbHNJbmRleKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXnMWaV2YWx1Zc0CbahmYWxsYmFja6QweDAwpGRvY3OQ3gAFpG5hbWWzSHJtcENoYW5uZWxDb250ZW50c6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXnMZ6V2YWx1Zc0CiKhmYWxsYmFja6QweDAwpGRvY3OS2SsgU3RvcmFnZSBmb3IgdGhlIG1lc3NhZ2VzIGZvciBlYWNoIGNoYW5uZWwu2VkgSW52YXJpYW50OiBjYW5ub3QgYmUgbm9uLWVtcHR5IGlmIHRoZSBjb3JyZXNwb25kaW5nIGNoYW5uZWwgaW4gYEhybXBDaGFubmVsc2AgaXMgYE5vbmVgLt4ABaRuYW1lskhybXBDaGFubmVsRGlnZXN0c6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXnMWaV2YWx1Zc0CiqhmYWxsYmFja6QweDAwpGRvY3OW2VogTWFpbnRhaW5zIGEgbWFwcGluZyB0aGF0IGNhbiBiZSB1c2VkIHRvIGFuc3dlciB0aGUgcXVlc3Rpb246IFdoYXQgcGFyYXMgc2VudCBhIG1lc3NhZ2UgYXTZOSB0aGUgZ2l2ZW4gYmxvY2sgbnVtYmVyIGZvciBhIGdpdmVuIHJlY2VpdmVyLiBJbnZhcmlhbnRzOtkqIC0gVGhlIGlubmVyIGBWZWM8UGFyYUlkPmAgaXMgbmV2ZXIgZW1wdHku2TogLSBUaGUgaW5uZXIgYFZlYzxQYXJhSWQ+YCBjYW5ub3Qgc3RvcmUgdHdvIHNhbWUgYFBhcmFJZGAu2VsgLSBUaGUgb3V0ZXIgdmVjdG9yIGlzIHNvcnRlZCBhc2NlbmRpbmcgYnkgYmxvY2sgbnVtYmVyIGFuZCBjYW5ub3Qgc3RvcmUgdHdvIGl0ZW1zIHdpdGggdGhltSAgIHNhbWUgYmxvY2sgbnVtYmVyLqVjYWxsc94AAaR0eXBlzQHNpmV2ZW50c94AAaR0eXBlzGapY29uc3RhbnRzkKZlcnJvcnPeAAGkdHlwZc0CjKVpbmRleDPeAAekbmFtZa9QYXJhU2Vzc2lvbkluZm+nc3RvcmFnZd4AAqZwcmVmaXivUGFyYVNlc3Npb25JbmZvpWl0ZW1zld4ABaRuYW1ltEFzc2lnbm1lbnRLZXlzVW5zYWZlqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbs0CjahmYWxsYmFja6QweDAwpGRvY3OT2SkgQXNzaWdubWVudCBrZXlzIGZvciB0aGUgY3VycmVudCBzZXNzaW9uLtlbIE5vdGUgdGhhdCB0aGlzIEFQSSBpcyBwcml2YXRlIGR1ZSB0byBpdCBiZWluZyBwcm9uZSB0byAnb2ZmLWJ5LW9uZScgYXQgc2Vzc2lvbiBib3VuZGFyaWVzLtkrIFdoZW4gaW4gZG91YnQsIHVzZSBgU2Vzc2lvbnNgIEFQSSBpbnN0ZWFkLt4ABaRuYW1ltUVhcmxpZXN0U3RvcmVkU2Vzc2lvbqhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrqjB4MDAwMDAwMDCkZG9jc5HZQCBUaGUgZWFybGllc3Qgc2Vzc2lvbiBmb3Igd2hpY2ggcHJldmlvdXMgc2Vzc2lvbiBpbmZvIGlzIHN0b3JlZC7eAAWkbmFtZahTZXNzaW9uc6htb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkahJZGVudGl0eaNrZXkEpXZhbHVlzQKOqGZhbGxiYWNrpDB4MDCkZG9jc5PZKSBTZXNzaW9uIGluZm9ybWF0aW9uIGluIGEgcm9sbGluZyB3aW5kb3cu2U0gU2hvdWxkIGhhdmUgYW4gZW50cnkgaW4gcmFuZ2UgYEVhcmxpZXN0U3RvcmVkU2Vzc2lvbi4uPUN1cnJlbnRTZXNzaW9uSW5kZXhgLtldIERvZXMgbm90IGhhdmUgYW55IGVudHJpZXMgYmVmb3JlIHRoZSBzZXNzaW9uIGluZGV4IGluIHRoZSBmaXJzdCBzZXNzaW9uIGNoYW5nZSBub3RpZmljYXRpb24u3gAFpG5hbWWrQWNjb3VudEtleXOobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GoSWRlbnRpdHmja2V5BKV2YWx1ZczkqGZhbGxiYWNrpDB4MDCkZG9jc5HZXCBUaGUgdmFsaWRhdG9yIGFjY291bnQga2V5cyBvZiB0aGUgdmFsaWRhdG9ycyBhY3RpdmVseSBwYXJ0aWNpcGF0aW5nIGluIHBhcmFjaGFpbiBjb25zZW5zdXMu3gAFpG5hbWW1U2Vzc2lvbkV4ZWN1dG9yUGFyYW1zqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORqElkZW50aXR5o2tleQSldmFsdWXNApKoZmFsbGJhY2ukMHgwMKRkb2NzkdkxIEV4ZWN1dG9yIHBhcmFtZXRlciBzZXQgZm9yIGEgZ2l2ZW4gc2Vzc2lvbiBpbmRleKVjYWxsc8CmZXZlbnRzwKljb25zdGFudHOQpmVycm9yc8ClaW5kZXg03gAHpG5hbWWtUGFyYXNEaXNwdXRlc6dzdG9yYWdl3gACpnByZWZpeK1QYXJhc0Rpc3B1dGVzpWl0ZW1zld4ABaRuYW1lsUxhc3RQcnVuZWRTZXNzaW9uqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrpDB4MDCkZG9jc5LZQCBUaGUgbGFzdCBwcnVuZWQgc2Vzc2lvbiwgaWYgYW55LiBBbGwgZGF0YSBzdG9yZWQgYnkgdGhpcyBtb2R1bGW1IHJlZmVyZW5jZXMgc2Vzc2lvbnMu3gAFpG5hbWWoRGlzcHV0ZXOobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5KsVHdveDY0Q29uY2F0sEJsYWtlMl8xMjhDb25jYXSja2V5zQKXpXZhbHVlzQKYqGZhbGxiYWNrpDB4MDCkZG9jc5HZQSBBbGwgb25nb2luZyBvciBjb25jbHVkZWQgZGlzcHV0ZXMgZm9yIHRoZSBsYXN0IHNldmVyYWwgc2Vzc2lvbnMu3gAFpG5hbWWxQmFja2Vyc09uRGlzcHV0ZXOobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5KsVHdveDY0Q29uY2F0sEJsYWtlMl8xMjhDb25jYXSja2V5zQKXpXZhbHVlzQKZqGZhbGxiYWNrpDB4MDCkZG9jc5LZJyBCYWNraW5nIHZvdGVzIHN0b3JlZCBmb3IgZWFjaCBkaXNwdXRlLtkjIFRoaXMgc3RvcmFnZSBpcyB1c2VkIGZvciBzbGFzaGluZy7eAAWkbmFtZahJbmNsdWRlZKhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkqxUd294NjRDb25jYXSwQmxha2UyXzEyOENvbmNhdKNrZXnNApeldmFsdWUEqGZhbGxiYWNrpDB4MDCkZG9jc5LZUSBBbGwgaW5jbHVkZWQgYmxvY2tzIG9uIHRoZSBjaGFpbiwgYXMgd2VsbCBhcyB0aGUgYmxvY2sgbnVtYmVyIGluIHRoaXMgY2hhaW4gdGhhdNlWIHNob3VsZCBiZSByZXZlcnRlZCBiYWNrIHRvIGlmIHRoZSBjYW5kaWRhdGUgaXMgZGlzcHV0ZWQgYW5kIGRldGVybWluZWQgdG8gYmUgaW52YWxpZC7eAAWkbmFtZaZGcm96ZW6obW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluzQEUqGZhbGxiYWNrpDB4MDCkZG9jc5TZRCBXaGV0aGVyIHRoZSBjaGFpbiBpcyBmcm96ZW4uIFN0YXJ0cyBhcyBgTm9uZWAuIFdoZW4gdGhpcyBpcyBgU29tZWAs2U0gdGhlIGNoYWluIHdpbGwgbm90IGFjY2VwdCBhbnkgbmV3IHBhcmFjaGFpbiBibG9ja3MgZm9yIGJhY2tpbmcgb3IgaW5jbHVzaW9uLNlCIGFuZCBpdHMgdmFsdWUgaW5kaWNhdGVzIHRoZSBsYXN0IHZhbGlkIGJsb2NrIG51bWJlciBpbiB0aGUgY2hhaW4u2T4gSXQgY2FuIG9ubHkgYmUgc2V0IGJhY2sgdG8gYE5vbmVgIGJ5IGdvdmVybmFuY2UgaW50ZXJ2ZW50aW9uLqVjYWxsc94AAaR0eXBlzQHOpmV2ZW50c94AAaR0eXBlzGipY29uc3RhbnRzkKZlcnJvcnPeAAGkdHlwZc0CmqVpbmRleDXeAAekbmFtZa1QYXJhc1NsYXNoaW5np3N0b3JhZ2XeAAKmcHJlZml4rVBhcmFzU2xhc2hpbmelaXRlbXOS3gAFpG5hbWWwVW5hcHBsaWVkU2xhc2hlc6htb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkqxUd294NjRDb25jYXSwQmxha2UyXzEyOENvbmNhdKNrZXnNApeldmFsdWXNApuoZmFsbGJhY2ukMHgwMKRkb2NzkdkkIFZhbGlkYXRvcnMgcGVuZGluZyBkaXNwdXRlIHNsYXNoZXMu3gAFpG5hbWWyVmFsaWRhdG9yU2V0Q291bnRzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkEpXZhbHVlBKhmYWxsYmFja6QweDAwpGRvY3OR2SEgYFZhbGlkYXRvclNldENvdW50YCBwZXIgc2Vzc2lvbi6lY2FsbHPeAAGkdHlwZc0Bz6ZldmVudHPAqWNvbnN0YW50c5CmZXJyb3Jz3gABpHR5cGXNAp+laW5kZXg23gAHpG5hbWWpUmVnaXN0cmFyp3N0b3JhZ2XeAAKmcHJlZml4qVJlZ2lzdHJhcqVpdGVtc5PeAAWkbmFtZatQZW5kaW5nU3dhcKhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5zFmldmFsdWXMWahmYWxsYmFja6QweDAwpGRvY3ORuSBQZW5kaW5nIHN3YXAgb3BlcmF0aW9ucy7eAAWkbmFtZaVQYXJhc6htb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkaxUd294NjRDb25jYXSja2V5zFmldmFsdWXNAqCoZmFsbGJhY2ukMHgwMKRkb2NzlNlBIEFtb3VudCBoZWxkIG9uIGRlcG9zaXQgZm9yIGVhY2ggcGFyYSBhbmQgdGhlIG9yaWdpbmFsIGRlcG9zaXRvci6g2WQgVGhlIGdpdmVuIGFjY291bnQgSUQgaXMgcmVzcG9uc2libGUgZm9yIHJlZ2lzdGVyaW5nIHRoZSBjb2RlIGFuZCBpbml0aWFsIGhlYWQgZGF0YSwgYnV0IG1heSBvbmx5IGRv2U0gc28gaWYgaXQgaXNuJ3QgeWV0IHJlZ2lzdGVyZWQuIChBZnRlciB0aGF0LCBpdCdzIHVwIHRvIGdvdmVybmFuY2UgdG8gZG8gc28uKd4ABaRuYW1lrk5leHRGcmVlUGFyYUlkqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbsxZqGZhbGxiYWNrqjB4MDAwMDAwMDCkZG9jc5G4IFRoZSBuZXh0IGZyZWUgYFBhcmFJZGAupWNhbGxz3gABpHR5cGXNAdOmZXZlbnRz3gABpHR5cGXMbKljb25zdGFudHOS3gAEpG5hbWWrUGFyYURlcG9zaXSkdHlwZQaldmFsdWXZIjB4MDA0MGU1OWMzMDEyMDAwMDAwMDAwMDAwMDAwMDAwMDCkZG9jc5LZLCBUaGUgZGVwb3NpdCB0byBiZSBwYWlkIHRvIHJ1biBhIHBhcmF0aHJlYWQu2U8gVGhpcyBzaG91bGQgaW5jbHVkZSB0aGUgY29zdCBmb3Igc3RvcmluZyB0aGUgZ2VuZXNpcyBoZWFkIGFuZCB2YWxpZGF0aW9uIGNvZGUu3gAEpG5hbWWyRGF0YURlcG9zaXRQZXJCeXRlpHR5cGUGpXZhbHVl2SIweDgwZjBmYTAyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwpGRvY3OR2TEgVGhlIGRlcG9zaXQgdG8gYmUgcGFpZCBwZXIgYnl0ZSBzdG9yZWQgb24gY2hhaW4upmVycm9yc94AAaR0eXBlzQKhpWluZGV4PN4AB6RuYW1lpVNsb3Rzp3N0b3JhZ2XeAAKmcHJlZml4pVNsb3RzpWl0ZW1zkd4ABaRuYW1lpkxlYXNlc6htb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXnMWaV2YWx1Zc0CoqhmYWxsYmFja6QweDAwpGRvY3PcABDZRSBBbW91bnRzIGhlbGQgb24gZGVwb3NpdCBmb3IgZWFjaCAocG9zc2libHkgZnV0dXJlKSBsZWFzZWQgcGFyYWNoYWluLqDZZiBUaGUgYWN0dWFsIGFtb3VudCBsb2NrZWQgb24gaXRzIGJlaGFsZiBieSBhbnkgYWNjb3VudCBhdCBhbnkgdGltZSBpcyB0aGUgbWF4aW11bSBvZiB0aGUgc2Vjb25kIHZhbHVlc9k8IG9mIHRoZSBpdGVtcyBpbiB0aGlzIGxpc3Qgd2hvc2UgZmlyc3QgdmFsdWUgaXMgdGhlIGFjY291bnQuoNlYIFRoZSBmaXJzdCBpdGVtIGluIHRoZSBsaXN0IGlzIHRoZSBhbW91bnQgbG9ja2VkIGZvciB0aGUgY3VycmVudCBMZWFzZSBQZXJpb2QuIEZvbGxvd2luZ9ksIGl0ZW1zIGFyZSBmb3IgdGhlIHN1YnNlcXVlbnQgbGVhc2UgcGVyaW9kcy6g2VggVGhlIGRlZmF1bHQgdmFsdWUgKGFuIGVtcHR5IGxpc3QpIGltcGxpZXMgdGhhdCB0aGUgcGFyYWNoYWluIG5vIGxvbmdlciBleGlzdHMgKG9yIG5ldmVy2S0gZXhpc3RlZCkgYXMgZmFyIGFzIHRoaXMgcGFsbGV0IGlzIGNvbmNlcm5lZC6g2VQgSWYgYSBwYXJhY2hhaW4gZG9lc24ndCBleGlzdCAqeWV0KiBidXQgaXMgc2NoZWR1bGVkIHRvIGV4aXN0IGluIHRoZSBmdXR1cmUsIHRoZW4gaXTZWCB3aWxsIGJlIGxlZnQtcGFkZGVkIHdpdGggb25lIG9yIG1vcmUgYE5vbmVgcyB0byBkZW5vdGUgdGhlIGZhY3QgdGhhdCBub3RoaW5nIGlzIGhlbGQgb27ZVyBkZXBvc2l0IGZvciB0aGUgbm9uLWV4aXN0ZW50IGNoYWluIGN1cnJlbnRseSwgYnV0IGlzIGhlbGQgYXQgc29tZSBwb2ludCBpbiB0aGUgZnV0dXJlLqDZNyBJdCBpcyBpbGxlZ2FsIGZvciBhIGBOb25lYCB2YWx1ZSB0byB0cmFpbCBpbiB0aGUgbGlzdC6lY2FsbHPeAAGkdHlwZc0B1KZldmVudHPeAAGkdHlwZcxtqWNvbnN0YW50c5LeAASkbmFtZatMZWFzZVBlcmlvZKR0eXBlBKV2YWx1ZaoweDAwMjcwNjAwpGRvY3OR2TcgVGhlIG51bWJlciBvZiBibG9ja3Mgb3ZlciB3aGljaCBhIHNpbmdsZSBwZXJpb2QgbGFzdHMu3gAEpG5hbWWrTGVhc2VPZmZzZXSkdHlwZQSldmFsdWWqMHgwMDAwMDAwMKRkb2Nzkdk1IFRoZSBudW1iZXIgb2YgYmxvY2tzIHRvIG9mZnNldCBlYWNoIGxlYXNlIHBlcmlvZCBieS6mZXJyb3Jz3gABpHR5cGXNAqOlaW5kZXg93gAHpG5hbWWwUGFyYXNTdWRvV3JhcHBlcqdzdG9yYWdlwKVjYWxsc94AAaR0eXBlzQHVpmV2ZW50c8CpY29uc3RhbnRzkKZlcnJvcnPeAAGkdHlwZc0CpKVpbmRleD7eAAekbmFtZahBdWN0aW9uc6dzdG9yYWdl3gACpnByZWZpeKhBdWN0aW9uc6VpdGVtc5TeAAWkbmFtZa5BdWN0aW9uQ291bnRlcqhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrqjB4MDAwMDAwMDCkZG9jc5HZIyBOdW1iZXIgb2YgYXVjdGlvbnMgc3RhcnRlZCBzbyBmYXIu3gAFpG5hbWWrQXVjdGlvbkluZm+obW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaVwbGFpbj+oZmFsbGJhY2ukMHgwMKRkb2Nzldk+IEluZm9ybWF0aW9uIHJlbGF0aW5nIHRvIHRoZSBjdXJyZW50IGF1Y3Rpb24sIGlmIHRoZXJlIGlzIG9uZS6g2VEgVGhlIGZpcnN0IGl0ZW0gaW4gdGhlIHR1cGxlIGlzIHRoZSBsZWFzZSBwZXJpb2QgaW5kZXggdGhhdCB0aGUgZmlyc3Qgb2YgdGhlIGZvdXLZVCBjb250aWd1b3VzIGxlYXNlIHBlcmlvZHMgb24gYXVjdGlvbiBpcyBmb3IuIFRoZSBzZWNvbmQgaXMgdGhlIGJsb2NrIG51bWJlciB3aGVuIHRoZdlXIGF1Y3Rpb24gd2lsbCAiYmVnaW4gdG8gZW5kIiwgaS5lLiB0aGUgZmlyc3QgYmxvY2sgb2YgdGhlIEVuZGluZyBQZXJpb2Qgb2YgdGhlIGF1Y3Rpb24u3gAFpG5hbWWvUmVzZXJ2ZWRBbW91bnRzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXnNAqWldmFsdWUGqGZhbGxiYWNrpDB4MDCkZG9jc5LZTCBBbW91bnRzIGN1cnJlbnRseSByZXNlcnZlZCBpbiB0aGUgYWNjb3VudHMgb2YgdGhlIGJpZGRlcnMgY3VycmVudGx5IHdpbm5pbmeuIChzdWItKXJhbmdlcy7eAAWkbmFtZadXaW5uaW5nqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXkEpXZhbHVlzQKmqGZhbGxiYWNrpDB4MDCkZG9jc5PZWCBUaGUgd2lubmluZyBiaWRzIGZvciBlYWNoIG9mIHRoZSAxMCByYW5nZXMgYXQgZWFjaCBzYW1wbGUgaW4gdGhlIGZpbmFsIEVuZGluZyBQZXJpb2Qgb2bZUiB0aGUgY3VycmVudCBhdWN0aW9uLiBUaGUgbWFwJ3Mga2V5IGlzIHRoZSAwLWJhc2VkIGluZGV4IGludG8gdGhlIFNhbXBsZSBTaXplLiBUaGXZRyBmaXJzdCBzYW1wbGUgb2YgdGhlIGVuZGluZyBwZXJpb2QgaXMgMDsgdGhlIGxhc3QgaXMgYFNhbXBsZSBTaXplIC0gMWAupWNhbGxz3gABpHR5cGXNAeOmZXZlbnRz3gABpHR5cGXMbqljb25zdGFudHOU3gAEpG5hbWWsRW5kaW5nUGVyaW9kpHR5cGUEpXZhbHVlqjB4NDAxOTAxMDCkZG9jc5HZRyBUaGUgbnVtYmVyIG9mIGJsb2NrcyBvdmVyIHdoaWNoIGFuIGF1Y3Rpb24gbWF5IGJlIHJldHJvYWN0aXZlbHkgZW5kZWQu3gAEpG5hbWWsU2FtcGxlTGVuZ3RopHR5cGUEpXZhbHVlqjB4MTQwMDAwMDCkZG9jc5PZPCBUaGUgbGVuZ3RoIG9mIGVhY2ggc2FtcGxlIHRvIHRha2UgZHVyaW5nIHRoZSBlbmRpbmcgcGVyaW9kLqDZNSBgRW5kaW5nUGVyaW9kYCAvIGBTYW1wbGVMZW5ndGhgID0gVG90YWwgIyBvZiBTYW1wbGVz3gAEpG5hbWWuU2xvdFJhbmdlQ291bnSkdHlwZQSldmFsdWWqMHgyNDAwMDAwMKRkb2NzkN4ABKRuYW1ls0xlYXNlUGVyaW9kc1BlclNsb3SkdHlwZQSldmFsdWWqMHgwODAwMDAwMKRkb2NzkKZlcnJvcnPeAAGkdHlwZc0CqaVpbmRleD/eAAekbmFtZalDcm93ZGxvYW6nc3RvcmFnZd4AAqZwcmVmaXipQ3Jvd2Rsb2FupWl0ZW1zlN4ABaRuYW1lpUZ1bmRzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXnMWaV2YWx1Zc0CqqhmYWxsYmFja6QweDAwpGRvY3ORuiBJbmZvIG9uIGFsbCBvZiB0aGUgZnVuZHMu3gAFpG5hbWWoTmV3UmFpc2WobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluzQJtqGZhbGxiYWNrpDB4MDCkZG9jc5LZVSBUaGUgZnVuZHMgdGhhdCBoYXZlIGhhZCBhZGRpdGlvbmFsIGNvbnRyaWJ1dGlvbnMgZHVyaW5nIHRoZSBsYXN0IGJsb2NrLiBUaGlzIGlzIHVzZWTZRSBpbiBvcmRlciB0byBkZXRlcm1pbmUgd2hpY2ggZnVuZHMgc2hvdWxkIHN1Ym1pdCBuZXcgb3IgdXBkYXRlZCBiaWRzLt4ABaRuYW1lrEVuZGluZ3NDb3VudKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrqjB4MDAwMDAwMDCkZG9jc5HZSiBUaGUgbnVtYmVyIG9mIGF1Y3Rpb25zIHRoYXQgaGF2ZSBlbnRlcmVkIGludG8gdGhlaXIgZW5kaW5nIHBlcmlvZCBzbyBmYXIu3gAFpG5hbWWtTmV4dEZ1bmRJbmRleKhtb2RpZmllcqdEZWZhdWx0pHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrqjB4MDAwMDAwMDCkZG9jc5HZKiBUcmFja2VyIGZvciB0aGUgbmV4dCBhdmFpbGFibGUgZnVuZCBpbmRleKVjYWxsc94AAaR0eXBlzQHlpmV2ZW50c94AAaR0eXBlzG+pY29uc3RhbnRzk94ABKRuYW1lqFBhbGxldElkpHR5cGXNAk6ldmFsdWWyMHg3MDc5MmY2MzY2NzU2ZTY0pGRvY3OR2VwgYFBhbGxldElkYCBmb3IgdGhlIGNyb3dkbG9hbiBwYWxsZXQuIEFuIGFwcHJvcHJpYXRlIHZhbHVlIGNvdWxkIGJlIGBQYWxsZXRJZCgqYiJweS9jZnVuZCIpYN4ABKRuYW1lr01pbkNvbnRyaWJ1dGlvbqR0eXBlBqV2YWx1ZdkiMHgwMDEwYTVkNGU4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMKRkb2NzktlbIFRoZSBtaW5pbXVtIGFtb3VudCB0aGF0IG1heSBiZSBjb250cmlidXRlZCBpbnRvIGEgY3Jvd2Rsb2FuLiBTaG91bGQgYWxtb3N0IGNlcnRhaW5seSBiZSBhdLwgbGVhc3QgYEV4aXN0ZW50aWFsRGVwb3NpdGAu3gAEpG5hbWWvUmVtb3ZlS2V5c0xpbWl0pHR5cGUEpXZhbHVlqjB4ZjQwMTAwMDCkZG9jc5HZOSBNYXggbnVtYmVyIG9mIHN0b3JhZ2Uga2V5cyB0byByZW1vdmUgcGVyIGV4dHJpbnNpYyBjYWxsLqZlcnJvcnPeAAGkdHlwZc0CrKVpbmRleMxA3gAHpG5hbWWtQXNzaWduZWRTbG90c6dzdG9yYWdl3gACpnByZWZpeK1Bc3NpZ25lZFNsb3RzpWl0ZW1zld4ABaRuYW1lrlBlcm1hbmVudFNsb3RzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORrFR3b3g2NENvbmNhdKNrZXnMWaV2YWx1ZT+oZmFsbGJhY2ukMHgwMKRkb2NzkdlHIEFzc2lnbmVkIHBlcm1hbmVudCBzbG90cywgd2l0aCB0aGVpciBzdGFydCBsZWFzZSBwZXJpb2QsIGFuZCBkdXJhdGlvbi7eAAWkbmFtZbJQZXJtYW5lbnRTbG90Q291bnSobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluBKhmYWxsYmFja6oweDAwMDAwMDAwpGRvY3OR2TEgTnVtYmVyIG9mIGFzc2lnbmVkIChhbmQgYWN0aXZlKSBwZXJtYW5lbnQgc2xvdHMu3gAFpG5hbWWuVGVtcG9yYXJ5U2xvdHOobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GsVHdveDY0Q29uY2F0o2tlecxZpXZhbHVlzQKtqGZhbGxiYWNrpDB4MDCkZG9jc5G6IEFzc2lnbmVkIHRlbXBvcmFyeSBzbG90cy7eAAWkbmFtZbJUZW1wb3JhcnlTbG90Q291bnSobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluBKhmYWxsYmFja6oweDAwMDAwMDAwpGRvY3OR2SQgTnVtYmVyIG9mIGFzc2lnbmVkIHRlbXBvcmFyeSBzbG90cy7eAAWkbmFtZbhBY3RpdmVUZW1wb3JhcnlTbG90Q291bnSobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluBKhmYWxsYmFja6oweDAwMDAwMDAwpGRvY3OR2T8gTnVtYmVyIG9mIGFjdGl2ZSB0ZW1wb3Jhcnkgc2xvdHMgaW4gY3VycmVudCBzbG90IGxlYXNlIHBlcmlvZC6lY2FsbHPeAAGkdHlwZc0B7qZldmVudHPeAAGkdHlwZcxwqWNvbnN0YW50c5XeAASkbmFtZb5QZXJtYW5lbnRTbG90TGVhc2VQZXJpb2RMZW5ndGikdHlwZQSldmFsdWWqMHgxYTAwMDAwMKRkb2Nzkdk+IFRoZSBudW1iZXIgb2YgbGVhc2UgcGVyaW9kcyBhIHBlcm1hbmVudCBwYXJhY2hhaW4gc2xvdCBsYXN0cy7eAASkbmFtZb5UZW1wb3JhcnlTbG90TGVhc2VQZXJpb2RMZW5ndGikdHlwZQSldmFsdWWqMHgwMTAwMDAwMKRkb2Nzkdk+IFRoZSBudW1iZXIgb2YgbGVhc2UgcGVyaW9kcyBhIHRlbXBvcmFyeSBwYXJhY2hhaW4gc2xvdCBsYXN0cy7eAASkbmFtZbFNYXhQZXJtYW5lbnRTbG90c6R0eXBlBKV2YWx1ZaoweDA1MDAwMDAwpGRvY3OR2TggVGhlIG1heCBudW1iZXIgb2YgcGVybWFuZW50IHNsb3RzIHRoYXQgY2FuIGJlIGFzc2lnbmVkLt4ABKRuYW1lsU1heFRlbXBvcmFyeVNsb3RzpHR5cGUEpXZhbHVlqjB4MTQwMDAwMDCkZG9jc5HZOCBUaGUgbWF4IG51bWJlciBvZiB0ZW1wb3Jhcnkgc2xvdHMgdGhhdCBjYW4gYmUgYXNzaWduZWQu3gAEpG5hbWW+TWF4VGVtcG9yYXJ5U2xvdFBlckxlYXNlUGVyaW9kpHR5cGUEpXZhbHVlqjB4MDUwMDAwMDCkZG9jc5HZRSBUaGUgbWF4IG51bWJlciBvZiB0ZW1wb3Jhcnkgc2xvdHMgdG8gYmUgc2NoZWR1bGVkIHBlciBsZWFzZSBwZXJpb2RzLqZlcnJvcnPeAAGkdHlwZc0CrqVpbmRleMxB3gAHpG5hbWWpWGNtUGFsbGV0p3N0b3JhZ2XeAAKmcHJlZml4qVhjbVBhbGxldKVpdGVtc5veAAWkbmFtZaxRdWVyeUNvdW50ZXKobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABpXBsYWluCqhmYWxsYmFja7IweDAwMDAwMDAwMDAwMDAwMDCkZG9jc5HZIiBUaGUgbGF0ZXN0IGF2YWlsYWJsZSBxdWVyeSBpbmRleC7eAAWkbmFtZadRdWVyaWVzqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnORsEJsYWtlMl8xMjhDb25jYXSja2V5CqV2YWx1Zc0Cr6hmYWxsYmFja6QweDAwpGRvY3ORtSBUaGUgb25nb2luZyBxdWVyaWVzLt4ABaRuYW1lqkFzc2V0VHJhcHOobW9kaWZpZXKnRGVmYXVsdKR0eXBl3gABo21hcN4AA6doYXNoZXJzkahJZGVudGl0eaNrZXkLpXZhbHVlBKhmYWxsYmFja6oweDAwMDAwMDAwpGRvY3OUuiBUaGUgZXhpc3RpbmcgYXNzZXQgdHJhcHMuoNldIEtleSBpcyB0aGUgYmxha2UyIDI1NiBoYXNoIG9mIChvcmlnaW4sIHZlcnNpb25lZCBgTXVsdGlBc3NldHNgKSBwYWlyLiBWYWx1ZSBpcyB0aGUgbnVtYmVyIG9m2UcgdGltZXMgdGhpcyBwYWlyIGhhcyBiZWVuIHRyYXBwZWQgKHVzdWFsbHkganVzdCAxIGlmIGl0IGV4aXN0cyBhdCBhbGwpLt4ABaRuYW1lrlNhZmVYY21WZXJzaW9uqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGlcGxhaW4EqGZhbGxiYWNrpDB4MDCkZG9jc5LZWCBEZWZhdWx0IHZlcnNpb24gdG8gZW5jb2RlIFhDTSB3aGVuIGxhdGVzdCB2ZXJzaW9uIG9mIGRlc3RpbmF0aW9uIGlzIHVua25vd24uIElmIGBOb25lYCzZTyB0aGVuIHRoZSBkZXN0aW5hdGlvbnMgd2hvc2UgWENNIHZlcnNpb24gaXMgdW5rbm93biBhcmUgY29uc2lkZXJlZCB1bnJlYWNoYWJsZS7eAAWkbmFtZbBTdXBwb3J0ZWRWZXJzaW9uqG1vZGlmaWVyqE9wdGlvbmFspHR5cGXeAAGjbWFw3gADp2hhc2hlcnOSrFR3b3g2NENvbmNhdLBCbGFrZTJfMTI4Q29uY2F0o2tlec0CtKV2YWx1ZQSoZmFsbGJhY2ukMHgwMKRkb2Nzkdk8IFRoZSBMYXRlc3QgdmVyc2lvbnMgdGhhdCB3ZSBrbm93IHZhcmlvdXMgbG9jYXRpb25zIHN1cHBvcnQu3gAFpG5hbWWwVmVyc2lvbk5vdGlmaWVyc6htb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzkqxUd294NjRDb25jYXSwQmxha2UyXzEyOENvbmNhdKNrZXnNArSldmFsdWUKqGZhbGxiYWNrpDB4MDCkZG9jc5HZQSBBbGwgbG9jYXRpb25zIHRoYXQgd2UgaGF2ZSByZXF1ZXN0ZWQgdmVyc2lvbiBub3RpZmljYXRpb25zIGZyb20u3gAFpG5hbWW0VmVyc2lvbk5vdGlmeVRhcmdldHOobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5KsVHdveDY0Q29uY2F0sEJsYWtlMl8xMjhDb25jYXSja2V5zQK0pXZhbHVlzQK1qGZhbGxiYWNrpDB4MDCkZG9jc5LZXCBUaGUgdGFyZ2V0IGxvY2F0aW9ucyB0aGF0IGFyZSBzdWJzY3JpYmVkIHRvIG91ciB2ZXJzaW9uIGNoYW5nZXMsIGFzIHdlbGwgYXMgdGhlIG1vc3QgcmVjZW502SUgb2Ygb3VyIHZlcnNpb25zIHdlIGluZm9ybWVkIHRoZW0gb2Yu3gAFpG5hbWW1VmVyc2lvbkRpc2NvdmVyeVF1ZXVlqG1vZGlmaWVyp0RlZmF1bHSkdHlwZd4AAaVwbGFpbs0CtqhmYWxsYmFja6QweDAwpGRvY3OT2VkgRGVzdGluYXRpb25zIHdob3NlIGxhdGVzdCBYQ00gdmVyc2lvbiB3ZSB3b3VsZCBsaWtlIHRvIGtub3cuIER1cGxpY2F0ZXMgbm90IGFsbG93ZWQsIGFuZNlcIHRoZSBgdTMyYCBjb3VudGVyIGlzIHRoZSBudW1iZXIgb2YgdGltZXMgdGhhdCBhIHNlbmQgdG8gdGhlIGRlc3RpbmF0aW9uIGhhcyBiZWVuIGF0dGVtcHRlZCzZIyB3aGljaCBpcyB1c2VkIGFzIGEgcHJpb3JpdGl6YXRpb24u3gAFpG5hbWWwQ3VycmVudE1pZ3JhdGlvbqhtb2RpZmllcqhPcHRpb25hbKR0eXBl3gABpXBsYWluzQK5qGZhbGxiYWNrpDB4MDCkZG9jc5HZJyBUaGUgY3VycmVudCBtaWdyYXRpb24ncyBzdGFnZSwgaWYgYW55Lt4ABaRuYW1ltVJlbW90ZUxvY2tlZEZ1bmdpYmxlc6htb2RpZmllcqhPcHRpb25hbKR0eXBl3gABo21hcN4AA6doYXNoZXJzk6xUd294NjRDb25jYXSwQmxha2UyXzEyOENvbmNhdLBCbGFrZTJfMTI4Q29uY2F0o2tlec0Cu6V2YWx1Zc0CvahmYWxsYmFja6QweDAwpGRvY3OR2TwgRnVuZ2libGUgYXNzZXRzIHdoaWNoIHdlIGtub3cgYXJlIGxvY2tlZCBvbiBhIHJlbW90ZSBjaGFpbi7eAAWkbmFtZa9Mb2NrZWRGdW5naWJsZXOobW9kaWZpZXKoT3B0aW9uYWykdHlwZd4AAaNtYXDeAAOnaGFzaGVyc5GwQmxha2UyXzEyOENvbmNhdKNrZXkApXZhbHVlzQK+qGZhbGxiYWNrpDB4MDCkZG9jc5HZOCBGdW5naWJsZSBhc3NldHMgd2hpY2ggd2Uga25vdyBhcmUgbG9ja2VkIG9uIHRoaXMgY2hhaW4upWNhbGxz3gABpHR5cGXNAfCmZXZlbnRz3gABpHR5cGXMcaljb25zdGFudHOQpmVycm9yc94AAaR0eXBlzQLBpWluZGV4zGOpZXh0cmluc2lj3gADpHR5cGXNAsKndmVyc2lvbgSwc2lnbmVkRXh0ZW5zaW9uc5jeAAOqaWRlbnRpZmllcrJDaGVja05vblplcm9TZW5kZXKkdHlwZc0CxLBhZGRpdGlvbmFsU2lnbmVkOt4AA6ppZGVudGlmaWVysENoZWNrU3BlY1ZlcnNpb26kdHlwZc0CxbBhZGRpdGlvbmFsU2lnbmVkBN4AA6ppZGVudGlmaWVyrkNoZWNrVHhWZXJzaW9upHR5cGXNAsawYWRkaXRpb25hbFNpZ25lZATeAAOqaWRlbnRpZmllcqxDaGVja0dlbmVzaXOkdHlwZc0Cx7BhZGRpdGlvbmFsU2lnbmVkC94AA6ppZGVudGlmaWVyrkNoZWNrTW9ydGFsaXR5pHR5cGXNAsiwYWRkaXRpb25hbFNpZ25lZAveAAOqaWRlbnRpZmllcqpDaGVja05vbmNlpHR5cGXNAsqwYWRkaXRpb25hbFNpZ25lZDreAAOqaWRlbnRpZmllcqtDaGVja1dlaWdodKR0eXBlzQLLsGFkZGl0aW9uYWxTaWduZWQ63gADqmlkZW50aWZpZXK4Q2hhcmdlVHJhbnNhY3Rpb25QYXltZW50pHR5cGXNAsywYWRkaXRpb25hbFNpZ25lZDqkdHlwZc0CzQ==",
        "blockNumber": 15577310,
        "genesisHash": "0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e",
        "runtimeVersion": {
            "specVersion": 9401,
            "transactionVersion": 20,
            "specName": "westend"
        }
    }
}